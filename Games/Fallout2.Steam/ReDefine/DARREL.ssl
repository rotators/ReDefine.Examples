procedure start;
procedure do_dialogue;
procedure pre_dialogue;
procedure Darrel01;
procedure Darrel02;
procedure Darrel02a;
procedure Darrel02b;
procedure Darrel02c;
procedure Darrel03;
procedure Darrel04;
procedure Darrel05;
procedure Darrel06;
procedure Darrel07;
procedure Darrel08;
procedure Darrel09;
procedure Darrel10;
procedure Darrel11;
procedure Darrel12;
procedure Darrel13;
procedure Darrel14;
procedure Darrel15;
procedure Darrel16;
procedure Darrel58;
procedure Darrel59;
procedure Darrel60;
procedure Darrel61;
procedure Darrel62;
procedure Darrel63;
procedure Darrel64;
procedure Darrel66;
procedure Darrel67;
procedure Darrel68;
procedure Darrel69;
procedure Darrel70;
procedure Darrel71;
procedure Darrel72;
procedure Darrel73;
procedure Darrel75;
procedure Darrel76;
procedure DarrelEnd;
procedure giveradx;
procedure combat;
procedure damage_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;

variable known;
variable only_once := 1;
variable hostile;
variable radx;
variable second;
variable ccount;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (only_once) then begin
        only_once := 0;
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 44);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_PARTY_MARCUS_AGGRESSIVE);
    end
    if (script_action == look_at_proc) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == damage_proc) then begin
            call damage_p_proc();
        end
        else begin
            if (script_action == pickup_proc) then begin
                call pickup_p_proc();
            end
            else begin
                if (script_action == talk_proc) then begin
                    call talk_p_proc();
                end
                else begin
                    if (script_action == critter_proc) then begin
                        call critter_p_proc();
                    end
                    else begin
                        if (script_action == destroy_proc) then begin
                            call destroy_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure do_dialogue
begin
    call get_reaction();
    start_gdialog(316, self_obj, 4, -1, -1);
    gsay_start;
    if (global_var(GVAR_MODOC_BRAHMIN_SEED) == 1) then begin
        if (second) then begin
            call Darrel71();
        end
        else begin
            second := 1;
            call Darrel59();
        end
    end
    else begin
        if (local_var(4) == 0) then begin
            call Darrel01();
        end
        else begin
            call Darrel16();
        end
    end
    gsay_end;
    end_dialogue;
    set_local_var(4, 1);
end

procedure pre_dialogue
begin
    if (local_var(4) == 0) then begin
        call do_dialogue();
    end
    else begin
        if (global_var(GVAR_MODOC_BRAHMIN_SEED) == 2) then begin
            call Darrel73();
        end
        else begin
            call do_dialogue();
        end
    end
end

procedure Darrel01
begin
    gsay_reply(SCRIPT_KIDBOX, 102);
    giq_option(-3, SCRIPT_KIDBOX, 103, Darrel02, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 104, Darrel03, NEUTRAL_REACTION);
    if (global_var(GVAR_SLAVE_RUN) != 1) then begin
        giq_option(4, SCRIPT_KIDBOX, 105, Darrel04, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_MODOC_FAMILY_FEUD_SEED_ONE) == 1) then begin
        giq_option(4, SCRIPT_KIDBOX, 106, Darrel75, NEUTRAL_REACTION);
    end
    giq_option(4, SCRIPT_KIDBOX, 107, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel02
begin
    if (local_var(6) == 0) then begin
        gsay_reply(SCRIPT_KIDBOX, 108);
        giq_option(-3, SCRIPT_KIDBOX, 300, Darrel02a, NEUTRAL_REACTION);
    end
    else begin
        gsay_message(SCRIPT_KIDBOX, 108, NEUTRAL_REACTION);
    end
end

procedure Darrel02a
begin
    gsay_reply(SCRIPT_KIDBOX, 209);
    giq_option(-3, SCRIPT_KIDBOX, 300, Darrel02b, NEUTRAL_REACTION);
end

procedure Darrel02b
begin
    gsay_reply(SCRIPT_KIDBOX, 210);
    giq_option(-3, SCRIPT_KIDBOX, 300, Darrel02c, NEUTRAL_REACTION);
end

procedure Darrel02c
begin
    gsay_reply(SCRIPT_KIDBOX, 211);
    giq_option(-3, SCRIPT_KIDBOX, 300, giveradx, NEUTRAL_REACTION);
end

procedure Darrel03
begin
    gsay_reply(SCRIPT_KIDBOX, 110);
    giq_option(4, SCRIPT_KIDBOX, 111, Darrel05, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 112, Darrel12, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 113, Darrel06, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 114, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel04
begin
    gsay_reply(SCRIPT_KIDBOX, 115);
    giq_option(4, SCRIPT_KIDBOX, 116, Darrel07, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 201, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 118, Darrel11, NEUTRAL_REACTION);
end

procedure Darrel05
begin
    gsay_reply(SCRIPT_KIDBOX, 119);
    if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(GVAR_GECKO_REQ_FORM) > (2 * global_var(GVAR_GECKO_SKEETER_PART))) or (global_var(GVAR_SIERRA_LOCKOUT) == 1))) then begin
        giq_option(4, SCRIPT_KIDBOX, 120, DarrelEnd, NEUTRAL_REACTION);
    end
    giq_option(4, SCRIPT_KIDBOX, 121, Darrel08, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 122, Darrel09, NEUTRAL_REACTION);
end

procedure Darrel06
begin
    gsay_reply(SCRIPT_KIDBOX, 123);
    giq_option(4, SCRIPT_KIDBOX, 202, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 125, Darrel04, NEUTRAL_REACTION);
end

procedure Darrel07
begin
    gsay_reply(SCRIPT_KIDBOX, 126);
    giq_option(4, SCRIPT_KIDBOX, 202, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 127, Darrel03, NEUTRAL_REACTION);
end

procedure Darrel08
begin
    gsay_reply(SCRIPT_KIDBOX, 128);
    giq_option(4, SCRIPT_KIDBOX, 129, Darrel10, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 130, Darrel11, NEUTRAL_REACTION);
end

procedure Darrel09
begin
    gsay_reply(SCRIPT_KIDBOX, 109);
    giq_option(4, SCRIPT_KIDBOX, 129, Darrel10, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 130, Darrel11, NEUTRAL_REACTION);
end

procedure Darrel10
begin
    gsay_reply(SCRIPT_KIDBOX, 131);
    giq_option(4, SCRIPT_KIDBOX, 132, Darrel07, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 133, Darrel11, NEUTRAL_REACTION);
end

procedure Darrel11
begin
    gsay_message(SCRIPT_KIDBOX, 134, NEUTRAL_REACTION);
end

procedure Darrel12
begin
    gsay_reply(SCRIPT_KIDBOX, 135);
    giq_option(4, SCRIPT_KIDBOX, 136, Darrel13, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 137, Darrel15, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 203, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel13
begin
    gsay_reply(SCRIPT_KIDBOX, 139);
    giq_option(4, SCRIPT_KIDBOX, 140, Darrel13, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 132, Darrel07, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 204, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel14
begin
    gsay_reply(SCRIPT_KIDBOX, 143);
    if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(GVAR_GECKO_REQ_FORM) > (2 * global_var(GVAR_GECKO_SKEETER_PART))) or (global_var(GVAR_SIERRA_LOCKOUT) == 1))) then begin
        giq_option(4, SCRIPT_KIDBOX, 144, combat, BAD_REACTION);
    end
    giq_option(4, SCRIPT_KIDBOX, 141, Darrel07, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 145, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 146, Darrel05, NEUTRAL_REACTION);
end

procedure Darrel15
begin
    gsay_reply(SCRIPT_KIDBOX, 147);
    giq_option(4, SCRIPT_KIDBOX, 148, Darrel14, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 149, Darrel07, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 203, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel16
begin
    float_msg(self_obj, message_str(SCRIPT_KIDBOX, 151), FLOAT_MSG_RED);
end

procedure Darrel58
begin
    set_local_var(5, 1);
    if (dude_gender == 0) then begin
        float_msg(self_obj, message_str(SCRIPT_KIDBOX, 152), FLOAT_MSG_RED);
    end
    else begin
        float_msg(self_obj, message_str(SCRIPT_KIDBOX, 153), FLOAT_MSG_RED);
    end
end

procedure Darrel59
begin
    gsay_reply(SCRIPT_KIDBOX, 154);
    giq_option(4, SCRIPT_KIDBOX, 155, Darrel60, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 156, Darrel61, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 157, Darrel62, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 158, DarrelEnd, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_KIDBOX, 103, Darrel02, NEUTRAL_REACTION);
end

procedure Darrel60
begin
    gsay_reply(SCRIPT_KIDBOX, 159);
    giq_option(4, SCRIPT_KIDBOX, 160, Darrel63, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 161, Darrel63, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 162, Darrel64, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 163, Darrel61, NEUTRAL_REACTION);
end

procedure Darrel61
begin
    gsay_reply(SCRIPT_KIDBOX, 164);
    giq_option(4, SCRIPT_KIDBOX, 165, Darrel66, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 166, Darrel67, NEUTRAL_REACTION);
end

procedure Darrel62
begin
    gsay_message(SCRIPT_KIDBOX, 167, NEUTRAL_REACTION);
end

procedure Darrel63
begin
    gsay_reply(SCRIPT_KIDBOX, 168);
    giq_option(4, SCRIPT_KIDBOX, 203, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 170, Darrel72, NEUTRAL_REACTION);
end

procedure Darrel64
begin
    gsay_reply(SCRIPT_KIDBOX, 171);
    giq_option(4, SCRIPT_KIDBOX, 205, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 170, Darrel69, NEUTRAL_REACTION);
end

procedure Darrel66
begin
    gsay_reply(SCRIPT_KIDBOX, 174);
    giq_option(4, SCRIPT_KIDBOX, 175, Darrel68, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 176, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 177, Darrel63, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 206, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel67
begin
    gsay_reply(SCRIPT_KIDBOX, 179);
    giq_option(4, SCRIPT_KIDBOX, 180, Darrel64, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 203, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel68
begin
    gsay_reply(SCRIPT_KIDBOX, 181);
    giq_option(4, SCRIPT_KIDBOX, 182, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 183, Darrel63, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 184, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel69
begin
    gsay_reply(SCRIPT_KIDBOX, 189);
    giq_option(4, SCRIPT_KIDBOX, 203, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 190, Darrel72, NEUTRAL_REACTION);
end

procedure Darrel70
begin
    gsay_reply(SCRIPT_KIDBOX, 168);
    giq_option(4, SCRIPT_KIDBOX, 203, DarrelEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 190, Darrel72, NEUTRAL_REACTION);
end

procedure Darrel71
begin
    gsay_reply(SCRIPT_KIDBOX, 191);
    giq_option(4, SCRIPT_KIDBOX, 188, Darrel72, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 192, DarrelEnd, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_KIDBOX, 103, Darrel02, NEUTRAL_REACTION);
end

procedure Darrel72
begin
    gsay_reply(SCRIPT_KIDBOX, 193);
    giq_option(4, SCRIPT_KIDBOX, 186, Darrel69, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 187, Darrel70, NEUTRAL_REACTION);
    if (global_var(GVAR_MODOC_FAMILY_FEUD_SEED_ONE) == 1) then begin
        giq_option(4, SCRIPT_KIDBOX, 106, Darrel75, NEUTRAL_REACTION);
    end
    giq_option(4, SCRIPT_KIDBOX, 207, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel73
begin
    ccount := ccount + 1;
    if (ccount < 6) then begin
        float_msg(self_obj, message_str(SCRIPT_CCMASTER, 200 + random(0, 2)), FLOAT_MSG_RED);
    end
    else begin
        if (ccount < 9) then begin
            float_msg(self_obj, message_str(SCRIPT_CCMASTER, 203 + random(0, 4)), FLOAT_MSG_RED);
        end
        else begin
            if (ccount < 12) then begin
                float_msg(self_obj, message_str(SCRIPT_CCMASTER, 209 + random(0, 3)), FLOAT_MSG_RED);
            end
            else begin
                display_msg(message_str(SCRIPT_CCMASTER, 213));
            end
        end
    end
end

procedure Darrel75
begin
    gsay_reply(SCRIPT_KIDBOX, 195);
    giq_option(4, SCRIPT_KIDBOX, 196, Darrel11, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 197, Darrel76, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 104, Darrel03, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_KIDBOX, 198, DarrelEnd, NEUTRAL_REACTION);
end

procedure Darrel76
begin
    gsay_reply(SCRIPT_KIDBOX, 199);
    giq_option(4, SCRIPT_KIDBOX, 104, Darrel03, NEUTRAL_REACTION);
    if (global_var(GVAR_SLAVE_RUN) != 1) then begin
        giq_option(4, SCRIPT_KIDBOX, 105, Darrel04, NEUTRAL_REACTION);
    end
    giq_option(4, SCRIPT_KIDBOX, 208, DarrelEnd, NEUTRAL_REACTION);
end

procedure DarrelEnd
begin
end

procedure giveradx
begin
    set_local_var(6, 1);
    radx := create_object(109, 0, 0);
    add_obj_to_inven(dude_obj, radx);
    gsay_reply(SCRIPT_KIDBOX, 212);
    giq_option(-3, SCRIPT_KIDBOX, 300, DarrelEnd, NEUTRAL_REACTION);
end

procedure combat
begin
    hostile := 1;
end

procedure damage_p_proc
begin
    set_global_var(GVAR_GECKO_BRAIN_FRIEND, 1);
end

procedure critter_p_proc
begin
    if (global_var(GVAR_GECKO_BRAIN_FRIEND)) then begin
        hostile := 1;
    end
    if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
        hostile := 0;
    end
    if (hostile) then begin
        set_global_var(GVAR_GECKO_BRAIN_FRIEND, 1);
        hostile := 0;
        attack(dude_obj);
    end
    if (local_var(5) == 0) then begin
        if (global_var(GVAR_MODOC_BRAHMIN_SEED) == 1) then begin
            call Darrel58();
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    if (global_var(GVAR_MODOC_BRAHMIN_SEED) == 5) then begin
        float_msg(self_obj, message_str(SCRIPT_DCORPHAN, 233), FLOAT_MSG_RED);
    end
    else begin
        call pre_dialogue();
    end
end

procedure destroy_p_proc
begin
    set_global_var(GVAR_GECKO_BRAIN_FRIEND, 1);
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(GVAR_GECKO_REQ_FORM) > (2 * global_var(GVAR_GECKO_SKEETER_PART))) or (global_var(GVAR_SIERRA_LOCKOUT) == 1))) then begin
            set_global_var(GVAR_SIERRA_LOCKOUT, 1);
            set_global_var(GVAR_SIERRA_PASSWORD, 0);
        end
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GECKO_REQ_FORM))) or (global_var(GVAR_SIERRA_PASSWORD) == 1))) then begin
            set_global_var(GVAR_SIERRA_PASSWORD, 1);
            set_global_var(GVAR_SIERRA_LOCKOUT, 0);
        end
        set_global_var(GVAR_GECKO_REQ_FORM, global_var(GVAR_GECKO_REQ_FORM) + 1);
        if ((global_var(GVAR_GECKO_REQ_FORM) % 2) == 0) then begin
            set_global_var(GVAR_BRAIN_BOT_BRAIN, global_var(GVAR_BRAIN_BOT_BRAIN) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (known) then begin
        display_msg(message_str(SCRIPT_KIDBOX, 100));
    end
    else begin
        display_msg(message_str(SCRIPT_KIDBOX, 101));
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_BRAIN_BOT_BRAIN) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_BRAIN_BOT_BRAIN));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_BRAIN_BOT_BRAIN));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_BRAIN_BOT_BRAIN));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_BRAIN_BOT_BRAIN));
            end
        end
        if (global_var(GVAR_GECKO_ECON_DISK) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GECKO_REQ_FORM))) or (global_var(GVAR_SIERRA_PASSWORD) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(GVAR_GECKO_REQ_FORM) > (2 * global_var(GVAR_GECKO_SKEETER_PART))) or (global_var(GVAR_SIERRA_LOCKOUT) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_BSCOMP3, random(100, 105));
end
