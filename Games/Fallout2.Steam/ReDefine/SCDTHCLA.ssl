/*******************************************************
*      Some unreferenced imported varables found.      *
*      Because of it it is impossible to specify       *
*      the real names of global variables.             *
*******************************************************/

variable GVar0;
variable GVar1 := 1;
variable GVar2;
variable GVar3;
variable GVar4;
variable GVar5;
variable GVar6;
variable GVar7;
variable GVar8;
variable GVar9;
variable GVar10;
variable GVar11;
variable GVar12;
variable GVar13;
variable GVar14;
variable GVar15;
variable GVar16;
variable GVar17;
variable GVar18;
variable GVar19;
variable GVar20;
variable GVar21;
variable GVar22;

/* ?import? variable ProtoOfItemGiven; */
/* ?import? variable ValueOfRollCheck; */
/* ?import? variable Scenery_Creation; */
/* ?import? variable Scenery_Creation_Hex; */
/* ?import? variable Scenery_Creation_Count; */
/* ?import? variable Temp_Scenery_Creation_Hex; */
/* ?import? variable Scenery_Creation_Ptr; */
/* ?import? variable How_Many_Party_Members_Are_Injured; */
/* ?import? variable How_Many_Party_Members_Armed; */
/* ?import? variable PartyHealingItem; */

procedure checkPartyMembersNearDoor;

/* ?import? variable global_temp; */
/* ?import? variable dest_tile; */
/* ?import? variable step_tile; */
/* ?import? variable in_dialog; */
/* ?import? variable forced_node; */
/* ?import? variable restock_amt; */
/* ?import? variable restock_obj; */
/* ?import? variable restock_trash; */
/* ?import? variable removed_qty; */

procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure combat_p_proc;

/* ?import? variable cBraObj; */
/* ?import? variable tBrahmn; */

import variable numDeathClaws;
import variable i_deathclaw_1;
import variable i_deathclaw_2;

/* ?import? variable hostile1; */
/* ?import? variable fleeing; */
/* ?import? variable visible; */
/* ?import? variable tmpPlyr; */

procedure timed_event_p_proc;
procedure use_obj_on_p_proc;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure critter_p_proc
begin
    if (local_var(1) == 5) then begin
        if (obj_on_screen(self_obj)) then begin
            if (not(anim_busy(self_obj))) then begin
                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(dude_tile, tile_num(self_obj)), 5), 1);
            end
        end
        else begin
            if (numDeathClaws > 0) then begin
                numDeathClaws := numDeathClaws - 1;
            end
            destroy_object(self_obj);
        end
    end
end

procedure destroy_p_proc
begin
    if (numDeathClaws > 0) then begin
        numDeathClaws := numDeathClaws - 1;
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(SCRIPT_ZCLDTHCL, 100));
end

procedure description_p_proc
begin
end

procedure use_skill_on_p_proc
begin
    if (action_being_used == 10) then begin
        script_overrides;
    end
end

procedure damage_p_proc
begin
end

procedure map_enter_p_proc
begin
    if (numDeathClaws == -1) then begin
        numDeathClaws := 1;
        i_deathclaw_1 := self_obj;
    end
    else begin
        numDeathClaws := numDeathClaws + 1;
        i_deathclaw_2 := self_obj;
    end
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 114);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_VAULT_DEATHCLAWS);
    if (is_loading_game == 0) then begin
        set_obj_visibility(self_obj, 1);
        add_timer_event(self_obj, game_ticks(5), 3);
    end
end

procedure combat_p_proc
begin
    if (not(obj_on_screen(self_obj))) then begin
        if (numDeathClaws > 0) then begin
            numDeathClaws := numDeathClaws - 1;
        end
        destroy_object(self_obj);
    end
    else begin
        critter_set_flee_state(self_obj, 1);
    end
end

procedure timed_event_p_proc
begin
    variable LVar0 := 0;
    if (fixed_param == 1) then begin
        if (self_obj == i_deathclaw_1) then begin
            fade_out;
            set_obj_visibility(self_obj, 0);
            game_ui_disable;
            reg_anim_func(2, GVar22);
            reg_anim_func(1, 1);
            anim(self_obj, 1000, 4);
            reg_anim_func(3, 0);
            set_obj_visibility(dude_obj, 1);
            move_to(self_obj, 21861, 0);
            move_to(dude_obj, tile_num_in_direction(21861, 1, 1), 0);
        end
        else begin
            set_obj_visibility(self_obj, 0);
            move_to(self_obj, tile_num_in_direction(21861, 1, 2), 0);
            fade_in;
            add_timer_event(i_deathclaw_1, 0, 2);
            add_timer_event(i_deathclaw_2, 0, 2);
        end
    end
    else begin
        if (fixed_param == 2) then begin
            if (self_obj == i_deathclaw_1) then begin
                if (local_var(1) == 0) then begin
                    if (not(global_var(GVAR_GRUTHAR_DSTATUS))) then begin
                        float_msg(self_obj, mstr(105), FLOAT_MSG_NORMAL);
                    end
                    else begin
                        set_local_var(1, local_var(1) + 1);
                        float_msg(self_obj, mstr(107) + " " + dude_name + " " + mstr(108), FLOAT_MSG_NORMAL);
                    end
                    add_timer_event(self_obj, game_ticks(2), 2);
                end
                else begin
                    if (local_var(1) == 1) then begin
                        float_msg(self_obj, mstr(106), FLOAT_MSG_NORMAL);
                        add_timer_event(self_obj, game_ticks(2), 2);
                    end
                    else begin
                        add_timer_event(i_deathclaw_1, 0, 4);
                        add_timer_event(i_deathclaw_2, 0, 4);
                    end
                end
            end
            set_local_var(1, local_var(1) + 1);
        end
        else begin
            if (fixed_param == 3) then begin
                fade_out;
                reg_anim_func(2, dude_obj);
                game_time_advance(60 * (60 * 10));
                fade_in;
                if (self_obj == i_deathclaw_1) then begin
                    if (dude_iq < 4) then begin
                        float_msg(dude_obj, mstr(103 + local_var(0)), FLOAT_MSG_NORMAL);
                    end
                    else begin
                        float_msg(dude_obj, mstr(101 + local_var(0)), FLOAT_MSG_NORMAL);
                    end
                end
                if (local_var(0) == 0) then begin
                    add_timer_event(self_obj, game_ticks(5), 3);
                    set_local_var(0, local_var(0) + 1);
                end
                else begin
                    add_timer_event(self_obj, game_ticks(5), 1);
                end
            end
            else begin
                if (fixed_param == 4) then begin
                    if (self_obj == i_deathclaw_1) then begin
                        fade_out;
                        move_to(dude_obj, 19059, 0);
                        set_obj_visibility(dude_obj, 0);
                        game_ui_enable;
                    end
                    else begin
                        fade_in;
                        if (not(global_var(GVAR_GRUTHAR_DSTATUS))) then begin
                            if (dude_iq < 4) then begin
                                float_msg(dude_obj, mstr(109), FLOAT_MSG_NORMAL);
                            end
                            else begin
                                float_msg(dude_obj, mstr(110), FLOAT_MSG_NORMAL);
                            end
                        end
                    end
                    set_local_var(1, 5);
                end
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
end
