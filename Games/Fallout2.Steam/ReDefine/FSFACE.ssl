variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure sequence;

variable q1;
variable q2;
variable q3;
variable doSeq;
variable seqCnt;
variable lastDudePos;
variable lastDudeRot;
variable guard1;
variable guard2;
variable body;
variable matt;
variable wep;

procedure timed_event_p_proc;
procedure Node999;
procedure NodeHeal15;
procedure NodePois15;
procedure NodeRad15;
procedure NodeCrip15;
procedure NodeStr15;
procedure NodeInt15;
procedure NodePer15;
procedure NodeChr15;
procedure Node007s;
procedure Node009s;
procedure Node011s;
procedure Node013s;
procedure Node017a;
procedure Node022a;
procedure Node023a;
procedure NodeSequence;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure use_p_proc
begin
    dialogue_system_enter;
end

procedure look_at_p_proc
begin
end

procedure description_p_proc
begin
end

procedure use_skill_on_p_proc
begin
end

procedure use_obj_on_p_proc
begin
end

procedure damage_p_proc
begin
end

procedure map_enter_p_proc
begin
end

procedure map_update_p_proc
begin
end

procedure talk_p_proc
begin
    start_gdialog(1162, self_obj, 4, -1, -1);
    gsay_start;
    call Node001();
    gsay_end;
    end_dialogue;
    if (doSeq == 1) then begin
        doSeq := 0;
        call sequence();
    end
end

procedure Node001
begin
    Reply(100);
    giq_option(1, NAME, 101, Node002, NEUTRAL_REACTION);
    giq_option(1, NAME, 102, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 103, Node016, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, Node016, NEUTRAL_REACTION);
    if (((global_var(GVAR_VIGNETTE_SEQUENCE) bwand 4) != 0) and not((global_var(GVAR_VIGNETTE_SEQUENCE) bwand 262144) != 0)) then begin
        giq_option(4, NAME, 223, Node024, NEUTRAL_REACTION);
    end
end

procedure Node002
begin
    Reply(105);
    if (get_critter_stat(dude_obj, STAT_current_hp) != get_critter_stat(dude_obj, STAT_max_hp)) then begin
        giq_option(-3, NAME, 106, Node003, NEUTRAL_REACTION);
        giq_option(4, NAME, 115, Node003, NEUTRAL_REACTION);
    end
    if (get_poison(dude_obj)) then begin
        giq_option(-3, NAME, 107, Node004, NEUTRAL_REACTION);
        giq_option(4, NAME, 116, Node004, NEUTRAL_REACTION);
    end
    if (get_critter_stat(dude_obj, STAT_current_rad)) then begin
        giq_option(-3, NAME, 108, Node005, NEUTRAL_REACTION);
        giq_option(4, NAME, 117, Node005, NEUTRAL_REACTION);
    end
    if ((critter_state(dude_obj) bwand 4) or (critter_state(dude_obj) bwand 8) or (critter_state(dude_obj) bwand 16) or (critter_state(dude_obj) bwand 32)) then begin
        giq_option(-3, NAME, 109, Node006, NEUTRAL_REACTION);
        giq_option(4, NAME, 118, Node006, NEUTRAL_REACTION);
    end
    if (not((local_var(1) bwand 1) != 0) and (dude_strength < 10)) then begin
        giq_option(-3, NAME, 110, Node007, NEUTRAL_REACTION);
        giq_option(4, NAME, 119, Node007, NEUTRAL_REACTION);
    end
    if (not((local_var(1) bwand 2) != 0) and (dude_iq < 10)) then begin
        giq_option(-3, NAME, 111, Node009, NEUTRAL_REACTION);
        giq_option(4, NAME, 120, Node009, NEUTRAL_REACTION);
    end
    if (not((local_var(1) bwand 4) != 0) and (dude_perception < 10)) then begin
        giq_option(-3, NAME, 112, Node011, NEUTRAL_REACTION);
        giq_option(4, NAME, 121, Node011, NEUTRAL_REACTION);
    end
    if (not((local_var(1) bwand 8) != 0) and (dude_charisma < 10)) then begin
        giq_option(-3, NAME, 113, Node013, NEUTRAL_REACTION);
        giq_option(4, NAME, 122, Node013, NEUTRAL_REACTION);
    end
    giq_option(-3, NAME, 114, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 123, Node999, NEUTRAL_REACTION);
end

procedure Node003
begin
    Reply(124);
    giq_option(-3, NAME, 125, NodeHeal15, NEUTRAL_REACTION);
    giq_option(-3, NAME, 126, Node002, NEUTRAL_REACTION);
    giq_option(4, NAME, 127, NodeHeal15, NEUTRAL_REACTION);
    giq_option(4, NAME, 128, Node002, NEUTRAL_REACTION);
end

procedure Node004
begin
    Reply(129);
    giq_option(-3, NAME, 130, NodePois15, NEUTRAL_REACTION);
    giq_option(-3, NAME, 131, Node002, NEUTRAL_REACTION);
    giq_option(4, NAME, 132, NodePois15, NEUTRAL_REACTION);
    giq_option(4, NAME, 133, Node002, NEUTRAL_REACTION);
end

procedure Node005
begin
    Reply(134);
    giq_option(-3, NAME, 135, NodeRad15, NEUTRAL_REACTION);
    giq_option(-3, NAME, 136, Node002, NEUTRAL_REACTION);
    giq_option(4, NAME, 137, NodeRad15, NEUTRAL_REACTION);
    giq_option(4, NAME, 138, Node002, NEUTRAL_REACTION);
end

procedure Node006
begin
    Reply(139);
    giq_option(-3, NAME, 140, NodeCrip15, NEUTRAL_REACTION);
    giq_option(-3, NAME, 141, Node002, NEUTRAL_REACTION);
    giq_option(4, NAME, 142, NodeCrip15, NEUTRAL_REACTION);
    giq_option(4, NAME, 143, Node002, NEUTRAL_REACTION);
end

procedure Node007
begin
    if (not((local_var(2) bwand 1) != 0)) then begin
        Reply(144);
        if (obj_carrying_pid_obj(dude_obj, 505)) then begin
            giq_option(-3, NAME, 145, Node007s, NEUTRAL_REACTION);
            giq_option(4, NAME, 147, Node007s, NEUTRAL_REACTION);
        end
        else begin
            giq_option(-3, NAME, 146, Node999, NEUTRAL_REACTION);
            giq_option(4, NAME, 148, Node999, NEUTRAL_REACTION);
        end
    end
    else begin
        Reply(149);
        giq_option(-3, NAME, 150, Node008, NEUTRAL_REACTION);
        giq_option(-3, NAME, 151, Node002, NEUTRAL_REACTION);
        giq_option(4, NAME, 152, Node008, NEUTRAL_REACTION);
        giq_option(4, NAME, 153, Node002, NEUTRAL_REACTION);
    end
end

procedure Node008
begin
    Reply(154);
    giq_option(1, NAME, 155, NodeStr15, NEUTRAL_REACTION);
end

procedure Node009
begin
    if (not((local_var(2) bwand 2) != 0)) then begin
        Reply(156);
        if (obj_carrying_pid_obj(dude_obj, 506)) then begin
            giq_option(-3, NAME, 157, Node009s, NEUTRAL_REACTION);
            giq_option(4, NAME, 159, Node009s, NEUTRAL_REACTION);
        end
        else begin
            giq_option(-3, NAME, 158, Node999, NEUTRAL_REACTION);
            giq_option(4, NAME, 160, Node999, NEUTRAL_REACTION);
        end
    end
    else begin
        Reply(161);
        giq_option(-3, NAME, 162, Node010, NEUTRAL_REACTION);
        giq_option(-3, NAME, 163, Node002, NEUTRAL_REACTION);
        giq_option(4, NAME, 164, Node010, NEUTRAL_REACTION);
        giq_option(4, NAME, 165, Node002, NEUTRAL_REACTION);
    end
end

procedure Node010
begin
    Reply(166);
    giq_option(1, NAME, 167, NodeInt15, NEUTRAL_REACTION);
end

procedure Node011
begin
    if (not((local_var(2) bwand 4) != 0)) then begin
        Reply(168);
        if (obj_carrying_pid_obj(dude_obj, 504)) then begin
            giq_option(-3, NAME, 169, Node011s, NEUTRAL_REACTION);
            giq_option(4, NAME, 171, Node011s, NEUTRAL_REACTION);
        end
        else begin
            giq_option(-3, NAME, 170, Node999, NEUTRAL_REACTION);
            giq_option(4, NAME, 172, Node999, NEUTRAL_REACTION);
        end
    end
    else begin
        Reply(173);
        giq_option(-3, NAME, 174, Node012, NEUTRAL_REACTION);
        giq_option(-3, NAME, 175, Node002, NEUTRAL_REACTION);
        giq_option(4, NAME, 176, Node012, NEUTRAL_REACTION);
        giq_option(4, NAME, 177, Node002, NEUTRAL_REACTION);
    end
end

procedure Node012
begin
    Reply(178);
    giq_option(1, NAME, 179, NodePer15, NEUTRAL_REACTION);
end

procedure Node013
begin
    if (not((local_var(2) bwand 8) != 0)) then begin
        Reply(180);
        if (obj_carrying_pid_obj(dude_obj, 503)) then begin
            giq_option(-3, NAME, 181, Node013s, NEUTRAL_REACTION);
            giq_option(4, NAME, 183, Node013s, NEUTRAL_REACTION);
        end
        else begin
            giq_option(-3, NAME, 182, Node999, NEUTRAL_REACTION);
            giq_option(4, NAME, 184, Node999, NEUTRAL_REACTION);
        end
    end
    else begin
        Reply(185);
        giq_option(-3, NAME, 186, Node014, NEUTRAL_REACTION);
        giq_option(-3, NAME, 187, Node002, NEUTRAL_REACTION);
        giq_option(4, NAME, 188, Node014, NEUTRAL_REACTION);
        giq_option(4, NAME, 189, Node002, NEUTRAL_REACTION);
    end
end

procedure Node014
begin
    Reply(190);
    giq_option(1, NAME, 191, NodeChr15, NEUTRAL_REACTION);
end

procedure Node015
begin
    Reply(192);
    giq_option(1, NAME, 193, Node999, NEUTRAL_REACTION);
end

procedure Node016
begin
    Reply(194);
    if (not(q1)) then begin
        giq_option(-3, NAME, 195, Node017a, NEUTRAL_REACTION);
        giq_option(4, NAME, 199, Node017a, NEUTRAL_REACTION);
    end
    if (not(q2)) then begin
        giq_option(-3, NAME, 196, Node022a, NEUTRAL_REACTION);
        giq_option(4, NAME, 200, Node022a, NEUTRAL_REACTION);
    end
    if (not(q3)) then begin
        giq_option(-3, NAME, 197, Node023a, NEUTRAL_REACTION);
        giq_option(4, NAME, 201, Node023a, NEUTRAL_REACTION);
    end
    giq_option(-3, NAME, 198, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 202, Node999, NEUTRAL_REACTION);
end

procedure Node017
begin
    Reply(203);
    giq_option(-3, NAME, 204, Node018, NEUTRAL_REACTION);
    giq_option(4, NAME, 205, Node019, NEUTRAL_REACTION);
end

procedure Node018
begin
    Reply(206);
    giq_option(-3, NAME, 207, Node019, NEUTRAL_REACTION);
end

procedure Node019
begin
    Reply(208);
    giq_option(1, NAME, 209, Node020, NEUTRAL_REACTION);
end

procedure Node020
begin
    Reply(210);
    giq_option(-3, NAME, 211, Node021, NEUTRAL_REACTION);
    giq_option(-3, NAME, 212, Node016, NEUTRAL_REACTION);
    giq_option(4, NAME, 213, Node021, NEUTRAL_REACTION);
    giq_option(4, NAME, 214, Node016, NEUTRAL_REACTION);
end

procedure Node021
begin
    Reply(215);
    giq_option(-3, NAME, 216, Node016, NEUTRAL_REACTION);
    giq_option(4, NAME, 217, Node016, NEUTRAL_REACTION);
end

procedure Node022
begin
    Reply(218);
    giq_option(-3, NAME, 219, Node016, NEUTRAL_REACTION);
    giq_option(4, NAME, 220, Node016, NEUTRAL_REACTION);
end

procedure Node023
begin
    Reply(221);
    giq_option(1, NAME, 222, Node016, NEUTRAL_REACTION);
end

procedure Node024
begin
    Reply(224);
    giq_option(1, NAME, 225, NodeSequence, NEUTRAL_REACTION);
    giq_option(1, NAME, 226, Node001, NEUTRAL_REACTION);
end

procedure sequence
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    if (seqCnt == 0) then begin
        gfade_out(500);
        game_ui_disable;
        lastDudePos := dude_tile;
        lastDudeRot := obj_get_rot(dude_obj);
        set_obj_visibility(dude_obj, 1);
        guard1 := create_object(16777466, 14324, 2);
        guard2 := create_object(16777466, 14328, 2);
        body := create_object(16777504, 14726, 2);
        matt := create_object(16777256, 15326, 2);
        anim(guard1, 1000, rotation_to_tile(tile_num(guard1), tile_num(matt)));
        anim(guard2, 1000, rotation_to_tile(tile_num(guard2), tile_num(matt)));
        anim(body, 1000, rotation_to_tile(tile_num(body), tile_num(matt)));
        anim(matt, 1000, rotation_to_tile(tile_num(matt), tile_num(body)));
        set_global_var(GVAR_PARTY_NO_FOLLOW, 1);
        move_to(dude_obj, 15125, 2);
        gfade_in(500);
        float_msg(matt, mstr(227), FLOAT_MSG_NORMAL);
        seqCnt := seqCnt + 1;
        add_timer_event(self_obj, game_ticks(3), 1);
    end
    else begin
        if (seqCnt == 1) then begin
            float_msg(body, mstr(228), FLOAT_MSG_NORMAL);
            seqCnt := seqCnt + 1;
            add_timer_event(self_obj, game_ticks(3), 1);
        end
        else begin
            if (seqCnt == 2) then begin
                float_msg(matt, mstr(229), FLOAT_MSG_NORMAL);
                seqCnt := seqCnt + 1;
                add_timer_event(self_obj, game_ticks(3), 1);
            end
            else begin
                if (seqCnt == 3) then begin
                    float_msg(body, mstr(230), FLOAT_MSG_RED);
                    seqCnt := seqCnt + 1;
                    add_timer_event(self_obj, game_ticks(5), 1);
                end
                else begin
                    if (seqCnt == 4) then begin
                        float_msg(matt, mstr(231), FLOAT_MSG_NORMAL);
                        seqCnt := seqCnt + 1;
                        add_timer_event(self_obj, game_ticks(3), 1);
                    end
                    else begin
                        if (seqCnt == 5) then begin
                            float_msg(body, mstr(232), FLOAT_MSG_GREEN);
                            seqCnt := seqCnt + 1;
                            add_timer_event(self_obj, game_ticks(3), 1);
                        end
                        else begin
                            if (seqCnt == 6) then begin
                                wep := create_object(233, 0, 0);
                                add_obj_to_inven(matt, wep);
                                wield_obj_critter(matt, wep);
                                seqCnt := seqCnt + 1;
                                add_timer_event(self_obj, game_ticks(2), 1);
                            end
                            else begin
                                if (seqCnt == 7) then begin
                                    float_msg(body, mstr(233), FLOAT_MSG_NORMAL);
                                    seqCnt := seqCnt + 1;
                                    add_timer_event(self_obj, game_ticks(1), 1);
                                end
                                else begin
                                    if ((seqCnt > 7) and (seqCnt < 10)) then begin
                                        LVar0 := sfx_build_weapon_name(1, wep, 0, self_obj);
                                        LVar1 := sfx_build_char_name(body, 14, 4);
                                        reg_anim_func(2, matt);
                                        reg_anim_func(1, 1);
                                        reg_anim_animate(matt, 45, -1);
                                        reg_anim_play_sfx(matt, LVar0, 0);
                                        reg_anim_func(3, 0);
                                        reg_anim_func(2, body);
                                        reg_anim_func(1, 1);
                                        reg_anim_animate(body, 14, -1);
                                        reg_anim_play_sfx(body, LVar1, 0);
                                        reg_anim_func(3, 0);
                                        seqCnt := seqCnt + 1;
                                        add_timer_event(self_obj, game_ticks(1), 1);
                                    end
                                    else begin
                                        if (seqCnt == 10) then begin
                                            float_msg(body, mstr(234), FLOAT_MSG_GREEN);
                                            seqCnt := seqCnt + 1;
                                            add_timer_event(self_obj, game_ticks(3), 1);
                                        end
                                        else begin
                                            if (seqCnt == 11) then begin
                                                float_msg(body, mstr(235), FLOAT_MSG_GREEN);
                                                seqCnt := seqCnt + 1;
                                                add_timer_event(self_obj, game_ticks(3), 1);
                                            end
                                            else begin
                                                if (seqCnt == 12) then begin
                                                    float_msg(matt, mstr(236), FLOAT_MSG_GREEN);
                                                    seqCnt := seqCnt + 1;
                                                    add_timer_event(self_obj, game_ticks(1), 1);
                                                end
                                                else begin
                                                    if (seqCnt == 13) then begin
                                                        reg_anim_func(2, body);
                                                        reg_anim_func(1, 1);
                                                        animate_move_obj_to_tile(body, 15126, 0);
                                                        reg_anim_func(3, 0);
                                                        seqCnt := seqCnt + 1;
                                                        add_timer_event(self_obj, game_ticks(1), 1);
                                                    end
                                                    else begin
                                                        if (seqCnt == 14) then begin
                                                            LVar0 := sfx_build_char_name(body, 16, 4);
                                                            LVar1 := sfx_build_char_name(matt, 23, 3);
                                                            reg_anim_func(2, body);
                                                            reg_anim_func(1, 1);
                                                            reg_anim_animate(body, 16, -1);
                                                            reg_anim_play_sfx(body, LVar0, 0);
                                                            reg_anim_func(3, 0);
                                                            reg_anim_func(2, matt);
                                                            reg_anim_func(1, 1);
                                                            reg_anim_animate(matt, 23, -1);
                                                            reg_anim_play_sfx(matt, LVar1, 0);
                                                            reg_anim_func(3, 0);
                                                            seqCnt := seqCnt + 1;
                                                            add_timer_event(self_obj, game_ticks(5), 1);
                                                        end
                                                        else begin
                                                            if (seqCnt == 15) then begin
                                                                anim(body, 1000, rotation_to_tile(tile_num(body), tile_num(guard1)));
                                                                float_msg(matt, mstr(237), FLOAT_MSG_NORMAL);
                                                                seqCnt := seqCnt + 1;
                                                                add_timer_event(self_obj, game_ticks(3), 1);
                                                            end
                                                            else begin
                                                                if (seqCnt == 16) then begin
                                                                    float_msg(guard1, mstr(238), FLOAT_MSG_GREEN);
                                                                    seqCnt := seqCnt + 1;
                                                                    add_timer_event(self_obj, game_ticks(1), 1);
                                                                end
                                                                else begin
                                                                    if (seqCnt == 17) then begin
                                                                        float_msg(guard2, mstr(239), FLOAT_MSG_NORMAL);
                                                                        seqCnt := seqCnt + 1;
                                                                        add_timer_event(self_obj, game_ticks(3), 1);
                                                                    end
                                                                    else begin
                                                                        if (seqCnt == 18) then begin
                                                                            gfade_out(500);
                                                                            seqCnt := 0;
                                                                            destroy_object(matt);
                                                                            destroy_object(guard1);
                                                                            destroy_object(guard2);
                                                                            destroy_object(body);
                                                                            matt := 0;
                                                                            guard1 := 0;
                                                                            guard2 := 0;
                                                                            body := 0;
                                                                            move_to(dude_obj, 14547, 1);
                                                                            set_global_var(GVAR_PARTY_NO_FOLLOW, 0);
                                                                            anim(self_obj, 1000, dude_obj);
                                                                            set_obj_visibility(dude_obj, 0);
                                                                            game_ui_enable;
                                                                            set_global_var(GVAR_VIGNETTE_SEQUENCE, global_var(GVAR_VIGNETTE_SEQUENCE) bwor 262144);
                                                                            gfade_in(500);
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        call sequence();
    end
end

procedure Node999
begin
end

procedure NodeHeal15
begin
    gfade_out(500);
    critter_heal(dude_obj, get_critter_stat(dude_obj, STAT_max_hp) - get_critter_stat(dude_obj, STAT_current_hp));
    game_time_advance(60 * 10 * 5);
    gfade_in(500);
    call Node015();
end

procedure NodePois15
begin
    gfade_out(500);
    poison(dude_obj, -get_poison(dude_obj));
    game_time_advance(60 * 10 * 30);
    gfade_in(500);
    call Node015();
end

procedure NodeRad15
begin
    gfade_out(500);
    radiation_dec(dude_obj, get_critter_stat(dude_obj, STAT_current_rad));
    game_time_advance(60 * 10 * 60);
    gfade_in(500);
    call Node015();
end

procedure NodeCrip15
begin
    gfade_out(500);
    critter_injure(dude_obj, 4 bwor 8 bwor 16 bwor 32 bwor 8388608);
    game_time_advance(24 * (60 * (60 * 10)));
    gfade_in(500);
    call Node015();
end

procedure NodeStr15
begin
    gfade_out(500);
    set_critter_stat(dude_obj, STAT_st, 1);
    game_time_advance(7 * (24 * (60 * (60 * 10))) * 2);
    gfade_in(500);
    set_local_var(1, local_var(1) bwor 1);
    call Node015();
end

procedure NodeInt15
begin
    gfade_out(500);
    set_critter_stat(dude_obj, STAT_iq, 1);
    game_time_advance(7 * (24 * (60 * (60 * 10))) * 4);
    gfade_in(500);
    set_local_var(1, local_var(1) bwor 2);
    call Node015();
end

procedure NodePer15
begin
    gfade_out(500);
    set_critter_stat(dude_obj, STAT_pe, 1);
    game_time_advance(7 * (24 * (60 * (60 * 10))) * 2);
    gfade_in(500);
    set_local_var(1, local_var(1) bwor 4);
    call Node015();
end

procedure NodeChr15
begin
    gfade_out(500);
    set_critter_stat(dude_obj, STAT_ch, 1);
    game_time_advance(7 * (24 * (60 * (60 * 10))) * 3);
    gfade_in(500);
    set_local_var(1, local_var(1) bwor 8);
    call Node015();
end

procedure Node007s
begin
    variable LVar0 := 0;
    LVar0 := obj_carrying_pid_obj(dude_obj, 505);
    rm_obj_from_inven(dude_obj, LVar0);
    destroy_object(LVar0);
    set_local_var(2, local_var(2) bwor 1);
    call Node007();
end

procedure Node009s
begin
    variable LVar0 := 0;
    LVar0 := obj_carrying_pid_obj(dude_obj, 506);
    rm_obj_from_inven(dude_obj, LVar0);
    destroy_object(LVar0);
    set_local_var(2, local_var(2) bwor 2);
    call Node009();
end

procedure Node011s
begin
    variable LVar0 := 0;
    LVar0 := obj_carrying_pid_obj(dude_obj, 504);
    rm_obj_from_inven(dude_obj, LVar0);
    destroy_object(LVar0);
    set_local_var(2, local_var(2) bwor 4);
    call Node011();
end

procedure Node013s
begin
    variable LVar0 := 0;
    LVar0 := obj_carrying_pid_obj(dude_obj, 503);
    rm_obj_from_inven(dude_obj, LVar0);
    destroy_object(LVar0);
    set_local_var(2, local_var(2) bwor 8);
    call Node013();
end

procedure Node017a
begin
    q1 := 1;
    call Node017();
end

procedure Node022a
begin
    q2 := 1;
    call Node022();
end

procedure Node023a
begin
    q3 := 1;
    call Node023();
end

procedure NodeSequence
begin
    doSeq := 1;
    call Node999();
end
