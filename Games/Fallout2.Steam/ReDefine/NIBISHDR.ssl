import variable new_reno_bishop_men_obj;

procedure def_use_p_proc;
procedure def_use_skill_on_p_proc;
procedure my_map_update_proc;
procedure test_use_tamper;
procedure test_use_skill_tamper;
procedure use_p_proc;
procedure use_skill_on_p_proc;
procedure map_update_p_proc;

variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure def_map_update_p_proc;
procedure destroy_p_proc;
procedure Look_Traps_And_Locks;
procedure Look_Traps;
procedure Look_Locks;
procedure Skill_Disarm_Traps;
procedure Disarm_Traps;
procedure Unlock_Lock;
procedure Lockpick_Lock;
procedure Lockpick_Door;
procedure Super_Lockpick_Lock;
procedure Lock_Door;
procedure Set_Lock;
procedure Set_Lockpick_Lock;
procedure Super_Set_Lockpick_Lock;
procedure Set_Trap;
procedure Pry_Door;
procedure Damage_Critter;

variable Locks_Roll;
variable Traps_Roll;
variable last_source_obj;

procedure timed_event_p_proc;

variable last_timed_obj;
variable last_timed_param;
variable check_still_kill;
variable stored_msg;
variable stored_node;
variable top_msg;
variable var_num;

procedure ChooseFromList;
procedure CLICK_PREV;
procedure CLICK_0;
procedure CLICK_1;
procedure CLICK_2;
procedure CLICK_3;
procedure CLICK_4;
procedure CLICK_MORE;

variable floater_patch_msg;
variable hs_temp;


procedure def_use_p_proc
begin
    Traps_Roll := roll_vs_skill(source_obj, 11, 0);
    if (local_var(0) == 0) then begin
        if (is_success(Traps_Roll)) then begin
            script_overrides;
            set_local_var(1, 1);
            reg_anim_func(2, source_obj);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(SCRIPT_DOOR, 204));
            end
            else begin
                display_msg(message_str(SCRIPT_DOOR, 205));
            end
        end
        else begin
            if (obj_is_locked(self_obj)) then begin
                script_overrides;
                display_msg(message_str(SCRIPT_DOOR, 203));
                call Damage_Critter();
            end
            else begin
                call Damage_Critter();
            end
        end
    end
    else begin
        if (obj_is_locked(self_obj)) then begin
            script_overrides;
            display_msg(message_str(SCRIPT_DOOR, 203));
        end
    end
end

procedure def_use_skill_on_p_proc
begin
    variable LVar0 := 0;
    debug_msg("use_skill_on_p_proc");
    LVar0 := action_being_used;
    if (LVar0 == 9) then begin
        if (obj_is_locked(self_obj)) then begin
            call Unlock_Lock();
        end
        else begin
            call Set_Lock();
        end
    end
    else begin
        if (LVar0 == 11) then begin
            if (local_var(0) == 0) then begin
                call Skill_Disarm_Traps();
            end
            else begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(SCRIPT_DOOR, 195));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 200));
                end
            end
        end
    end
end

procedure my_map_update_proc
begin
    if (dude_elevation != elevation(self_obj)) then begin
        if (obj_is_open(self_obj)) then begin
            obj_close(self_obj);
        end
    end
end

procedure test_use_tamper
begin
    if (new_reno_bishop_men_obj != 0) then begin
        if (obj_can_see_obj(new_reno_bishop_men_obj, self_obj) or obj_can_see_obj(new_reno_bishop_men_obj, source_obj)) then begin
            if ((global_var(GVAR_NEW_RENO_MADE_MAN) / 100) != 2) then begin
                if ((((global_var(GVAR_NEW_RENO_SALVATORE) bwand 128) != 0) == 0) or ((global_var(GVAR_NEW_RENO_FLAG_1) bwand 524288) != 0)) then begin
                    if (source_obj == dude_obj) then begin
                        script_overrides;
                        rm_fixed_timer_event(new_reno_bishop_men_obj, 3);
                        add_timer_event(new_reno_bishop_men_obj, 0, 3);
                        return 1;
                    end
                    else begin
                        if (obj_in_party(source_obj)) then begin
                            script_overrides;
                            return 1;
                        end
                    end
                end
                else begin
                    rm_fixed_timer_event(new_reno_bishop_men_obj, 4);
                    add_timer_event(new_reno_bishop_men_obj, 0, 4);
                end
            end
        end
    end
    return 0;
end

procedure test_use_skill_tamper
begin
    if ((action_being_used == 11) or (action_being_used == 9)) then begin
        if (new_reno_bishop_men_obj != 0) then begin
            if (obj_can_see_obj(new_reno_bishop_men_obj, source_obj)) then begin
                if (source_obj == dude_obj) then begin
                    script_overrides;
                    rm_fixed_timer_event(new_reno_bishop_men_obj, 3);
                    add_timer_event(new_reno_bishop_men_obj, 0, 3);
                    return 1;
                end
                else begin
                    if (obj_in_party(source_obj)) then begin
                        script_overrides;
                        rm_fixed_timer_event(new_reno_bishop_men_obj, 3);
                        add_timer_event(new_reno_bishop_men_obj, 0, 3);
                        return 1;
                    end
                end
            end
        end
    end
    return 0;
end

procedure use_p_proc
begin
    if (test_use_tamper() == 0) then begin
        call def_use_p_proc();
    end
end

procedure use_skill_on_p_proc
begin
    if (test_use_tamper() == 0) then begin
        call use_skill_on_p_proc();
    end
end

procedure map_update_p_proc
begin
    call my_map_update_proc();
end

procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure look_at_p_proc
begin
    script_overrides;
    if (0 == 0) then begin
        display_msg(message_str(SCRIPT_DOOR, 100));
    end
    else begin
        display_msg(message_str(SCRIPT_DOOR, 101));
    end
end

procedure description_p_proc
begin
    script_overrides;
    if (obj_is_locked(self_obj) and (local_var(0) == 0)) then begin
        call Look_Traps_And_Locks();
    end
    else begin
        if (local_var(0) == 0) then begin
            call Look_Traps();
        end
        else begin
            if (obj_is_locked(self_obj)) then begin
                call Look_Locks();
            end
            else begin
                if (0 == 0) then begin
                    display_msg(message_str(SCRIPT_DOOR, 100));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 101));
                end
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(obj_being_used_with);
    if (0 == 0) then begin
        if (LVar0 == 84) then begin
            script_overrides;
            if (obj_is_locked(self_obj)) then begin
                call Lockpick_Lock();
            end
            else begin
                call Set_Lockpick_Lock();
            end
        end
        else begin
            if (LVar0 == 410) then begin
                script_overrides;
                if (obj_is_locked(self_obj)) then begin
                    call Super_Lockpick_Lock();
                end
                else begin
                    call Super_Set_Lockpick_Lock();
                end
            end
        end
    end
    else begin
        if (0 == 1) then begin
            if (LVar0 == 77) then begin
                script_overrides;
                if (obj_is_locked(self_obj)) then begin
                    call Lockpick_Lock();
                end
                else begin
                    call Set_Lockpick_Lock();
                end
            end
            else begin
                if (LVar0 == 411) then begin
                    script_overrides;
                    if (obj_is_locked(self_obj)) then begin
                        call Super_Lockpick_Lock();
                    end
                    else begin
                        call Super_Set_Lockpick_Lock();
                    end
                end
            end
        end
        else begin
            if (LVar0 == 20) then begin
                script_overrides;
                call Pry_Door();
            end
            else begin
                if ((LVar0 == 51) or (LVar0 == 85)) then begin
                    script_overrides;
                    call Set_Trap();
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    if (weapon_dmg_type(target_obj) == 6) then begin
        if (0 == 0) then begin
            if (local_var(0) == 0) then begin
                set_local_var(0, 1);
                obj_lock(self_obj);
                LVar0 := random(10, 20);
                explosion(tile_num(self_obj), elevation(self_obj), LVar0);
                call destroy_p_proc();
                destroy_object(self_obj);
            end
            else begin
                set_local_var(0, 1);
                obj_unlock(self_obj);
                call destroy_p_proc();
                destroy_object(self_obj);
            end
        end
        else begin
            if (0 == 1) then begin
                set_local_var(3, local_var(3) + 1);
                if (local_var(0) == 0) then begin
                    obj_unlock(self_obj);
                    LVar0 := random(10, 20);
                    explosion(tile_num(self_obj), elevation(self_obj), LVar0);
                end
                else begin
                    if (local_var(3) > 2) then begin
                        set_local_var(0, 1);
                        obj_unlock(self_obj);
                        call destroy_p_proc();
                        destroy_object(self_obj);
                    end
                end
            end
        end
    end
    else begin
        display_msg(message_str(SCRIPT_DOOR, 193));
    end
end

procedure map_enter_p_proc
begin
    if (is_loading_game == 0) then begin
        if (local_var(2) == 0) then begin
            set_local_var(2, 1);
            obj_unlock(self_obj);
            set_local_var(0, 1);
        end
        if (1 == 0) then begin
            obj_lock(self_obj);
        end
        else begin
            obj_unlock(self_obj);
        end
    end
end

procedure def_map_update_p_proc
begin
    if (obj_is_locked(self_obj)) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure destroy_p_proc
begin
end

procedure Look_Traps_And_Locks
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 11, 0);
    LVar2 := roll_vs_skill(dude_obj, 9, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                set_local_var(1, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 102));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 103));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 104));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 105));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 106));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 107));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 108));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 109));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 110));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 111));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 112));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 113));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 114));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 115));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 116));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 117));
                        end
                    end
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                set_local_var(1, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 118));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 119));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 120));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 121));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 122));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 123));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 124));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 125));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 126));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 127));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 128));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 129));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 130));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 131));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 132));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 133));
                        end
                    end
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                set_local_var(1, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 134));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 135));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 136));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 137));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 138));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 139));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 140));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 141));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 142));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 143));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 144));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 145));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 146));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 147));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 148));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 149));
                        end
                    end
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                set_local_var(1, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 150));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 151));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 152));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 153));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 154));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 155));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 156));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 157));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 158));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 159));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 160));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 161));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 162));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 163));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(SCRIPT_DOOR, 164));
                        end
                        else begin
                            display_msg(message_str(SCRIPT_DOOR, 165));
                        end
                    end
                end
            end
        end
    end
end

procedure Look_Traps
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 11, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 104));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 108));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 112));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 116));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 120));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 124));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 128));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 132));
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 136));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 140));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 144));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 148));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 152));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 156));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 160));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 164));
                end
            end
        end
    end
end

procedure Look_Locks
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 9, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 114));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 115));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 116));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 117));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 130));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 131));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 132));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 133));
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 146));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 147));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 148));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 149));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 162));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 163));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(SCRIPT_DOOR, 164));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 165));
                end
            end
        end
    end
end

procedure Skill_Disarm_Traps
begin
    Traps_Roll := roll_vs_skill(source_obj, 11, 0);
    call Disarm_Traps();
end

procedure Disarm_Traps
begin
    if (is_success(Traps_Roll)) then begin
        if (local_var(1) == 0) then begin
            set_local_var(1, 1);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(SCRIPT_DOOR, 194));
            end
            else begin
                display_msg(message_str(SCRIPT_DOOR, 199));
            end
            if (local_var(5) == 0) then begin
                set_local_var(5, 1);
                give_exp_points(25);
                display_msg(g_mstr(100) + 25 + g_mstr(101));
            end
        end
        else begin
            set_local_var(0, 1);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(SCRIPT_DOOR, 196));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 201));
            end
        end
    end
    else begin
        if (is_critical(Traps_Roll)) then begin
            call Damage_Critter();
        end
        else begin
            if (local_var(1) == 0) then begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(SCRIPT_DOOR, 195));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 200));
                end
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 202));
            end
        end
    end
end

procedure Unlock_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20);
    call Lockpick_Door();
end

procedure Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 20);
    call Lockpick_Door();
end

procedure Lockpick_Door
begin
    script_overrides;
    if (is_success(Locks_Roll)) then begin
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(SCRIPT_DOOR, 170));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 173));
        end
        if (local_var(4) == 0) then begin
            set_local_var(4, 1);
            give_exp_points(25);
            display_msg(g_mstr(100) + 25 + g_mstr(101));
        end
    end
    else begin
        if (is_critical(Locks_Roll)) then begin
            jam_lock(self_obj);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(SCRIPT_DOOR, 171));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 174));
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_msg(message_str(SCRIPT_DOOR, 172));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 175));
            end
        end
    end
end

procedure Super_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 40);
    call Lockpick_Door();
end

procedure Lock_Door
begin
    script_overrides;
    if (is_success(Locks_Roll)) then begin
        obj_lock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(SCRIPT_DOOR, 189));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 191));
        end
        if (local_var(4) == 0) then begin
            set_local_var(4, 1);
            give_exp_points(25);
            display_msg(g_mstr(100) + 25 + g_mstr(101));
        end
    end
    else begin
        if (source_obj == dude_obj) then begin
            display_msg(message_str(SCRIPT_DOOR, 190));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 192));
        end
    end
end

procedure Set_Lock
begin
    script_overrides;
    Locks_Roll := roll_vs_skill(source_obj, 9, -20);
    call Lock_Door();
end

procedure Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 20);
    call Lock_Door();
end

procedure Super_Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 40);
    call Lock_Door();
end

procedure Set_Trap
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    Traps_Roll := roll_vs_skill(source_obj, 11, 0 - 10);
    LVar0 := obj_being_used_with;
    if (obj_is_open(self_obj)) then begin
        script_overrides;
        if (source_obj == dude_obj) then begin
            display_msg(message_str(SCRIPT_DOOR, 206));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 207));
        end
    end
    else begin
        script_overrides;
        LVar1 := rm_mult_objs_from_inven(source_obj, LVar0, 1);
        if (is_success(Traps_Roll)) then begin
            set_local_var(0, 0);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(SCRIPT_DOOR, 208));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 210));
            end
        end
        else begin
            if (is_critical(Traps_Roll)) then begin
                call Damage_Critter();
            end
            else begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(SCRIPT_DOOR, 209));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 211));
                end
            end
        end
    end
end

procedure Pry_Door
begin
    variable LVar0 := 0;
    script_overrides;
    LVar0 := do_check(source_obj, 0, 0);
    if (is_success(LVar0)) then begin
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(SCRIPT_DOOR, 176));
        end
        else begin
            display_msg(message_str(SCRIPT_DOOR, 181));
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            critter_dmg(source_obj, 2, 0 bwor 256);
            if (source_obj == dude_obj) then begin
                if (2 == 1) then begin
                    display_msg(message_str(SCRIPT_DOOR, 177));
                end
                else begin
                    display_msg(message_str(SCRIPT_DOOR, 178) + 2 + message_str(SCRIPT_DOOR, 179));
                end
            end
            else begin
                if (get_critter_stat(source_obj, STAT_gender) == 0) then begin
                    if (2 == 1) then begin
                        display_msg(message_str(SCRIPT_DOOR, 182));
                    end
                    else begin
                        display_msg(message_str(SCRIPT_DOOR, 183) + 2 + message_str(SCRIPT_DOOR, 184));
                    end
                end
                else begin
                    if (2 == 1) then begin
                        display_msg(message_str(SCRIPT_DOOR, 186));
                    end
                    else begin
                        display_msg(message_str(SCRIPT_DOOR, 187) + 2 + message_str(SCRIPT_DOOR, 188));
                    end
                end
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_msg(message_str(SCRIPT_DOOR, 180));
            end
            else begin
                display_msg(message_str(SCRIPT_DOOR, 185));
            end
        end
    end
end

procedure Damage_Critter
begin
    variable LVar0 := 0;
    LVar0 := random(10, 20);
    if (source_obj == dude_obj) then begin
        critter_dmg(dude_obj, LVar0, 6 bwor 256);
        display_msg(message_str(SCRIPT_DOOR, 166) + LVar0 + message_str(SCRIPT_DOOR, 167));
    end
    else begin
        critter_dmg(source_obj, LVar0, 6 bwor 256);
        display_msg(obj_name(source_obj) + message_str(SCRIPT_DOOR, 168) + LVar0 + message_str(SCRIPT_DOOR, 169));
    end
    set_local_var(0, 1);
end

procedure timed_event_p_proc
begin
    if (obj_is_open(self_obj)) then begin
        if (not(combat_is_initialized)) then begin
            if ((tile_distance_objs(dude_obj, self_obj) > 3) and (checkPartyMembersNearDoor() == 0) and ((tile_distance_objs(self_obj, last_source_obj) > 3) or (critter_state(last_source_obj) == 1))) then begin
                obj_close(self_obj);
            end
            else begin
                add_timer_event(self_obj, 10, 1);
            end
        end
        else begin
            add_timer_event(self_obj, 10, 1);
        end
    end
end

procedure ChooseFromList
begin
    variable LVar0 := 0;
    gsay_reply(SCRIPT_DOOR, stored_msg);
    if (message_str(SCRIPT_NEWR1, top_msg - 1) != "") then begin
        giq_option(1, SCRIPT_DOOR, message_str(SCRIPT_NEWR1, 150), CLICK_PREV, NEUTRAL_REACTION);
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 0) != "") then begin
            giq_option(1, SCRIPT_DOOR, message_str(SCRIPT_NEWR1, top_msg + 0), CLICK_0, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 1) != "") then begin
            giq_option(1, SCRIPT_DOOR, message_str(SCRIPT_NEWR1, top_msg + 1), CLICK_1, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 2) != "") then begin
            giq_option(1, SCRIPT_DOOR, message_str(SCRIPT_NEWR1, top_msg + 2), CLICK_2, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 3) != "") then begin
            giq_option(1, SCRIPT_DOOR, message_str(SCRIPT_NEWR1, top_msg + 3), CLICK_3, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 4) != "") then begin
            giq_option(1, SCRIPT_DOOR, message_str(SCRIPT_NEWR1, top_msg + 4), CLICK_4, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 5) != "") then begin
            giq_option(1, SCRIPT_DOOR, message_str(SCRIPT_NEWR1, 151), CLICK_MORE, NEUTRAL_REACTION);
        end
    end
end

procedure CLICK_PREV
begin
    top_msg := top_msg - 5;
    call ChooseFromList();
end

procedure CLICK_0
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + (top_msg % 100));
    call stored_node();
end

procedure CLICK_1
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 1) % 100));
    call stored_node();
end

procedure CLICK_2
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 2) % 100));
    call stored_node();
end

procedure CLICK_3
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 3) % 100));
    call stored_node();
end

procedure CLICK_4
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 4) % 100));
    call stored_node();
end

procedure CLICK_MORE
begin
    top_msg := top_msg + 5;
    call ChooseFromList();
end
