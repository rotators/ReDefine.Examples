variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;
procedure old_pickup_p_proc;
procedure pickup_p_proc;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable Static_Reaction;
variable Evil_Critter;
variable Slavery_Tolerant := 2;
variable Karma_Perception;
variable reaction_bonus_town_rep;
variable reaction_bonus_karma;

procedure getTimeBit;

variable numTvars;
variable cbFunc;
variable target_tile;
variable tt_num;
variable tt_time;
variable tt_go;
variable tile0;
variable lTime0;
variable tile1;
variable lTime1;
variable tile2;
variable lTime2;
variable tile3;
variable lTime3;
variable tile4;
variable lTime4;
variable tile5;
variable lTime5;
variable tile6;
variable lTime6;
variable tile7;
variable lTime7;
variable tile8;
variable lTime8;
variable tile9;
variable lTime9;
variable tile10;
variable lTime10;
variable tile11;
variable lTime11;
variable tile12;
variable lTime12;
variable tile13;
variable lTime13;
variable tile14;
variable lTime14;
variable tile15;
variable lTime15;
variable tile16;
variable lTime16;
variable tile17;
variable lTime17;
variable tile18;
variable lTime18;
variable tile19;
variable lTime19;
variable tile20;
variable lTime20;
variable tile21;
variable lTime21;
variable tile22;
variable lTime22;
variable tile23;
variable lTime23;
variable tile24;
variable lTime24;
variable tile25;
variable lTime25;

procedure getTile(variable arg0);
procedure getTileTime(variable arg0);
procedure curTimeIsGreater(variable arg0);
procedure check_tile_events(variable arg0);
procedure tvar_Warp_To_Pos(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure push_p_proc;
procedure timed_event_p_proc;
procedure Node998;
procedure Node999;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure check_load_pos;
procedure tile_cb_func;

import variable i_ariel_obj;

variable Only_Once;
variable Node5Rep;
variable q1;
variable q2;
variable q3;
variable q4;
variable q5;
variable story;

procedure Node010story;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure old_pickup_p_proc
begin
    debug_msg("calling old pickup for some reason: source_obj:" + source_obj + "self_obj: " + self_obj + " dude_obj: " + dude_obj);
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (3 == 1) then begin
            attack(source_obj);
        end
        else begin
            if (3 == 2) then begin
                float_msg(self_obj, g_mstr(random(3325, 3329)), FLOAT_MSG_NORMAL);
                if (9 > -1) then begin
                    if (local_var(9) >= 1) then begin
                        attack(source_obj);
                    end
                    set_local_var(9, local_var(9) + 1);
                end
            end
            else begin
                if (3 == 3) then begin
                    float_msg(self_obj, g_mstr(random(3050, 3064)), FLOAT_MSG_NORMAL);
                    if (9 > -1) then begin
                        if (local_var(9) >= 1) then begin
                            attack(source_obj);
                        end
                        set_local_var(9, local_var(9) + 1);
                    end
                end
                else begin
                    if (3 == 4) then begin
                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(source_obj), tile_num(self_obj)), random(8, 14)), 1);
                    end
                end
            end
        end
    end
    if (-1 == 1) then begin
        call old_pickup_p_proc();
    end
end

procedure getTimeBit
begin
    variable LVar0 := 0;
    LVar0 := game_time_hour;
    if ((LVar0 >= 100) and (LVar0 <= 159)) then begin
        return 1;
    end
    if ((LVar0 >= 200) and (LVar0 <= 259)) then begin
        return 2;
    end
    if ((LVar0 >= 300) and (LVar0 <= 359)) then begin
        return 4;
    end
    if ((LVar0 >= 400) and (LVar0 <= 459)) then begin
        return 8;
    end
    if ((LVar0 >= 500) and (LVar0 <= 559)) then begin
        return 16;
    end
    if ((LVar0 >= 600) and (LVar0 <= 659)) then begin
        return 32;
    end
    if ((LVar0 >= 700) and (LVar0 <= 759)) then begin
        return 64;
    end
    if ((LVar0 >= 800) and (LVar0 <= 859)) then begin
        return 128;
    end
    if ((LVar0 >= 900) and (LVar0 <= 959)) then begin
        return 256;
    end
    if ((LVar0 >= 1000) and (LVar0 <= 1059)) then begin
        return 512;
    end
    if ((LVar0 >= 1100) and (LVar0 <= 1159)) then begin
        return 1024;
    end
    if ((LVar0 >= 1200) and (LVar0 <= 1259)) then begin
        return 2048;
    end
    if ((LVar0 >= 1300) and (LVar0 <= 1359)) then begin
        return 4096;
    end
    if ((LVar0 >= 1400) and (LVar0 <= 1459)) then begin
        return 8192;
    end
    if ((LVar0 >= 1500) and (LVar0 <= 1559)) then begin
        return 16384;
    end
    if ((LVar0 >= 1600) and (LVar0 <= 1659)) then begin
        return 32768;
    end
    if ((LVar0 >= 1700) and (LVar0 <= 1759)) then begin
        return 65536;
    end
    if ((LVar0 >= 1800) and (LVar0 <= 1859)) then begin
        return 131072;
    end
    if ((LVar0 >= 1900) and (LVar0 <= 1959)) then begin
        return 262144;
    end
    if ((LVar0 >= 2000) and (LVar0 <= 2059)) then begin
        return 524288;
    end
    if ((LVar0 >= 2100) and (LVar0 <= 2159)) then begin
        return 1048576;
    end
    if ((LVar0 >= 2200) and (LVar0 <= 2259)) then begin
        return 2097152;
    end
    if ((LVar0 >= 2300) and (LVar0 <= 2359)) then begin
        return 4194304;
    end
    if ((LVar0 >= 0) and (LVar0 <= 100)) then begin
        return 8388608;
    end
end

procedure getTile(variable arg0)
begin
    if (arg0 == 0) then begin
        return tile0;
    end
    if (arg0 == 1) then begin
        return tile1;
    end
    if (arg0 == 2) then begin
        return tile2;
    end
    if (arg0 == 3) then begin
        return tile3;
    end
    if (arg0 == 4) then begin
        return tile4;
    end
    if (arg0 == 5) then begin
        return tile5;
    end
    if (arg0 == 6) then begin
        return tile6;
    end
    if (arg0 == 7) then begin
        return tile7;
    end
    if (arg0 == 8) then begin
        return tile8;
    end
    if (arg0 == 9) then begin
        return tile9;
    end
    if (arg0 == 10) then begin
        return tile10;
    end
    if (arg0 == 11) then begin
        return tile11;
    end
    if (arg0 == 12) then begin
        return tile12;
    end
    if (arg0 == 13) then begin
        return tile13;
    end
    if (arg0 == 14) then begin
        return tile14;
    end
    if (arg0 == 15) then begin
        return tile15;
    end
    if (arg0 == 16) then begin
        return tile16;
    end
    if (arg0 == 17) then begin
        return tile17;
    end
    if (arg0 == 18) then begin
        return tile18;
    end
    if (arg0 == 19) then begin
        return tile19;
    end
    if (arg0 == 20) then begin
        return tile20;
    end
    if (arg0 == 21) then begin
        return tile21;
    end
    if (arg0 == 22) then begin
        return tile22;
    end
    if (arg0 == 23) then begin
        return tile23;
    end
    if (arg0 == 24) then begin
        return tile24;
    end
    if (arg0 == 25) then begin
        return tile25;
    end
end

procedure getTileTime(variable arg0)
begin
    if (arg0 == 0) then begin
        return lTime0;
    end
    if (arg0 == 1) then begin
        return lTime1;
    end
    if (arg0 == 2) then begin
        return lTime2;
    end
    if (arg0 == 3) then begin
        return lTime3;
    end
    if (arg0 == 4) then begin
        return lTime4;
    end
    if (arg0 == 5) then begin
        return lTime5;
    end
    if (arg0 == 6) then begin
        return lTime6;
    end
    if (arg0 == 7) then begin
        return lTime7;
    end
    if (arg0 == 8) then begin
        return lTime8;
    end
    if (arg0 == 9) then begin
        return lTime9;
    end
    if (arg0 == 10) then begin
        return lTime10;
    end
    if (arg0 == 11) then begin
        return lTime11;
    end
    if (arg0 == 12) then begin
        return lTime12;
    end
    if (arg0 == 13) then begin
        return lTime13;
    end
    if (arg0 == 14) then begin
        return lTime14;
    end
    if (arg0 == 15) then begin
        return lTime15;
    end
    if (arg0 == 16) then begin
        return lTime16;
    end
    if (arg0 == 17) then begin
        return lTime17;
    end
    if (arg0 == 18) then begin
        return lTime18;
    end
    if (arg0 == 19) then begin
        return lTime19;
    end
    if (arg0 == 20) then begin
        return lTime20;
    end
    if (arg0 == 21) then begin
        return lTime21;
    end
    if (arg0 == 22) then begin
        return lTime22;
    end
    if (arg0 == 23) then begin
        return lTime23;
    end
    if (arg0 == 24) then begin
        return lTime24;
    end
    if (arg0 == 25) then begin
        return lTime25;
    end
end

procedure curTimeIsGreater(variable arg0)
begin
    if (game_time > arg0) then begin
        return 1;
    end
    return 0;
end

procedure check_tile_events(variable arg0)
begin
    variable LVar1 := 0;
    if (arg0 == -1) then begin
        if (tt_go) then begin
            if (tile_num(self_obj) == target_tile) then begin
                call cbFunc(target_tile);
                tt_go := 0;
                tt_num := tt_num + 1;
                if (tt_num >= numTvars) then begin
                    tt_num := 0;
                end
                target_tile := getTile(tt_num);
                tt_time := game_time + getTileTime(tt_num);
            end
        end
        else begin
            if (curTimeIsGreater(tt_time)) then begin
                debug_msg("should be going to tile: " + target_tile);
                tt_go := 1;
                if (not(combat_is_initialized)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    animate_move_obj_to_tile(self_obj, target_tile, 0);
                    reg_anim_func(3, 0);
                end
            end
        end
        return 1;
    end
    else begin
        return 0;
    end
end

procedure tvar_Warp_To_Pos(variable arg0, variable arg1)
begin
    move_to(self_obj, getTile(arg0), elevation(self_obj));
    arg0 := arg0 + 1;
    if (arg0 >= numTvars) then begin
        arg0 := 0;
    end
    target_tile := getTile(arg0);
    tt_go := 0;
    tt_time := arg1;
end

procedure start
begin
    if ((global_var(GVAR_VIGNETTE_SEQUENCE) bwand 1) != 0) then begin
        global_temp := create_object(128, 0, 0);
        move_obj_inven_to_obj(self_obj, global_temp);
        destroy_object(global_temp);
        kill_critter(self_obj, 62);
    end
    else begin
        i_ariel_obj := self_obj;
    end
end

procedure critter_p_proc
begin
    if ((local_var(5) == 2) or map_var(5) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        set_map_var(5, 1);
        if (critter_is_fleeing(self_obj)) then begin
            if (anim_busy(self_obj) == 0) then begin
                if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                    if (anim_busy(self_obj) == 0) then begin
                        global_temp := rotation_to_tile(dude_tile, tile_num(self_obj));
                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                        global_temp := (global_temp + 1) % 6;
                        while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(dude_tile, tile_num(self_obj)))) do begin
                            debug_msg("flee loop: rot == " + global_temp);
                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                            global_temp := (global_temp + 1) % 6;
                        end
                    end
                end
            end
        end
        else begin
            attack(dude_obj);
        end
    end
end

procedure talk_p_proc
begin
    Evil_Critter := 0;
    Slavery_Tolerant := 0;
    Karma_Perception := 40;
    set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
    set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
    set_global_var(GVAR_KARMA_DEFENDER, 0);
    set_global_var(GVAR_KARMA_WANDERER, 0);
    set_global_var(GVAR_KARMA_BETRAYER, 0);
    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
    set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
    set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
    if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
    end
    else begin
        if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
            set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
        end
        else begin
            if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
            end
            else begin
                if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                    set_global_var(GVAR_KARMA_DEFENDER, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                        set_global_var(GVAR_KARMA_WANDERER, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                            set_global_var(GVAR_KARMA_BETRAYER, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                    set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                end
                                else begin
                                    set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    if (local_var(2) == 0) then begin
        set_local_var(2, 1);
        set_local_var(3, (dude_charisma - self_charisma) * 5);
        debug_msg("Base Reaction == " + local_var(3));
    end
    Static_Reaction := 0;
    set_local_var(0, 0);
    debug_msg("Start Reaction == " + local_var(0));
    if (reaction_bonus_karma >= 0) then begin
        reaction_bonus_karma := reaction_bonus_karma / 1000;
    end
    else begin
        reaction_bonus_karma := -1 * (-1 * reaction_bonus_karma / 1000);
    end
    if (global_var(GVAR_TOWN_REP_VAULT_13) >= 0) then begin
        reaction_bonus_town_rep := global_var(GVAR_TOWN_REP_VAULT_13) / 2;
    end
    else begin
        reaction_bonus_town_rep := -1 * (-1 * global_var(GVAR_TOWN_REP_VAULT_13) / 2);
    end
    if (has_trait(TRAIT_TRAIT, dude_obj, TRAIT_sex_appeal)) then begin
        if (dude_gender == self_gender) then begin
            Static_Reaction := Static_Reaction + -20;
        end
        else begin
            Static_Reaction := Static_Reaction + 20;
        end
        debug_msg("Sex Appeal Bonus == " + Static_Reaction);
    end
    else begin
        debug_msg("Sex Appeal Bonus == 0");
    end
    if (Evil_Critter == 1) then begin
        Static_Reaction := Static_Reaction - reaction_bonus_karma;
        debug_msg("Karma Reaction Bonus == " + Static_Reaction);
        Static_Reaction := Static_Reaction - reaction_bonus_town_rep;
        debug_msg("Town Rep Bonus == " + Static_Reaction);
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        if (global_var(GVAR_KARMA_HOLY_WARRIOR) == 1) then begin
            Static_Reaction := Static_Reaction - 20;
        end
        else begin
            if (global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES) == 1) then begin
                Static_Reaction := Static_Reaction - 15;
            end
            else begin
                if (global_var(GVAR_KARMA_SHIELD_OF_HOPE) == 1) then begin
                    Static_Reaction := Static_Reaction - 10;
                end
                else begin
                    if (global_var(GVAR_KARMA_DEFENDER) == 1) then begin
                        Static_Reaction := Static_Reaction - 5;
                    end
                    else begin
                        if (global_var(GVAR_KARMA_WANDERER) == 1) then begin
                            Static_Reaction := Static_Reaction - 0;
                        end
                        else begin
                            if (global_var(GVAR_KARMA_BETRAYER) == 1) then begin
                                Static_Reaction := Static_Reaction - -5;
                            end
                            else begin
                                if (global_var(GVAR_KARMA_SWORD_OF_DESPAIR) == 1) then begin
                                    Static_Reaction := Static_Reaction - -10;
                                end
                                else begin
                                    if (global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE) == 1) then begin
                                        Static_Reaction := Static_Reaction - -15;
                                    end
                                    else begin
                                        Static_Reaction := Static_Reaction - -20;
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        debug_msg("Bad Person Reaction Bonus == " + Static_Reaction);
    end
    else begin
        Static_Reaction := Static_Reaction + reaction_bonus_karma;
        debug_msg("Karma Reaction Bonus == " + Static_Reaction);
        Static_Reaction := Static_Reaction + reaction_bonus_town_rep;
        debug_msg("Town Rep Bonus == " + Static_Reaction);
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        if (global_var(GVAR_KARMA_HOLY_WARRIOR) == 1) then begin
            Static_Reaction := Static_Reaction + 20;
        end
        else begin
            if (global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES) == 1) then begin
                Static_Reaction := Static_Reaction + 15;
            end
            else begin
                if (global_var(GVAR_KARMA_SHIELD_OF_HOPE) == 1) then begin
                    Static_Reaction := Static_Reaction + 10;
                end
                else begin
                    if (global_var(GVAR_KARMA_DEFENDER) == 1) then begin
                        Static_Reaction := Static_Reaction + 5;
                    end
                    else begin
                        if (global_var(GVAR_KARMA_WANDERER) == 1) then begin
                            Static_Reaction := Static_Reaction + 0;
                        end
                        else begin
                            if (global_var(GVAR_KARMA_BETRAYER) == 1) then begin
                                Static_Reaction := Static_Reaction + -5;
                            end
                            else begin
                                if (global_var(GVAR_KARMA_SWORD_OF_DESPAIR) == 1) then begin
                                    Static_Reaction := Static_Reaction + -10;
                                end
                                else begin
                                    if (global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE) == 1) then begin
                                        Static_Reaction := Static_Reaction + -15;
                                    end
                                    else begin
                                        Static_Reaction := Static_Reaction + -20;
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        debug_msg("Good Person Reaction Bonus == " + Static_Reaction);
    end
    if (Slavery_Tolerant == 0) then begin
        if (global_var(GVAR_REPUTATION_SLAVER) == 1) then begin
            Static_Reaction := Static_Reaction + (2 * -25);
        end
    end
    else begin
        if (Slavery_Tolerant == 1) then begin
            if (global_var(GVAR_REPUTATION_SLAVER) == 1) then begin
                Static_Reaction := Static_Reaction + -25;
            end
        end
        else begin
            if (Slavery_Tolerant == 3) then begin
                if (global_var(GVAR_REPUTATION_SLAVER) == 1) then begin
                    Static_Reaction := Static_Reaction - -25;
                end
            end
        end
    end
    debug_msg("Slaver + Aligned Reaction == " + Static_Reaction);
    Static_Reaction := Static_Reaction + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence));
    debug_msg("Presence Reaction == " + Static_Reaction);
    if (global_var(GVAR_CHILDKILLER_REPUTATION) >= 2) then begin
        Static_Reaction := Static_Reaction + -30;
    end
    debug_msg("Childkiller Reaction == " + Static_Reaction);
    set_local_var(0, local_var(3) + Static_Reaction);
    debug_msg("Initial Reaction == " + local_var(0));
    if (local_var(5) == 1) then begin
        call Node012();
    end
    else begin
        if (local_var(4) == 0) then begin
            start_gdialog(522, self_obj, 4, -1, -1);
            gsay_start;
            call Node001();
            gsay_end;
            end_dialogue;
        end
        else begin
            call Node011();
        end
    end
    set_local_var(4, 1);
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(4) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1)) and (global_var(GVAR_CHILDKILLER_REPUTATION) == 0)) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        if (critter_kill_type(self_obj) == KILL_TYPE_children_kills) then begin
            if (source_obj == dude_obj) then begin
                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                set_global_var(GVAR_CHILDKILLER_REPUTATION, global_var(GVAR_CHILDKILLER_REPUTATION) + 1);
                set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + -15);
                debug_msg("Player gains " + -15 + " Karma Points.");
                set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
                set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
                set_global_var(GVAR_KARMA_DEFENDER, 0);
                set_global_var(GVAR_KARMA_WANDERER, 0);
                set_global_var(GVAR_KARMA_BETRAYER, 0);
                set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
                set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
                set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
                if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
                    set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                            set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                                set_global_var(GVAR_KARMA_DEFENDER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                                    set_global_var(GVAR_KARMA_WANDERER, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                        set_global_var(GVAR_KARMA_BETRAYER, 1);
                                    end
                                    else begin
                                        if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                            set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                        end
                                        else begin
                                            if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                                set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                            end
                                            else begin
                                                set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                set_global_var(GVAR_TOWN_REP_VAULT_13, global_var(GVAR_TOWN_REP_VAULT_13) + -8);
                debug_msg("Added " + -8 + " to Town Rep");
            end
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + -10);
        debug_msg("Player gains " + -10 + " Karma Points.");
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        set_global_var(GVAR_TOWN_REP_VAULT_13, global_var(GVAR_TOWN_REP_VAULT_13) + -5);
        debug_msg("Added " + -5 + " to Town Rep");
    end
    i_ariel_obj := -1;
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 0) then begin
        display_mstr(100);
    end
    else begin
        display_mstr(101);
    end
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(102);
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (obj_in_party(source_obj)) then begin
        set_local_var(6, 1);
        set_map_var(5, 1);
    end
end

procedure map_enter_p_proc
begin
    Only_Once := 0;
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 114);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_PEASANTS);
    numTvars := 2;
    cbFunc := "tile_cb_func";
    tile0 := 18299;
    tile1 := 18536;
    lTime0 := 60 * (60 * 10) * 12;
    lTime1 := 60 * (60 * 10) * 12;
    if (not(is_loading_game)) then begin
        call check_load_pos();
    end
end

procedure push_p_proc
begin
end

procedure timed_event_p_proc
begin
    if (check_tile_events(fixed_param) == 0) then begin
        if (fixed_param == 3) then begin
            if (not(combat_is_initialized)) then begin
                set_local_var(5, 2);
            end
        end
    end
end

procedure Node998
begin
    set_local_var(5, 2);
end

procedure Node999
begin
end

procedure Node001
begin
    Reply(103);
    giq_option(-3, NAME, mstr(104) + " " + dude_name + mstr(178), Node002, NEUTRAL_REACTION);
    giq_option(-3, NAME, 105, Node002, NEUTRAL_REACTION);
    giq_option(-3, NAME, 106, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, mstr(107) + " " + dude_name + mstr(179), Node002, GOOD_REACTION);
    giq_option(4, NAME, 108, Node003, NEUTRAL_REACTION);
    giq_option(4, NAME, 109, Node004, BAD_REACTION);
    giq_option(4, NAME, 110, Node999, NEUTRAL_REACTION);
end

procedure Node002
begin
    Reply(111);
    giq_option(-3, NAME, 112, Node005, NEUTRAL_REACTION);
    giq_option(-3, NAME, 113, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, Node999, BAD_REACTION);
    giq_option(4, NAME, 115, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 116, Node005, GOOD_REACTION);
end

procedure Node003
begin
    Reply(117);
    giq_option(-3, NAME, 118, Node009, GOOD_REACTION);
    giq_option(-3, NAME, 119, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 120, Node009, GOOD_REACTION);
    giq_option(4, NAME, 121, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 122, Node004, BAD_REACTION);
end

procedure Node004
begin
    Reply(123);
    giq_option(0, NAME, g_mstr(350), Node999, NEUTRAL_REACTION);
end

procedure Node005
begin
    Node5Rep := Node5Rep + 1;
    if (Node5Rep == 1) then begin
        Reply(126);
    end
    else begin
        Reply(127);
    end
    if (q1 == 0) then begin
        giq_option(-3, NAME, 128, Node006, NEUTRAL_REACTION);
        giq_option(4, NAME, 134, Node006, NEUTRAL_REACTION);
    end
    if (q2 == 0) then begin
        giq_option(-3, NAME, 129, Node007, NEUTRAL_REACTION);
        giq_option(4, NAME, 135, Node007, NEUTRAL_REACTION);
    end
    if (q3 == 0) then begin
        giq_option(-3, NAME, 130, Node008, NEUTRAL_REACTION);
        giq_option(4, NAME, 136, Node008, NEUTRAL_REACTION);
    end
    if (q4 == 0) then begin
        giq_option(-3, NAME, 131, Node009, NEUTRAL_REACTION);
        giq_option(4, NAME, 137, Node009, NEUTRAL_REACTION);
    end
    if (q5 == 0) then begin
        giq_option(-3, NAME, 132, Node010, NEUTRAL_REACTION);
        giq_option(4, NAME, 138, Node010, NEUTRAL_REACTION);
    end
    giq_option(-3, NAME, 133, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 139, Node999, NEUTRAL_REACTION);
end

procedure Node006
begin
    q1 := 1;
    Reply(140);
    giq_option(-3, NAME, 141, Node005, NEUTRAL_REACTION);
    giq_option(-3, NAME, 142, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 143, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 144, Node004, BAD_REACTION);
    giq_option(4, NAME, 145, Node005, GOOD_REACTION);
end

procedure Node007
begin
    q2 := 1;
    Reply(146);
    giq_option(-3, NAME, 147, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 148, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 149, Node005, GOOD_REACTION);
    giq_option(4, NAME, 150, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 151, Node004, BAD_REACTION);
end

procedure Node008
begin
    q3 := 1;
    Reply(152);
    giq_option(-3, NAME, 153, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 154, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 155, Node004, BAD_REACTION);
    giq_option(4, NAME, 156, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 157, Node005, GOOD_REACTION);
end

procedure Node009
begin
    q4 := 1;
    Reply(158);
    giq_option(-3, NAME, 159, Node010, GOOD_REACTION);
    giq_option(-3, NAME, 160, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 161, Node010, GOOD_REACTION);
    giq_option(4, NAME, 162, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 163, Node004, BAD_REACTION);
end

procedure Node010
begin
    q5 := 1;
    if (local_var(7)) then begin
        Reply(164);
        giq_option(-3, NAME, 166, Node005, NEUTRAL_REACTION);
        giq_option(-3, NAME, 167, Node005, GOOD_REACTION);
        giq_option(-3, NAME, 168, Node999, NEUTRAL_REACTION);
        giq_option(4, NAME, 169, Node005, NEUTRAL_REACTION);
        giq_option(4, NAME, 170, Node999, BAD_REACTION);
        giq_option(4, NAME, 171, Node005, GOOD_REACTION);
    end
    else begin
        call Node010story();
    end
end

procedure Node011
begin
    float_msg(self_obj, mstr(172), FLOAT_MSG_NORMAL);
end

procedure Node012
begin
    if (dude_gender == 0) then begin
        float_msg(self_obj, mstr(175), FLOAT_MSG_NORMAL);
    end
    else begin
        float_msg(self_obj, mstr(176), FLOAT_MSG_NORMAL);
    end
end

procedure check_load_pos
begin
    if (getTimeBit() >= 2048) then begin
        call tvar_Warp_To_Pos(1, 60 * (60 * 10) * 12);
    end
    else begin
        call tvar_Warp_To_Pos(0, 60 * (60 * 10) * 12);
    end
    add_timer_event(self_obj, 60 * (60 * 10) * 12, -1);
end

procedure tile_cb_func
begin
    add_timer_event(self_obj, 60 * (60 * 10) * 12, -1);
end

procedure Node010story
begin
    set_local_var(7, 1);
    story := story + 1;
    if (story == 1) then begin
        Reply(165);
        giq_option(0, NAME, g_mstr(352), Node010story, NEUTRAL_REACTION);
    end
    else begin
        if (story == 2) then begin
            Reply(180);
            giq_option(-3, NAME, 166, Node005, NEUTRAL_REACTION);
            giq_option(-3, NAME, 167, Node005, GOOD_REACTION);
            giq_option(-3, NAME, 168, Node999, NEUTRAL_REACTION);
            giq_option(4, NAME, 169, Node005, NEUTRAL_REACTION);
            giq_option(4, NAME, 170, Node999, BAD_REACTION);
            giq_option(4, NAME, 171, Node005, GOOD_REACTION);
        end
    end
end
