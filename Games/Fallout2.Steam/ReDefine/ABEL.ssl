procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure destroy_p_proc;
procedure Abel00;
procedure Abel01;
procedure Abel02;
procedure Abel03;
procedure Abel04;
procedure Abel05;
procedure Abel06;
procedure Abel07;
procedure Abel08;
procedure AbelCombat;

variable hostile;
variable initialized;

import variable field_change;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 34);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_MUTATED_RAT);
        initialized := 1;
    end
    if (script_action == critter_proc) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == destroy_proc) then begin
            call destroy_p_proc();
        end
        else begin
            if (script_action == pickup_proc) then begin
                call pickup_p_proc();
            end
            else begin
                if (script_action == talk_proc) then begin
                    call talk_p_proc();
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack(dude_obj);
    end
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure talk_p_proc
begin
    start_gdialog(359, self_obj, 4, -1, -1);
    gsay_start;
    if (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 113) then begin
        call Abel06();
    end
    else begin
        if (local_var(4) == 1) then begin
            call Abel08();
        end
        else begin
            call Abel00();
        end
    end
    gsay_end;
    end_dialogue;
end

procedure timed_event_p_proc
begin
    hostile := 1;
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(GVAR_GECKO_REQ_FORM) > (2 * global_var(GVAR_GECKO_SKEETER_PART))) or (global_var(GVAR_SIERRA_LOCKOUT) == 1))) then begin
            set_global_var(GVAR_SIERRA_LOCKOUT, 1);
            set_global_var(GVAR_SIERRA_PASSWORD, 0);
        end
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GECKO_REQ_FORM))) or (global_var(GVAR_SIERRA_PASSWORD) == 1))) then begin
            set_global_var(GVAR_SIERRA_PASSWORD, 1);
            set_global_var(GVAR_SIERRA_LOCKOUT, 0);
        end
        set_global_var(GVAR_GECKO_SKEETER_PART, global_var(GVAR_GECKO_SKEETER_PART) + 1);
        if ((global_var(GVAR_GECKO_SKEETER_PART) % 6) == 0) then begin
            set_global_var(GVAR_BRAIN_BOT_BRAIN, global_var(GVAR_BRAIN_BOT_BRAIN) + 1);
        end
    end
end

procedure Abel00
begin
    set_local_var(4, 1);
    gsay_reply(SCRIPT_NEWRGO, 102);
    giq_option(-3, SCRIPT_NEWRGO, 103, Abel01, 0);
    giq_option(4, SCRIPT_NEWRGO, 104, Abel03, 0);
    giq_option(5, SCRIPT_NEWRGO, 105, Abel04, 0);
end

procedure Abel01
begin
    gsay_reply(SCRIPT_NEWRGO, 106);
    giq_option(-3, SCRIPT_NEWRGO, 107, Abel02, 0);
end

procedure Abel02
begin
    gsay_reply(SCRIPT_NEWRGO, 108);
    giq_option(-3, SCRIPT_NEWRGO, 109, Abel03, 0);
end

procedure Abel03
begin
    gsay_message(SCRIPT_NEWRGO, 110, 0);
    call AbelCombat();
end

procedure Abel04
begin
    gsay_reply(SCRIPT_NEWRGO, 111);
    giq_option(5, SCRIPT_NEWRGO, 112, Abel05, 0);
end

procedure Abel05
begin
    gsay_message(SCRIPT_NEWRGO, 113, 0);
    call AbelCombat();
end

procedure Abel06
begin
    gsay_reply(SCRIPT_NEWRGO, 114);
    giq_option(-3, SCRIPT_NEWRGO, 115, Abel01, 0);
    giq_option(4, SCRIPT_NEWRGO, 116, Abel07, 0);
end

procedure Abel07
begin
    gsay_message(SCRIPT_NEWRGO, 117, 0);
end

procedure Abel08
begin
    gsay_message(SCRIPT_NEWRGO, 118, 0);
    call AbelCombat();
end

procedure AbelCombat
begin
    field_change := "off";
    use_obj(map_var(11));
    move_to(map_var(11), 7000, 0);
    add_timer_event(self_obj, game_ticks(10), 1);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_BRAIN_BOT_BRAIN) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_BRAIN_BOT_BRAIN));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_BRAIN_BOT_BRAIN));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_BRAIN_BOT_BRAIN));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_BRAIN_BOT_BRAIN));
            end
        end
        if (global_var(GVAR_GECKO_ECON_DISK) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GECKO_REQ_FORM))) or (global_var(GVAR_SIERRA_PASSWORD) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(GVAR_GECKO_REQ_FORM) > (2 * global_var(GVAR_GECKO_SKEETER_PART))) or (global_var(GVAR_SIERRA_LOCKOUT) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_BSCOMP3, random(100, 105));
end
