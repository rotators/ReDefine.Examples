procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure flee_dude;
procedure Julianna01;
procedure Julianna02;
procedure Julianna03;
procedure Julianna04;
procedure Julianna05;
procedure Julianna06;
procedure Julianna07;
procedure Julianna08;
procedure Julianna09;
procedure Julianna10;
procedure JuliannaEnd;
procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable initialized;
variable round_counter;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(initialized)) then begin
        if ((global_var(GVAR_SPECIAL_ENCOUNTER_GUARDIAN) == 9103) or (global_var(GVAR_SPECIAL_ENCOUNTER_GUARDIAN) == 9102)) then begin
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 0);
        end
        else begin
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 49);
        end
        sleep_time := 1930;
        wake_time := 830;
        sleep_tile := 23151;
        home_tile := 22749;
        initialized := 1;
    end
    else begin
        if (script_action == critter_proc) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == damage_proc) then begin
                call damage_p_proc();
            end
            else begin
                if (script_action == destroy_proc) then begin
                    call destroy_p_proc();
                end
                else begin
                    if (script_action == look_at_proc) then begin
                        call look_at_p_proc();
                    end
                    else begin
                        if (script_action == pickup_proc) then begin
                            call pickup_p_proc();
                        end
                        else begin
                            if (script_action == talk_proc) then begin
                                call talk_p_proc();
                            end
                            else begin
                                if (script_action == timed_event_proc) then begin
                                    call timed_event_p_proc();
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (local_var(5) and (local_var(6) == 0) and (tile_distance_objs(self_obj, dude_obj) < 8)) then begin
        call flee_dude();
    end
    else begin
        call sleeping();
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_SALVATORE_WARNINGS, 1);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 49);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_SALVATORE_WARNINGS, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(GVAR_GECKO_REQ_FORM) > (2 * global_var(GVAR_GECKO_SKEETER_PART))) or (global_var(GVAR_SIERRA_LOCKOUT) == 1))) then begin
                set_global_var(GVAR_SIERRA_LOCKOUT, 1);
                set_global_var(GVAR_SIERRA_PASSWORD, 0);
            end
            if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GECKO_REQ_FORM))) or (global_var(GVAR_SIERRA_PASSWORD) == 1))) then begin
                set_global_var(GVAR_SIERRA_PASSWORD, 1);
                set_global_var(GVAR_SIERRA_LOCKOUT, 0);
            end
            set_global_var(GVAR_GECKO_REQ_FORM, global_var(GVAR_GECKO_REQ_FORM) + 1);
            if ((global_var(GVAR_GECKO_REQ_FORM) % 2) == 0) then begin
                set_global_var(GVAR_BRAIN_BOT_BRAIN, global_var(GVAR_BRAIN_BOT_BRAIN) - 1);
            end
        end
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 49);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4)) then begin
        display_msg(message_str(SCRIPT_ECPEASNT, 100));
    end
    else begin
        display_msg(message_str(SCRIPT_ECPEASNT, 101));
    end
end

procedure pickup_p_proc
begin
    set_local_var(5, 1);
end

procedure talk_p_proc
begin
    if (local_var(5)) then begin
        float_msg(self_obj, message_str(SCRIPT_VCMOORE, 102), FLOAT_MSG_NORMAL);
    end
    else begin
        start_gdialog(257, self_obj, 4, -1, -1);
        gsay_start;
        if (global_var(GVAR_LADDIE_STATE) < 3) then begin
            call Julianna01();
        end
        else begin
            call Julianna10();
        end
        gsay_end;
        end_dialogue;
    end
    if (global_var(GVAR_LADDIE_STATE) == 2) then begin
        if (local_var(7) == 0) then begin
            set_local_var(7, 1);
            display_msg(message_str(SCRIPT_ECPEASNT, 126));
            give_exp_points(250);
        end
    end
end

procedure timed_event_p_proc
begin
    float_msg(self_obj, message_str(SCRIPT_ECPEASNT, 124), FLOAT_MSG_NORMAL);
    display_msg(message_str(SCRIPT_ECPEASNT, 125));
    critter_damage(self_obj, 200);
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(dude_tile, tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(dude_tile, LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 0);
end

procedure Julianna01
begin
    gsay_reply(SCRIPT_ECPEASNT, 102);
    giq_option(-3, SCRIPT_ECPEASNT, 103, JuliannaEnd, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_ECPEASNT, 104, JuliannaEnd, NEUTRAL_REACTION);
    if (global_var(GVAR_LADDIE_STATE) == 1) then begin
        giq_option(0, SCRIPT_ECPEASNT, 105, Julianna06, NEUTRAL_REACTION);
    end
    if (not(local_var(4))) then begin
        giq_option(4, SCRIPT_ECPEASNT, 106, Julianna02, NEUTRAL_REACTION);
    end
end

procedure Julianna02
begin
    set_local_var(4, 1);
    gsay_reply(SCRIPT_ECPEASNT, 107);
    giq_option(4, SCRIPT_ECPEASNT, 108, Julianna03, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_ECPEASNT, 109, Julianna04, NEUTRAL_REACTION);
end

procedure Julianna03
begin
    gsay_reply(SCRIPT_ECPEASNT, 110);
    giq_option(4, SCRIPT_ECPEASNT, 111, Julianna05, NEUTRAL_REACTION);
    call Goodbyes();
    giq_option(4, SCRIPT_BSCOMP3, exit_line, JuliannaEnd, NEUTRAL_REACTION);
end

procedure Julianna04
begin
    gsay_reply(SCRIPT_ECPEASNT, 112);
    call Goodbyes();
    giq_option(4, SCRIPT_BSCOMP3, exit_line, JuliannaEnd, NEUTRAL_REACTION);
end

procedure Julianna05
begin
    gsay_reply(SCRIPT_ECPEASNT, 113);
    call Goodbyes();
    giq_option(4, SCRIPT_BSCOMP3, exit_line, JuliannaEnd, NEUTRAL_REACTION);
end

procedure Julianna06
begin
    gsay_reply(SCRIPT_ECPEASNT, 114);
    giq_option(0, SCRIPT_ECPEASNT, 115, Julianna07, NEUTRAL_REACTION);
    giq_option(0, SCRIPT_ECPEASNT, 116, Julianna08, NEUTRAL_REACTION);
    if (obj_is_carrying_obj_pid(dude_obj, 99)) then begin
        giq_option(0, SCRIPT_ECPEASNT, 117, Julianna09, NEUTRAL_REACTION);
    end
end

procedure Julianna07
begin
    gsay_message(SCRIPT_ECPEASNT, 118, NEUTRAL_REACTION);
    add_timer_event(self_obj, 1, 1);
end

procedure Julianna08
begin
    gsay_reply(SCRIPT_ECPEASNT, 119);
    giq_option(4, SCRIPT_ECPEASNT, 120, JuliannaEnd, NEUTRAL_REACTION);
    if (obj_is_carrying_obj_pid(dude_obj, 99)) then begin
        giq_option(4, SCRIPT_ECPEASNT, 121, Julianna09, NEUTRAL_REACTION);
    end
end

procedure Julianna09
begin
    variable LVar0 := 0;
    LVar0 := obj_carrying_pid_obj(dude_obj, 99);
    rm_obj_from_inven(dude_obj, obj_carrying_pid_obj(dude_obj, 99));
    add_obj_to_inven(self_obj, LVar0);
    gsay_message(SCRIPT_ECPEASNT, 122, NEUTRAL_REACTION);
    set_global_var(GVAR_LADDIE_STATE, 2);
end

procedure Julianna10
begin
    gsay_message(SCRIPT_ECPEASNT, 123, NEUTRAL_REACTION);
end

procedure JuliannaEnd
begin
end

procedure sleeping
begin
    if (local_var(6) == 1) then begin
        if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
            if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
                if (tile_num(self_obj) != home_tile) then begin
                    animate_move_obj_to_tile(self_obj, home_tile, 0);
                end
                else begin
                    set_local_var(6, 0);
                end
            end
            else begin
                move_to(self_obj, home_tile, elevation(self_obj));
                if (tile_num(self_obj) == home_tile) then begin
                    set_local_var(6, 0);
                end
            end
        end
    end
    else begin
        if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
            if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    animate_move_obj_to_tile(self_obj, self_obj, 0);
                end
                else begin
                    set_local_var(6, 1);
                end
            end
            else begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    move_to(self_obj, sleep_tile, elevation(self_obj));
                end
                else begin
                    set_local_var(6, 1);
                end
            end
        end
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_BRAIN_BOT_BRAIN) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_BRAIN_BOT_BRAIN));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_BRAIN_BOT_BRAIN));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_BRAIN_BOT_BRAIN));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_BRAIN_BOT_BRAIN));
            end
        end
        if (global_var(GVAR_GECKO_ECON_DISK) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GECKO_REQ_FORM))) or (global_var(GVAR_SIERRA_PASSWORD) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_GECKO_SKEETER_PART) + global_var(GVAR_GECKO_REQ_FORM)) >= 25) and ((global_var(GVAR_GECKO_REQ_FORM) > (2 * global_var(GVAR_GECKO_SKEETER_PART))) or (global_var(GVAR_SIERRA_LOCKOUT) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_BSCOMP3, random(100, 105));
end
