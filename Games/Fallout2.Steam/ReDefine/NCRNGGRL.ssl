/*******************************************************
*      Some unreferenced imported varables found.      *
*      Because of it it is impossible to specify       *
*      the real names of global variables.             *
*******************************************************/

variable GVar0;
variable GVar1 := 1;
variable GVar2;
variable GVar3;
variable GVar4;
variable GVar5;
variable GVar6;
variable GVar7;
variable GVar8;
variable GVar9;
variable GVar10;
variable GVar11;
variable GVar12;
variable GVar13;
variable GVar14;
variable GVar15;
variable GVar16;
variable GVar17;
variable GVar18;
variable GVar19;
variable GVar20;
variable GVar21;
variable GVar22;
variable GVar23;
variable GVar24;
variable GVar25;
variable GVar26;
variable GVar27;

/* ?import? variable ProtoOfItemGiven; */
/* ?import? variable ValueOfRollCheck; */
/* ?import? variable Scenery_Creation; */
/* ?import? variable Scenery_Creation_Hex; */
/* ?import? variable Scenery_Creation_Count; */
/* ?import? variable Temp_Scenery_Creation_Hex; */
/* ?import? variable Scenery_Creation_Ptr; */
/* ?import? variable How_Many_Party_Members_Are_Injured; */
/* ?import? variable How_Many_Party_Members_Armed; */
/* ?import? variable PartyHealingItem; */

procedure checkPartyMembersNearDoor;

/* ?import? variable global_temp; */
/* ?import? variable dest_tile; */
/* ?import? variable step_tile; */
/* ?import? variable in_dialog; */
/* ?import? variable forced_node; */
/* ?import? variable restock_amt; */
/* ?import? variable restock_obj; */
/* ?import? variable restock_trash; */
/* ?import? variable removed_qty; */
/* ?import? variable last_timed_obj; */
/* ?import? variable last_timed_param; */
/* ?import? variable check_still_kill; */
/* ?import? variable stored_msg; */
/* ?import? variable stored_node; */
/* ?import? variable top_msg; */
/* ?import? variable var_num; */

procedure ChooseFromList;
procedure CLICK_PREV;
procedure CLICK_0;
procedure CLICK_1;
procedure CLICK_2;
procedure CLICK_3;
procedure CLICK_4;
procedure CLICK_MORE;

/* ?import? variable floater_patch_msg; */
/* ?import? variable hs_temp; */

procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure map_update_p_proc;

/* ?import? variable announcer_obj; */

import variable ring_girl_obj;

/* ?import? variable prize_fighter_obj; */


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure ChooseFromList
begin
    variable LVar0 := 0;
    Reply(GVar22);
    if (message_str(SCRIPT_NEWR1, GVar24 - 1) != "") then begin
        giq_option(1, NAME, message_str(SCRIPT_NEWR1, 150), CLICK_PREV, NEUTRAL_REACTION);
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, GVar24 + 0) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, GVar24 + 0), CLICK_0, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, GVar24 + 1) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, GVar24 + 1), CLICK_1, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, GVar24 + 2) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, GVar24 + 2), CLICK_2, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, GVar24 + 3) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, GVar24 + 3), CLICK_3, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, GVar24 + 4) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, GVar24 + 4), CLICK_4, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, GVar24 + 5) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, 151), CLICK_MORE, NEUTRAL_REACTION);
        end
    end
end

procedure CLICK_PREV
begin
    GVar24 := GVar24 - 5;
    call ChooseFromList();
end

procedure CLICK_0
begin
    set_global_var(GVar25, (global_var(GVar25) / 100 * 100) + (GVar24 % 100));
    call GVar23();
end

procedure CLICK_1
begin
    set_global_var(GVar25, (global_var(GVar25) / 100 * 100) + ((GVar24 + 1) % 100));
    call GVar23();
end

procedure CLICK_2
begin
    set_global_var(GVar25, (global_var(GVar25) / 100 * 100) + ((GVar24 + 2) % 100));
    call GVar23();
end

procedure CLICK_3
begin
    set_global_var(GVar25, (global_var(GVar25) / 100 * 100) + ((GVar24 + 3) % 100));
    call GVar23();
end

procedure CLICK_4
begin
    set_global_var(GVar25, (global_var(GVar25) / 100 * 100) + ((GVar24 + 4) % 100));
    call GVar23();
end

procedure CLICK_MORE
begin
    GVar24 := GVar24 + 5;
    call ChooseFromList();
end

procedure start
begin
    ring_girl_obj := self_obj;
end

procedure critter_p_proc
begin
    if (anim_busy(self_obj) == 0) then begin
        if (tile_num(self_obj) != local_var(1)) then begin
            animate_move_obj_to_tile(self_obj, local_var(1), 0);
        end
        else begin
            if (obj_is_visible_flag(self_obj)) then begin
                float_msg(self_obj, mstr(100) + global_var(GVAR_NEW_RENO_ROUND_NUMBER) + mstr(101), FLOAT_MSG_YELLOW);
                if (tile_num(self_obj) == 24672) then begin
                    set_local_var(1, 24678);
                end
                else begin
                    if (tile_num(self_obj) == 24678) then begin
                        set_local_var(1, 26078);
                    end
                    else begin
                        if (tile_num(self_obj) == 26078) then begin
                            set_local_var(1, 26072);
                        end
                        else begin
                            set_local_var(1, 24672);
                        end
                    end
                end
            end
        end
    end
end

procedure destroy_p_proc
begin
    ring_girl_obj := 0;
end

procedure map_enter_p_proc
begin
    ring_girl_obj := self_obj;
    if (is_loading_game == 0) then begin
        if (map_first_run) then begin
            set_local_var(1, tile_num(self_obj));
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 54);
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_LONER_CITIZEN);
        end
        if (obj_is_visible_flag(self_obj) == 1) then begin
            set_obj_visibility(self_obj, 1);
        end
    end
end

procedure timed_event_p_proc
begin
end

procedure map_update_p_proc
begin
    ring_girl_obj := self_obj;
end
