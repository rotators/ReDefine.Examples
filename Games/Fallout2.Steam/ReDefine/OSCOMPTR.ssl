variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure getTimeBit;
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;

variable doSequence;
variable sequenceCount;
variable lastDudeTile;
variable lastDudeRot;
variable body;
variable g1;
variable g2;
variable g3;
variable g4;
variable g5;
variable gruth;

procedure sequence;
procedure Node999;
procedure NodeDoSeq;
procedure loadPid(variable arg0, variable arg1, variable arg2, variable arg3);


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure getTimeBit
begin
    variable LVar0 := 0;
    LVar0 := game_time_hour;
    if ((LVar0 >= 100) and (LVar0 <= 159)) then begin
        return 1;
    end
    if ((LVar0 >= 200) and (LVar0 <= 259)) then begin
        return 2;
    end
    if ((LVar0 >= 300) and (LVar0 <= 359)) then begin
        return 4;
    end
    if ((LVar0 >= 400) and (LVar0 <= 459)) then begin
        return 8;
    end
    if ((LVar0 >= 500) and (LVar0 <= 559)) then begin
        return 16;
    end
    if ((LVar0 >= 600) and (LVar0 <= 659)) then begin
        return 32;
    end
    if ((LVar0 >= 700) and (LVar0 <= 759)) then begin
        return 64;
    end
    if ((LVar0 >= 800) and (LVar0 <= 859)) then begin
        return 128;
    end
    if ((LVar0 >= 900) and (LVar0 <= 959)) then begin
        return 256;
    end
    if ((LVar0 >= 1000) and (LVar0 <= 1059)) then begin
        return 512;
    end
    if ((LVar0 >= 1100) and (LVar0 <= 1159)) then begin
        return 1024;
    end
    if ((LVar0 >= 1200) and (LVar0 <= 1259)) then begin
        return 2048;
    end
    if ((LVar0 >= 1300) and (LVar0 <= 1359)) then begin
        return 4096;
    end
    if ((LVar0 >= 1400) and (LVar0 <= 1459)) then begin
        return 8192;
    end
    if ((LVar0 >= 1500) and (LVar0 <= 1559)) then begin
        return 16384;
    end
    if ((LVar0 >= 1600) and (LVar0 <= 1659)) then begin
        return 32768;
    end
    if ((LVar0 >= 1700) and (LVar0 <= 1759)) then begin
        return 65536;
    end
    if ((LVar0 >= 1800) and (LVar0 <= 1859)) then begin
        return 131072;
    end
    if ((LVar0 >= 1900) and (LVar0 <= 1959)) then begin
        return 262144;
    end
    if ((LVar0 >= 2000) and (LVar0 <= 2059)) then begin
        return 524288;
    end
    if ((LVar0 >= 2100) and (LVar0 <= 2159)) then begin
        return 1048576;
    end
    if ((LVar0 >= 2200) and (LVar0 <= 2259)) then begin
        return 2097152;
    end
    if ((LVar0 >= 2300) and (LVar0 <= 2359)) then begin
        return 4194304;
    end
    if ((LVar0 >= 0) and (LVar0 <= 100)) then begin
        return 8388608;
    end
end

procedure start
begin
end

procedure use_p_proc
begin
    if (not(combat_is_initialized)) then begin
        call use_skill_on_p_proc();
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(0) == 0) then begin
        display_mstr(100);
    end
    else begin
        display_mstr(101);
    end
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(102);
end

procedure use_skill_on_p_proc
begin
    if (not(combat_is_initialized)) then begin
        script_overrides;
        if (map_var(3) == 1) then begin
            if (local_var(1) or not((global_var(GVAR_VIGNETTE_SEQUENCE) bwand 1) != 0)) then begin
                call Node007();
            end
            else begin
                debug_msg("OSCOMPTR: called node 8 through skill proc");
                start_gdialog(524, self_obj, 4, -1, -1);
                gsay_start;
                call Node008();
                gsay_end;
                end_dialogue;
            end
        end
        else begin
            if ((map_var(3) == 2) or (map_var(3) == 3)) then begin
                start_gdialog(524, self_obj, 4, -1, -1);
                gsay_start;
                call Node006();
                gsay_end;
                end_dialogue;
            end
            else begin
                start_gdialog(524, self_obj, 4, -1, -1);
                gsay_start;
                call Node001();
                gsay_end;
                end_dialogue;
            end
        end
        set_local_var(0, 1);
    end
    if (doSequence == 1) then begin
        doSequence := 0;
        call sequence();
    end
end

procedure use_obj_on_p_proc
begin
    script_overrides;
    add_timer_event(self_obj, 2, 2);
end

procedure damage_p_proc
begin
end

procedure map_enter_p_proc
begin
end

procedure map_update_p_proc
begin
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        call sequence();
    end
    else begin
        if (fixed_param == 2) then begin
            call use_skill_on_p_proc();
        end
    end
end

procedure Node001
begin
    Reply(103);
    giq_option(1, NAME, 104, Node002, NEUTRAL_REACTION);
    giq_option(1, NAME, 105, Node003, NEUTRAL_REACTION);
    if (dude_skill(SKILL_SCIENCE) > 25) then begin
        giq_option(1, NAME, 106, Node004, NEUTRAL_REACTION);
    end
    if (dude_skill(SKILL_SCIENCE) > 50) then begin
        giq_option(1, NAME, 107, Node005, NEUTRAL_REACTION);
    end
    giq_option(1, NAME, 108, Node999, NEUTRAL_REACTION);
end

procedure Node002
begin
    Reply(109);
    giq_option(1, NAME, 110, Node003, NEUTRAL_REACTION);
    if (dude_skill(SKILL_SCIENCE) > 25) then begin
        giq_option(1, NAME, 111, Node004, NEUTRAL_REACTION);
    end
    if (dude_skill(SKILL_SCIENCE) > 50) then begin
        giq_option(1, NAME, 112, Node005, NEUTRAL_REACTION);
    end
    giq_option(1, NAME, 113, Node999, NEUTRAL_REACTION);
end

procedure Node003
begin
    Reply(114);
    if (dude_skill(SKILL_SCIENCE) > 25) then begin
        giq_option(1, NAME, 115, Node004, NEUTRAL_REACTION);
    end
    giq_option(1, NAME, 116, Node005, NEUTRAL_REACTION);
    giq_option(1, NAME, 117, Node999, NEUTRAL_REACTION);
end

procedure Node004
begin
    Reply(118);
    giq_option(1, NAME, 119, Node005, NEUTRAL_REACTION);
    giq_option(1, NAME, 120, Node999, NEUTRAL_REACTION);
end

procedure Node005
begin
    set_global_var(GVAR_V13_STATUS_FLAGS, global_var(GVAR_V13_STATUS_FLAGS) bwor 1);
    set_global_var(GVAR_GRUTHAR_DSTATUS, 1);
    Reply(121);
    if (dude_iq < 4) then begin
        set_map_var(3, 2);
        giq_option(0, NAME, g_mstr(350), Node999, NEUTRAL_REACTION);
    end
    else begin
        set_map_var(3, 3);
        giq_option(0, NAME, g_mstr(350), Node999, NEUTRAL_REACTION);
    end
end

procedure Node006
begin
    if (obj_carrying_pid_obj(dude_obj, 356)) then begin
        destroy_object(obj_carrying_pid_obj(dude_obj, 356));
        set_map_var(3, 1);
        set_global_var(GVAR_GRUTHAR_DSTATUS, 3);
        Reply(124);
        giq_option(0, NAME, g_mstr(350), Node999, NEUTRAL_REACTION);
    end
    else begin
        Reply(125);
        giq_option(0, NAME, g_mstr(350), Node999, NEUTRAL_REACTION);
    end
end

procedure Node007
begin
    display_mstr(127);
end

procedure Node008
begin
    Reply(128);
    giq_option(0, NAME, g_mstr(352), NodeDoSeq, NEUTRAL_REACTION);
end

procedure sequence
begin
    variable LVar0 := 0;
    if (sequenceCount == 0) then begin
        game_ui_disable;
        set_global_var(GVAR_PARTY_NO_FOLLOW, 1);
        gfade_out(500);
        set_obj_visibility(dude_obj, 1);
        lastDudeTile := dude_tile;
        lastDudeRot := obj_get_rot(dude_obj);
        body := loadPid(16777504, 21913, 2, elevation(self_obj));
        g1 := loadPid(16777466, 22309, 2, elevation(self_obj));
        g2 := loadPid(16777466, 22707, 3, elevation(self_obj));
        g3 := loadPid(16777466, 22718, 1, elevation(self_obj));
        g4 := loadPid(16777466, 22116, 2, elevation(self_obj));
        g5 := loadPid(16777466, 21313, 2, elevation(self_obj));
        gruth := loadPid(16777224, 22713, 5, elevation(self_obj));
        move_to(dude_obj, 22713, elevation(self_obj));
        gfade_in(500);
        float_msg(body, mstr(129), FLOAT_MSG_NORMAL);
        sequenceCount := sequenceCount + 1;
        add_timer_event(self_obj, game_ticks(5), 1);
    end
    else begin
        if (sequenceCount == 1) then begin
            float_msg(gruth, mstr(130), FLOAT_MSG_RED);
            sequenceCount := sequenceCount + 1;
            add_timer_event(self_obj, game_ticks(5), 1);
        end
        else begin
            if (sequenceCount == 2) then begin
                float_msg(body, mstr(131), FLOAT_MSG_NORMAL);
                sequenceCount := sequenceCount + 1;
                add_timer_event(self_obj, game_ticks(5), 1);
            end
            else begin
                if (sequenceCount == 3) then begin
                    float_msg(gruth, mstr(132), FLOAT_MSG_RED);
                    sequenceCount := sequenceCount + 1;
                    add_timer_event(self_obj, game_ticks(5), 1);
                end
                else begin
                    if (sequenceCount == 4) then begin
                        float_msg(body, mstr(133), FLOAT_MSG_RED);
                        animate_move_obj_to_tile(body, 22313, 0);
                        sequenceCount := sequenceCount + 1;
                        add_timer_event(self_obj, game_ticks(2), 1);
                    end
                    else begin
                        if (sequenceCount == 5) then begin
                            if (not(anim_busy(body))) then begin
                                LVar0 := sfx_build_char_name(body, 16, 4);
                                reg_anim_func(2, body);
                                reg_anim_func(1, 1);
                                reg_anim_animate(body, 16, -1);
                                reg_anim_play_sfx(body, LVar0, 0);
                                reg_anim_func(3, 0);
                                sequenceCount := sequenceCount + 1;
                            end
                            add_timer_event(self_obj, 5, 1);
                        end
                        else begin
                            if (sequenceCount == 6) then begin
                                LVar0 := sfx_build_char_name(gruth, 25, 3);
                                reg_anim_func(2, gruth);
                                reg_anim_func(1, 1);
                                reg_anim_animate(gruth, 25, -1);
                                reg_anim_play_sfx(gruth, LVar0, 0);
                                reg_anim_func(3, 0);
                                sequenceCount := sequenceCount + 1;
                                add_timer_event(self_obj, game_ticks(4), 1);
                            end
                            else begin
                                if (sequenceCount == 7) then begin
                                    float_msg(body, mstr(134), FLOAT_MSG_NORMAL);
                                    sequenceCount := sequenceCount + 1;
                                    add_timer_event(self_obj, game_ticks(3), 1);
                                end
                                else begin
                                    if (sequenceCount == 8) then begin
                                        gfade_out(1000);
                                        destroy_object(body);
                                        destroy_object(g1);
                                        destroy_object(g2);
                                        destroy_object(g3);
                                        destroy_object(g4);
                                        destroy_object(g5);
                                        destroy_object(gruth);
                                        move_to(dude_obj, lastDudeTile, elevation(self_obj));
                                        anim(dude_obj, 1000, lastDudeRot);
                                        set_obj_visibility(dude_obj, 0);
                                        gfade_in(500);
                                        game_ui_enable;
                                        if (party_member_obj(16777368) != 0) then begin
                                            float_msg(party_member_obj(16777368), mstr(135), FLOAT_MSG_RED);
                                        end
                                        set_local_var(1, 1);
                                        set_global_var(GVAR_PARTY_NO_FOLLOW, 0);
                                        set_global_var(GVAR_VIGNETTE_SEQUENCE, global_var(GVAR_VIGNETTE_SEQUENCE) bwor 65536);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure Node999
begin
end

procedure NodeDoSeq
begin
    doSequence := 1;
    call Node999();
end

procedure loadPid(variable arg0, variable arg1, variable arg2, variable arg3)
begin
    variable LVar4 := 0;
    LVar4 := create_object(arg0, arg1, arg3);
    if (LVar4) then begin
        reg_anim_func(2, LVar4);
        reg_anim_func(1, 1);
        anim(LVar4, 1000, arg2);
        reg_anim_func(3, 0);
    end
    return LVar4;
end
