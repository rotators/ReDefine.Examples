variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable Static_Reaction;
variable Evil_Critter;
variable Slavery_Tolerant := 2;
variable Karma_Perception;
variable reaction_bonus_town_rep;
variable reaction_bonus_karma;

procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure Node998;
procedure Node999;
procedure Node001;
procedure Node002;

import variable i_robin_obj;
import variable i_vorpal_obj;

variable Only_Once;
variable tileone;
variable tileonea;
variable tileexit;
variable movedPos1;
variable movedLeave;
variable node1rep;
variable node2rep;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
    i_robin_obj := self_obj;
end

procedure critter_p_proc
begin
    if ((local_var(5) == 2) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    if (not((global_var(323) bwand 2) != 0)) then begin
        if (((map_var(0) bwand 1) != 0) and (movedPos1 == 0)) then begin
            movedPos1 := 1;
            add_timer_event(self_obj, 0, 2);
            debug_msg("ECROBIN: moving to pos a");
        end
        if (((map_var(0) bwand 128) != 0) and (movedLeave == 0)) then begin
            movedLeave := 1;
            add_timer_event(self_obj, 0, 3);
            debug_msg("ECROBIN: moving to exit");
        end
    end
    else begin
        if ((i_vorpal_obj != -1) and (elevation(self_obj) == elevation(dude_obj))) then begin
            attack_complex(i_vorpal_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure pickup_p_proc
begin
    call Node002();
end

procedure talk_p_proc
begin
    Evil_Critter := 0;
    Slavery_Tolerant := 2;
    Karma_Perception := 10;
    call Node001();
    set_local_var(4, 1);
end

procedure destroy_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_carrying_pid_obj(self_obj, 15);
    if (LVar0) then begin
        destroy_object(LVar0);
    end
    if (source_obj == dude_obj) then begin
        set_global_var(5, global_var(5) + 1);
        if (metarule(51, self_obj) == 2) then begin
            if (source_obj == dude_obj) then begin
                set_global_var(2, 0);
                set_global_var(1, global_var(1) + 1);
                set_global_var(0, global_var(0) - -15);
                set_global_var(37, 0);
                set_global_var(38, 0);
                set_global_var(39, 0);
                set_global_var(40, 0);
                set_global_var(41, 0);
                set_global_var(42, 0);
                set_global_var(43, 0);
                set_global_var(44, 0);
                set_global_var(45, 0);
                if (global_var(0) >= 1000) then begin
                    set_global_var(37, 1);
                end
                else begin
                    if (global_var(0) >= 750) then begin
                        set_global_var(38, 1);
                    end
                    else begin
                        if (global_var(0) >= 500) then begin
                            set_global_var(39, 1);
                        end
                        else begin
                            if (global_var(0) >= 250) then begin
                                set_global_var(40, 1);
                            end
                            else begin
                                if (global_var(0) > -250) then begin
                                    set_global_var(41, 1);
                                end
                                else begin
                                    if (global_var(0) > -500) then begin
                                        set_global_var(42, 1);
                                    end
                                    else begin
                                        if (global_var(0) > -750) then begin
                                            set_global_var(43, 1);
                                        end
                                        else begin
                                            if (global_var(0) > -1000) then begin
                                                set_global_var(44, 1);
                                            end
                                            else begin
                                                set_global_var(45, 1);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(4) > (3 * global_var(5))) or (global_var(2) == 1)) and (global_var(1) == 0)) then begin
            set_global_var(2, 1);
            set_global_var(3, 0);
        end
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(5) > (2 * global_var(4))) or (global_var(3) == 1))) then begin
            set_global_var(3, 1);
            set_global_var(2, 0);
        end
        set_global_var(0, global_var(0) + -10);
        debug_msg("Player gains " + -10 + " Karma Points.");
        set_global_var(37, 0);
        set_global_var(38, 0);
        set_global_var(39, 0);
        set_global_var(40, 0);
        set_global_var(41, 0);
        set_global_var(42, 0);
        set_global_var(43, 0);
        set_global_var(44, 0);
        set_global_var(45, 0);
        if (global_var(0) >= 1000) then begin
            set_global_var(37, 1);
        end
        else begin
            if (global_var(0) >= 750) then begin
                set_global_var(38, 1);
            end
            else begin
                if (global_var(0) >= 500) then begin
                    set_global_var(39, 1);
                end
                else begin
                    if (global_var(0) >= 250) then begin
                        set_global_var(40, 1);
                    end
                    else begin
                        if (global_var(0) > -250) then begin
                            set_global_var(41, 1);
                        end
                        else begin
                            if (global_var(0) > -500) then begin
                                set_global_var(42, 1);
                            end
                            else begin
                                if (global_var(0) > -750) then begin
                                    set_global_var(43, 1);
                                end
                                else begin
                                    if (global_var(0) > -1000) then begin
                                        set_global_var(44, 1);
                                    end
                                    else begin
                                        set_global_var(45, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    i_robin_obj := self_obj;
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(684, 100));
end

procedure description_p_proc
begin
    script_overrides;
    if (local_var(4) == 0) then begin
        display_msg(message_str(684, 101));
    end
    else begin
        display_msg(message_str(684, 102));
    end
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(6, 1);
    end
end

procedure map_enter_p_proc
begin
    Only_Once := 0;
    critter_add_trait(self_obj, 1, 6, 151);
    critter_add_trait(self_obj, 1, 5, 22);
    if (not((global_var(323) bwand 2) != 0)) then begin
        tileone := tile_num_in_direction(19713, 0, 2);
        tileonea := tile_num_in_direction(20307, 5, 2);
        tileexit := tile_num_in_direction(21494, 5, 2);
        move_to(self_obj, tileone, 0);
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        anim(self_obj, 1000, 4);
        reg_anim_func(3, 0);
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 2) then begin
        if (not(combat_is_initialized)) then begin
            if (not(anim_busy(self_obj)) and (tile_num(self_obj) != tileonea)) then begin
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                animate_move_obj_to_tile(self_obj, tileonea, 0);
                reg_anim_func(3, 0);
                add_timer_event(self_obj, 10, 2);
            end
            else begin
                if (tile_num(self_obj) == tileonea) then begin
                    set_map_var(0, map_var(0) bwor 8);
                end
                else begin
                    add_timer_event(self_obj, 10, 2);
                end
            end
        end
        else begin
            add_timer_event(self_obj, 10, 2);
        end
    end
    else begin
        if (fixed_param == 3) then begin
            if (not(combat_is_initialized)) then begin
                if (not(anim_busy(self_obj)) and (tile_num(self_obj) != tileexit)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    animate_move_obj_to_tile(self_obj, tileexit, 0);
                    reg_anim_func(3, 0);
                    add_timer_event(self_obj, 10, 3);
                end
                else begin
                    if (tile_num(self_obj) == tileexit) then begin
                        i_robin_obj := -2;
                        destroy_object(self_obj);
                    end
                    else begin
                        add_timer_event(self_obj, 10, 3);
                    end
                end
            end
            else begin
                add_timer_event(self_obj, 10, 3);
            end
        end
    end
end

procedure Node998
begin
    set_local_var(5, 2);
end

procedure Node999
begin
end

procedure Node001
begin
    node1rep := node1rep + 1;
    if (node1rep > 3) then begin
        node1rep := 0;
    end
    float_msg(self_obj, message_str(684, 103 + node1rep), 0);
end

procedure Node002
begin
    node2rep := node2rep + 1;
    if (node2rep > 2) then begin
        node2rep := 0;
    end
    float_msg(self_obj, message_str(684, 200 + node2rep), 2);
end

