variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure Look_Locks;
procedure Unlock_Lock;
procedure Lockpick_Lock;
procedure Lockpick_Door;
procedure Lock_Door;
procedure Set_Lock;
procedure Set_Lockpick_Lock;
procedure Pry_Door;
procedure Super_Lockpick_Lock;
procedure Super_Set_Lockpick_Lock;

variable Locks_Roll;
variable Traps_Roll;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure use_p_proc
begin
    if (global_var(601) == 0) then begin
        script_overrides;
        display_msg(message_str(13, 501));
    end
    else begin
        if (obj_is_locked(self_obj)) then begin
            script_overrides;
            display_msg(message_str(13, 203));
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(13, 502));
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(13, 502));
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    if (global_var(601) == 0) then begin
        display_msg(message_str(13, 501));
    end
    else begin
        LVar0 := action_being_used;
        if (LVar0 == 9) then begin
            display_msg(message_str(13, 503));
        end
    end
end

procedure use_obj_on_p_proc
begin
    variable LVar0 := 0;
    script_overrides;
    if (global_var(601) == 0) then begin
        display_msg(message_str(13, 501));
    end
    else begin
        LVar0 := obj_pid(obj_being_used_with);
        if (LVar0 == 77) then begin
            if (local_var(0) == 0) then begin
                call Lockpick_Lock();
            end
            else begin
                call Set_Lockpick_Lock();
            end
        end
        else begin
            if (LVar0 == 411) then begin
                if (local_var(0) == 0) then begin
                    call Super_Lockpick_Lock();
                end
                else begin
                    call Super_Set_Lockpick_Lock();
                end
            end
            else begin
                if (LVar0 == 20) then begin
                    call Pry_Door();
                end
                else begin
                    display_msg(message_str(13, 503));
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    script_overrides;
end

procedure map_enter_p_proc
begin
    if (local_var(3) == 0) then begin
        set_local_var(3, 1);
        set_local_var(0, 0);
        set_local_var(1, 1);
    end
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure map_update_p_proc
begin
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure Look_Locks
begin
    display_msg(message_str(13, 503));
end

procedure Unlock_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -60);
    call Lockpick_Door();
end

procedure Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -40);
    call Lockpick_Door();
end

procedure Lockpick_Door
begin
    if (is_success(Locks_Roll)) then begin
        set_local_var(0, 1);
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(13, 170));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(13, 173));
        end
        if (local_var(5) == 0) then begin
            set_local_var(5, 1);
            give_exp_points(25);
            display_msg(message_str(14, 100) + 25 + message_str(14, 101));
        end
    end
    else begin
        if (is_critical(Locks_Roll)) then begin
            jam_lock(self_obj);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 171));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(13, 174));
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 172));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(13, 175));
            end
        end
    end
end

procedure Lock_Door
begin
    if (is_success(Locks_Roll)) then begin
        set_local_var(0, 0);
        obj_lock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(13, 189));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(13, 191));
        end
        if (local_var(5) == 0) then begin
            set_local_var(5, 1);
            give_exp_points(25);
            display_msg(message_str(14, 100) + 25 + message_str(14, 101));
        end
    end
    else begin
        if (source_obj == dude_obj) then begin
            display_msg(message_str(13, 190));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(13, 192));
        end
    end
end

procedure Set_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -60);
    call Lock_Door();
end

procedure Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -40);
    call Lock_Door();
end

procedure Pry_Door
begin
    display_msg(message_str(13, 500));
end

procedure Super_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -60 + 40);
    call Lockpick_Door();
end

procedure Super_Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -60 + 40);
    call Lock_Door();
end

