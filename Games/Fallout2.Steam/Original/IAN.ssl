procedure start;
procedure critter_p_proc;
procedure description_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure use_obj_on_p_proc;
procedure join_party;
procedure hire_Ian;
procedure Ian01;
procedure Ian02;
procedure Ian03;
procedure Ian04;
procedure Ian05;
procedure Ian06;
procedure Ian07;
procedure Ian08;
procedure Ian09;
procedure Ian10;
procedure Ian11;
procedure Ian12;
procedure Ian12a;
procedure Ian13;
procedure Ian14;
procedure Ian15;
procedure Ian16;
procedure Ian17;
procedure Ian17a;
procedure Ian18;
procedure Ian19;
procedure Ian20;
procedure Ian21;
procedure follow_player;
procedure map_commentary;
procedure IanEnd;
procedure IanCombat;
procedure IanTactics;
procedure IanClose;
procedure IanModerate;
procedure IanFar;
procedure IanChange;

variable hostile;
variable item;
variable unwield_flag;
variable line151flag;
variable line152flag;
variable line153flag;
variable line154flag;
variable line155flag;
variable line162flag;
variable line163flag;
variable line164flag;
variable line165flag;
variable line166flag;
variable line167flag;
variable line170flag;
variable line172flag;
variable dest_tile := 7000;
variable prev_tile := 7000;

import variable Katja_ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (script_action == 12) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == 3) then begin
            call description_p_proc();
        end
        else begin
            if (script_action == 18) then begin
                call destroy_p_proc();
            end
            else begin
                if (script_action == 21) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == 15) then begin
                        call map_enter_p_proc();
                    end
                    else begin
                        if (script_action == 4) then begin
                            call pickup_p_proc();
                        end
                        else begin
                            if (script_action == 11) then begin
                                call talk_p_proc();
                            end
                            else begin
                                if (script_action == 22) then begin
                                    call timed_event_p_proc();
                                end
                                else begin
                                    if (script_action == 7) then begin
                                        call use_obj_on_p_proc();
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    call map_commentary();
end

procedure description_p_proc
begin
    if (is_success(do_check(dude_obj, 1, has_trait(0, dude_obj, 0)))) then begin
        script_overrides;
        display_msg(message_str(235, 130));
    end
end

procedure destroy_p_proc
begin
    set_global_var(118, 3);
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (global_var(118) == 0) then begin
        display_msg(message_str(235, 100));
    end
    else begin
        display_msg(message_str(235, 113));
    end
end

procedure map_enter_p_proc
begin
    if (global_var(118) == 2) then begin
        critter_add_trait(self_obj, 1, 6, 0);
        add_timer_event(self_obj, game_ticks(1), 1);
    end
    else begin
        critter_add_trait(self_obj, 1, 6, 2);
    end
    critter_add_trait(self_obj, 1, 5, 89);
end

procedure pickup_p_proc
begin
    if (global_var(118) < 2) then begin
        hostile := 1;
    end
    else begin
        script_overrides;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    start_gdialog(235, self_obj, 4, -1, -1);
    gsay_start;
    if ((global_var(246) == 1) and (global_var(118) != 2)) then begin
        call Ian14();
    end
    else begin
        if (global_var(118) == 0) then begin
            call Ian02();
        end
        else begin
            if (global_var(118) == 2) then begin
                call Ian15();
            end
            else begin
                if (global_var(118) == 3) then begin
                    call Ian21();
                end
                else begin
                    call Ian12();
                end
            end
        end
    end
    gsay_end;
    end_dialogue;
    if ((global_var(118) == 2) and (global_var(313) == 0)) then begin
        set_global_var(313, 1);
        display_msg(message_str(235, 169));
        give_exp_points(100);
    end
    if (unwield_flag == 1) then begin
        unwield_flag := 0;
        inven_unwield;
    end
end

procedure timed_event_p_proc
begin
    call follow_player();
end

procedure use_obj_on_p_proc
begin
    if (global_var(118) == 2) then begin
        item := obj_pid(obj_being_used_with);
        if ((item != 40) and (item != 47) and (item != 91)) then begin
            script_overrides;
            if (obj_item_subtype(obj_being_used_with) != 3) then begin
                rm_obj_from_inven(dude_obj, obj_being_used_with);
                add_obj_to_inven(self_obj, obj_being_used_with);
            end
            else begin
                if ((item == 4) or (item == 8) or (item == 18) or (item == 120) or (item == 22) or (item == 9) or (item == 16) or (item == 24) or (item == 241) or (item == 116) or (item == 236) or (item == 234) or (item == 235) or (item == 21)) then begin
                    rm_obj_from_inven(dude_obj, obj_being_used_with);
                    add_obj_to_inven(self_obj, obj_being_used_with);
                end
                else begin
                    float_msg(self_obj, message_str(634, 109), 3);
                end
            end
        end
    end
end

procedure join_party
begin
    set_global_var(118, 2);
    party_add(self_obj);
    add_timer_event(self_obj, game_ticks(1), 1);
    critter_add_trait(self_obj, 1, 6, 0);
    gsay_message(235, 150, 50);
end

procedure hire_Ian
begin
    item_caps_adjust(dude_obj, -100);
    item_caps_adjust(self_obj, 100);
    call join_party();
end

procedure Ian01
begin
    gsay_message(235, 101, 51);
end

procedure Ian02
begin
    gsay_reply(235, 102);
    giq_option(4, 235, 103, Ian03, 51);
    giq_option(4, 235, message_str(235, 104) + proto_data(obj_pid(dude_obj), 1) + message_str(235, 105), Ian04, 50);
    giq_option(-3, 235, 106, Ian05, 50);
end

procedure Ian03
begin
    gsay_message(235, 107, 51);
end

procedure Ian04
begin
    gsay_reply(235, 108);
    set_global_var(118, 1);
    giq_option(4, 235, 109, Ian06, 50);
    giq_option(5, 235, 110, Ian07, 50);
end

procedure Ian05
begin
    gsay_message(235, 111, 50);
end

procedure Ian06
begin
    gsay_reply(235, 112);
    giq_option(4, 235, 114, Ian18, 50);
    giq_option(4, 235, 115, Ian13, 50);
    giq_option(4, 235, 149, Ian17, 50);
    giq_option(5, 235, 116, Ian08, 50);
end

procedure Ian07
begin
    gsay_reply(235, 117);
    giq_option(4, 235, 118, Ian09, 50);
    giq_option(4, 235, 119, Ian08, 50);
end

procedure Ian08
begin
    gsay_reply(235, 120);
    giq_option(4, 235, 121, Ian10, 50);
    giq_option(5, 235, 122, Ian11, 50);
end

procedure Ian09
begin
    gsay_reply(235, 123);
    giq_option(4, 634, 104, IanEnd, 50);
end

procedure Ian10
begin
    gsay_reply(235, 125);
    giq_option(4, 235, 126, Ian09, 50);
    giq_option(4, 634, 101, IanEnd, 50);
end

procedure Ian11
begin
    gsay_reply(235, 128);
    giq_option(4, 235, 129, Ian07, 50);
    giq_option(4, 634, 101, IanEnd, 50);
end

procedure Ian12
begin
    gsay_reply(235, message_str(235, 131) + proto_data(obj_pid(dude_obj), 1) + message_str(235, 132));
    call Ian12a();
end

procedure Ian12a
begin
    giq_option(4, 235, 133, Ian11, 50);
    giq_option(4, 235, 134, Ian09, 50);
    giq_option(4, 235, 135, Ian07, 50);
    giq_option(4, 235, 136, Ian10, 50);
    giq_option(4, 235, 137, Ian13, 50);
    giq_option(4, 235, 149, Ian17, 50);
    giq_option(4, 235, 138, IanEnd, 50);
end

procedure Ian13
begin
    if (not(global_var(73))) then begin
        set_global_var(73, 1);
    end
    if (not(global_var(71))) then begin
        set_global_var(71, 1);
    end
    gsay_reply(235, 139);
    if (global_var(118) == 2) then begin
        giq_option(4, 235, 140, Ian15, 50);
    end
    else begin
        giq_option(4, 235, 140, Ian12, 50);
    end
end

procedure Ian14
begin
    hostile := 1;
    gsay_message(235, 141, 51);
end

procedure Ian15
begin
    gsay_reply(235, message_str(235, 142) + proto_data(obj_pid(dude_obj), 1) + message_str(235, 143));
    giq_option(4, 235, 145, Ian16, 50);
    giq_option(4, 235, 146, Ian13, 50);
    giq_option(4, 235, 200, IanChange, 50);
    giq_option(4, 389, 159, IanTactics, 50);
    giq_option(4, 235, 173, Ian20, 50);
    giq_option(4, 235, 144, IanEnd, 50);
end

procedure Ian16
begin
    set_global_var(118, 3);
    party_remove(self_obj);
    gsay_message(235, 147, 50);
    rm_timer_event(self_obj);
end

procedure Ian17
begin
    if (local_var(1) == 1) then begin
        gsay_message(235, 148, 51);
    end
    else begin
        if (local_var(1) == 2) then begin
            gsay_reply(235, 156);
            if (item_caps_total(dude_obj) >= 100) then begin
                giq_option(4, 235, 157, hire_Ian, 49);
            end
            giq_option(6, 235, 159, Ian17a, 50);
            giq_option(4, 235, 158, IanEnd, 50);
        end
        else begin
            call join_party();
        end
    end
end

procedure Ian17a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 20))) then begin
        gsay_reply(235, 160);
        giq_option(4, 634, 106, join_party, 49);
    end
    else begin
        call DownReact();
        gsay_message(235, 161, 51);
    end
end

procedure Ian18
begin
    gsay_reply(235, 124);
    call UpReact();
    giq_option(4, 634, 106, Ian19, 50);
end

procedure Ian19
begin
    gsay_reply(235, 127);
    call Ian12a();
end

procedure Ian20
begin
    gsay_message(235, 174, 50);
    call Ian15();
end

procedure Ian21
begin
    gsay_reply(235, 202);
    giq_option(4, 235, 203, join_party, 50);
    giq_option(4, 235, 204, IanEnd, 50);
end

procedure follow_player
begin
    variable LVar0 := 0;
    prev_tile := dest_tile;
    LVar0 := (has_trait(1, dude_obj, 10) + random(2, 4)) % 6;
    dest_tile := tile_num_in_direction(tile_num(dude_obj), LVar0, (global_var(277) * 2) + random(1, 2));
    if ((tile_distance_objs(self_obj, dude_obj) > ((global_var(277) + 1) * 2)) or (random(0, 3) == 3)) then begin
        if (tile_distance(prev_tile, tile_num(dude_obj)) > tile_distance(dest_tile, tile_num(dude_obj))) then begin
            if (tile_distance_objs(self_obj, dude_obj) > 8) then begin
                animate_move_obj_to_tile(self_obj, dest_tile, 1 bwor 16);
            end
            else begin
                animate_move_obj_to_tile(self_obj, dest_tile, 0 bwor 16);
            end
        end
        else begin
            if (tile_distance_objs(self_obj, dude_obj) > 8) then begin
                animate_move_obj_to_tile(self_obj, dest_tile, 1);
            end
            else begin
                animate_move_obj_to_tile(self_obj, dest_tile, 0);
            end
        end
    end
    add_timer_event(self_obj, game_ticks(1), 1);
end

procedure map_commentary
begin
    if (cur_map_index == 12) then begin
        if (tile_distance(tile_num(self_obj), 27883) < 4) then begin
            if (not(line151flag)) then begin
                float_msg(self_obj, message_str(235, 151), 0);
                line151flag := 1;
            end
        end
    end
    else begin
        if (cur_map_index == 11) then begin
            if (tile_distance(tile_num(self_obj), 27919) < 4) then begin
                if (not(line152flag)) then begin
                    float_msg(self_obj, message_str(235, 152), 0);
                    line152flag := 1;
                end
            end
        end
        else begin
            if (cur_map_index == 3) then begin
                if (not(line153flag)) then begin
                    float_msg(self_obj, message_str(235, 153), 0);
                    line153flag := 1;
                end
            end
            else begin
                if (cur_map_index == 27) then begin
                    if (not(line154flag)) then begin
                        float_msg(self_obj, message_str(235, 154), 0);
                        if (global_var(244) == 2) then begin
                            float_msg(Katja_ptr, message_str(623, 185), 5);
                        end
                        line154flag := 1;
                    end
                end
                else begin
                    if (cur_map_index == 30) then begin
                        if (not(line155flag)) then begin
                            float_msg(self_obj, message_str(235, 155), 0);
                            line155flag := 1;
                        end
                    end
                    else begin
                        if (cur_map_index == 38) then begin
                            if (tile_distance(tile_num(self_obj), 24890) < 4) then begin
                                if (not(line162flag)) then begin
                                    float_msg(self_obj, message_str(235, 162), 0);
                                    line162flag := 1;
                                end
                            end
                            else begin
                                if (tile_distance(tile_num(self_obj), 14116) < 4) then begin
                                    if (not(line165flag)) then begin
                                        float_msg(self_obj, message_str(235, 165), 0);
                                        line165flag := 1;
                                    end
                                end
                                else begin
                                    if (tile_distance(tile_num(self_obj), 18464) < 4) then begin
                                        if (not(line166flag)) then begin
                                            float_msg(self_obj, message_str(235, 166), 0);
                                            line166flag := 1;
                                        end
                                    end
                                    else begin
                                        if (tile_distance(tile_num(self_obj), 21730) < 4) then begin
                                            if (not(line167flag)) then begin
                                                float_msg(self_obj, message_str(235, 167), 0);
                                                line167flag := 1;
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        else begin
                            if (cur_map_index == 40) then begin
                                if (tile_distance(tile_num(self_obj), 16082) < 4) then begin
                                    if (line163flag == 0) then begin
                                        float_msg(self_obj, message_str(235, 163), 0);
                                        line163flag := 1;
                                    end
                                end
                            end
                            else begin
                                if (cur_map_index == 41) then begin
                                    if (tile_distance(tile_num(self_obj), 22497) < 4) then begin
                                        if (line164flag == 0) then begin
                                            float_msg(self_obj, message_str(235, 164), 0);
                                            line164flag := 1;
                                        end
                                    end
                                end
                                else begin
                                    if (cur_map_index == 6) then begin
                                        if (line170flag == 0) then begin
                                            float_msg(self_obj, message_str(235, 170), 0);
                                            line170flag := 1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure IanEnd
begin
end

procedure IanCombat
begin
    hostile := 1;
end

procedure IanTactics
begin
    gsay_reply(389, 160);
    giq_option(4, 389, 161, IanClose, 50);
    giq_option(4, 389, 162, IanModerate, 50);
    giq_option(4, 389, 163, IanFar, 50);
end

procedure IanClose
begin
    set_global_var(277, 0);
    gsay_message(235, 201, 50);
    call Ian15();
end

procedure IanModerate
begin
    set_global_var(277, 1);
    gsay_message(235, 201, 50);
    call Ian15();
end

procedure IanFar
begin
    set_global_var(277, 2);
    gsay_message(235, 201, 50);
    call Ian15();
end

procedure IanChange
begin
    gsay_message(235, 201, 50);
    unwield_flag := 1;
    call Ian15();
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

