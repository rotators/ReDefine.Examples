procedure Start;
procedure look_at_p_proc;
procedure description_p_proc;
procedure talk_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure Zack00;
procedure Zack01;
procedure Zack02;
procedure Zack03;
procedure Zack04;
procedure Zack05;
procedure ZackYes;
procedure ZackNo;
procedure ZackBarter;
procedure ZackEnd;

import variable Locker_Ptr;

variable Initialize := 1;
variable BarterMod := -10;
variable DisplayMessage;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure Start
begin
    if (Initialize) then begin
        critter_add_trait(self_obj, 1, 6, 48);
        critter_add_trait(self_obj, 1, 5, 28);
        Initialize := 0;
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 1) then begin
        display_msg(message_str(377, 100));
    end
    else begin
        display_msg(message_str(377, 101));
    end
end

procedure description_p_proc
begin
    script_overrides;
    if (local_var(4) == 1) then begin
        display_msg(message_str(377, 100));
    end
    else begin
        display_msg(message_str(377, 101));
    end
end

procedure talk_p_proc
begin
    if (global_var(617) == 1) then begin
        float_msg(self_obj, message_str(669, random(100, 105)), 2);
    end
    else begin
        BarterMod := -10;
        move_obj_inven_to_obj(Locker_Ptr, self_obj);
        item_caps_adjust(self_obj, 3000 + random(1, 1000));
        call get_reaction();
        start_gdialog(377, self_obj, -1, -1, -1);
        gsay_start;
        if (local_var(5) == 2) then begin
            BarterMod := 15;
        end
        else begin
            if (local_var(5) == 1) then begin
                BarterMod := 5;
            end
            else begin
                BarterMod := -10;
            end
        end
        gdialog_set_barter_mod(BarterMod);
        if (local_var(4) == 0) then begin
            call Zack00();
        end
        else begin
            call Zack01();
        end
        gsay_end;
        end_dialogue;
        item_caps_adjust(self_obj, -item_caps_total(self_obj));
        move_obj_inven_to_obj(self_obj, Locker_Ptr);
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(617, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(617, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
                set_global_var(156, 1);
                set_global_var(157, 0);
            end
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
                set_global_var(157, 1);
                set_global_var(156, 0);
            end
            set_global_var(159, global_var(159) + 1);
            if ((global_var(159) % 2) == 0) then begin
                set_global_var(155, global_var(155) - 1);
            end
        end
    end
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (global_var(617) == 1) then begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure pickup_p_proc
begin
    set_global_var(617, 1);
end

procedure Zack00
begin
    gsay_reply(377, 102);
    gsay_option(377, 104, ZackBarter, 50);
    gsay_option(377, 103, Zack02, 50);
    if (local_var(5) == 0) then begin
        DisplayMessage := 117;
        gsay_option(377, 105, Zack04, 50);
    end
    else begin
        if (local_var(5) == 1) then begin
            DisplayMessage := 123;
            gsay_option(377, 122, Zack05, 50);
        end
    end
    gsay_option(377, 107, ZackEnd, 50);
end

procedure Zack01
begin
    gsay_reply(377, 106);
    gsay_option(377, 104, ZackBarter, 50);
    gsay_option(377, 103, Zack02, 50);
    if (local_var(5) == 0) then begin
        DisplayMessage := 117;
        gsay_option(377, 105, Zack04, 50);
    end
    else begin
        if (local_var(5) == 1) then begin
            DisplayMessage := 123;
            gsay_option(377, 122, Zack05, 50);
        end
    end
    gsay_option(377, 107, ZackEnd, 50);
end

procedure Zack02
begin
    gsay_reply(377, 114);
    gsay_option(377, 115, Zack03, 50);
end

procedure Zack03
begin
    gsay_reply(377, 111);
    gsay_option(377, 113, ZackBarter, 50);
end

procedure Zack04
begin
    if (global_var(265) == 9250) then begin
        BarterMod := 15;
        set_local_var(5, 2);
        call ZackYes();
    end
    else begin
        if (global_var(614) == 9201) then begin
            BarterMod := 5;
            set_local_var(5, 1);
            call ZackYes();
        end
        else begin
            BarterMod := -10;
            call ZackNo();
        end
    end
end

procedure Zack05
begin
    if (global_var(265) == 9250) then begin
        BarterMod := 0;
        set_local_var(5, 2);
        call ZackYes();
    end
    else begin
        call ZackNo();
    end
end

procedure ZackYes
begin
    gsay_reply(377, 116);
    gsay_option(377, 120, ZackBarter, 50);
    gsay_option(377, 121, ZackEnd, 50);
end

procedure ZackNo
begin
    gsay_reply(377, DisplayMessage);
    gsay_option(377, 119, ZackBarter, 50);
    gsay_option(377, 107, ZackEnd, 50);
end

procedure ZackBarter
begin
    gdialog_mod_barter(BarterMod);
    gsay_message(377, 108, 50);
end

procedure ZackEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

