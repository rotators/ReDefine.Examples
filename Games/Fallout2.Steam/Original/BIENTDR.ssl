variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure getTimeBit;
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure Look_Traps_And_Locks;
procedure Look_Traps;
procedure Look_Locks;
procedure Skill_Disarm_Traps;
procedure Disarm_Traps;
procedure Unlock_Lock;
procedure Lockpick_Lock;
procedure Lockpick_Door;
procedure Lock_Door;
procedure Set_Lock;
procedure Set_Lockpick_Lock;
procedure Set_Trap;
procedure Pry_Door;
procedure Damage_Critter;
procedure Super_Lockpick_Lock;
procedure Super_Set_Lockpick_Lock;

variable Locks_Roll;
variable Traps_Roll;
variable last_source_obj;

procedure timed_event_p_proc;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure getTimeBit
begin
    variable LVar0 := 0;
    LVar0 := game_time_hour;
    if ((LVar0 >= 100) and (LVar0 <= 159)) then begin
        return 1;
    end
    if ((LVar0 >= 200) and (LVar0 <= 259)) then begin
        return 2;
    end
    if ((LVar0 >= 300) and (LVar0 <= 359)) then begin
        return 4;
    end
    if ((LVar0 >= 400) and (LVar0 <= 459)) then begin
        return 8;
    end
    if ((LVar0 >= 500) and (LVar0 <= 559)) then begin
        return 16;
    end
    if ((LVar0 >= 600) and (LVar0 <= 659)) then begin
        return 32;
    end
    if ((LVar0 >= 700) and (LVar0 <= 759)) then begin
        return 64;
    end
    if ((LVar0 >= 800) and (LVar0 <= 859)) then begin
        return 128;
    end
    if ((LVar0 >= 900) and (LVar0 <= 959)) then begin
        return 256;
    end
    if ((LVar0 >= 1000) and (LVar0 <= 1059)) then begin
        return 512;
    end
    if ((LVar0 >= 1100) and (LVar0 <= 1159)) then begin
        return 1024;
    end
    if ((LVar0 >= 1200) and (LVar0 <= 1259)) then begin
        return 2048;
    end
    if ((LVar0 >= 1300) and (LVar0 <= 1359)) then begin
        return 4096;
    end
    if ((LVar0 >= 1400) and (LVar0 <= 1459)) then begin
        return 8192;
    end
    if ((LVar0 >= 1500) and (LVar0 <= 1559)) then begin
        return 16384;
    end
    if ((LVar0 >= 1600) and (LVar0 <= 1659)) then begin
        return 32768;
    end
    if ((LVar0 >= 1700) and (LVar0 <= 1759)) then begin
        return 65536;
    end
    if ((LVar0 >= 1800) and (LVar0 <= 1859)) then begin
        return 131072;
    end
    if ((LVar0 >= 1900) and (LVar0 <= 1959)) then begin
        return 262144;
    end
    if ((LVar0 >= 2000) and (LVar0 <= 2059)) then begin
        return 524288;
    end
    if ((LVar0 >= 2100) and (LVar0 <= 2159)) then begin
        return 1048576;
    end
    if ((LVar0 >= 2200) and (LVar0 <= 2259)) then begin
        return 2097152;
    end
    if ((LVar0 >= 2300) and (LVar0 <= 2359)) then begin
        return 4194304;
    end
    if ((LVar0 >= 2400) and (LVar0 <= 2459)) then begin
        return 8388608;
    end
end

procedure start
begin
end

procedure use_p_proc
begin
    Traps_Roll := roll_vs_skill(source_obj, 11, 0);
    if (local_var(1) == 0) then begin
        if (is_success(Traps_Roll)) then begin
            script_overrides;
            set_local_var(2, 1);
            reg_anim_func(2, source_obj);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 204));
            end
            else begin
                display_msg(message_str(13, 205));
            end
        end
        else begin
            if (obj_is_locked(self_obj)) then begin
                script_overrides;
                display_msg(message_str(13, 203));
                call Damage_Critter();
            end
            else begin
                call Damage_Critter();
            end
        end
    end
    else begin
        if (obj_is_locked(self_obj)) then begin
            script_overrides;
            display_msg(message_str(13, 203));
        end
    end
    if (1 == 1) then begin
        last_source_obj := source_obj;
        add_timer_event(self_obj, 10, 1);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (0 == 0) then begin
        display_msg(message_str(13, 100));
    end
    else begin
        display_msg(message_str(13, 101));
    end
end

procedure description_p_proc
begin
    script_overrides;
    if ((local_var(0) == 0) and (local_var(1) == 0)) then begin
        call Look_Traps_And_Locks();
    end
    else begin
        if (local_var(1) == 0) then begin
            call Look_Traps();
        end
        else begin
            if (local_var(0) == 0) then begin
                call Look_Locks();
            end
            else begin
                if (0 == 0) then begin
                    display_msg(message_str(13, 100));
                end
                else begin
                    display_msg(message_str(13, 101));
                end
            end
        end
    end
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := action_being_used;
    if (LVar0 == 9) then begin
        if (local_var(0) == 0) then begin
            call Unlock_Lock();
        end
        else begin
            call Set_Lock();
        end
    end
    else begin
        if (LVar0 == 11) then begin
            if (local_var(1) == 0) then begin
                call Skill_Disarm_Traps();
            end
            else begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(13, 195));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(13, 200));
                end
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(obj_being_used_with);
    if (0 == 0) then begin
        if (LVar0 == 84) then begin
            if (local_var(0) == 0) then begin
                call Lockpick_Lock();
            end
            else begin
                call Set_Lockpick_Lock();
            end
        end
        else begin
            if (LVar0 == 410) then begin
                if (local_var(0) == 0) then begin
                    call Super_Lockpick_Lock();
                end
                else begin
                    call Super_Set_Lockpick_Lock();
                end
            end
        end
    end
    else begin
        if (0 == 1) then begin
            if (LVar0 == 77) then begin
                if (local_var(0) == 0) then begin
                    call Lockpick_Lock();
                end
                else begin
                    call Set_Lockpick_Lock();
                end
            end
            else begin
                if (LVar0 == 411) then begin
                    if (local_var(0) == 0) then begin
                        call Super_Lockpick_Lock();
                    end
                    else begin
                        call Super_Set_Lockpick_Lock();
                    end
                end
            end
        end
        else begin
            if (LVar0 == 20) then begin
                call Pry_Door();
            end
            else begin
                if ((LVar0 == 51) or (LVar0 == 85)) then begin
                    call Set_Trap();
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    if (0 == 0) then begin
        if (local_var(1) == 0) then begin
            set_local_var(1, 1);
            set_local_var(0, 1);
            LVar0 := random(5, 20);
            explosion(tile_num(self_obj), elevation(self_obj), LVar0);
            destroy_object(self_obj);
        end
        else begin
            set_local_var(1, 1);
            set_local_var(0, 1);
            destroy_object(self_obj);
        end
    end
    else begin
        if (0 == 1) then begin
            set_local_var(4, local_var(4) + 1);
            if (local_var(1) == 0) then begin
                set_local_var(0, 1);
                LVar0 := random(5, 20);
                explosion(tile_num(self_obj), elevation(self_obj), LVar0);
            end
            else begin
                if (local_var(4) > 2) then begin
                    set_local_var(1, 1);
                    set_local_var(0, 1);
                    destroy_object(self_obj);
                end
            end
        end
        else begin
            display_msg(message_str(13, 193));
        end
    end
end

procedure map_enter_p_proc
begin
    if (global_var(293) bwand 256) then begin
        set_local_var(3, 1);
        set_local_var(0, 1);
        set_local_var(1, 1);
    end
    if (local_var(3) == 0) then begin
        set_local_var(3, 1);
        set_local_var(0, 0);
        set_local_var(1, 0);
    end
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure map_update_p_proc
begin
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure Look_Traps_And_Locks
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 11, 0);
    LVar2 := roll_vs_skill(dude_obj, 9, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 102));
                        end
                        else begin
                            display_msg(message_str(13, 103));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 104));
                        end
                        else begin
                            display_msg(message_str(13, 105));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 106));
                        end
                        else begin
                            display_msg(message_str(13, 107));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 108));
                        end
                        else begin
                            display_msg(message_str(13, 109));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 110));
                        end
                        else begin
                            display_msg(message_str(13, 111));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 112));
                        end
                        else begin
                            display_msg(message_str(13, 113));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 114));
                        end
                        else begin
                            display_msg(message_str(13, 115));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 116));
                        end
                        else begin
                            display_msg(message_str(13, 117));
                        end
                    end
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 118));
                        end
                        else begin
                            display_msg(message_str(13, 119));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 120));
                        end
                        else begin
                            display_msg(message_str(13, 121));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 122));
                        end
                        else begin
                            display_msg(message_str(13, 123));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 124));
                        end
                        else begin
                            display_msg(message_str(13, 125));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 126));
                        end
                        else begin
                            display_msg(message_str(13, 127));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 128));
                        end
                        else begin
                            display_msg(message_str(13, 129));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 130));
                        end
                        else begin
                            display_msg(message_str(13, 131));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 132));
                        end
                        else begin
                            display_msg(message_str(13, 133));
                        end
                    end
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 134));
                        end
                        else begin
                            display_msg(message_str(13, 135));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 136));
                        end
                        else begin
                            display_msg(message_str(13, 137));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 138));
                        end
                        else begin
                            display_msg(message_str(13, 139));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 140));
                        end
                        else begin
                            display_msg(message_str(13, 141));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 142));
                        end
                        else begin
                            display_msg(message_str(13, 143));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 144));
                        end
                        else begin
                            display_msg(message_str(13, 145));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 146));
                        end
                        else begin
                            display_msg(message_str(13, 147));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 148));
                        end
                        else begin
                            display_msg(message_str(13, 149));
                        end
                    end
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 150));
                        end
                        else begin
                            display_msg(message_str(13, 151));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 152));
                        end
                        else begin
                            display_msg(message_str(13, 153));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 154));
                        end
                        else begin
                            display_msg(message_str(13, 155));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 156));
                        end
                        else begin
                            display_msg(message_str(13, 157));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 158));
                        end
                        else begin
                            display_msg(message_str(13, 159));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 160));
                        end
                        else begin
                            display_msg(message_str(13, 161));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 162));
                        end
                        else begin
                            display_msg(message_str(13, 163));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(13, 164));
                        end
                        else begin
                            display_msg(message_str(13, 165));
                        end
                    end
                end
            end
        end
    end
end

procedure Look_Traps
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 11, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 104));
                end
                else begin
                    display_msg(message_str(13, 108));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 112));
                end
                else begin
                    display_msg(message_str(13, 116));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 120));
                end
                else begin
                    display_msg(message_str(13, 124));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 128));
                end
                else begin
                    display_msg(message_str(13, 132));
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 136));
                end
                else begin
                    display_msg(message_str(13, 140));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 144));
                end
                else begin
                    display_msg(message_str(13, 148));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 152));
                end
                else begin
                    display_msg(message_str(13, 156));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 160));
                end
                else begin
                    display_msg(message_str(13, 164));
                end
            end
        end
    end
end

procedure Look_Locks
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 9, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 114));
                end
                else begin
                    display_msg(message_str(13, 115));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 116));
                end
                else begin
                    display_msg(message_str(13, 117));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 130));
                end
                else begin
                    display_msg(message_str(13, 131));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 132));
                end
                else begin
                    display_msg(message_str(13, 133));
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 146));
                end
                else begin
                    display_msg(message_str(13, 147));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 148));
                end
                else begin
                    display_msg(message_str(13, 149));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 162));
                end
                else begin
                    display_msg(message_str(13, 163));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(13, 164));
                end
                else begin
                    display_msg(message_str(13, 165));
                end
            end
        end
    end
end

procedure Skill_Disarm_Traps
begin
    Traps_Roll := roll_vs_skill(source_obj, 11, 0);
    call Disarm_Traps();
end

procedure Disarm_Traps
begin
    if (is_success(Traps_Roll)) then begin
        if (local_var(2) == 0) then begin
            set_local_var(2, 1);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 194));
            end
            else begin
                display_msg(message_str(13, 199));
            end
            if (local_var(6) == 0) then begin
                set_local_var(6, 1);
                give_exp_points(25);
                display_msg(message_str(14, 100) + 25 + message_str(14, 101));
            end
        end
        else begin
            set_local_var(1, 1);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 196));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(13, 201));
            end
        end
    end
    else begin
        if (is_critical(Traps_Roll)) then begin
            call Damage_Critter();
        end
        else begin
            if (local_var(2) == 0) then begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(13, 195));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(13, 200));
                end
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(13, 202));
            end
        end
    end
end

procedure Unlock_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -220);
    call Lockpick_Door();
end

procedure Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -220 + 20);
    call Lockpick_Door();
end

procedure Lockpick_Door
begin
    if (is_success(Locks_Roll)) then begin
        set_local_var(0, 1);
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(13, 170));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(13, 173));
        end
        if (local_var(5) == 0) then begin
            set_local_var(5, 1);
            give_exp_points(25);
            display_msg(message_str(14, 100) + 25 + message_str(14, 101));
        end
    end
    else begin
        if (is_critical(Locks_Roll)) then begin
            jam_lock(self_obj);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 171));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(13, 174));
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 172));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(13, 175));
            end
        end
    end
end

procedure Lock_Door
begin
    if (is_success(Locks_Roll)) then begin
        set_local_var(0, 0);
        obj_lock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(13, 189));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(13, 191));
        end
        if (local_var(5) == 0) then begin
            set_local_var(5, 1);
            give_exp_points(25);
            display_msg(message_str(14, 100) + 25 + message_str(14, 101));
        end
    end
    else begin
        if (source_obj == dude_obj) then begin
            display_msg(message_str(13, 190));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(13, 192));
        end
    end
end

procedure Set_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -220);
    call Lock_Door();
end

procedure Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -220 + 20);
    call Lock_Door();
end

procedure Set_Trap
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    Traps_Roll := roll_vs_skill(source_obj, 11, 0 - 10);
    LVar0 := obj_being_used_with;
    if (obj_is_open(self_obj)) then begin
        script_overrides;
        if (source_obj == dude_obj) then begin
            display_msg(message_str(13, 206));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(13, 207));
        end
    end
    else begin
        script_overrides;
        LVar1 := rm_mult_objs_from_inven(source_obj, LVar0, 1);
        if (is_success(Traps_Roll)) then begin
            set_local_var(1, 0);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 208));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(13, 210));
            end
        end
        else begin
            if (is_critical(Traps_Roll)) then begin
                call Damage_Critter();
            end
            else begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(13, 209));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(13, 211));
                end
            end
        end
    end
end

procedure Pry_Door
begin
    variable LVar0 := 0;
    LVar0 := do_check(source_obj, 0, 0);
    if (is_success(LVar0)) then begin
        set_local_var(0, 1);
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(13, 176));
        end
        else begin
            display_msg(message_str(13, 181));
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            critter_dmg(source_obj, 2, 0 bwor 256);
            if (source_obj == dude_obj) then begin
                if (2 == 1) then begin
                    display_msg(message_str(13, 177));
                end
                else begin
                    display_msg(message_str(13, 178) + 2 + message_str(13, 179));
                end
            end
            else begin
                if (get_critter_stat(source_obj, 34) == 0) then begin
                    if (2 == 1) then begin
                        display_msg(message_str(13, 182));
                    end
                    else begin
                        display_msg(message_str(13, 183) + 2 + message_str(13, 184));
                    end
                end
                else begin
                    if (2 == 1) then begin
                        display_msg(message_str(13, 186));
                    end
                    else begin
                        display_msg(message_str(13, 187) + 2 + message_str(13, 188));
                    end
                end
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_msg(message_str(13, 180));
            end
            else begin
                display_msg(message_str(13, 185));
            end
        end
    end
end

procedure Damage_Critter
begin
    variable LVar0 := 0;
    LVar0 := random(5, 20);
    if (source_obj == dude_obj) then begin
        critter_dmg(dude_obj, LVar0, 6 bwor 256);
        display_msg(message_str(13, 166) + LVar0 + message_str(13, 167));
    end
    else begin
        critter_dmg(source_obj, LVar0, 6 bwor 256);
        display_msg(obj_name(source_obj) + message_str(13, 168) + LVar0 + message_str(13, 169));
    end
    set_local_var(1, 1);
end

procedure Super_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -220 + 40);
    call Lockpick_Door();
end

procedure Super_Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -220 + 40);
    call Lock_Door();
end

procedure timed_event_p_proc
begin
    if (obj_is_open(self_obj)) then begin
        if (not(combat_is_initialized)) then begin
            if ((tile_distance_objs(self_obj, last_source_obj) < 2) and (critter_state(last_source_obj) != 1)) then begin
                add_timer_event(self_obj, 10, 1);
            end
            else begin
                obj_close(self_obj);
            end
        end
        else begin
            add_timer_event(self_obj, 10, 1);
        end
    end
end

