procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;
procedure float_line0;
procedure float_line1;
procedure float_line2;
procedure flee_dude;

variable initialized;

import variable removal_ptr;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, 1, 6, 46);
        if (local_var(0) == 0) then begin
            if (get_critter_stat(self_obj, 34) == 0) then begin
                set_local_var(0, random(100, 104));
            end
            else begin
                set_local_var(0, random(105, 109));
            end
        end
        if (global_var(129) == 2) then begin
            if (random(0, 1)) then begin
                kill_critter(self_obj, 59);
            end
            else begin
                kill_critter(self_obj, 57);
            end
        end
        initialized := 1;
    end
    else begin
        if (script_action == 12) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == 14) then begin
                call damage_p_proc();
            end
            else begin
                if (script_action == 18) then begin
                    call destroy_p_proc();
                end
                else begin
                    if (script_action == 21) then begin
                        call look_at_p_proc();
                    end
                    else begin
                        if (script_action == 11) then begin
                            call talk_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (global_var(129) == 2) then begin
        removal_ptr := self_obj;
    end
    if (local_var(1) or global_var(256)) then begin
        if (tile_distance_objs(dude_obj, self_obj) < 8) then begin
            call flee_dude();
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(1, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(256, 1);
    end
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(259, local_var(0)));
end

procedure talk_p_proc
begin
    script_overrides;
    if (local_var(1) or global_var(256)) then begin
        float_msg(self_obj, message_str(669, random(100, 105)), 0);
    end
    else begin
        if (global_var(133) == 1) then begin
            call float_line1();
        end
        else begin
            if (global_var(132) == 1) then begin
                call float_line2();
            end
            else begin
                call float_line0();
            end
        end
    end
end

procedure float_line0
begin
    float_msg(self_obj, message_str(259, random(110, 117)), 0);
end

procedure float_line1
begin
    float_msg(self_obj, message_str(259, random(118, 122)), 0);
end

procedure float_line2
begin
    float_msg(self_obj, message_str(259, random(123, 126)), 0);
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(tile_num(dude_obj), LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

