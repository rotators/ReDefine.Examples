variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure map_exit_p_proc;
procedure timed_event_p_proc;
procedure combat_p_proc;

import variable dog_object;
import variable brahmin_object;
import variable cage_door_obj;
import variable coup_door_obj;
import variable dog_that_can_see_dude;

variable last_update;
variable temp_dog;

procedure use_obj_on_p_proc;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure critter_p_proc
begin
    variable LVar0 := 0;
    if (cur_map_index == 20) then begin
        if ((global_var(115) < 0) == 0) then begin
            if (((local_var(3) bwand 2) != 0) == 0) then begin
                if (dog_object == 0) then begin
                    dog_object := self_obj;
                end
                else begin
                    if (brahmin_object == 0) then begin
                    end
                    else begin
                        if ((global_var(402) bwand 32768) != 0) then begin
                            if (tile_distance_objs(self_obj, brahmin_object) < tile_distance_objs(dog_object, brahmin_object)) then begin
                                brahmin_object := self_obj;
                            end
                        end
                        else begin
                            if (tile_distance_objs(self_obj, brahmin_object) > tile_distance_objs(dog_object, brahmin_object)) then begin
                                dog_object := self_obj;
                            end
                        end
                    end
                end
            end
            else begin
                if (self_obj == dog_object) then begin
                    dog_object := 0;
                end
            end
            if (brahmin_object != 0) then begin
                if (obj_can_see_obj(self_obj, brahmin_object)) then begin
                    attack_complex(brahmin_object, 0, 1, 0, 0, 30000, 0, 0);
                end
                else begin
                    if ((tile_num(self_obj) != tile_num(brahmin_object)) and (tile_num(brahmin_object) != 0)) then begin
                        if ((dest_tile == tile_num(brahmin_object)) and (step_tile < 0)) then begin
                            step_tile := step_tile + 1;
                        end
                        else begin
                            if (anim_busy(self_obj) == 0) then begin
                                dest_tile := tile_num(brahmin_object);
                                step_tile := tile_num(brahmin_object);
                                animate_move_obj_to_tile(self_obj, step_tile, 1);
                                while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), tile_num(brahmin_object)) >= tile_distance(step_tile, tile_num(brahmin_object)))) do begin
                                    step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), (1 % tile_distance(step_tile, tile_num(self_obj))) + 1);
                                    animate_move_obj_to_tile(self_obj, step_tile, 1);
                                end
                                if (anim_busy(self_obj) == 0) then begin
                                    if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                        if (anim_busy(self_obj) == 0) then begin
                                            global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                                debug_msg("flee loop: rot == " + global_temp);
                                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                                global_temp := (global_temp + 1) % 6;
                                            end
                                        end
                                    end
                                    else begin
                                        step_tile := -10;
                                    end
                                end
                            end
                            else begin
                                if (tile_distance(tile_num(self_obj), tile_num(brahmin_object)) < tile_distance(dest_tile, tile_num(brahmin_object))) then begin
                                    reg_anim_func(2, self_obj);
                                end
                            end
                        end
                    end
                end
            end
        end
        else begin
            if (obj_can_see_obj(self_obj, dude_obj)) then begin
                if (critter_is_fleeing(self_obj)) then begin
                    if (anim_busy(self_obj) == 0) then begin
                        if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                            if (anim_busy(self_obj) == 0) then begin
                                global_temp := rotation_to_tile(tile_num(dude_obj), tile_num(self_obj));
                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                global_temp := (global_temp + 1) % 6;
                                while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)))) do begin
                                    debug_msg("flee loop: rot == " + global_temp);
                                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                    global_temp := (global_temp + 1) % 6;
                                end
                            end
                        end
                    end
                end
                else begin
                    attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
                end
            end
            else begin
                if ((tile_num(self_obj) != local_var(0)) and (local_var(0) != 0)) then begin
                    if ((dest_tile == local_var(0)) and (step_tile < 0)) then begin
                        step_tile := step_tile + 1;
                    end
                    else begin
                        if (anim_busy(self_obj) == 0) then begin
                            dest_tile := local_var(0);
                            step_tile := local_var(0);
                            animate_move_obj_to_tile(self_obj, step_tile, 1);
                            while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), local_var(0)) >= tile_distance(step_tile, local_var(0)))) do begin
                                step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), (1 % tile_distance(step_tile, tile_num(self_obj))) + 1);
                                animate_move_obj_to_tile(self_obj, step_tile, 1);
                            end
                            if (anim_busy(self_obj) == 0) then begin
                                if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                    if (anim_busy(self_obj) == 0) then begin
                                        global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                        global_temp := (global_temp + 1) % 6;
                                        while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                            debug_msg("flee loop: rot == " + global_temp);
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                        end
                                    end
                                end
                                else begin
                                    step_tile := -10;
                                end
                            end
                        end
                        else begin
                            if (tile_distance(tile_num(self_obj), local_var(0)) < tile_distance(dest_tile, local_var(0))) then begin
                                reg_anim_func(2, self_obj);
                            end
                        end
                    end
                end
            end
        end
    end
    else begin
        if (obj_can_see_obj(self_obj, dude_obj) or obj_can_hear_obj(self_obj, dude_obj)) then begin
            if (dog_that_can_see_dude == 0) then begin
                dog_that_can_see_dude := self_obj;
            end
        end
        else begin
            if (dog_that_can_see_dude == self_obj) then begin
                dog_that_can_see_dude := 0;
            end
        end
        if (tile_in_tile_rect(12335, 12313, 16535, 16513, tile_num(dude_obj))) then begin
            if ((elevation(self_obj) != elevation(dude_obj)) or (has_trait(1, self_obj, 666) == 0)) then begin
                destroy_object(self_obj);
            end
            else begin
                if (local_var(1) != 0) then begin
                    if ((game_time > local_var(1)) or obj_is_open(coup_door_obj)) then begin
                        if (critter_is_fleeing(self_obj)) then begin
                            if (anim_busy(self_obj) == 0) then begin
                                if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                                    if (anim_busy(self_obj) == 0) then begin
                                        global_temp := rotation_to_tile(tile_num(dude_obj), tile_num(self_obj));
                                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                        global_temp := (global_temp + 1) % 6;
                                        while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)))) do begin
                                            debug_msg("flee loop: rot == " + global_temp);
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                            global_temp := (global_temp + 1) % 6;
                                        end
                                    end
                                end
                            end
                        end
                        else begin
                            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
                        end
                    end
                end
                else begin
                    if (tile_distance_objs(self_obj, dude_obj) > 1) then begin
                        LVar0 := tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), 15127), random(1, 2));
                        if (tile_in_tile_rect(12335, 12313, 16535, 16513, LVar0)) then begin
                            animate_move_obj_to_tile(self_obj, LVar0, 1 bwor 16);
                        end
                    end
                    if (((global_var(297) bwand 4) != 0) == 0) then begin
                        set_global_var(297, global_var(297) bwor 4);
                        display_msg(message_str(206, 210));
                        if (random(0, 2) != 1) then begin
                            play_sfx("maddogaq");
                        end
                    end
                    set_local_var(1, game_time + (15 * 10));
                end
            end
        end
        else begin
            if (local_var(1) != 0) then begin
                set_local_var(1, 0);
            end
        end
    end
end

procedure pickup_p_proc
begin
end

procedure talk_p_proc
begin
end

procedure destroy_p_proc
begin
    if (cur_map_index == 20) then begin
        if (source_obj == dude_obj) then begin
            set_global_var(4, global_var(4) + 1);
            if (metarule(51, self_obj) == 2) then begin
                if (source_obj == dude_obj) then begin
                    set_global_var(2, 0);
                    set_global_var(1, global_var(1) + 1);
                    set_global_var(0, global_var(0) + -15);
                    debug_msg("Player gains " + -15 + " Karma Points.");
                    set_global_var(37, 0);
                    set_global_var(38, 0);
                    set_global_var(39, 0);
                    set_global_var(40, 0);
                    set_global_var(41, 0);
                    set_global_var(42, 0);
                    set_global_var(43, 0);
                    set_global_var(44, 0);
                    set_global_var(45, 0);
                    if (global_var(0) >= 1000) then begin
                        set_global_var(37, 1);
                    end
                    else begin
                        if (global_var(0) >= 750) then begin
                            set_global_var(38, 1);
                        end
                        else begin
                            if (global_var(0) >= 500) then begin
                                set_global_var(39, 1);
                            end
                            else begin
                                if (global_var(0) >= 250) then begin
                                    set_global_var(40, 1);
                                end
                                else begin
                                    if (global_var(0) > -250) then begin
                                        set_global_var(41, 1);
                                    end
                                    else begin
                                        if (global_var(0) > -500) then begin
                                            set_global_var(42, 1);
                                        end
                                        else begin
                                            if (global_var(0) > -750) then begin
                                                set_global_var(43, 1);
                                            end
                                            else begin
                                                if (global_var(0) > -1000) then begin
                                                    set_global_var(44, 1);
                                                end
                                                else begin
                                                    set_global_var(45, 1);
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                    set_global_var(52, global_var(52) + -8);
                    debug_msg("Added " + -8 + " to Town Rep");
                end
            end
            if (((global_var(4) + global_var(5)) >= 25) and ((global_var(5) > (2 * global_var(4))) or (global_var(3) == 1))) then begin
                set_global_var(3, 1);
                set_global_var(2, 0);
            end
            if (((global_var(4) + global_var(5)) >= 25) and ((global_var(4) > (3 * global_var(5))) or (global_var(2) == 1)) and (global_var(1) == 0)) then begin
                set_global_var(2, 1);
                set_global_var(3, 0);
            end
            set_global_var(0, global_var(0) + 5);
            debug_msg("Player gains " + 5 + " Karma Points.");
            set_global_var(37, 0);
            set_global_var(38, 0);
            set_global_var(39, 0);
            set_global_var(40, 0);
            set_global_var(41, 0);
            set_global_var(42, 0);
            set_global_var(43, 0);
            set_global_var(44, 0);
            set_global_var(45, 0);
            if (global_var(0) >= 1000) then begin
                set_global_var(37, 1);
            end
            else begin
                if (global_var(0) >= 750) then begin
                    set_global_var(38, 1);
                end
                else begin
                    if (global_var(0) >= 500) then begin
                        set_global_var(39, 1);
                    end
                    else begin
                        if (global_var(0) >= 250) then begin
                            set_global_var(40, 1);
                        end
                        else begin
                            if (global_var(0) > -250) then begin
                                set_global_var(41, 1);
                            end
                            else begin
                                if (global_var(0) > -500) then begin
                                    set_global_var(42, 1);
                                end
                                else begin
                                    if (global_var(0) > -750) then begin
                                        set_global_var(43, 1);
                                    end
                                    else begin
                                        if (global_var(0) > -1000) then begin
                                            set_global_var(44, 1);
                                        end
                                        else begin
                                            set_global_var(45, 1);
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            set_global_var(52, global_var(52) + 2);
            debug_msg("Added " + 2 + " to Town Rep");
        end
        if (dog_object == self_obj) then begin
            dog_object := 0;
        end
        set_global_var(116, global_var(116) - 1);
        if (global_var(116) <= 0) then begin
            set_global_var(116, -1);
        end
        debug_msg("current dogs status == " + global_var(116));
    end
    else begin
        if (dog_that_can_see_dude == self_obj) then begin
            dog_that_can_see_dude := 0;
        end
    end
end

procedure look_at_p_proc
begin
    display_msg(message_str(206, 100 + (cur_map_index == 20)));
end

procedure description_p_proc
begin
    display_msg(message_str(206, 120 + (cur_map_index == 20)));
end

procedure use_skill_on_p_proc
begin
    if (action_being_used == 10) then begin
        script_overrides;
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(3, local_var(3) bwor 2);
    end
end

procedure map_enter_p_proc
begin
    if ((cur_map_index == 19) and (elevation(self_obj) != ((global_var(297) bwand 1) != 0))) then begin
        move_to(self_obj, tile_num(self_obj), (global_var(297) bwand 1) != 0);
    end
    critter_add_trait(self_obj, 1, 5, 186);
    if (cur_map_index == 20) then begin
        critter_add_trait(self_obj, 1, 6, 33);
        last_update := game_time;
        if (obj_pid(self_obj) != 16777225) then begin
            if (local_var(0) == 0) then begin
                set_local_var(0, tile_num(self_obj));
                set_global_var(116, global_var(116) + 1);
            end
        end
        else begin
            anim(self_obj, 1000, random(0, 5));
        end
    end
    else begin
        critter_add_trait(self_obj, 1, 6, 28);
        if (local_var(0) == 0) then begin
            set_local_var(0, tile_num(self_obj));
            set_local_var(2, tile_num(self_obj));
            add_timer_event(self_obj, game_ticks(random(2, 3)), 1);
            add_timer_event(self_obj, game_ticks(random(15, 30)), 2);
        end
        else begin
            if (metarule(22, 0) == 0) then begin
                if (tile_num(self_obj) != local_var(2)) then begin
                    critter_attempt_placement(self_obj, local_var(2), 0);
                end
            end
        end
    end
end

procedure map_update_p_proc
begin
    if (cur_map_index == 20) then begin
        if (((game_time - last_update) > (15 * (60 * 10))) and (last_update != 0)) then begin
            critter_attempt_placement(self_obj, local_var(0), elevation(dude_obj));
            if (local_var(1) and ((global_var(115) < 0) == 0)) then begin
                if (((global_var(116) < 0) == 0) and (global_var(99) != 0)) then begin
                    if ((global_var(115) < 0) == 0) then begin
                        set_global_var(115, -1);
                    end
                    if (cur_map_index == 20) then begin
                        kill_critter_type(16777226, random(61, 62));
                        if (map_var(0) == 0) then begin
                            if (global_var(115) < 0) then begin
                                set_map_var(0, random(0, global_var(116) / 2));
                                while (map_var(0) > 0) do begin
                                    temp_dog := create_object_sid(16777225, 0, 0, 206);
                                    critter_attempt_placement(temp_dog, tile_num_in_direction(16915, random(0, 5), random(2, 10)), 0);
                                    set_map_var(0, map_var(0) - 1);
                                end
                                kill_critter_type(16777225, random(61, 62));
                                set_map_var(0, 1);
                            end
                        end
                    end
                end
            end
        end
        last_update := game_time;
    end
    else begin
    end
end

procedure map_exit_p_proc
begin
    if (cur_map_index == 20) then begin
        critter_attempt_placement(self_obj, local_var(0), elevation(dude_obj));
    end
    else begin
        if (cage_door_obj != 0) then begin
            if (obj_is_open(cage_door_obj)) then begin
                destroy_object(self_obj);
            end
        end
    end
end

procedure timed_event_p_proc
begin
    variable LVar0 := 0;
    if (fixed_param == 1) then begin
        if (combat_is_initialized == 0) then begin
            if (obj_can_see_obj(self_obj, dude_obj)) then begin
                if (tile_in_tile_rect(12335, 12313, 16535, 16513, tile_num(dude_obj))) then begin
                    if (anim_busy(self_obj) == 0) then begin
                        if (tile_distance_objs(self_obj, dude_obj) <= 3) then begin
                            anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), tile_num(dude_obj)));
                        end
                    end
                    float_msg(self_obj, message_str(206, random(200, 202)), 8 + ((2 - 8) * has_trait(0, dude_obj, 22)));
                end
            end
        end
        add_timer_event(self_obj, game_ticks(random(2, 3)), 1);
    end
    if (fixed_param == 2) then begin
        if (combat_is_initialized == 0) then begin
            debug_msg("telling dog to switch tile");
            if ((anim_busy(self_obj) == 0) and (tile_in_tile_rect(12335, 12313, 16535, 16513, tile_num(dude_obj)) == 0)) then begin
                if (tile_num(self_obj) == local_var(0)) then begin
                    LVar0 := tile_num_in_direction(local_var(0), random(0, 5), random(3, 10));
                    if (tile_in_tile_rect(12335, 12313, 16535, 16513, LVar0)) then begin
                        animate_move_obj_to_tile(self_obj, LVar0, 0);
                    end
                end
                else begin
                    animate_move_obj_to_tile(self_obj, local_var(0), 0);
                end
            end
        end
        add_timer_event(self_obj, game_ticks(random(5, 15)), 2);
    end
end

procedure combat_p_proc
begin
    if (((local_var(3) bwand 2) != 0) == 0) then begin
        if (dog_object == 0) then begin
            dog_object := self_obj;
        end
        else begin
            if (brahmin_object == 0) then begin
            end
            else begin
                if ((global_var(402) bwand 32768) != 0) then begin
                    if (tile_distance_objs(self_obj, brahmin_object) < tile_distance_objs(dog_object, brahmin_object)) then begin
                        brahmin_object := self_obj;
                    end
                end
                else begin
                    if (tile_distance_objs(self_obj, brahmin_object) > tile_distance_objs(dog_object, brahmin_object)) then begin
                        dog_object := self_obj;
                    end
                end
            end
        end
    end
    else begin
        if (self_obj == dog_object) then begin
            dog_object := 0;
        end
    end
    if (((local_var(3) bwand 2) != 0) == 0) then begin
        if (cur_map_index == 20) then begin
            if (brahmin_object != 0) then begin
                set_local_var(3, local_var(3) bwor 512);
                attack_complex(brahmin_object, 0, 1, 0, 0, 30000, 0, 0);
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
end

