procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

variable hostile;
variable sequence;
variable iseeu;
variable waiting;
variable clock := 4;
variable initialized;

import variable Lt_ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, 1, 6, 34);
        critter_add_trait(self_obj, 1, 5, 69);
        initialized := 1;
    end
    if (script_action == 12) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == 18) then begin
            call destroy_p_proc();
        end
        else begin
            if (script_action == 21) then begin
                call look_at_p_proc();
            end
            else begin
                if (script_action == 4) then begin
                    call pickup_p_proc();
                end
                else begin
                    if (script_action == 11) then begin
                        call talk_p_proc();
                    end
                    else begin
                        if (script_action == 22) then begin
                            call timed_event_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (tile_distance_objs(dude_obj, self_obj) < 12) then begin
        if (hostile) then begin
            hostile := 0;
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
        if (global_var(57) < 1) then begin
            iseeu := 1;
        end
        if ((iseeu == 1) and (waiting == 0) and (Lt_ptr != 0) and (local_var(4) == 0)) then begin
            waiting := 1;
            add_timer_event(self_obj, game_ticks(clock), 1);
        end
    end
end

procedure destroy_p_proc
begin
    sequence := 10;
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(160, global_var(160) + 1);
        if ((global_var(160) % 6) == 0) then begin
            set_global_var(155, global_var(155) + 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(435, 100));
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure talk_p_proc
begin
    float_msg(self_obj, message_str(435, 101), 0);
end

procedure timed_event_p_proc
begin
    waiting := 0;
    if (sequence == 0) then begin
        float_msg(Lt_ptr, message_str(435, 102), 0);
    end
    else begin
        if (sequence == 1) then begin
            float_msg(self_obj, message_str(435, 103), 0);
        end
        else begin
            if (sequence == 2) then begin
                float_msg(Lt_ptr, message_str(435, 104), 0);
            end
            else begin
                if (sequence == 3) then begin
                    float_msg(self_obj, message_str(435, 105), 0);
                end
                else begin
                    if (sequence == 4) then begin
                        float_msg(Lt_ptr, message_str(435, 106), 0);
                    end
                    else begin
                        if (sequence == 5) then begin
                            float_msg(self_obj, message_str(435, 107), 0);
                            clock := 6;
                        end
                        else begin
                            if (sequence == 6) then begin
                                float_msg(Lt_ptr, message_str(435, 108), 0);
                                clock := 4;
                            end
                            else begin
                                if (sequence == 7) then begin
                                    float_msg(self_obj, message_str(435, 109), 0);
                                end
                                else begin
                                    if (sequence == 8) then begin
                                        float_msg(Lt_ptr, message_str(435, 110), 0);
                                    end
                                    else begin
                                        if (sequence == 9) then begin
                                            float_msg(self_obj, message_str(435, 111), 0);
                                            if (not(local_var(4))) then begin
                                                give_exp_points(1000);
                                                display_msg(message_str(435, 112));
                                                set_local_var(4, 1);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    sequence := sequence + 1;
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

