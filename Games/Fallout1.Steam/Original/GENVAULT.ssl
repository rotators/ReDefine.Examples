procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure Vault00;
procedure Vault00a;
procedure Vault00b;
procedure Vault00c;
procedure Vault01;
procedure Vault02;
procedure Vault03;
procedure Vault04;
procedure Vault05;
procedure Vault06;
procedure Vault07;
procedure Vault08;
procedure Vault09;
procedure Vault10;
procedure Vault11;
procedure flee_dude;
procedure get_rations;
procedure set_ration_tile;
procedure set_sleep_tile;
procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable gword1;
variable gword2;
variable PICK;
variable hostile;
variable sleeping_disabled;
variable ration_tile;

import variable recipient;
import variable WtrGrd_ptr;
import variable getting_ration;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (script_action == 12) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == 14) then begin
            call damage_p_proc();
        end
        else begin
            if (script_action == 18) then begin
                call destroy_p_proc();
            end
            else begin
                if (script_action == 15) then begin
                    call map_enter_p_proc();
                end
                else begin
                    if (script_action == 4) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == 11) then begin
                            call talk_p_proc();
                        end
                        else begin
                            if (script_action == 22) then begin
                                call timed_event_p_proc();
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    else begin
        if (local_var(7) and (tile_distance_objs(self_obj, dude_obj) < 8)) then begin
            call flee_dude();
        end
        if (global_var(101) == 0) then begin
            if (local_var(5) == 0) then begin
                if ((elevation(self_obj) == elevation(WtrGrd_ptr)) and (elevation(self_obj) == elevation(dude_obj))) then begin
                    if ((game_time_hour > 700) and (game_time_hour < 900)) then begin
                        call get_rations();
                    end
                end
            end
        end
        if (not((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
            sleeping_disabled := 0;
            set_local_var(5, 0);
        end
        if (sleeping_disabled == 0) then begin
            call sleeping();
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(7, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
    if (source_obj == dude_obj) then begin
        set_global_var(261, 1);
    end
end

procedure map_enter_p_proc
begin
    if (local_var(4) == 0) then begin
        set_local_var(4, tile_num(self_obj));
    end
    home_tile := local_var(4);
    critter_add_trait(self_obj, 1, 6, 1);
    call set_ration_tile();
    call set_sleep_tile();
    sleep_time := random(1900, 1930);
    wake_time := sleep_time - 1300;
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure talk_p_proc
begin
    call get_reaction();
    if (local_var(6)) then begin
        if (random(0, 1)) then begin
            float_msg(self_obj, message_str(185, 166), 0);
        end
        else begin
            display_msg(message_str(185, 167));
        end
    end
    else begin
        if (local_var(7) or global_var(261)) then begin
            call Vault00();
        end
        else begin
            if ((global_var(101) != 0) and (global_var(101) != 1)) then begin
                call Vault01();
            end
            else begin
                if ((obj_item_subtype(critter_inven_obj(dude_obj, 1)) == 3) or (obj_item_subtype(critter_inven_obj(dude_obj, 2)) == 3)) then begin
                    call Vault02();
                end
                else begin
                    if (global_var(10) < 80) then begin
                        call Vault00b();
                    end
                    else begin
                        if (global_var(10) < 40) then begin
                            call Vault00c();
                        end
                        else begin
                            call Vault00a();
                        end
                    end
                end
            end
        end
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(WtrGrd_ptr), 2, 1), 0);
        add_timer_event(self_obj, game_ticks(3), 2);
    end
    else begin
        if (fixed_param == 2) then begin
            getting_ration := 1;
            if (random(0, 1)) then begin
                float_msg(self_obj, message_str(185, 165), 0);
            end
            add_timer_event(self_obj, game_ticks(3), 3);
        end
        else begin
            if (fixed_param == 3) then begin
                recipient := 0;
                animate_move_obj_to_tile(self_obj, home_tile, 0);
            end
        end
    end
end

procedure Vault00
begin
    float_msg(self_obj, message_str(185, random(101, 104)), 0);
end

procedure Vault00a
begin
    if (local_var(1) == 3) then begin
        call Vault03();
    end
    else begin
        if (local_var(1) == 2) then begin
            call Vault06();
        end
        else begin
            call Vault09();
        end
    end
end

procedure Vault00b
begin
    if (local_var(1) == 3) then begin
        call Vault04();
    end
    else begin
        if (local_var(1) == 2) then begin
            call Vault07();
        end
        else begin
            call Vault10();
        end
    end
end

procedure Vault00c
begin
    if (local_var(1) == 3) then begin
        call Vault05();
    end
    else begin
        if (local_var(1) == 2) then begin
            call Vault08();
        end
        else begin
            call Vault11();
        end
    end
end

procedure Vault01
begin
    PICK := random(1, 5);
    if (PICK == 1) then begin
        float_msg(self_obj, message_str(185, 109), 0);
    end
    else begin
        if (PICK == 2) then begin
            float_msg(self_obj, message_str(185, 110), 0);
        end
        else begin
            if (PICK == 3) then begin
                float_msg(self_obj, message_str(185, 111), 0);
            end
            else begin
                if (PICK == 4) then begin
                    if (get_critter_stat(dude_obj, 34) == 0) then begin
                        float_msg(self_obj, message_str(185, 112), 0);
                    end
                    else begin
                        float_msg(self_obj, message_str(185, 113), 0);
                    end
                end
                else begin
                    if (PICK == 5) then begin
                        if (get_critter_stat(dude_obj, 34) == 0) then begin
                            float_msg(self_obj, message_str(185, 114), 0);
                        end
                        else begin
                            float_msg(self_obj, message_str(185, 115), 0);
                        end
                    end
                end
            end
        end
    end
end

procedure Vault02
begin
    call DownReact();
    float_msg(self_obj, message_str(185, random(116, 119)), 0);
end

procedure Vault03
begin
    PICK := random(1, 4);
    if (PICK == 1) then begin
        float_msg(self_obj, message_str(185, 120), 0);
    end
    else begin
        if (PICK == 2) then begin
            float_msg(self_obj, message_str(185, 121), 0);
        end
        else begin
            if (PICK == 3) then begin
                float_msg(self_obj, message_str(185, 122), 0);
            end
            else begin
                if (PICK == 4) then begin
                    float_msg(self_obj, message_str(185, 123) + proto_data(obj_pid(dude_obj), 1) + message_str(0, 124), 0);
                end
            end
        end
    end
end

procedure Vault04
begin
    float_msg(self_obj, message_str(185, random(125, 128)), 0);
end

procedure Vault05
begin
    float_msg(self_obj, message_str(185, random(129, 133)), 0);
end

procedure Vault06
begin
    PICK := random(1, 5);
    if (PICK == 1) then begin
        float_msg(self_obj, message_str(185, 134), 0);
    end
    else begin
        if (PICK == 2) then begin
            float_msg(self_obj, message_str(185, 135) + proto_data(obj_pid(dude_obj), 1) + message_str(185, 136), 0);
        end
        else begin
            if (PICK == 3) then begin
                float_msg(self_obj, message_str(185, 137), 0);
            end
            else begin
                if (PICK == 4) then begin
                    float_msg(self_obj, message_str(185, 138), 0);
                end
                else begin
                    if (PICK == 5) then begin
                        float_msg(self_obj, message_str(185, 139), 0);
                    end
                end
            end
        end
    end
end

procedure Vault07
begin
    float_msg(self_obj, message_str(185, random(140, 144)), 0);
end

procedure Vault08
begin
    float_msg(self_obj, message_str(185, random(145, 149)), 0);
end

procedure Vault09
begin
    PICK := random(1, 5);
    if (PICK == 1) then begin
        float_msg(self_obj, message_str(185, 150) + proto_data(obj_pid(dude_obj), 1) + message_str(185, 151), 0);
    end
    else begin
        if (PICK >= 4) then begin
            display_msg(message_str(185, 150 + PICK));
        end
        else begin
            float_msg(self_obj, message_str(185, 150 + PICK), 0);
        end
    end
end

procedure Vault10
begin
    PICK := random(1, 5);
    if (PICK == 5) then begin
        display_msg(message_str(185, 160));
    end
    else begin
        float_msg(self_obj, message_str(185, 155 + PICK), 0);
    end
end

procedure Vault11
begin
    PICK := random(1, 5);
    if (PICK == 1) then begin
        float_msg(self_obj, message_str(185, 161), 0);
    end
    else begin
        if (PICK == 2) then begin
            float_msg(self_obj, message_str(185, 162), 0);
        end
        else begin
            if (PICK == 3) then begin
                display_msg(message_str(185, 163));
            end
            else begin
                if (PICK == 4) then begin
                    display_msg(message_str(185, 164));
                end
            end
        end
    end
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(tile_num(dude_obj), LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure get_rations
begin
    sleeping_disabled := 1;
    if (tile_num(self_obj) != ration_tile) then begin
        if (random(0, 1)) then begin
            animate_move_obj_to_tile(self_obj, ration_tile, 0);
        end
        else begin
            animate_move_obj_to_tile(self_obj, ration_tile, 1);
        end
    end
    else begin
        if (not(recipient)) then begin
            recipient := self_obj;
            add_timer_event(self_obj, game_ticks(3), 1);
            set_local_var(5, 1);
            sleeping_disabled := 0;
        end
    end
end

procedure set_ration_tile
begin
    if (elevation(self_obj) == 0) then begin
        ration_tile := tile_num_in_direction(14704, random(0, 5), random(1, 2));
    end
    else begin
        if (elevation(self_obj) == 1) then begin
            ration_tile := tile_num_in_direction(21895, random(0, 5), random(1, 2));
        end
        else begin
            if (elevation(self_obj) == 2) then begin
                ration_tile := tile_num_in_direction(22513, random(0, 5), random(1, 2));
            end
        end
    end
end

procedure set_sleep_tile
begin
    if (elevation(self_obj) == 0) then begin
        sleep_tile := 7000;
    end
    else begin
        if (elevation(self_obj) == 1) then begin
            sleep_tile := home_tile;
        end
        else begin
            if (elevation(self_obj) == 2) then begin
                sleep_tile := 7000;
            end
        end
    end
end

procedure sleeping
begin
    if (local_var(6) == 1) then begin
        if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
            if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
                if (tile_num(self_obj) != home_tile) then begin
                    animate_move_obj_to_tile(self_obj, home_tile, 0);
                end
                else begin
                    set_local_var(6, 0);
                end
            end
            else begin
                move_to(self_obj, home_tile, elevation(self_obj));
                if (tile_num(self_obj) == home_tile) then begin
                    set_local_var(6, 0);
                end
            end
        end
    end
    else begin
        if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
            if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    animate_move_obj_to_tile(self_obj, self_obj, 0);
                end
                else begin
                    set_local_var(6, 1);
                end
            end
            else begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    move_to(self_obj, sleep_tile, elevation(self_obj));
                end
                else begin
                    set_local_var(6, 1);
                end
            end
        end
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

