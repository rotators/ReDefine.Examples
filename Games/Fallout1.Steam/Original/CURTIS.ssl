procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure Curtis01;
procedure Curtis02;
procedure Curtis03;
procedure Curtis03a;
procedure Curtis04;
procedure Curtis05;
procedure Curtis06;
procedure Curtis07;
procedure Curtis08;
procedure CurtisEnd;
procedure flee_dude;
procedure movement;
procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable initialized;
variable new_tile;
variable round_counter;
variable hostile;


procedure start
begin
    if (script_action == 13) then begin
        call combat_p_proc();
    end
    else begin
        if (script_action == 12) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == 18) then begin
                call destroy_p_proc();
            end
            else begin
                if (script_action == 21) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == 15) then begin
                        call map_enter_p_proc();
                    end
                    else begin
                        if (script_action == 4) then begin
                            call pickup_p_proc();
                        end
                        else begin
                            if (script_action == 11) then begin
                                call talk_p_proc();
                            end
                            else begin
                                if (script_action == 22) then begin
                                    call timed_event_p_proc();
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure combat_p_proc
begin
    if (fixed_param == 4) then begin
        round_counter := round_counter + 1;
    end
    if (round_counter > 3) then begin
        if (global_var(246) == 0) then begin
            set_global_var(155, global_var(155) - 5);
            set_global_var(246, 1);
        end
    end
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (global_var(246) == 1) then begin
            hostile := 1;
        end
    end
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    if (local_var(5) == 1) then begin
        if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
            call flee_dude();
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(5, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(236, 100));
end

procedure map_enter_p_proc
begin
    home_tile := 22713;
    wake_time := 615;
    sleep_time := 2115;
    sleep_tile := 27702;
    critter_add_trait(self_obj, 1, 6, 2);
    critter_add_trait(self_obj, 1, 5, 6);
    add_timer_event(self_obj, game_ticks(5), 1);
end

procedure pickup_p_proc
begin
    set_local_var(5, 1);
end

procedure talk_p_proc
begin
    if ((local_var(5) == 1) or (global_var(246) == 1)) then begin
        float_msg(self_obj, message_str(669, random(100, 105)), 2);
    end
    else begin
        start_gdialog(236, self_obj, 4, -1, -1);
        gsay_start;
        if (local_var(3) == 1) then begin
            call Curtis02();
        end
        else begin
            call Curtis01();
        end
        gsay_end;
        end_dialogue;
    end
    if (local_var(2) == 1) then begin
        set_local_var(2, 2);
        give_exp_points(500);
        display_msg(message_str(236, 200));
    end
end

procedure timed_event_p_proc
begin
    if (local_var(4) == 0) then begin
        if (random(0, 3) == 3) then begin
            anim(self_obj, 10, 0);
        end
        else begin
            call movement();
        end
    end
    add_timer_event(self_obj, game_ticks(random(3, 7)), 1);
end

procedure Curtis01
begin
    gsay_reply(236, 101);
    giq_option(4, 236, 102, Curtis03, 50);
    giq_option(-3, 236, 103, CurtisEnd, 50);
end

procedure Curtis02
begin
    gsay_reply(236, 104);
    giq_option(0, 634, 106, Curtis03, 50);
end

procedure Curtis03
begin
    gsay_reply(236, 105);
    call Curtis03a();
end

procedure Curtis03a
begin
    if (local_var(3) == 0) then begin
        gsay_option(236, 106, Curtis04, 50);
    end
    if (local_var(0) == 0) then begin
        giq_option(5, 236, 107, Curtis05, 50);
    end
    if (local_var(1) == 0) then begin
        giq_option(4, 236, 108, Curtis06, 50);
    end
    giq_option(4, 236, 109, CurtisEnd, 50);
end

procedure Curtis04
begin
    gsay_reply(236, 110);
    set_local_var(3, 1);
    call Curtis03a();
end

procedure Curtis05
begin
    set_local_var(0, 1);
    gsay_reply(236, 111);
    call Curtis03a();
end

procedure Curtis06
begin
    gsay_reply(236, 112);
    giq_option(4, 236, 113, Curtis03, 50);
    if ((has_skill(dude_obj, 12) >= 40) and (local_var(1) == 0)) then begin
        giq_option(5, 236, 114, Curtis07, 50);
    end
end

procedure Curtis07
begin
    gsay_reply(236, 115);
    giq_option(4, 236, 116, CurtisEnd, 50);
    giq_option(5, 236, 117, Curtis08, 50);
end

procedure Curtis08
begin
    gsay_message(236, 118, 50);
    set_global_var(155, global_var(155) + 2);
    set_local_var(1, 1);
    set_local_var(2, 1);
end

procedure CurtisEnd
begin
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(tile_num(dude_obj), LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure movement
begin
    variable LVar0 := 0;
    LVar0 := random(0, 5);
    new_tile := tile_num_in_direction(tile_num(self_obj), LVar0, 1);
    if (tile_distance(home_tile, new_tile) < 6) then begin
        animate_move_obj_to_tile(self_obj, new_tile, 0);
    end
end

procedure sleeping
begin
    if (local_var(4) == 1) then begin
        if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
            if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
                if (tile_num(self_obj) != home_tile) then begin
                    animate_move_obj_to_tile(self_obj, home_tile, 0);
                end
                else begin
                    set_local_var(4, 0);
                end
            end
            else begin
                move_to(self_obj, home_tile, elevation(self_obj));
                if (tile_num(self_obj) == home_tile) then begin
                    set_local_var(4, 0);
                end
            end
        end
    end
    else begin
        if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
            if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    animate_move_obj_to_tile(self_obj, self_obj, 0);
                end
                else begin
                    set_local_var(4, 1);
                end
            end
            else begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    move_to(self_obj, sleep_tile, elevation(self_obj));
                end
                else begin
                    set_local_var(4, 1);
                end
            end
        end
    end
end

