procedure start;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure talk_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure destroy_p_proc;
procedure combat_p_proc;
procedure Jarvis01;
procedure Jarvis02;
procedure Jarvis03;
procedure Jarvis04;
procedure Jarvis05;
procedure Jarvis06;
procedure Jarvisend;
procedure description_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure timed_event_p_proc;
procedure map_exit_p_proc;

variable use_skill;
variable initialized;
variable hostile;


procedure start
begin
    if (script_action == 11) then begin
        call talk_p_proc();
    end
    else begin
        if (script_action == 16) then begin
            call map_exit_p_proc();
        end
        else begin
            if (script_action == 15) then begin
                call map_enter_p_proc();
            end
            else begin
                if ((script_action == 21) or (script_action == 3)) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == 7) then begin
                        call use_obj_on_p_proc();
                    end
                    else begin
                        if (script_action == 4) then begin
                            call pickup_p_proc();
                        end
                        else begin
                            if (script_action == 18) then begin
                                call destroy_p_proc();
                            end
                            else begin
                                if (script_action == 13) then begin
                                    call combat_p_proc();
                                end
                                else begin
                                    if (script_action == 8) then begin
                                        call use_skill_on_p_proc();
                                    end
                                    else begin
                                        if (script_action == 18) then begin
                                            call destroy_p_proc();
                                        end
                                        else begin
                                            if (script_action == 12) then begin
                                                call critter_p_proc();
                                            end
                                            else begin
                                                if (script_action == 22) then begin
                                                    call timed_event_p_proc();
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 0) then begin
        display_msg(message_str(440, 102));
    end
    else begin
        display_msg(message_str(440, 103));
    end
end

procedure map_enter_p_proc
begin
    if (local_var(5) == 0) then begin
        anim(self_obj, 48, 0);
        add_timer_event(self_obj, game_ticks(3600), 1);
    end
    critter_add_trait(self_obj, 1, 6, 2);
    critter_add_trait(self_obj, 1, 5, 6);
end

procedure talk_p_proc
begin
    if (local_var(5) == 0) then begin
        call Jarvis01();
    end
    else begin
        start_gdialog(440, self_obj, 4, -1, -1);
        gsay_start;
        if (local_var(4) == 0) then begin
            call Jarvis02();
        end
        else begin
            call Jarvis03();
        end
        gsay_end;
        end_dialogue;
    end
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := roll_vs_skill(dude_obj, action_being_used, 0);
    if (local_var(5) == 0) then begin
        script_overrides;
        if (action_being_used == 6) then begin
            if (is_success(LVar0)) then begin
                display_msg(message_str(440, 112));
            end
            else begin
                display_msg(message_str(440, 113));
            end
        end
        else begin
            if (action_being_used == 7) then begin
                if (is_success(LVar0)) then begin
                    display_msg(message_str(440, 114));
                end
                else begin
                    display_msg(message_str(440, 115));
                end
            end
            else begin
                display_msg(message_str(440, 116));
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
    if ((obj_pid(obj_being_used_with) == 49) and (local_var(5) == 0)) then begin
        script_overrides;
        rm_timer_event(self_obj);
        set_local_var(5, 1);
        rm_obj_from_inven(dude_obj, obj_being_used_with);
        destroy_object(obj_being_used_with);
        display_msg(message_str(440, 117));
        give_exp_points(400);
        set_global_var(155, global_var(155) + 1);
        display_msg(message_str(440, 200));
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(246, 1);
    end
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
    rm_timer_event(self_obj);
end

procedure combat_p_proc
begin
    if ((fixed_param == 4) and (local_var(5) == 0)) then begin
        script_overrides;
    end
end

procedure Jarvis01
begin
    float_msg(self_obj, message_str(440, 104), 3);
end

procedure Jarvis02
begin
    gsay_reply(440, 105);
    set_local_var(4, 1);
    call Jarvis04();
end

procedure Jarvis03
begin
    gsay_reply(440, 106);
    call Jarvis04();
end

procedure Jarvis04
begin
    giq_option(4, 440, 107, Jarvis05, 50);
    giq_option(4, 440, 108, Jarvis06, 50);
    giq_option(4, 440, 109, Jarvisend, 50);
    giq_option(-3, 440, 118, Jarvis05, 50);
    giq_option(-3, 440, 119, Jarvis06, 50);
    giq_option(-3, 440, 120, Jarvisend, 50);
end

procedure Jarvis05
begin
    gsay_reply(440, 110);
    call Jarvis04();
end

procedure Jarvis06
begin
    gsay_reply(440, 111);
    call Jarvis04();
end

procedure Jarvisend
begin
end

procedure description_p_proc
begin
    script_overrides;
    if (local_var(4) == 0) then begin
        display_msg(message_str(440, 102));
    end
    else begin
        display_msg(message_str(440, 103));
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure timed_event_p_proc
begin
    if (local_var(5) == 0) then begin
        add_timer_event(self_obj, game_ticks(7200), 1);
    end
    if (tile_distance_objs(dude_obj, self_obj) < get_critter_stat(dude_obj, 1)) then begin
        display_msg(message_str(440, 100));
        float_msg(self_obj, message_str(440, 101), 0);
    end
end

procedure map_exit_p_proc
begin
    rm_timer_event(self_obj);
end

