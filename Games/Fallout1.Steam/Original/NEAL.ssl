procedure start;
procedure critter_p_proc;
procedure description_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure use_obj_on_p_proc;
procedure Neal01;
procedure Neal02;
procedure Neal03;
procedure Neal04;
procedure Neal05;
procedure Neal06;
procedure Neal07;
procedure Neal08;
procedure Neal09;
procedure Neal10;
procedure Neal11;
procedure NealEnd;
procedure NealCola;
procedure NealBeer;
procedure NealBooze;
procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable annoyed;
variable hostile;
variable initialized;
variable item;
variable moving_disabled;
variable sfx_name;
variable sleeping_disabled;

import variable messing_with_SkumDoor;
import variable Neal_closing_door;
import variable Neal_ptr;
import variable Skul_target;
import variable SkumDoor_ptr;
import variable Trish_ptr;
import variable Tycho_ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (script_action == 12) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == 18) then begin
            call destroy_p_proc();
        end
        else begin
            if (script_action == 3) then begin
                call description_p_proc();
            end
            else begin
                if (script_action == 21) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == 15) then begin
                        call map_enter_p_proc();
                    end
                    else begin
                        if (script_action == 4) then begin
                            call pickup_p_proc();
                        end
                        else begin
                            if (script_action == 11) then begin
                                call talk_p_proc();
                            end
                            else begin
                                if (script_action == 22) then begin
                                    call timed_event_p_proc();
                                end
                                else begin
                                    if (script_action == 7) then begin
                                        call use_obj_on_p_proc();
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    if (sleeping_disabled == 0) then begin
        call sleeping();
    end
    if ((game_time_hour > 1700) or (game_time_hour < 330) and (moving_disabled == 0)) then begin
        if (tile_num(self_obj) != home_tile) then begin
            animate_move_obj_to_tile(self_obj, home_tile, 0);
        end
        else begin
            if (has_trait(1, self_obj, 10) != 2) then begin
                anim(self_obj, 1000, 2);
            end
        end
    end
    if ((map_var(4) == 1) and (local_var(10) == 0) and (local_var(9) == 0) and (tile_distance_objs(self_obj, dude_obj) < 12)) then begin
        float_msg(self_obj, message_str(508, 133), 2);
        hostile := 1;
        set_local_var(10, 1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 112)) then begin
        destroy_object(obj_carrying_pid_obj(self_obj, 112));
    end
    if (messing_with_SkumDoor) then begin
        if (annoyed) then begin
            float_msg(self_obj, message_str(508, 149), 2);
            Neal_closing_door := 0;
            if (SkumDoor_ptr != 0) then begin
                use_obj(SkumDoor_ptr);
            end
            add_timer_event(self_obj, game_ticks(5), 6);
        end
        else begin
            sleeping_disabled := 1;
            set_local_var(9, 0);
            move_to(self_obj, sleep_tile, 0);
            reg_anim_func(1, 1);
            reg_anim_animate(self_obj, 37, -1);
            reg_anim_obj_move_to_tile(self_obj, 21283, -1);
            reg_anim_func(3, 0);
            float_msg(self_obj, message_str(508, 148), 2);
            annoyed := 1;
            add_timer_event(self_obj, game_ticks(5), 5);
        end
        messing_with_SkumDoor := 0;
    end
    if (SkumDoor_ptr != 0) then begin
        if ((game_time_hour == 409) and obj_is_open(SkumDoor_ptr)) then begin
            Neal_closing_door := 1;
            use_obj(SkumDoor_ptr);
        end
        if ((game_time_hour == 1400) and not(obj_is_open(SkumDoor_ptr))) then begin
            Neal_closing_door := 1;
            use_obj(SkumDoor_ptr);
        end
    end
    if (global_var(247) == 1) then begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure description_p_proc
begin
    display_msg(message_str(508, 102));
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(247, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(247, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
                set_global_var(156, 1);
                set_global_var(157, 0);
            end
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
                set_global_var(157, 1);
                set_global_var(156, 0);
            end
            set_global_var(159, global_var(159) + 1);
            if ((global_var(159) % 2) == 0) then begin
                set_global_var(155, global_var(155) - 1);
            end
        end
    end
    set_global_var(284, 1);
    Neal_ptr := 0;
end

procedure look_at_p_proc
begin
    if (local_var(4) == 1) then begin
        display_msg(message_str(508, 100));
    end
    else begin
        display_msg(message_str(508, 101));
    end
end

procedure map_enter_p_proc
begin
    night_person := 1;
    wake_time := 1300;
    sleep_time := 410;
    home_tile := 19477;
    sleep_tile := 17876;
    Neal_ptr := self_obj;
    if (map_var(2) == 1) then begin
        float_msg(self_obj, message_str(508, 149), 7);
    end
    critter_add_trait(self_obj, 1, 6, 26);
    critter_add_trait(self_obj, 1, 5, 56);
end

procedure pickup_p_proc
begin
    float_msg(self_obj, message_str(508, 103), 2);
    hostile := 1;
end

procedure talk_p_proc
begin
    if ((game_time_hour >= 1300) and (game_time_hour < 1600)) then begin
        float_msg(self_obj, message_str(508, 104), 0);
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, 112)) then begin
            float_msg(self_obj, message_str(508, 143), 4);
            set_local_var(11, 1);
        end
        else begin
            if ((game_time_hour >= 410) and (game_time_hour <= 1300)) then begin
                float_msg(self_obj, message_str(508, 105), 0);
            end
            else begin
                start_gdialog(508, self_obj, 4, -1, -1);
                gsay_start;
                call Neal01();
                gsay_end;
                end_dialogue;
                if (local_var(4) == 0) then begin
                    set_local_var(4, 1);
                    if (Skul_target != 0) then begin
                        if (tile_distance_objs(self_obj, Skul_target) < 12) then begin
                            add_timer_event(Skul_target, game_ticks(3), 2);
                        end
                    end
                end
            end
        end
    end
    if (item) then begin
        add_obj_to_inven(dude_obj, item);
        item := 0;
        float_msg(self_obj, message_str(508, 132), 3);
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        float_msg(Trish_ptr, message_str(342, 150), 4);
        if ((global_var(557) bwand 2) == 0) then begin
            set_global_var(557, global_var(557) + 2);
        end
        moving_disabled := 1;
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        reg_anim_obj_move_to_tile(self_obj, home_tile, -1);
        reg_anim_func(3, 0);
        set_global_var(282, 1);
        add_timer_event(self_obj, 5, 2);
    end
    else begin
        if (fixed_param == 2) then begin
            if (tile_num(self_obj) != home_tile) then begin
                animate_move_obj_to_tile(self_obj, home_tile, 0);
                add_timer_event(self_obj, 5, 2);
            end
            else begin
                if (has_trait(1, self_obj, 10) != 3) then begin
                    anim(self_obj, 1000, 3);
                    add_timer_event(self_obj, 5, 2);
                end
                else begin
                    if (obj_is_carrying_obj_pid(self_obj, 22) == 0) then begin
                        item := create_object_sid(22, 0, 0, -1);
                        add_obj_to_inven(self_obj, item);
                        item := 0;
                    end
                    wield_obj_critter(self_obj, obj_carrying_pid_obj(self_obj, 22));
                    add_timer_event(self_obj, 5, 3);
                end
            end
        end
        else begin
            if (fixed_param == 3) then begin
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                reg_anim_animate(self_obj, 43, -1);
                reg_anim_animate(self_obj, 45, -1);
                sfx_name := sfx_build_weapon_name(1, obj_carrying_pid_obj(self_obj, 22), 0, Skul_target);
                reg_anim_play_sfx(self_obj, sfx_name, 0);
                reg_anim_animate(self_obj, 44, -1);
                reg_anim_func(3, 0);
                add_timer_event(self_obj, 5, 4);
            end
            else begin
                if (fixed_param == 4) then begin
                    critter_dmg(Skul_target, random(50, 75), 0);
                    float_msg(self_obj, message_str(508, 146), 2);
                    moving_disabled := 0;
                end
                else begin
                    if (fixed_param == 5) then begin
                        float_msg(self_obj, message_str(508, 147), 2);
                    end
                    else begin
                        if (fixed_param == 6) then begin
                            annoyed := 0;
                            sleeping_disabled := 0;
                        end
                        else begin
                            if (fixed_param == 6) then begin
                                hostile := 1;
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
    if (obj_pid(obj_being_used_with) == 112) then begin
        rm_obj_from_inven(source_obj, obj_being_used_with);
        add_obj_to_inven(self_obj, obj_being_used_with);
        dialogue_system_enter;
    end
end

procedure Neal01
begin
    gsay_reply(508, 106);
    giq_option(4, 508, 107, Neal02, 50);
    giq_option(4, 508, 108, Neal03, 50);
    giq_option(4, 508, message_str(508, 109) + proto_data(obj_pid(dude_obj), 1) + message_str(508, 110), Neal04, 50);
    if (global_var(286) == 0) then begin
        giq_option(4, 508, 125, Neal09, 50);
    end
    else begin
        giq_option(4, 508, 142, Neal09, 50);
    end
    giq_option(-3, 508, 111, NealEnd, 50);
    call Goodbyes();
    if (obj_is_carrying_obj_pid(dude_obj, 112)) then begin
        giq_option(4, 508, 144, Neal11, 49);
    end
    giq_option(4, 508, exit_line, NealEnd, 50);
end

procedure Neal02
begin
    gsay_reply(508, 112);
    giq_option(0, 508, 113, NealCola, 50);
    giq_option(0, 508, 114, NealBeer, 50);
    giq_option(0, 508, 115, NealBooze, 50);
    call Goodbyes();
    giq_option(0, 508, exit_line, NealEnd, 50);
end

procedure Neal03
begin
    gsay_reply(508, 116);
    if (not(local_var(5))) then begin
        giq_option(4, 508, 117, Neal06, 50);
    end
    if ((global_var(121) == 0) and not(local_var(6)) and (tile_distance_objs(self_obj, Tycho_ptr) < 12)) then begin
        giq_option(4, 508, 118, Neal07, 50);
    end
    if (not(local_var(8))) then begin
        if ((global_var(555) != 2) and (global_var(282) == 1)) then begin
            giq_option(4, 508, 119, Neal08, 50);
        end
    end
    call Goodbyes();
    giq_option(0, 508, exit_line, NealEnd, 50);
end

procedure Neal04
begin
    gsay_reply(508, 120);
    giq_option(4, 508, 121, Neal02, 50);
    giq_option(4, 508, 122, Neal03, 50);
    giq_option(4, 508, 123, NealEnd, 50);
end

procedure Neal05
begin
    gsay_message(508, 124, 50);
end

procedure Neal06
begin
    set_local_var(5, 1);
    gsay_reply(508, 126);
    giq_option(4, 508, 127, Neal02, 0);
    giq_option(4, 508, 128, Neal10, 0);
end

procedure Neal07
begin
    set_local_var(6, 1);
    gsay_reply(508, 129);
    giq_option(4, 508, 130, Neal03, 50);
    call Goodbyes();
    giq_option(0, 508, exit_line, NealEnd, 50);
end

procedure Neal08
begin
    set_local_var(8, 1);
    gsay_reply(508, 131);
    giq_option(4, 508, 130, Neal03, 50);
    call Goodbyes();
    giq_option(0, 508, exit_line, NealEnd, 50);
end

procedure Neal09
begin
    if (global_var(286) == 0) then begin
        gsay_reply(508, 134);
    end
    else begin
        gsay_reply(508, 145);
    end
    giq_option(4, 508, 138, Neal10, 50);
end

procedure Neal10
begin
    gsay_reply(508, 135);
    giq_option(4, 508, 139, Neal02, 50);
    giq_option(4, 508, 136, Neal03, 50);
    giq_option(4, 508, 137, NealEnd, 50);
end

procedure Neal11
begin
    gsay_message(508, 143, 49);
    set_local_var(11, 1);
    item := obj_carrying_pid_obj(dude_obj, 112);
    set_global_var(155, global_var(155) + 2);
    rm_obj_from_inven(dude_obj, item);
    add_obj_to_inven(self_obj, item);
end

procedure NealEnd
begin
end

procedure NealCola
begin
    if (local_var(11) == 0) then begin
        if (item_caps_total(dude_obj) >= 3) then begin
            item_caps_adjust(dude_obj, -3);
            item := create_object_sid(106, 0, 0, -1);
        end
        else begin
            float_msg(self_obj, message_str(508, 140), 0);
        end
    end
    else begin
        item := create_object_sid(106, 0, 0, -1);
    end
end

procedure NealBeer
begin
    if (local_var(11) == 0) then begin
        if (item_caps_total(dude_obj) >= 5) then begin
            item_caps_adjust(dude_obj, -5);
            item := create_object_sid(124, 0, 0, -1);
        end
        else begin
            float_msg(self_obj, message_str(508, 140), 0);
        end
    end
    else begin
        item := create_object_sid(124, 0, 0, -1);
    end
end

procedure NealBooze
begin
    if (local_var(11) == 0) then begin
        if (item_caps_total(dude_obj) >= 20) then begin
            item_caps_adjust(dude_obj, -20);
            item := create_object_sid(125, 0, 0, -1);
        end
        else begin
            float_msg(self_obj, message_str(508, 140), 0);
        end
    end
    else begin
        item := create_object_sid(125, 0, 0, -1);
    end
end

procedure sleeping
begin
    if (local_var(9) == 1) then begin
        if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
            if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
                if (tile_num(self_obj) != home_tile) then begin
                    animate_move_obj_to_tile(self_obj, home_tile, 0);
                end
                else begin
                    set_local_var(9, 0);
                end
            end
            else begin
                move_to(self_obj, home_tile, elevation(self_obj));
                if (tile_num(self_obj) == home_tile) then begin
                    set_local_var(9, 0);
                end
            end
        end
    end
    else begin
        if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
            if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    animate_move_obj_to_tile(self_obj, self_obj, 0);
                end
                else begin
                    set_local_var(9, 1);
                end
            end
            else begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    move_to(self_obj, sleep_tile, elevation(self_obj));
                end
                else begin
                    set_local_var(9, 1);
                end
            end
        end
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

