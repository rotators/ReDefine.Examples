procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure Sherry01;
procedure Sherry02;
procedure Sherry03;
procedure Sherry04;
procedure Sherry05;
procedure Sherry06;
procedure Sherry07;
procedure Sherry08;
procedure Sherry09;
procedure Sherry10;
procedure Sherry11;
procedure Sherry12;
procedure Sherry13;
procedure Sherry14;
procedure Sherry15;
procedure Sherry16;
procedure Sherry17;
procedure Sherry18;
procedure Sherry18a;
procedure Sherry19;
procedure Sherry20;
procedure Sherry21;
procedure Sherry22;
procedure Sherry23;
procedure Sherry24;
procedure Sherry25;
procedure Sherry26;
procedure Sherry27;
procedure Sherry27a;
procedure Sherry28;
procedure Sherry29;
procedure SherryCombat;
procedure SherryCook;
procedure SherryEnd;

variable hostile;
variable initialized;
variable feed_dude;

procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (script_action == 12) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == 18) then begin
            call destroy_p_proc();
        end
        else begin
            if (script_action == 21) then begin
                call look_at_p_proc();
            end
            else begin
                if (script_action == 15) then begin
                    call map_enter_p_proc();
                end
                else begin
                    if (script_action == 4) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == 11) then begin
                            call talk_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    else begin
        if (global_var(556) == 1) then begin
            if (((game_time / (10 * 60 * 60 * 24)) - local_var(6)) > 1) then begin
                critter_add_trait(self_obj, 1, 6, 26);
                set_global_var(556, 2);
                set_local_var(6, 0);
                home_tile := 18125;
                sleep_tile := 17924;
            end
        end
        if ((game_time_hour >= 700) and (game_time_hour <= 1930)) then begin
            if (tile_num(self_obj) != home_tile) then begin
                animate_move_obj_to_tile(self_obj, home_tile, 0);
            end
        end
        call sleeping();
    end
    if (global_var(247) == 1) then begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(247, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(247, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
                set_global_var(156, 1);
                set_global_var(157, 0);
            end
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
                set_global_var(157, 1);
                set_global_var(156, 0);
            end
            set_global_var(159, global_var(159) + 1);
            if ((global_var(159) % 2) == 0) then begin
                set_global_var(155, global_var(155) - 1);
            end
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4)) then begin
        display_msg(message_str(388, 100));
    end
    else begin
        display_msg(message_str(388, 101));
    end
end

procedure map_enter_p_proc
begin
    sleep_time := 2000;
    wake_time := 630;
    if (global_var(556) == 0) then begin
        critter_add_trait(self_obj, 1, 6, 14);
        home_tile := 15513;
        sleep_tile := 13494;
    end
    else begin
        critter_add_trait(self_obj, 1, 6, 26);
        home_tile := 18125;
        sleep_tile := 17924;
    end
end

procedure pickup_p_proc
begin
    float_msg(self_obj, message_str(388, 102), 0);
    hostile := 1;
end

procedure talk_p_proc
begin
    if (local_var(5) == 1) then begin
        float_msg(self_obj, message_str(185, 166), 0);
    end
    else begin
        call get_reaction();
        start_gdialog(388, self_obj, 4, -1, -1);
        gsay_start;
        if (global_var(556) == 2) then begin
            call Sherry22();
        end
        else begin
            if (local_var(4) == 1) then begin
                call Sherry15();
            end
            else begin
                call Sherry01();
            end
        end
        gsay_end;
        end_dialogue;
    end
    if (feed_dude) then begin
        call SherryCook();
    end
end

procedure Sherry01
begin
    set_local_var(4, 1);
    gsay_reply(388, 103);
    giq_option(4, 388, message_str(388, 104) + proto_data(obj_pid(dude_obj), 1) + message_str(388, 105), Sherry02, 50);
    giq_option(4, 388, 106, Sherry03, 50);
    giq_option(-3, 388, 107, Sherry04, 50);
end

procedure Sherry02
begin
    gsay_reply(388, 108);
    giq_option(4, 388, 109, SherryCombat, 51);
    giq_option(4, 388, 110, SherryEnd, 50);
    giq_option(5, 388, 111, Sherry05, 50);
    giq_option(6, 388, 112, Sherry07, 50);
end

procedure Sherry03
begin
    call DownReact();
    gsay_reply(388, 113);
    giq_option(4, 388, 114, SherryEnd, 50);
    giq_option(4, 388, 115, SherryCombat, 50);
end

procedure Sherry04
begin
    gsay_message(388, 116, 50);
end

procedure Sherry05
begin
    gsay_reply(388, 117);
    giq_option(4, 388, 118, Sherry11, 50);
    giq_option(4, 388, 119, SherryEnd, 50);
end

procedure Sherry06
begin
    gsay_reply(388, 120);
    giq_option(4, 388, 121, Sherry07, 50);
    giq_option(4, 388, 122, Sherry08, 50);
    giq_option(4, 388, 123, SherryEnd, 50);
end

procedure Sherry07
begin
    gsay_message(388, 124, 51);
end

procedure Sherry08
begin
    gsay_reply(388, 125);
    call Sherry13();
end

procedure Sherry09
begin
    set_local_var(7, 1);
    gsay_reply(388, 126);
    giq_option(4, 388, 127, Sherry10, 50);
    call Sherry13();
end

procedure Sherry10
begin
    gsay_reply(388, 128);
    call Sherry13();
end

procedure Sherry11
begin
    gsay_reply(388, 129);
    call Sherry13();
end

procedure Sherry12
begin
    set_local_var(8, 1);
    gsay_reply(388, 130);
    giq_option(4, 388, 131, Sherry26, 50);
    call Sherry13();
end

procedure Sherry13
begin
    if (not(local_var(7))) then begin
        giq_option(5, 388, 133, Sherry09, 50);
    end
    if (not(local_var(8))) then begin
        giq_option(4, 388, 132, Sherry12, 50);
    end
    if (not(local_var(9))) then begin
        giq_option(6, 388, 134, Sherry14, 50);
    end
    call Goodbyes();
    giq_option(4, 388, exit_line, SherryEnd, 50);
end

procedure Sherry14
begin
    set_local_var(9, 1);
    gsay_reply(388, 135);
    call Sherry13();
end

procedure Sherry15
begin
    gsay_reply(388, 136);
    giq_option(4, 388, 137, Sherry16, 50);
    if (local_var(6) == 0) then begin
        giq_option(5, 388, 138, Sherry17, 50);
    end
    call Goodbyes();
    giq_option(4, 388, exit_line, SherryEnd, 50);
end

procedure Sherry16
begin
    gsay_message(388, 139, 51);
    call SherryCombat();
end

procedure Sherry17
begin
    gsay_reply(388, 140);
    giq_option(4, 388, 141, SherryEnd, 50);
    giq_option(6, 388, 142, Sherry18, 50);
end

procedure Sherry18
begin
    gsay_reply(388, 143);
    giq_option(4, 388, 144, SherryEnd, 50);
    giq_option(6, 388, 145, Sherry18a, 50);
end

procedure Sherry18a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Sherry19();
    end
    else begin
        call Sherry20();
    end
end

procedure Sherry19
begin
    gsay_reply(388, 146);
    giq_option(6, 388, 147, Sherry21, 50);
end

procedure Sherry20
begin
    call DownReact();
    gsay_message(388, 148, 51);
end

procedure Sherry21
begin
    set_local_var(6, game_time / (10 * 60 * 60 * 24));
    set_global_var(556, 1);
    gsay_message(388, 149, 50);
end

procedure Sherry22
begin
    gsay_reply(388, 150);
    giq_option(4, 388, 151, SherryEnd, 50);
    giq_option(4, 388, 152, Sherry23, 50);
    giq_option(4, 388, 153, Sherry24, 50);
    if ((local_var(10) == 0) and global_var(555)) then begin
        giq_option(4, 388, 166, Sherry27, 50);
    end
end

procedure Sherry23
begin
    gsay_reply(388, 154);
    giq_option(4, 388, 155, Sherry25, 50);
    giq_option(4, 388, 156, SherryEnd, 50);
end

procedure Sherry24
begin
    gsay_message(388, 157, 50);
end

procedure Sherry25
begin
    feed_dude := 1;
end

procedure Sherry26
begin
    gsay_reply(388, 159);
    call Sherry13();
end

procedure Sherry27
begin
    set_local_var(10, 1);
    gsay_reply(388, 160);
    giq_option(4, 388, 161, Sherry27a, 50);
    giq_option(4, 388, 162, SherryEnd, 50);
    giq_option(6, 388, 163, Sherry28, 50);
end

procedure Sherry27a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Sherry28();
    end
    else begin
        call Sherry29();
    end
end

procedure Sherry28
begin
    gsay_message(388, 164, 50);
    set_global_var(257, 1);
end

procedure Sherry29
begin
    gsay_message(388, 165, 50);
end

procedure SherryCombat
begin
    hostile := 1;
end

procedure SherryCook
begin
    use_obj(dude_obj);
    float_msg(self_obj, message_str(388, 158), 0);
    critter_heal(dude_obj, 1);
    feed_dude := 0;
end

procedure SherryEnd
begin
end

procedure sleeping
begin
    if (local_var(5) == 1) then begin
        if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
            if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
                if (tile_num(self_obj) != home_tile) then begin
                    animate_move_obj_to_tile(self_obj, home_tile, 0);
                end
                else begin
                    set_local_var(5, 0);
                end
            end
            else begin
                move_to(self_obj, home_tile, elevation(self_obj));
                if (tile_num(self_obj) == home_tile) then begin
                    set_local_var(5, 0);
                end
            end
        end
    end
    else begin
        if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
            if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    animate_move_obj_to_tile(self_obj, self_obj, 0);
                end
                else begin
                    set_local_var(5, 1);
                end
            end
            else begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    move_to(self_obj, sleep_tile, elevation(self_obj));
                end
                else begin
                    set_local_var(5, 1);
                end
            end
        end
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

