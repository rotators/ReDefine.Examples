procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure flee_dude;

variable hostile;
variable initialized;
variable round_counter;
variable scared;

import variable random_seed_1;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, 1, 6, 44);
        critter_add_trait(self_obj, 1, 5, 65);
        hostile := global_var(334);
        initialized := 1;
    end
    else begin
        if (script_action == 13) then begin
            call combat_p_proc();
        end
        else begin
            if (script_action == 12) then begin
                call critter_p_proc();
            end
            else begin
                if (script_action == 18) then begin
                    call destroy_p_proc();
                end
                else begin
                    if (script_action == 4) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == 11) then begin
                            call talk_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure combat_p_proc
begin
    if (fixed_param == 4) then begin
        round_counter := round_counter + 1;
        if (get_critter_stat(self_obj, 35) < 10) then begin
            scared := 1;
        end
    end
end

procedure critter_p_proc
begin
    if (scared) then begin
        if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
            call flee_dude();
        end
    end
    else begin
        if (hostile) then begin
            hostile := 0;
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        random_seed_1 := 1;
        if (source_obj == dude_obj) then begin
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
                set_global_var(156, 1);
                set_global_var(157, 0);
            end
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
                set_global_var(157, 1);
                set_global_var(156, 0);
            end
            set_global_var(159, global_var(159) + 1);
            if ((global_var(159) % 2) == 0) then begin
                set_global_var(155, global_var(155) - 1);
            end
        end
        set_global_var(250, 1);
    end
end

procedure pickup_p_proc
begin
    if (not(scared)) then begin
        hostile := 1;
        set_global_var(334, 1);
    end
end

procedure talk_p_proc
begin
    if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
        set_global_var(156, 1);
        set_global_var(157, 0);
    end
    if (scared) then begin
        float_msg(self_obj, message_str(758, 101), 2);
    end
    else begin
        if ((global_var(250) == 1) or (random_seed_1 == 1)) then begin
            float_msg(self_obj, message_str(758, 100), 2);
            set_global_var(334, 1);
            hostile := 1;
        end
        else begin
            if (global_var(45) == 2) then begin
                float_msg(self_obj, message_str(758, 102), 4);
            end
            else begin
                if ((global_var(155) < -20) or (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) or (global_var(158) > 2)) then begin
                    float_msg(self_obj, message_str(758, 104), 2);
                end
                else begin
                    float_msg(self_obj, message_str(758, 103), 3);
                end
            end
        end
    end
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(tile_num(dude_obj), LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

