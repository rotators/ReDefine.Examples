procedure Start;
procedure look_at_p_proc;
procedure description_p_proc;
procedure talk_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure MacRae01;
procedure MacRae02;
procedure MacRae03;
procedure MacRae04;
procedure MacRae05;
procedure MacRae06;
procedure MacRae07;
procedure MacRae08;
procedure MacRae09;
procedure MacRae10;
procedure MacRae11;
procedure MacRae12;
procedure MacRae13;
procedure MacRae14;
procedure MacRae15;
procedure MacRae16;
procedure MacRaeEnd;

variable Initialize := 1;
variable DisplayMessage := 100;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure Start
begin
    if (Initialize) then begin
        critter_add_trait(self_obj, 1, 6, 47);
        critter_add_trait(self_obj, 1, 5, 27);
        Initialize := 0;
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 1) then begin
        display_msg(message_str(918, 101));
    end
    else begin
        display_msg(message_str(918, 100));
    end
end

procedure description_p_proc
begin
    script_overrides;
    if (local_var(4) == 1) then begin
        display_msg(message_str(918, 101));
    end
    else begin
        display_msg(message_str(918, 100));
    end
end

procedure talk_p_proc
begin
    if (global_var(253) == 1) then begin
        float_msg(self_obj, message_str(669, random(100, 105)), 2);
    end
    else begin
        if (local_var(5) == 2) then begin
            float_msg(self_obj, message_str(918, 141), 0);
        end
        else begin
            call get_reaction();
            start_gdialog(918, self_obj, -1, -1, -1);
            gsay_start;
            if (global_var(613) == 2) then begin
                call MacRae12();
            end
            else begin
                if (local_var(4) == 0) then begin
                    if (get_critter_stat(dude_obj, 34) == 0) then begin
                        DisplayMessage := 102;
                    end
                    else begin
                        DisplayMessage := 103;
                    end
                    call MacRae02();
                end
                else begin
                    DisplayMessage := 104;
                    call MacRae02();
                end
            end
            gsay_end;
            end_dialogue;
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(253, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(253, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
                set_global_var(156, 1);
                set_global_var(157, 0);
            end
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
                set_global_var(157, 1);
                set_global_var(156, 0);
            end
            set_global_var(159, global_var(159) + 1);
            if ((global_var(159) % 2) == 0) then begin
                set_global_var(155, global_var(155) - 1);
            end
        end
    end
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (global_var(253) == 1) then begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure pickup_p_proc
begin
    set_global_var(253, 1);
end

procedure MacRae01
begin
    DisplayMessage := 104;
    call MacRae02();
end

procedure MacRae02
begin
    gsay_reply(918, DisplayMessage);
    if (local_var(4) == 0) then begin
        giq_option(4, 918, 105, MacRae03, 50);
    end
    giq_option(4, 918, 106, MacRae11, 50);
    giq_option(4, 918, 107, MacRaeEnd, 50);
    giq_option(-3, 918, 141, MacRaeEnd, 50);
end

procedure MacRae03
begin
    gsay_reply(918, 108);
    gsay_option(918, 109, MacRae04, 50);
    gsay_option(918, 110, MacRae08, 50);
    gsay_option(918, 111, MacRae09, 50);
    gsay_option(918, 112, MacRae01, 50);
end

procedure MacRae04
begin
    gsay_reply(918, 113);
    gsay_option(918, 114, MacRae05, 50);
    gsay_option(918, 115, MacRae06, 50);
    gsay_option(918, 116, MacRae01, 50);
end

procedure MacRae05
begin
    gsay_message(918, 117, 50);
    call DownReactLevel();
end

procedure MacRae06
begin
    DisplayMessage := 118;
    set_local_var(5, 1);
    call MacRae07();
end

procedure MacRae07
begin
    gsay_reply(918, DisplayMessage);
    gsay_option(918, 119, MacRae01, 50);
    gsay_option(918, 120, MacRaeEnd, 50);
end

procedure MacRae08
begin
    DisplayMessage := 121;
    call MacRae07();
end

procedure MacRae09
begin
    gsay_reply(918, 122);
    gsay_option(918, 123, MacRae10, 50);
    gsay_option(918, 124, MacRae01, 50);
    gsay_option(918, 125, MacRaeEnd, 50);
end

procedure MacRae10
begin
    DisplayMessage := 126;
    call MacRae07();
end

procedure MacRae11
begin
    DisplayMessage := 127;
    call MacRae07();
end

procedure MacRae12
begin
    gsay_reply(918, 128);
    if (local_var(5 == 1)) then begin
        gsay_option(918, 129, MacRae15, 50);
    end
    if (local_var(4) == 1) then begin
        gsay_option(918, 130, MacRae13, 50);
    end
    else begin
        gsay_option(918, 131, MacRae16, 50);
    end
    gsay_option(918, 132, MacRaeEnd, 50);
end

procedure MacRae13
begin
    gsay_reply(918, 133);
    gsay_option(918, 134, MacRae14, 50);
    gsay_option(918, 135, MacRaeEnd, 50);
end

procedure MacRae14
begin
    gsay_reply(918, 113);
    gsay_option(918, 136, MacRae15, 50);
    gsay_option(918, 137, MacRaeEnd, 50);
end

procedure MacRae15
begin
    variable LVar0 := 0;
    gsay_message(918, 138, 50);
    LVar0 := get_critter_stat(dude_obj, 24);
    set_critter_stat(dude_obj, 24, 5);
    LVar0 := get_critter_stat(dude_obj, 11);
    set_critter_stat(dude_obj, 11, 1);
    gfade_out(600);
    game_time_advance(10 * 60 * 60 * 24);
    gfade_in(600);
    set_local_var(5, 2);
    gsay_message(918, 139, 50);
end

procedure MacRae16
begin
    gsay_reply(918, 140);
    gsay_option(918, 109, MacRae15, 50);
    gsay_option(918, 137, MacRaeEnd, 50);
end

procedure MacRaeEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

