procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure Dealer00;
procedure Dealer01;
procedure Dealer02;
procedure Dealer03;
procedure Dealer04;
procedure Dealer05;
procedure Dealer06;
procedure CheckMoney00;
procedure CheckMoney01;
procedure CheckMoney02;
procedure CheckMoney03;
procedure DealerEnd;
procedure GetOdds;

variable hostile;
variable Bet;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        critter_add_trait(self_obj, 1, 6, 38);
        critter_add_trait(self_obj, 1, 5, 50);
    end
    if (script_action == 21) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == 4) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == 11) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == 12) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == 18) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    start_gdialog(697, self_obj, 4, -1, -1);
    gsay_start;
    call Dealer00();
    gsay_end;
    end_dialogue;
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(697, 167));
end

procedure Dealer00
begin
    gsay_reply(697, 173);
    giq_option(4, 697, 174, CheckMoney00, 50);
    giq_option(4, 697, 175, CheckMoney01, 50);
    giq_option(4, 697, 176, CheckMoney02, 50);
    giq_option(4, 697, 177, CheckMoney03, 50);
    giq_option(4, 697, 178, DealerEnd, 50);
    giq_option(-3, 697, 179, Dealer01, 50);
end

procedure Dealer01
begin
    gsay_message(697, message_str(697, 180) + message_str(697, 181), 50);
end

procedure Dealer02
begin
    gsay_message(697, 182, 50);
end

procedure Dealer03
begin
    gsay_message(697, 183, 50);
    item_caps_adjust(dude_obj, Bet);
end

procedure Dealer04
begin
    gsay_message(697, 184, 50);
    item_caps_adjust(dude_obj, Bet * 2);
end

procedure Dealer05
begin
    gsay_message(697, 185, 50);
    item_caps_adjust(dude_obj, Bet * 3);
end

procedure Dealer06
begin
    if (get_critter_stat(dude_obj, 34) == 0) then begin
        gsay_message(697, 186, 50);
    end
    else begin
        gsay_message(697, 187, 50);
    end
end

procedure CheckMoney00
begin
    Bet := 5;
    if (item_caps_total(dude_obj) < Bet) then begin
        call Dealer06();
    end
    else begin
        call GetOdds();
    end
end

procedure CheckMoney01
begin
    Bet := 15;
    if (item_caps_total(dude_obj) < Bet) then begin
        call Dealer06();
    end
    else begin
        call GetOdds();
    end
end

procedure CheckMoney02
begin
    Bet := 25;
    if (item_caps_total(dude_obj) < Bet) then begin
        call Dealer06();
    end
    else begin
        call GetOdds();
    end
end

procedure CheckMoney03
begin
    Bet := 50;
    if (item_caps_total(dude_obj) < Bet) then begin
        call Dealer06();
    end
    else begin
        call GetOdds();
    end
end

procedure DealerEnd
begin
end

procedure GetOdds
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := random(1, 36) - 10;
    LVar1 := roll_vs_skill(dude_obj, 16, -15);
    if (is_critical(LVar1)) then begin
        if (is_success(LVar1)) then begin
            LVar0 := LVar0 + 10;
        end
        else begin
            LVar0 := LVar0 - 5;
        end
    end
    else begin
        if (is_success(LVar1)) then begin
            LVar0 := LVar0 + 5;
        end
    end
    display_msg("dice == " + LVar0);
    if (LVar0 < 10) then begin
        call Dealer02();
    end
    else begin
        if (LVar0 < 20) then begin
            call Dealer03();
        end
        else begin
            if (LVar0 < 30) then begin
                call Dealer04();
            end
            else begin
                call Dealer05();
            end
        end
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

