procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure Gretch00;
procedure Gretch00a;
procedure Gretch00b;
procedure Gretch01;
procedure Gretch01a;
procedure Gretch02;
procedure Gretch02a;
procedure Gretch03;
procedure Gretch03a;
procedure Gretch04;
procedure Gretch05;
procedure Gretch05a;
procedure Gretch06;
procedure Gretch07;
procedure Gretch08;
procedure Gretch09;
procedure Gretch10;
procedure GretchEnd;
procedure GretchCombat;

variable hostile;
variable initialized;
variable warned_about_messing;

import variable Gretch_call;
import variable messing_with_Morbid_stuff;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;

procedure damage_p_proc;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, 1, 6, 19);
        initialized := 1;
    end
    else begin
        if (script_action == 12) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == 18) then begin
                call destroy_p_proc();
            end
            else begin
                if (script_action == 21) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == 4) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == 11) then begin
                            call talk_p_proc();
                        end
                        else begin
                            if (script_action == 22) then begin
                                call timed_event_p_proc();
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    else begin
        if (messing_with_Morbid_stuff) then begin
            if ((tile_distance_objs(self_obj, dude_obj) < 12) and (elevation(self_obj) == elevation(dude_obj))) then begin
                if (warned_about_messing) then begin
                    hostile := 1;
                end
                else begin
                    warned_about_messing := 1;
                    float_msg(self_obj, message_str(103, 141), 2);
                end
            end
            messing_with_Morbid_stuff := 0;
        end
        if (Gretch_call) then begin
            Gretch_call := 0;
            hostile := 1;
        end
    end
    if (global_var(346) == 1) then begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(346, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
                set_global_var(156, 1);
                set_global_var(157, 0);
            end
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
                set_global_var(157, 1);
                set_global_var(156, 0);
            end
            set_global_var(159, global_var(159) + 1);
            if ((global_var(159) % 2) == 0) then begin
                set_global_var(155, global_var(155) - 1);
            end
        end
    end
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(0) == 0) then begin
        display_msg(message_str(103, 100));
    end
    else begin
        display_msg(message_str(103, 101));
    end
end

procedure talk_p_proc
begin
    start_gdialog(103, self_obj, 4, -1, -1);
    gsay_start;
    if (local_var(0) == 1) then begin
        call Gretch01();
    end
    else begin
        call Gretch00();
    end
    gsay_end;
    end_dialogue;
end

procedure timed_event_p_proc
begin
end

procedure Gretch00
begin
    gsay_reply(103, 102);
    giq_option(-3, 103, 103, Gretch07, 50);
    giq_option(4, 103, 104, Gretch00a, 50);
    giq_option(4, 103, 105, Gretch00b, 51);
    giq_option(4, 103, 106, Gretch02, 50);
    giq_option(4, 103, 107, GretchEnd, 50);
end

procedure Gretch00a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Gretch04();
    end
    else begin
        call Gretch02();
    end
end

procedure Gretch00b
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Gretch02();
    end
    else begin
        call Gretch08();
    end
end

procedure Gretch01
begin
    gsay_reply(103, 108);
    giq_option(4, 103, 109, Gretch02, 50);
    giq_option(4, 103, 110, Gretch01a, 50);
    giq_option(4, 103, 111, GretchEnd, 50);
    giq_option(-3, 103, 103, Gretch07, 50);
end

procedure Gretch01a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Gretch05();
    end
    else begin
        call Gretch02();
    end
end

procedure Gretch02
begin
    gsay_reply(103, 112);
    giq_option(4, 103, 113, Gretch04, 50);
    giq_option(4, 103, 114, Gretch03, 50);
    giq_option(4, 103, 115, Gretch02a, 50);
end

procedure Gretch02a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Gretch03();
    end
    else begin
        call Gretch07();
    end
end

procedure Gretch03
begin
    gsay_reply(103, 116);
    giq_option(4, 103, 117, Gretch04, 50);
    giq_option(4, 103, 118, Gretch03a, 50);
    giq_option(4, 103, 119, GretchEnd, 50);
end

procedure Gretch03a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Gretch05();
    end
    else begin
        call Gretch04();
    end
end

procedure Gretch04
begin
    gsay_reply(103, 120);
    giq_option(4, 103, 121, Gretch06, 50);
    giq_option(4, 103, 122, Gretch05, 50);
    giq_option(4, 103, 123, GretchEnd, 50);
end

procedure Gretch05
begin
    set_global_var(305, 1);
    gsay_reply(103, 124);
    giq_option(4, 103, 125, Gretch05a, 50);
    giq_option(4, 103, 126, GretchCombat, 51);
    giq_option(4, 103, 127, GretchEnd, 50);
end

procedure Gretch05a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Gretch09();
    end
    else begin
        call Gretch06();
    end
end

procedure Gretch06
begin
    set_global_var(305, 1);
    gsay_reply(103, 128);
    giq_option(4, 103, 129, GretchEnd, 50);
    giq_option(4, 103, 130, Gretch09, 50);
    giq_option(4, 103, 131, Gretch07, 50);
end

procedure Gretch07
begin
    gsay_reply(103, 132);
    giq_option(4, 103, 133, GretchEnd, 50);
    giq_option(4, 103, 134, Gretch04, 50);
    giq_option(4, 103, 135, Gretch08, 51);
    giq_option(-3, 103, 136, Gretch10, 50);
end

procedure Gretch08
begin
    gsay_message(103, 137, 51);
end

procedure Gretch09
begin
    gsay_reply(103, 138);
    giq_option(4, 103, 139, GretchEnd, 50);
    giq_option(4, 103, 126, GretchCombat, 51);
end

procedure Gretch10
begin
    gsay_message(103, 140, 50);
end

procedure GretchEnd
begin
end

procedure GretchCombat
begin
    hostile := 1;
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(346, 1);
    end
end

