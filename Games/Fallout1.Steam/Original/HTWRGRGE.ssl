procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;
procedure George01;
procedure George01a;
procedure George01b;
procedure George02;
procedure George02a;
procedure George03;
procedure George04;
procedure George05;
procedure George06;
procedure George07;
procedure George08;
procedure GeorgeEnd;

variable hostile;
variable Only_Once := 1;
variable lastTraverse;
variable currentLocation;
variable hereBefore;
variable visible := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        set_map_var(3, 0);
        if (global_var(111) == 5) then begin
            set_obj_visibility(self_obj, 1);
            visible := 0;
            set_map_var(3, 1);
        end
        critter_add_trait(self_obj, 1, 6, 42);
        critter_add_trait(self_obj, 1, 5, 16);
    end
    if (script_action == 21) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == 4) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == 11) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == 12) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == 18) then begin
                        call destroy_p_proc();
                    end
                    else begin
                        if (script_action == 14) then begin
                            call damage_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (visible == 0) then begin
        script_overrides;
    end
    else begin
        if (hostile) then begin
            hostile := 0;
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
        if (map_var(5) == 1) then begin
            if ((obj_can_hear_obj(self_obj, dude_obj) == 1) or (obj_can_see_obj(self_obj, dude_obj) == 1)) then begin
                call combat();
            end
        end
        else begin
            if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
                if ((obj_can_hear_obj(self_obj, dude_obj) == 1) or (obj_can_see_obj(self_obj, dude_obj) == 1)) then begin
                    dialogue_system_enter;
                end
                else begin
                    if ((global_var(111) == 1) or (global_var(107) == 1)) then begin
                        set_map_var(3, 1);
                        if (((game_time / 10) - lastTraverse) >= 20) then begin
                            lastTraverse := game_time / 10;
                            if (currentLocation == 0) then begin
                                currentLocation := 1;
                                animate_move_obj_to_tile(self_obj, 19516, 0);
                            end
                            else begin
                                currentLocation := 0;
                                animate_move_obj_to_tile(self_obj, 22529, 0);
                            end
                        end
                    end
                    else begin
                        if (tile_num(self_obj) != 22529) then begin
                            animate_move_obj_to_tile(self_obj, 22529, 0);
                        end
                    end
                end
            end
            else begin
                if (tile_num(self_obj) != 22529) then begin
                    animate_move_obj_to_tile(self_obj, 22529, 0);
                end
                if (map_var(2) == 1) then begin
                    dialogue_system_enter;
                end
            end
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
        float_msg(self_obj, message_str(870, 118), 2);
        call combat();
    end
    else begin
        if (global_var(248) == 1) then begin
            float_msg(self_obj, message_str(870, 120), 2);
            call combat();
        end
        else begin
            if (map_var(2) == 1) then begin
                set_map_var(2, 0);
                call George08();
            end
            else begin
                if (hereBefore == 0) then begin
                    hereBefore := 1;
                    start_gdialog(870, self_obj, 4, -1, -1);
                    gsay_start;
                    call George01();
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    call George07();
                end
            end
        end
    end
end

procedure destroy_p_proc
begin
    set_map_var(4, 1);
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(870, 100));
end

procedure damage_p_proc
begin
    set_map_var(5, 1);
end

procedure George01
begin
    gsay_reply(870, 101);
    giq_option(4, 870, 103, George01a, 50);
    giq_option(4, 870, 104, George01b, 50);
    giq_option(4, 870, 105, George06, 50);
    giq_option(-3, 870, 102, George06, 50);
end

procedure George01a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, -10))) then begin
        call George03();
    end
    else begin
        call George02();
    end
end

procedure George01b
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 10))) then begin
        call George05();
    end
    else begin
        call George02();
    end
end

procedure George02
begin
    gsay_reply(870, 106);
    giq_option(4, 870, 107, George02a, 50);
    giq_option(4, 870, 108, George06, 50);
    giq_option(4, 870, 109, George03, 50);
    giq_option(4, 870, 110, GeorgeEnd, 50);
end

procedure George02a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call George03();
    end
    else begin
        call George06();
    end
end

procedure George03
begin
    set_map_var(3, 1);
    gsay_message(870, 111, 50);
end

procedure George04
begin
    gsay_message(870, 112, 51);
end

procedure George05
begin
    set_map_var(3, 1);
    gsay_message(870, 113, 50);
end

procedure George06
begin
    gsay_message(870, 114, 51);
end

procedure George07
begin
    float_msg(self_obj, message_str(870, random(114, 117)), 2);
end

procedure George08
begin
    float_msg(self_obj, message_str(870, 119), 2);
end

procedure GeorgeEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

