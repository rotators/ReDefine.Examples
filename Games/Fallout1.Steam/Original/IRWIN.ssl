procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;
procedure IrwinTalks;
procedure IrwinAccept;
procedure IrwinEnd;
procedure Irwin00;
procedure Irwin01;
procedure Irwin02;
procedure Irwin03;
procedure Irwin04;
procedure Irwin05;
procedure Irwin06;
procedure Irwin07;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        critter_add_trait(self_obj, 1, 6, 41);
        critter_add_trait(self_obj, 1, 5, 51);
    end
    if (script_action == 21) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == 4) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == 11) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == 12) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == 18) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    if (global_var(307) == 501) then begin
        if (tile_num(self_obj) != 27969) then begin
            animate_move_obj_to_tile(self_obj, 27969, 0);
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    variable LVar0 := 0;
    call get_reaction();
    call IrwinTalks();
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(935, 100));
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(source_obj);
    if (party_member_obj(LVar0) != 0) then begin
        set_global_var(248, 1);
    end
end

procedure IrwinTalks
begin
    if (global_var(307) == 0) then begin
        start_gdialog(935, self_obj, 4, -1, -1);
        gsay_start;
        call Irwin00();
        gsay_end;
        end_dialogue;
    end
    else begin
        if ((global_var(307) == 1) or (global_var(307) == 2)) then begin
            start_gdialog(935, self_obj, 4, -1, -1);
            gsay_start;
            call Irwin05();
            gsay_end;
            end_dialogue;
        end
        else begin
            float_msg(self_obj, message_str(935, 117), 8);
        end
    end
end

procedure IrwinAccept
begin
    gsay_message(935, 109, 50);
    set_global_var(307, 1);
    game_time_advance(10 * 60 * 60 * 1);
    load_map("hubmis1.map", 1);
end

procedure IrwinEnd
begin
end

procedure Irwin00
begin
    gsay_reply(935, 101);
    giq_option(4, 935, 102, Irwin01, 50);
    giq_option(4, 935, 103, Irwin03, 50);
    giq_option(4, 935, 104, IrwinEnd, 50);
    giq_option(-3, 935, 118, Irwin07, 50);
end

procedure Irwin01
begin
    if (get_pc_stat(1) < 5) then begin
        gsay_message(935, 105, 50);
    end
    else begin
        call Irwin02();
    end
end

procedure Irwin02
begin
    gsay_reply(935, 106);
    giq_option(4, 935, 107, IrwinAccept, 50);
    giq_option(4, 935, 108, Irwin04, 50);
end

procedure Irwin03
begin
    gsay_message(935, 110, 50);
end

procedure Irwin04
begin
    gsay_message(935, 111, 50);
end

procedure Irwin05
begin
    gsay_reply(935, 112);
    giq_option(4, 935, 113, Irwin06, 50);
    giq_option(4, 935, 114, IrwinEnd, 50);
    giq_option(-3, 935, 120, Irwin06, 50);
    giq_option(-3, 935, 121, IrwinEnd, 50);
end

procedure Irwin06
begin
    variable LVar0 := 0;
    if (global_var(307) == 2) then begin
        gsay_message(935, 115, 50);
        LVar0 := create_object_sid(241, 0, 0, -1);
        add_obj_to_inven(dude_obj, LVar0);
        give_exp_points(500);
        set_global_var(155, global_var(155) + 2);
        set_global_var(307, 501);
    end
    else begin
        gsay_message(935, 116, 50);
    end
end

procedure Irwin07
begin
    gsay_message(935, 119, 50);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

