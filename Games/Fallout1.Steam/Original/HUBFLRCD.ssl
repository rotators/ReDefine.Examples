procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure flee_dude;
procedure damage_p_proc;
procedure Flower00;
procedure Flower01;
procedure Flower02;
procedure Flower03;
procedure Flower03a;
procedure Flower04;
procedure Flower04a;
procedure Flower05;
procedure Flower05a;
procedure Flower06;
procedure Flower07;
procedure Flower08;
procedure Flower09;
procedure Flower10;
procedure Flower11;
procedure Flower12;
procedure Flower13;
procedure Flower14;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        critter_add_trait(self_obj, 1, 6, 72);
        critter_add_trait(self_obj, 1, 5, 68);
    end
    if (script_action == 21) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == 4) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == 11) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == 12) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == 18) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    if ((map_var(6) == 1) and (obj_can_see_obj(self_obj, dude_obj) == 1)) then begin
        critter_set_flee_state(self_obj, 1);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    if ((global_var(195) == 1) or (map_var(0) == 1)) then begin
        call Flower00();
    end
    else begin
        if (global_var(158) == 1) then begin
            call Flower01();
        end
        else begin
            if (obj_is_carrying_obj_pid(dude_obj, 117) == 1) then begin
                float_msg(self_obj, message_str(588, 114), 2);
            end
            else begin
                start_gdialog(588, self_obj, 4, -1, -1);
                gsay_start;
                call Flower02();
                gsay_end;
                end_dialogue;
            end
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(158, global_var(158) + 1);
        set_global_var(155, global_var(155) - 1);
    end
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(588, 100));
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(tile_num(dude_obj), LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 0);
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(source_obj);
    if (party_member_obj(LVar0) != 0) then begin
        set_map_var(6, 1);
    end
end

procedure Flower00
begin
    float_msg(self_obj, message_str(588, 101), 2);
    call flee_dude();
end

procedure Flower01
begin
    float_msg(self_obj, message_str(588, 102), 2);
    call flee_dude();
end

procedure Flower02
begin
    if (get_critter_stat(dude_obj, 34) == 0) then begin
        gsay_reply(588, 103);
    end
    else begin
        gsay_reply(588, 104);
    end
    giq_option(7, 588, 106, Flower03, 50);
    giq_option(7, 588, 107, Flower04, 50);
    giq_option(4, 588, 108, Flower05, 50);
    giq_option(4, 588, 109, Flower06, 49);
    giq_option(4, 588, 110, Flower07, 51);
    giq_option(4, 588, 111, Flower07, 51);
    giq_option(-3, 588, 112, Flower08, 49);
    giq_option(-3, 588, 113, Flower09, 51);
end

procedure Flower03
begin
    gsay_reply(588, 115);
    giq_option(7, 588, 116, Flower03a, 49);
    giq_option(7, 588, 107, Flower04, 50);
    giq_option(4, 588, 109, Flower06, 49);
    giq_option(4, 588, 110, Flower07, 51);
    giq_option(4, 588, 119, Flower07, 51);
end

procedure Flower03a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 20)) == 1) then begin
        call Flower10();
    end
    else begin
        call Flower11();
    end
end

procedure Flower04
begin
    gsay_reply(588, 121);
    giq_option(7, 588, 123, Flower12, 50);
    giq_option(7, 588, 124, Flower04a, 49);
    giq_option(4, 588, 125, Flower05, 50);
    giq_option(4, 588, 126, Flower06, 49);
    giq_option(4, 588, 110, Flower07, 51);
    giq_option(4, 588, 119, Flower07, 51);
end

procedure Flower04a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0)) == 1) then begin
        call Flower13();
    end
    else begin
        call Flower11();
    end
end

procedure Flower05
begin
    gsay_reply(588, 129);
    giq_option(7, 588, 130, Flower05a, 49);
    giq_option(7, 588, 131, Flower04a, 49);
    giq_option(4, 588, 132, Flower06, 49);
    giq_option(4, 588, 110, Flower07, 51);
    giq_option(4, 588, 119, Flower07, 51);
end

procedure Flower05a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0)) == 1) then begin
        call Flower14();
    end
    else begin
        call Flower11();
    end
end

procedure Flower06
begin
    variable LVar0 := 0;
    LVar0 := create_object_sid(117, 0, 0, -1);
    add_obj_to_inven(dude_obj, LVar0);
    gsay_message(588, 135, 49);
end

procedure Flower07
begin
    gsay_message(588, 136, 51);
    call flee_dude();
end

procedure Flower08
begin
    variable LVar0 := 0;
    LVar0 := create_object_sid(117, 0, 0, -1);
    add_obj_to_inven(dude_obj, LVar0);
    gsay_message(588, 137, 49);
end

procedure Flower09
begin
    gsay_message(588, 138, 51);
    call flee_dude();
end

procedure Flower10
begin
    variable LVar0 := 0;
    LVar0 := create_object_sid(117, 0, 0, -1);
    add_obj_to_inven(dude_obj, LVar0);
    gsay_message(588, 139, 49);
end

procedure Flower11
begin
    gsay_message(588, 140, 51);
    call flee_dude();
end

procedure Flower12
begin
    gsay_reply(588, 141);
    giq_option(7, 588, 142, Flower05a, 50);
    giq_option(7, 588, 143, Flower04a, 50);
    giq_option(4, 588, 144, Flower06, 49);
    giq_option(4, 588, 145, Flower07, 51);
    giq_option(4, 588, 146, Flower07, 51);
end

procedure Flower13
begin
    gsay_reply(588, 147);
    giq_option(7, 588, 148, Flower11, 50);
    giq_option(4, 588, 149, Flower06, 49);
    giq_option(4, 588, 150, Flower07, 51);
    giq_option(4, 588, 151, Flower07, 51);
end

procedure Flower14
begin
    set_global_var(281, 1);
    gsay_reply(588, 152);
    giq_option(7, 588, 153, Flower11, 50);
    giq_option(4, 588, 154, Flower06, 49);
    giq_option(4, 588, 155, Flower07, 51);
    giq_option(4, 588, 151, Flower07, 51);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

