procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure damage_p_proc;
procedure description_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure Citizen01;
procedure Citizen02;
procedure Citizen03;
procedure Citizen04;
procedure CitizenEnd;
procedure flee_dude;

variable hostile;
variable initialized;
variable round_counter;
variable DisplayMessage := 100;
variable PsstTime;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, 1, 6, 2);
        critter_add_trait(self_obj, 1, 5, 6);
        add_timer_event(self_obj, game_ticks(random(3, 5)), 1);
        initialized := 1;
    end
    else begin
        if (script_action == 13) then begin
            call combat_p_proc();
        end
        else begin
            if (script_action == 12) then begin
                call critter_p_proc();
            end
            else begin
                if (script_action == 3) then begin
                    call description_p_proc();
                end
                else begin
                    if (script_action == 18) then begin
                        call destroy_p_proc();
                    end
                    else begin
                        if (script_action == 21) then begin
                            call look_at_p_proc();
                        end
                        else begin
                            if (script_action == 4) then begin
                                call pickup_p_proc();
                            end
                            else begin
                                if (script_action == 11) then begin
                                    call talk_p_proc();
                                end
                                else begin
                                    if (script_action == 22) then begin
                                        call timed_event_p_proc();
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure combat_p_proc
begin
    if (fixed_param == 4) then begin
        round_counter := round_counter + 1;
        if (round_counter > 3) then begin
            if (global_var(246) == 0) then begin
                set_global_var(246, 1);
                set_global_var(155, global_var(155) - 5);
            end
        end
    end
end

procedure critter_p_proc
begin
    variable LVar0 := 0;
    if (hostile) then begin
        hostile := 1;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    else begin
        if (local_var(4) and (tile_distance_objs(dude_obj, self_obj) < 8)) then begin
            call flee_dude();
        end
        LVar0 := global_var(343);
        if ((((game_time / 10) - LVar0) >= 10) and (tile_distance_objs(self_obj, dude_obj) <= 4) and (global_var(246) == 0)) then begin
            float_msg(self_obj, message_str(115, random(110, 114)), 0);
            LVar0 := game_time / 10;
            set_global_var(343, LVar0);
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(4, 1);
    end
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(115, 100));
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(246, 1);
    end
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(115, 100));
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure talk_p_proc
begin
    if (local_var(4) or global_var(246)) then begin
        float_msg(self_obj, message_str(669, random(100, 105)), 0);
    end
    else begin
        start_gdialog(115, self_obj, 4, -1, -1);
        gsay_start;
        call Citizen01();
        gsay_end;
        end_dialogue;
    end
end

procedure timed_event_p_proc
begin
    if (obj_on_screen(self_obj)) then begin
        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(1, 5)), 0);
    end
    add_timer_event(self_obj, game_ticks(random(3, 5)), 1);
end

procedure Citizen01
begin
    DisplayMessage := 105;
    gsay_reply(115, 101);
    giq_option(4, 115, 103, Citizen02, 50);
    giq_option(4, 115, 102, CitizenEnd, 50);
    giq_option(-3, 115, 104, CitizenEnd, 50);
end

procedure Citizen02
begin
    gsay_reply(115, DisplayMessage);
    giq_option(4, 115, 106, Citizen03, 50);
    giq_option(4, 115, 107, Citizen04, 50);
    call Goodbyes();
    giq_option(1, 115, exit_line, CitizenEnd, 50);
end

procedure Citizen03
begin
    DisplayMessage := 108;
    call Citizen02();
end

procedure Citizen04
begin
    DisplayMessage := 109;
    call Citizen02();
end

procedure CitizenEnd
begin
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(tile_num(dude_obj), LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

