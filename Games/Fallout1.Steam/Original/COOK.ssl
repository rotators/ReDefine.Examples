procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure damage_p_proc;
procedure description_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;
procedure pickup_p_proc;
procedure Cook01;

variable hostile;
variable initialized;
variable round_counter;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, 1, 6, 2);
        critter_add_trait(self_obj, 1, 5, 6);
        initialized := 1;
    end
    else begin
        if (script_action == 13) then begin
            call combat_p_proc();
        end
        else begin
            if (script_action == 12) then begin
                call critter_p_proc();
            end
            else begin
                if (script_action == 14) then begin
                    call damage_p_proc();
                end
                else begin
                    if (script_action == 3) then begin
                        call description_p_proc();
                    end
                    else begin
                        if (script_action == 18) then begin
                            call destroy_p_proc();
                        end
                        else begin
                            if (script_action == 21) then begin
                                call look_at_p_proc();
                            end
                            else begin
                                if (script_action == 4) then begin
                                    call pickup_p_proc();
                                end
                                else begin
                                    if (script_action == 11) then begin
                                        call talk_p_proc();
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure combat_p_proc
begin
    if (fixed_param == 4) then begin
        round_counter := round_counter + 1;
    end
    if (round_counter > 3) then begin
        if (global_var(246) == 0) then begin
            set_global_var(246, 1);
            set_global_var(155, global_var(155) - 5);
        end
    end
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (global_var(246) == 1) then begin
            hostile := 1;
        end
    end
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(1, 1);
    end
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(114, 100));
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(246, 1);
    end
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(114, 100));
end

procedure talk_p_proc
begin
    if (global_var(246) or (local_var(1) == 1)) then begin
        float_msg(self_obj, message_str(669, random(100, 105)), 0);
    end
    else begin
        if (is_success(do_check(dude_obj, 6, 0)) and (local_var(0) == 0)) then begin
            start_gdialog(114, self_obj, 4, -1, -1);
            gsay_start;
            gsay_reply(114, 101);
            gsay_option(114, 102, Cook01, 50);
            gsay_end;
            end_dialogue;
        end
        else begin
            float_msg(self_obj, message_str(114, 103), 8);
        end
        set_local_var(0, 1);
    end
end

procedure pickup_p_proc
begin
    set_local_var(1, 1);
end

procedure Cook01
begin
    set_global_var(155, global_var(155) + 1);
    gsay_message(114, 104, 50);
end

