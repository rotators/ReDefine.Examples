procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure Paul01;
procedure Paul02;
procedure Paul03;
procedure Paul04;
procedure Paul05;
procedure Paul06;
procedure Paul07;
procedure Paul08;
procedure Paul09;
procedure Paul10;
procedure Paul11;
procedure Paul12;
procedure Paul13;
procedure Paul14;
procedure Paul15;
procedure PaulEnd;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        critter_add_trait(self_obj, 1, 6, 44);
        critter_add_trait(self_obj, 1, 5, 64);
    end
    if (script_action == 21) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == 4) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == 11) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == 12) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == 18) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    start_gdialog(865, self_obj, 4, -1, -1);
    gsay_start;
    if (local_var(4) == 0) then begin
        set_local_var(4, 1);
        call Paul01();
    end
    else begin
        call Paul14();
    end
    gsay_end;
    end_dialogue;
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_global_var(156, 1);
            set_global_var(157, 0);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_global_var(157, 1);
            set_global_var(156, 0);
        end
        set_global_var(159, global_var(159) + 1);
        if ((global_var(159) % 2) == 0) then begin
            set_global_var(155, global_var(155) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(865, 100));
end

procedure Paul01
begin
    gsay_reply(865, 101);
    giq_option(4, 865, 102, Paul02, 50);
    giq_option(4, 865, 103, Paul04, 50);
    if (map_var(0) == 1) then begin
        giq_option(4, 865, 104, Paul07, 50);
    end
    if (global_var(30) != 1) then begin
        giq_option(4, 865, 105, Paul09, 50);
    end
    if (global_var(304) == 1) then begin
        giq_option(4, 865, 106, Paul12, 50);
    end
    giq_option(4, 865, 108, PaulEnd, 50);
    giq_option(-3, 865, 107, Paul15, 50);
end

procedure Paul02
begin
    gsay_reply(865, 109);
    giq_option(4, 865, 110, Paul03, 50);
    if (map_var(0) == 1) then begin
        giq_option(4, 865, 111, Paul07, 50);
    end
end

procedure Paul03
begin
    gsay_reply(865, 112);
    giq_option(4, 865, 113, Paul04, 50);
    giq_option(4, 865, 114, PaulEnd, 50);
end

procedure Paul04
begin
    gsay_reply(865, 115);
    giq_option(4, 865, 116, Paul05, 50);
    giq_option(4, 865, 117, PaulEnd, 50);
end

procedure Paul05
begin
    gsay_reply(865, 118);
    giq_option(4, 865, 119, Paul06, 50);
    giq_option(4, 865, 120, PaulEnd, 50);
end

procedure Paul06
begin
    gsay_reply(865, 121);
    giq_option(4, 865, 122, Paul04, 50);
    if (global_var(30) != 1) then begin
        giq_option(4, 865, 123, Paul09, 50);
    end
    if (global_var(304) == 1) then begin
        giq_option(4, 865, 124, Paul12, 50);
    end
    if (map_var(0) == 1) then begin
        giq_option(4, 865, 125, Paul07, 50);
    end
    giq_option(4, 865, 126, PaulEnd, 50);
end

procedure Paul07
begin
    gsay_reply(865, 127);
    giq_option(4, 865, 128, Paul08, 50);
    giq_option(4, 865, 129, Paul11, 50);
end

procedure Paul08
begin
    gsay_reply(865, 130);
    giq_option(4, 865, 131, Paul05, 50);
    giq_option(4, 865, 132, PaulEnd, 50);
    giq_option(4, 865, 133, Paul06, 50);
end

procedure Paul09
begin
    gsay_reply(865, 134);
    giq_option(4, 865, 135, Paul10, 50);
end

procedure Paul10
begin
    gsay_reply(865, 136);
    giq_option(4, 865, 138, Paul06, 50);
    giq_option(4, 865, 137, PaulEnd, 50);
end

procedure Paul11
begin
    gsay_reply(865, 139);
    giq_option(4, 865, 140, Paul08, 50);
end

procedure Paul12
begin
    gsay_reply(865, 141);
    giq_option(4, 865, 142, Paul13, 50);
    giq_option(4, 865, 143, PaulEnd, 50);
end

procedure Paul13
begin
    gsay_reply(865, 144);
    giq_option(4, 865, 146, Paul06, 50);
    giq_option(4, 865, 145, PaulEnd, 50);
end

procedure Paul14
begin
    gsay_reply(865, message_str(865, 147) + proto_data(obj_pid(dude_obj), 1) + message_str(865, 148));
    giq_option(4, 865, 149, Paul02, 50);
    giq_option(4, 865, 150, Paul04, 50);
    if (map_var(0) == 1) then begin
        giq_option(4, 865, 151, Paul07, 50);
    end
    if (global_var(30) != 1) then begin
        giq_option(4, 865, 152, Paul09, 50);
    end
    if (global_var(304) == 1) then begin
        giq_option(4, 865, 153, Paul12, 50);
    end
    giq_option(4, 865, 155, PaulEnd, 50);
    giq_option(-3, 865, 154, Paul15, 50);
end

procedure Paul15
begin
    gsay_message(865, 156, 50);
end

procedure PaulEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

