procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure damage_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure run_away;
procedure go_forward;
procedure Phil00;
procedure Phil01;
procedure Phil02;
procedure Phil03;
procedure Phil04;
procedure Phil05;
procedure Phil06;
procedure Phil07;
procedure Phil08;
procedure Phil09;
procedure PhilEnd;

variable hostile;
variable home_tile := 28684;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (script_action == 12) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == 18) then begin
            call destroy_p_proc();
        end
        else begin
            if (script_action == 21) then begin
                call look_at_p_proc();
            end
            else begin
                if (script_action == 15) then begin
                    call map_enter_p_proc();
                end
                else begin
                    if (script_action == 4) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == 11) then begin
                            call talk_p_proc();
                        end
                        else begin
                            if (script_action == 22) then begin
                                call timed_event_p_proc();
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    if (map_var(9) == 1) then begin
        call run_away();
    end
    if (map_var(6) == 1) then begin
        add_timer_event(self_obj, game_ticks(2), 2);
        set_map_var(6, 0);
    end
    if (map_var(5) == 0) then begin
        animate_move_obj_to_tile(self_obj, home_tile, 0);
    end
    if (global_var(247) == 1) then begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(247, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
                set_global_var(156, 1);
                set_global_var(157, 0);
            end
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
                set_global_var(157, 1);
                set_global_var(156, 0);
            end
            set_global_var(159, global_var(159) + 1);
            if ((global_var(159) % 2) == 0) then begin
                set_global_var(155, global_var(155) - 1);
            end
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(247, 1);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 1) then begin
        display_msg(message_str(352, 100));
    end
    else begin
        display_msg(message_str(352, 101));
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, 1, 6, 5);
    if (map_var(5) == 1) then begin
        add_timer_event(self_obj, game_ticks(10), 1);
    end
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure talk_p_proc
begin
    if (global_var(5)) then begin
        call Phil01();
    end
    else begin
        if (not(map_var(5))) then begin
            call Phil09();
        end
        else begin
            if ((obj_item_subtype(critter_inven_obj(dude_obj, 1)) == 3) or (obj_item_subtype(critter_inven_obj(dude_obj, 2)) == 3)) then begin
                call Phil00();
            end
            else begin
                if (local_var(4) == 0) then begin
                    start_gdialog(352, self_obj, 4, -1, -1);
                    gsay_start;
                    call Phil02();
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    call Phil08();
                end
            end
        end
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 2) then begin
        float_msg(self_obj, message_str(352, 102), 0);
    end
    else begin
        if (map_var(5)) then begin
            call go_forward();
        end
    end
end

procedure run_away
begin
    animate_move_obj_to_tile(self_obj, 31096, 1);
    set_map_var(9, 0);
    add_timer_event(self_obj, game_ticks(random(10, 30)), 1);
end

procedure go_forward
begin
    set_map_var(8, 1);
    animate_move_obj_to_tile(self_obj, 30889, 0);
end

procedure Phil00
begin
    float_msg(self_obj, message_str(352, 103), 0);
end

procedure Phil01
begin
    float_msg(self_obj, message_str(352, 104), 0);
end

procedure Phil02
begin
    variable LVar0 := 0;
    set_local_var(4, 1);
    if (get_critter_stat(dude_obj, 34) == 0) then begin
        LVar0 := message_str(352, 105);
    end
    else begin
        LVar0 := message_str(352, 106);
    end
    gsay_reply(352, LVar0 + message_str(352, 107));
    giq_option(4, 352, 108, Phil04, 50);
    giq_option(4, 352, 109, PhilEnd, 50);
    giq_option(6, 352, 110, Phil05, 50);
    giq_option(-3, 352, 111, Phil03, 50);
end

procedure Phil03
begin
    gsay_message(352, 112, 50);
end

procedure Phil04
begin
    gsay_reply(352, 113);
    giq_option(4, 352, 114, PhilEnd, 50);
    giq_option(4, 352, 115, Phil05, 50);
end

procedure Phil05
begin
    gsay_reply(352, 116);
    giq_option(4, 352, 117, PhilEnd, 50);
    giq_option(5, 352, 118, Phil06, 50);
    giq_option(6, 352, 119, Phil07, 50);
end

procedure Phil06
begin
    gsay_message(352, 120, 50);
    gsay_reply(352, 121);
    call Goodbyes();
    giq_option(7, 352, 122, Phil07, 50);
    giq_option(4, 634, exit_line, PhilEnd, 50);
end

procedure Phil07
begin
    gsay_message(352, 123, 50);
    gsay_reply(352, 124);
    giq_option(4, 352, 125, PhilEnd, 50);
end

procedure Phil08
begin
    float_msg(self_obj, message_str(352, 126), 0);
end

procedure Phil09
begin
    float_msg(self_obj, message_str(352, 127), 0);
end

procedure PhilEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
        if (has_trait(0, dude_obj, 39)) then begin
            if (global_var(155) > 0) then begin
                set_local_var(0, local_var(0) + global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(155));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(155));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(155));
            end
        end
        if (global_var(158) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(634, random(100, 105));
end

