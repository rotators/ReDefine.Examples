procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure flee_dude;

variable initialized;
variable dude_enemy;
variable cap_count;


procedure start
begin
    if (not(initialized) and metarule(14, 0)) then begin
        critter_add_trait(self_obj, 1, 5, global_var(288));
        critter_add_trait(self_obj, 1, 6, 2);
        initialized := 1;
        float_msg(self_obj, message_str(352, random(128, 129)), 0);
    end
    else begin
        if (script_action == 12) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == 14) then begin
                call damage_p_proc();
            end
            else begin
                if (script_action == 18) then begin
                    call destroy_p_proc();
                end
                else begin
                    if (script_action == 4) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == 11) then begin
                            call talk_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    dude_enemy := global_var(291);
    if ((dude_enemy >= 3) and (tile_distance_objs(self_obj, dude_obj) < 8)) then begin
        call flee_dude();
    end
    else begin
        if ((global_var(289) <= 0) and (dude_enemy < 3) and (global_var(290) > 0)) then begin
            terminate_combat;
            if (not(global_var(292))) then begin
                cap_count := random(80, 120);
                if (random(0, 1)) then begin
                    float_msg(self_obj, message_str(352, 130) + cap_count + message_str(352, 131), 0);
                end
                else begin
                    float_msg(self_obj, message_str(352, 132) + cap_count + message_str(352, 133), 0);
                end
                add_mult_objs_to_inven(dude_obj, create_object_sid(41, 0, 0, -1), cap_count);
                set_global_var(292, 1);
            end
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        dude_enemy := global_var(291);
        dude_enemy := dude_enemy + 1;
        set_global_var(291, dude_enemy);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (source_obj == dude_obj) then begin
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(156) == 1))) then begin
                set_global_var(156, 1);
                set_global_var(157, 0);
            end
            if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
                set_global_var(157, 1);
                set_global_var(156, 0);
            end
            set_global_var(159, global_var(159) + 1);
            if ((global_var(159) % 2) == 0) then begin
                set_global_var(155, global_var(155) - 1);
            end
        end
    end
end

procedure pickup_p_proc
begin
    dude_enemy := global_var(291);
    dude_enemy := dude_enemy + 1;
    set_global_var(291, dude_enemy);
end

procedure talk_p_proc
begin
    dude_enemy := global_var(291);
    if (dude_enemy >= 3) then begin
        float_msg(self_obj, message_str(669, random(100, 105)), 0);
    end
    else begin
        float_msg(self_obj, message_str(352, 127), 0);
    end
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(tile_num(dude_obj), LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

