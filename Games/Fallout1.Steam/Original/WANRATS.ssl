procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure timed_event_p_proc;
procedure use_skill_on_p_proc;
procedure flee_dude;

variable attacked;
variable hostile;
variable initialized;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, 1, 5, 12);
        critter_add_trait(self_obj, 1, 6, 9);
        add_timer_event(self_obj, game_ticks(random(1, 5)), 0);
        initialized := 1;
    end
    else begin
        if (script_action == 12) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == 13) then begin
                call combat_p_proc();
            end
            else begin
                if (script_action == 22) then begin
                    call timed_event_p_proc();
                end
                else begin
                    if (script_action == 8) then begin
                        call use_skill_on_p_proc();
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile and (attacked == 0)) then begin
        hostile := 0;
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
    else begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            if (has_trait(0, dude_obj, 44) == 0) then begin
                hostile := 1;
            end
        end
        if (attacked and (tile_distance_objs(self_obj, dude_obj) < 8)) then begin
            call flee_dude();
        end
    end
end

procedure combat_p_proc
begin
    if (fixed_param == 4) then begin
        attacked := 1;
    end
end

procedure timed_event_p_proc
begin
    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(1, 3)), 0);
    add_timer_event(self_obj, game_ticks(random(1, 5)), 0);
end

procedure use_skill_on_p_proc
begin
    if (action_being_used == 10) then begin
        script_overrides;
    end
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(tile_num(dude_obj), tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(tile_num(dude_obj), LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

