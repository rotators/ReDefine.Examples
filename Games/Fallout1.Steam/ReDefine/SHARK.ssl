procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure Shark01;
procedure Shark01a;
procedure Shark02;
procedure Shark03;
procedure Shark04;
procedure Shark04a;
procedure Shark04b;
procedure Shark05;
procedure Shark06;
procedure Shark07;
procedure Shark08;
procedure SharkCombat;
procedure SharkEnd;
procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;
variable dest_tile := 7000;
variable hostile;
variable timer_set;
variable sleeping_disabled;
variable waypoint;

import variable removal_ptr;
import variable Trish_ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (script_action == critter_proc) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == damage_p_proc()) then begin
            call damage_p_proc();
        end
        else begin
            if (script_action == destroy_proc) then begin
                call destroy_p_proc();
            end
            else begin
                if (script_action == look_at_proc) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == pickup_proc) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == talk_proc) then begin
                            call talk_p_proc();
                        end
                        else begin
                            if (script_action == timed_event_proc) then begin
                                call timed_event_p_proc();
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack(dude_obj);
    end
    else begin
        if ((global_var(GVAR_DESTROY_VATS_10) == 1) and (local_var(6) == 0)) then begin
            add_timer_event(self_obj, game_ticks(3), 3);
            set_local_var(6, 1);
        end
        else begin
            if (global_var(GVAR_BUST_SKULZ) != 2) then begin
                if (tile_num(self_obj) != dest_tile) then begin
                    animate_move_obj_to_tile(self_obj, dest_tile, 0);
                end
                else begin
                    if (waypoint == 1) then begin
                        waypoint := 0;
                        dest_tile := 33519;
                    end
                end
                if (sleeping_disabled == 0) then begin
                    call sleeping();
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    if ((source_obj == dude_obj) and (map_var(0) == 1)) then begin
        set_map_var(1, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
        if ((global_var(GVAR_BAD_MONSTER) % 6) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4)) then begin
        display_mstr(100);
    end
    else begin
        display_mstr(101);
    end
end

procedure map_enter_p_proc
begin
    sleep_time := 2230;
    wake_time := 1530;
    home_tile := 20486;
    sleep_tile := 7000;
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 14);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_JUNKTOWN_THUG);
    if ((global_var(GVAR_BUST_SKULZ) == 2) or (global_var(GVAR_DESTROY_VATS_10) == 1)) then begin
        move_to(self_obj, 7000, 0);
        set_obj_visibility(self_obj, 1);
        sleeping_disabled := 1;
        removal_ptr := self_obj;
    end
    else begin
        dest_tile := home_tile;
    end
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure talk_p_proc
begin
    start_gdialog(387, self_obj, 4, -1, -1);
    gsay_start;
    if (local_var(4) == 0) then begin
        call Shark01();
    end
    else begin
        if (local_var(1) < 2) then begin
            call Shark08();
        end
        else begin
            call Shark06();
        end
    end
    gsay_end;
    end_dialogue;
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        waypoint := 1;
        dest_tile := 26495;
    end
    else begin
        if (fixed_param == 2) then begin
            if (Trish_ptr != 0) then begin
                attack(Trish_ptr);
            end
        end
        else begin
            if (fixed_param == 3) then begin
                float_msg(self_obj, mstr(126), FLOAT_MSG_RED);
                add_timer_event(self_obj, game_ticks(5), 1);
                sleeping_disabled := 1;
            end
        end
    end
end

procedure Shark01
begin
    set_local_var(4, 1);
    Reply(103);
    giq_option(4, NAME, 104, SharkCombat, BAD_REACTION);
    giq_option(4, NAME, 105, Shark02, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, Shark03, NEUTRAL_REACTION);
    giq_option(5, NAME, 107, Shark01a, GOOD_REACTION);
    giq_option(-3, NAME, 108, Shark05, NEUTRAL_REACTION);
end

procedure Shark01a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call Shark04();
    end
    else begin
        call Shark03();
    end
end

procedure Shark02
begin
    gsay_message(NAME, 109, BAD_REACTION);
    call SharkCombat();
end

procedure Shark03
begin
    variable LVar0 := 0;
    LVar0 := mstr(110);
    if (dude_gender == 1) then begin
        LVar0 := LVar0 + mstr(111);
    end
    else begin
        LVar0 := LVar0 + mstr(112);
    end
    Reply(LVar0);
    giq_option(4, NAME, 113, SharkCombat, NEUTRAL_REACTION);
end

procedure Shark04
begin
    call UpReactLevel();
    Reply(114);
    giq_option(4, NAME, 115, timed_event_p_proc, NEUTRAL_REACTION);
    giq_option(4, NAME, 116, Shark04b, GOOD_REACTION);
    giq_option(4, NAME, 117, Shark04a, NEUTRAL_REACTION);
    giq_option(4, NAME, 118, SharkCombat, BAD_REACTION);
end

procedure Shark04a
begin
    if (not(is_success(roll_vs_skill(dude_obj, 14, 0)))) then begin
        call DownReactLevel();
    end
    call Shark05();
end

procedure Shark04b
begin
    call UpReactLevel();
    add_timer_event(self_obj, game_ticks(3), 2);
end

procedure Shark05
begin
    gsay_message(NAME, 119, NEUTRAL_REACTION);
end

procedure Shark06
begin
    Reply(120);
    giq_option(4, NAME, 121, Shark07, NEUTRAL_REACTION);
    giq_option(4, NAME, 122, Shark03, NEUTRAL_REACTION);
    giq_option(-3, NAME, 123, Shark05, NEUTRAL_REACTION);
end

procedure Shark07
begin
    gsay_message(NAME, 124, NEUTRAL_REACTION);
    call SharkCombat();
end

procedure Shark08
begin
    gsay_message(NAME, 125, NEUTRAL_REACTION);
    call SharkCombat();
end

procedure SharkCombat
begin
    hostile := 1;
end

procedure SharkEnd
begin
end

procedure sleeping
begin
    if (local_var(5) == 1) then begin
        if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
            if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
                if (tile_num(self_obj) != home_tile) then begin
                    animate_move_obj_to_tile(self_obj, home_tile, 0);
                end
                else begin
                    set_local_var(5, 0);
                end
            end
            else begin
                move_to(self_obj, home_tile, elevation(self_obj));
                if (tile_num(self_obj) == home_tile) then begin
                    set_local_var(5, 0);
                end
            end
        end
    end
    else begin
        if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
            if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    animate_move_obj_to_tile(self_obj, self_obj, 0);
                end
                else begin
                    set_local_var(5, 1);
                end
            end
            else begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    move_to(self_obj, sleep_tile, elevation(self_obj));
                end
                else begin
                    set_local_var(5, 1);
                end
            end
        end
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
