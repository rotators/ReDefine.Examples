procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure map_update_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure flee_dude;

variable hostile;
variable initialized;
variable scared;


procedure start
begin
    if (script_action == critter_proc) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == destroy_proc) then begin
            call destroy_p_proc();
        end
        else begin
            if (script_action == map_update_proc) then begin
                call map_update_p_proc();
            end
            else begin
                if (script_action == pickup_proc) then begin
                    call pickup_p_proc();
                end
                else begin
                    if (script_action == talk_proc) then begin
                        call talk_p_proc();
                    end
                    else begin
                        if (script_action == timed_event_proc) then begin
                            call timed_event_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (scared) then begin
        if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
            call flee_dude();
        end
    end
    else begin
        if (hostile) then begin
            hostile := 0;
            scared := 1;
            attack(dude_obj);
        end
        else begin
            if (global_var(GVAR_WATER_THIEF_2) == 1) then begin
                hostile := 1;
            end
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
    set_global_var(GVAR_WATER_THIEF_2, 1);
end

procedure map_update_p_proc
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 2);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, 15 + random(0, 4));
        add_timer_event(self_obj, game_ticks(random(1, 3)), 1);
        hostile := global_var(GVAR_SAVE_TANDI_5);
        initialized := 1;
    end
end

procedure pickup_p_proc
begin
    if (scared == 0) then begin
        hostile := 1;
        set_global_var(GVAR_SAVE_TANDI_5, 1);
    end
end

procedure talk_p_proc
begin
    if (scared) then begin
        float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), FLOAT_MSG_RED);
    end
    else begin
        float_msg(self_obj, message_str(SCRIPT_GENGRDA, random(100, 105)), FLOAT_MSG_GREEN);
    end
end

procedure timed_event_p_proc
begin
    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(3, 5)), 0);
    add_timer_event(self_obj, game_ticks(random(0, 3)), 1);
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(dude_tile, tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(dude_tile, LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end
