procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure timed_event_p_proc;
procedure damage_p_proc;
procedure Dan00;
procedure Dan01;
procedure Dan02;
procedure Dan03;
procedure Dan04;
procedure Dan05;
procedure Dan06;
procedure Dan07;
procedure Dan08;
procedure Dan09;
procedure Dan10;
procedure Dan11;
procedure Dan12;
procedure Dan13;
procedure Dan14;
procedure Dan15;
procedure Dan16;
procedure Dan17;
procedure Dan18;
procedure Dan19;
procedure Dan20;
procedure Dan21;
procedure Dan22;
procedure Dan23;
procedure Dan24;
procedure Dan25;
procedure Dan26;
procedure Dan27;
procedure Dan28;
procedure DanAtNight;
procedure SendToStart;
procedure SendToStreet;
procedure SendToCattle1;
procedure SendToCattle2;
procedure SendToSleep;
procedure DanEnd;

variable hostile;
variable Only_Once := 1;
variable SetDayNight;
variable NightCount;
variable Talky;
variable WalkToTalker;
variable Sleeping;

import variable Billy_ptr;
import variable Dan_ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 62);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_MERCHANT);
        Dan_ptr := self_obj;
    end
    if (script_action == look_at_proc) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == pickup_proc) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == talk_proc) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == critter_proc) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == destroy_proc) then begin
                        call destroy_p_proc();
                    end
                    else begin
                        if (script_action == timed_event_proc) then begin
                            call timed_event_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack(dude_obj);
    end
    if ((game_time_hour >= 600) and (game_time_hour < 700)) then begin
        if (SetDayNight == 0) then begin
            add_timer_event(self_obj, game_ticks(30), 3);
            SetDayNight := 1;
        end
    end
    if (map_var(0) == 1) then begin
        if (WalkToTalker == 0) then begin
            reg_anim_func(2, self_obj);
            reg_anim_func(1, 1);
            reg_anim_obj_move_to_tile(self_obj, 13891, -1);
            reg_anim_func(3, 0);
            WalkToTalker := 1;
        end
    end
    if (tile_num(self_obj) == 13891) then begin
        if (map_var(0) == 1) then begin
            if (Talky == 0) then begin
                call Dan27();
                Talky := 1;
                add_timer_event(self_obj, game_ticks(60 * 2), 1);
            end
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
        call DanAtNight();
    end
    else begin
        if (local_var(4) == 1) then begin
            set_local_var(4, 2);
            if ((map_var(0) == 2) and (local_var(8) == 0)) then begin
                if (local_var(1) > 1) then begin
                    start_gdialog(562, self_obj, 4, -1, -1);
                    gsay_start;
                    call Dan15();
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    call Dan28();
                end
            end
            else begin
                call Dan28();
            end
        end
        else begin
            if (local_var(4) == 2) then begin
                if ((map_var(0) == 2) and (local_var(8) == 0)) then begin
                    if (local_var(1) == 1) then begin
                        start_gdialog(562, self_obj, 4, -1, -1);
                        gsay_start;
                        call Dan16();
                        gsay_end;
                        end_dialogue;
                    end
                    else begin
                        call Dan28();
                    end
                end
                else begin
                    call Dan28();
                end
            end
            else begin
                start_gdialog(562, self_obj, 4, -1, -1);
                gsay_start;
                call Dan00();
                gsay_end;
                end_dialogue;
                set_local_var(4, 1);
            end
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
    set_global_var(GVAR_DESTROY_VATS_8, 1);
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure timed_event_p_proc
begin
    if ((game_time_hour >= 600) and (game_time_hour < 700) or ((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
        if (Sleeping == 1) then begin
            reg_anim_func(2, self_obj);
            reg_anim_func(1, 1);
            reg_anim_obj_move_to_tile(self_obj, 12871, -1);
            reg_anim_func(3, 0);
            add_timer_event(self_obj, game_ticks(60 * 25), 2);
            Sleeping := 0;
        end
        else begin
            if (fixed_param == 1) then begin
                call SendToStart();
            end
            else begin
                if (fixed_param == 2) then begin
                    call SendToStreet();
                end
                else begin
                    if (fixed_param == 3) then begin
                        call SendToCattle1();
                    end
                    else begin
                        if (fixed_param == 4) then begin
                            call SendToCattle2();
                        end
                    end
                end
            end
        end
    end
    else begin
        call SendToSleep();
        if (fixed_param == 4) then begin
            if (tile_distance_objs(self_obj, dude_obj) <= 10) then begin
                float_msg(self_obj, mstr(215), FLOAT_MSG_RED);
            end
        end
        else begin
            if (fixed_param == 5) then begin
                NightCount := 0;
                if (tile_distance_objs(self_obj, dude_obj) <= 10) then begin
                    float_msg(self_obj, mstr(216), FLOAT_MSG_RED);
                    hostile := 1;
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(source_obj);
    if (party_member_obj(LVar0) != 0) then begin
        set_global_var(GVAR_ENEMY_HUB, 1);
    end
end

procedure Dan00
begin
    Reply(102);
    giq_option(5, NAME, 106, Dan11, NEUTRAL_REACTION);
    giq_option(4, NAME, 107, Dan01, NEUTRAL_REACTION);
    if (map_var(0) == 2) then begin
        giq_option(4, NAME, 108, Dan14, NEUTRAL_REACTION);
        set_local_var(8, 1);
    end
    giq_option(-3, NAME, 109, Dan02, NEUTRAL_REACTION);
end

procedure Dan01
begin
    Reply(110);
    giq_option(4, NAME, 111, Dan03, NEUTRAL_REACTION);
    giq_option(4, NAME, 112, Dan05, NEUTRAL_REACTION);
    giq_option(5, NAME, 113, Dan11, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, DanEnd, NEUTRAL_REACTION);
end

procedure Dan02
begin
    gsay_message(NAME, 115, BAD_REACTION);
end

procedure Dan03
begin
    if (dude_gender == 0) then begin
        Reply(118);
    end
    else begin
        Reply(119);
    end
    giq_option(4, NAME, 120, Dan04, BAD_REACTION);
    giq_option(5, NAME, 121, Dan11, NEUTRAL_REACTION);
    giq_option(4, NAME, 122, DanEnd, NEUTRAL_REACTION);
end

procedure Dan04
begin
    Reply(123);
    giq_option(4, NAME, 124, Dan06, BAD_REACTION);
    giq_option(4, NAME, 125, DanEnd, NEUTRAL_REACTION);
end

procedure Dan05
begin
    Reply(126);
    giq_option(4, NAME, 127, Dan06, BAD_REACTION);
    giq_option(4, NAME, 128, DanEnd, NEUTRAL_REACTION);
end

procedure Dan06
begin
    set_local_var(5, 1);
    Reply(129);
    giq_option(4, NAME, 130, Dan07, BAD_REACTION);
    giq_option(4, NAME, 131, Dan09, NEUTRAL_REACTION);
end

procedure Dan07
begin
    Reply(132);
    giq_option(4, NAME, 133, Dan10, BAD_REACTION);
    giq_option(4, NAME, 134, Dan08, NEUTRAL_REACTION);
end

procedure Dan08
begin
    Reply(135);
    giq_option(4, NAME, 136, Dan09, NEUTRAL_REACTION);
    giq_option(4, NAME, 137, Dan11, NEUTRAL_REACTION);
end

procedure Dan09
begin
    if (dude_gender == 0) then begin
        gsay_message(NAME, 138, BAD_REACTION);
    end
    else begin
        gsay_message(NAME, 139, BAD_REACTION);
    end
end

procedure Dan10
begin
    gsay_message(NAME, 141, BAD_REACTION);
    call combat();
end

procedure Dan11
begin
    if (dude_gender == 0) then begin
        Reply(142);
    end
    else begin
        Reply(mstr(142) + " " + mstr(143));
    end
    giq_option(7, NAME, 144, Dan12, NEUTRAL_REACTION);
    giq_option(4, NAME, 145, Dan13, NEUTRAL_REACTION);
    giq_option(4, NAME, 146, DanEnd, NEUTRAL_REACTION);
end

procedure Dan12
begin
    Reply(147);
    giq_option(4, NAME, 148, DanEnd, NEUTRAL_REACTION);
    giq_option(4, NAME, 149, DanEnd, NEUTRAL_REACTION);
    giq_option(5, NAME, 150, Dan13, NEUTRAL_REACTION);
end

procedure Dan13
begin
    gsay_message(NAME, 151, NEUTRAL_REACTION);
end

procedure Dan14
begin
    Reply(152);
    giq_option(4, NAME, 153, Dan17, NEUTRAL_REACTION);
    giq_option(4, NAME, 154, DanEnd, NEUTRAL_REACTION);
end

procedure Dan15
begin
    Reply(155);
    giq_option(5, NAME, 156, Dan11, NEUTRAL_REACTION);
    giq_option(4, NAME, 157, Dan01, NEUTRAL_REACTION);
    if (map_var(0) == 2) then begin
        giq_option(4, NAME, 158, Dan14, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 159, DanEnd, NEUTRAL_REACTION);
    giq_option(-3, NAME, 160, Dan02, NEUTRAL_REACTION);
end

procedure Dan16
begin
    Reply(161);
    if (map_var(0) == 2) then begin
        giq_option(4, NAME, 162, Dan14, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 163, DanEnd, NEUTRAL_REACTION);
    giq_option(-3, NAME, 164, Dan02, NEUTRAL_REACTION);
end

procedure Dan17
begin
    Reply(168);
    giq_option(4, NAME, 169, Dan19, NEUTRAL_REACTION);
    giq_option(4, NAME, 170, Dan18, NEUTRAL_REACTION);
    giq_option(4, NAME, 171, DanEnd, NEUTRAL_REACTION);
end

procedure Dan18
begin
    Reply(172);
    giq_option(5, NAME, 173, Dan19, NEUTRAL_REACTION);
    giq_option(4, NAME, 174, DanEnd, NEUTRAL_REACTION);
end

procedure Dan19
begin
    Reply(175);
    giq_option(4, NAME, 176, Dan20, BAD_REACTION);
    giq_option(4, NAME, 177, DanEnd, NEUTRAL_REACTION);
    if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
        giq_option(4, NAME, 178, Dan20, BAD_REACTION);
    end
    giq_option(4, NAME, 179, Dan22, NEUTRAL_REACTION);
    giq_option(4, NAME, 180, Dan23, NEUTRAL_REACTION);
end

procedure Dan20
begin
    Reply(181);
    giq_option(4, NAME, 182, Dan21, BAD_REACTION);
    giq_option(4, NAME, 183, Dan21, BAD_REACTION);
    giq_option(4, NAME, 184, Dan24, NEUTRAL_REACTION);
    giq_option(4, NAME, 185, Dan25, NEUTRAL_REACTION);
end

procedure Dan21
begin
    Reply(186);
    giq_option(4, NAME, 187, DanEnd, NEUTRAL_REACTION);
    giq_option(4, NAME, 188, DanEnd, NEUTRAL_REACTION);
    giq_option(4, NAME, 189, DanEnd, NEUTRAL_REACTION);
end

procedure Dan22
begin
    set_local_var(7, 1);
    set_map_var(1, 1);
    gsay_message(NAME, 190, NEUTRAL_REACTION);
end

procedure Dan23
begin
    gsay_message(NAME, 191, NEUTRAL_REACTION);
end

procedure Dan24
begin
    Reply(192);
    giq_option(4, NAME, 193, DanEnd, BAD_REACTION);
    giq_option(4, NAME, 194, DanEnd, BAD_REACTION);
    giq_option(4, NAME, 195, DanEnd, BAD_REACTION);
end

procedure Dan25
begin
    gsay_message(NAME, 196, NEUTRAL_REACTION);
end

procedure Dan26
begin
    if (tile_num(Billy_ptr) != 9858) then begin
        float_msg(self_obj, mstr(random(197, 199)), FLOAT_MSG_RED);
    end
end

procedure Dan27
begin
    float_msg(self_obj, mstr(random(200, 203)), FLOAT_MSG_RED);
    set_map_var(0, 2);
end

procedure Dan28
begin
    float_msg(self_obj, mstr(random(208, 213)), FLOAT_MSG_RED);
end

procedure DanAtNight
begin
    if (NightCount == 0) then begin
        float_msg(self_obj, mstr(214), FLOAT_MSG_RED);
        NightCount := 1;
        add_timer_event(self_obj, game_ticks(5), 4);
        add_timer_event(self_obj, game_ticks(10), 5);
    end
end

procedure SendToStart
begin
    reg_anim_func(2, self_obj);
    reg_anim_func(1, 1);
    reg_anim_obj_move_to_tile(self_obj, 15522, -1);
    reg_anim_func(3, 0);
    add_timer_event(self_obj, game_ticks(60 * 12), 2);
end

procedure SendToStreet
begin
    reg_anim_func(2, self_obj);
    reg_anim_func(1, 1);
    reg_anim_obj_move_to_tile(self_obj, 15295, -1);
    reg_anim_func(3, 0);
    add_timer_event(self_obj, game_ticks(60 * 2), 3);
end

procedure SendToCattle1
begin
    reg_anim_func(2, self_obj);
    reg_anim_func(1, 1);
    reg_anim_obj_move_to_tile(self_obj, 12871, -1);
    reg_anim_func(3, 0);
    if (random(1, 10) >= 6) then begin
        add_timer_event(self_obj, game_ticks(60 * 3), 4);
    end
    else begin
        add_timer_event(self_obj, game_ticks(60 * 4), 1);
    end
end

procedure SendToCattle2
begin
    reg_anim_func(2, self_obj);
    reg_anim_func(1, 1);
    reg_anim_obj_move_to_tile(self_obj, 12871, -1);
    reg_anim_func(3, 0);
    add_timer_event(self_obj, game_ticks(60 * 4), 1);
end

procedure SendToSleep
begin
    if (Sleeping == 0) then begin
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        reg_anim_obj_move_to_tile(self_obj, 14932, -1);
        reg_anim_func(3, 0);
        SetDayNight := 0;
        Sleeping := 1;
    end
end

procedure DanEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
