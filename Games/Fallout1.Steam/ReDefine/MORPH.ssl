procedure start;
procedure do_dialogue;
procedure morphend;
procedure morphcbt;
procedure morph02;
procedure morph02a;
procedure morph02_1;
procedure morph02_2;
procedure morph02_3;
procedure morph03;
procedure morph03_1;
procedure morph03_2;
procedure morph04;
procedure morph04a;
procedure morph05;
procedure morph06;
procedure morph07;
procedure morph07_1;
procedure morph08;
procedure morph09;
procedure morph10;
procedure morph10_1;
procedure morph11;
procedure morph12;
procedure morph13;
procedure morph14;
procedure morph15;
procedure morph16;
procedure morph17;
procedure morph18;
procedure morph18_1;
procedure morph18_2;
procedure morph19;
procedure morph20;
procedure morph21;
procedure morph23;
procedure morph24;
procedure morph26;
procedure morph27;
procedure morph27_1;
procedure morph28;
procedure morph29;
procedure morph30;
procedure morph31;
procedure morph32;
procedure morph33;
procedure morph33_1;
procedure morph34;
procedure morph35;
procedure morph36;
procedure morph37;
procedure morph38;
procedure morph39;
procedure morph39_1;
procedure morph40;
procedure morph41;
procedure morph42;
procedure morph42a;
procedure morph42a_1;
procedure morph42b;
procedure morph42c;
procedure morph45;
procedure morph46;
procedure morph47;
procedure morph48;
procedure morph49;
procedure morph50;
procedure morph51;
procedure morph52;
procedure morph53;
procedure morph54;
procedure morph55;
procedure morph56;
procedure morph57;
procedure morph58;
procedure morph59;
procedure morph60;
procedure morph61;
procedure morph62;
procedure morph63;
procedure morph64;
procedure morph65;
procedure morphx;
procedure morphx2;
procedure morphx4;
procedure morph66;
procedure morph05a;
procedure morph08a;
procedure morph32a;
procedure morph39a;
procedure morph05b;

variable MALE;
variable ONTHEJOB;
variable DESTROYED;
variable LIED;
variable ONCEBEFORE;
variable TRESPASS;
variable Signal_wait;
variable deliver_player;
variable Only_Once := 1;

import variable Master_Ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        if (cur_map_index == 18) then begin
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 20);
        end
        else begin
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 55);
        end
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_COC_MORPHEUS);
    end
    if (script_action == talk_proc) then begin
        call do_dialogue();
    end
    else begin
        if ((script_action == look_at_proc) or (script_action == description_proc)) then begin
            script_overrides;
            display_mstr(100);
        end
        else begin
            if (script_action == timed_event_proc) then begin
                if (fixed_param == 1) then begin
                    if (obj_can_see_obj(self_obj, dude_obj)) then begin
                        dialogue_system_enter;
                    end
                    else begin
                        Signal_wait := 0;
                    end
                end
                else begin
                    if ((fixed_param == 2) and not(combat_is_initialized)) then begin
                        set_obj_visibility(self_obj, 1);
                    end
                end
            end
            else begin
                if (script_action == destroy_proc) then begin
                    if (source_obj == dude_obj) then begin
                        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                        end
                        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
                        end
                        set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
                        if ((global_var(GVAR_BAD_MONSTER) % 6) == 0) then begin
                            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 1);
                        end
                    end
                    display_mstr(500);
                    give_exp_points(1000);
                end
                else begin
                    if (script_action == pickup_proc) then begin
                        set_local_var(5, 2);
                    end
                    else begin
                        if (script_action == damage_proc) then begin
                            set_local_var(5, 1);
                        end
                        else begin
                            if (script_action == critter_proc) then begin
                                if (global_var(GVAR_MORPHEUS_DELIVERS_PLAYER) == 1) then begin
                                    set_global_var(GVAR_MORPHEUS_DELIVERS_PLAYER, 2);
                                    add_timer_event(Master_Ptr, game_ticks(5), 1);
                                    add_timer_event(self_obj, game_ticks(5), 2);
                                    dialogue_system_enter;
                                end
                                if (local_var(5) == 2) then begin
                                    set_local_var(5, 1);
                                    attack(dude_obj);
                                end
                                if (tile_num(self_obj) == 23457) then begin
                                    set_obj_visibility(self_obj, 1);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure do_dialogue
begin
    call get_reaction();
    MALE := dude_gender == 0;
    if (local_var(5) != 0) then begin
        float_msg(self_obj, message_str(SCRIPT_GENCHAT, 172), FLOAT_MSG_RED);
        call morphcbt();
    end
    else begin
        if (global_var(GVAR_MORPHEUS_DELIVERS_PLAYER) == 2) then begin
            set_global_var(GVAR_MORPHEUS_DELIVERS_PLAYER, 3);
            call morph66();
            animate_move_obj_to_tile(self_obj, 23457, 0);
        end
        else begin
            if (Signal_wait) then begin
                Signal_wait := 0;
                call morph04a();
            end
            else begin
                if (cur_map_index == 17) then begin
                    start_gdialog(53, self_obj, 4, 2, 8);
                    gsay_start;
                    call morph28();
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    if (global_var(GVAR_MORPHEUS_DELIVERS_PLAYER) == 3) then begin
                        float_msg(self_obj, message_str(SCRIPT_GENCHAT, 171), FLOAT_MSG_RED);
                    end
                    else begin
                        start_gdialog(53, self_obj, 4, 2, 8);
                        gsay_start;
                        call morph02();
                        gsay_end;
                        end_dialogue;
                    end
                end
            end
        end
    end
end

procedure morphend
begin
end

procedure morphcbt
begin
    set_local_var(5, 2);
end

procedure morph02
begin
    Reply(101);
    giq_option(4, NAME, 102, morph02_1, NEUTRAL_REACTION);
    giq_option(5, NAME, 103, morph02_3, NEUTRAL_REACTION);
    giq_option(4, NAME, mstr(104) + proto_data(obj_pid(dude_obj), 1) + mstr(105), morph27, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, morph06, BAD_REACTION);
    giq_option(-3, NAME, 107, morph02a, NEUTRAL_REACTION);
end

procedure morph02a
begin
    gsay_message(NAME, 108, BAD_REACTION);
    call morphcbt();
end

procedure morph02_1
begin
    if (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 113) then begin
        call morph02_2();
    end
    else begin
        call morph06();
    end
end

procedure morph02_2
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call morph03();
    end
    else begin
        call morph06();
    end
end

procedure morph02_3
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call morph07();
    end
    else begin
        call morph26();
    end
end

procedure morph03
begin
    Reply(109);
    giq_option(4, NAME, 110, morph03_1, NEUTRAL_REACTION);
    giq_option(5, NAME, 111, morph03_2, NEUTRAL_REACTION);
    giq_option(4, NAME, 112, morph23, NEUTRAL_REACTION);
    giq_option(4, NAME, 113, morph24, BAD_REACTION);
    giq_option(4, NAME, 114, morph06, NEUTRAL_REACTION);
end

procedure morph03_1
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call morph04();
    end
    else begin
        call morph05();
    end
end

procedure morph03_2
begin
    if (is_success(roll_vs_skill(dude_obj, 14, -20))) then begin
        call morph04();
    end
    else begin
        call morph05();
    end
end

procedure morph04
begin
    gsay_message(NAME, 115, NEUTRAL_REACTION);
    call morphx();
end

procedure morph04a
begin
    float_msg(self_obj, mstr(116), FLOAT_MSG_LIGHT_RED);
    call morphcbt();
end

procedure morph05
begin
    Reply(117);
    giq_option(4, NAME, 118, morph05a, BAD_REACTION);
    giq_option(4, NAME, 119, morph05b, NEUTRAL_REACTION);
    giq_option(4, NAME, 120, morph06, BAD_REACTION);
end

procedure morph06
begin
    gsay_message(NAME, 121, BAD_REACTION);
    call morphcbt();
end

procedure morph07
begin
    Reply(122);
    giq_option(4, NAME, 123, morph08, NEUTRAL_REACTION);
    giq_option(4, NAME, 124, morph16, NEUTRAL_REACTION);
    giq_option(6, NAME, 125, morph07_1, NEUTRAL_REACTION);
end

procedure morph07_1
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call morph20();
    end
    else begin
        call morph21();
    end
end

procedure morph08
begin
    Reply(126);
    giq_option(5, NAME, 127, morph08a, NEUTRAL_REACTION);
    giq_option(4, NAME, 128, morph12, NEUTRAL_REACTION);
    giq_option(5, NAME, 129, morph14, NEUTRAL_REACTION);
end

procedure morph09
begin
    Reply(130);
    giq_option(5, NAME, 131, morph10, NEUTRAL_REACTION);
    giq_option(5, NAME, 132, morph10, NEUTRAL_REACTION);
    giq_option(4, NAME, 133, morph06, BAD_REACTION);
    giq_option(4, NAME, 134, morph11, BAD_REACTION);
end

procedure morph10
begin
    Reply(135);
    giq_option(4, NAME, 136, morph11, BAD_REACTION);
    giq_option(4, NAME, 137, morph12, NEUTRAL_REACTION);
    giq_option(4, NAME, 138, morph10_1, NEUTRAL_REACTION);
end

procedure morph10_1
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        set_local_var(1, 2);
        call morph13();
    end
    else begin
        call morph11();
    end
end

procedure morph11
begin
    gsay_message(NAME, 139, BAD_REACTION);
    call morphcbt();
end

procedure morph12
begin
    Reply(140);
    giq_option(4, NAME, 141, morphx2, NEUTRAL_REACTION);
    giq_option(4, NAME, 142, morphcbt, BAD_REACTION);
end

procedure morph13
begin
    gsay_message(NAME, 143, NEUTRAL_REACTION);
    call morphx2();
end

procedure morph14
begin
    Reply(144);
    giq_option(4, NAME, 145, morph12, NEUTRAL_REACTION);
    giq_option(4, NAME, 146, morph11, BAD_REACTION);
    giq_option(4, NAME, 147, morph15, BAD_REACTION);
end

procedure morph15
begin
    gsay_message(NAME, 148, BAD_REACTION);
    call morphcbt();
end

procedure morph16
begin
    Reply(149);
    giq_option(4, NAME, 150, morph17, NEUTRAL_REACTION);
    giq_option(4, NAME, 151, morph17, NEUTRAL_REACTION);
end

procedure morph17
begin
    Reply(152);
    giq_option(4, NAME, 153, morph18, NEUTRAL_REACTION);
    giq_option(4, NAME, 154, morph18, NEUTRAL_REACTION);
end

procedure morph18
begin
    Reply(155);
    giq_option(4, NAME, 156, morph18_1, NEUTRAL_REACTION);
    giq_option(4, NAME, 157, morph18_2, NEUTRAL_REACTION);
end

procedure morph18_1
begin
    if (is_success(roll_vs_skill(dude_obj, 14, -5))) then begin
        call morph19();
    end
    else begin
        call morph15();
    end
end

procedure morph18_2
begin
    if (is_success(roll_vs_skill(dude_obj, 14, -15))) then begin
        call morph12();
    end
    else begin
        call morph15();
    end
end

procedure morph19
begin
    Reply(158);
    giq_option(4, NAME, 159, morphcbt, BAD_REACTION);
    giq_option(4, NAME, 160, morphx2, NEUTRAL_REACTION);
end

procedure morph20
begin
    gsay_message(NAME, 161, BAD_REACTION);
    call morphcbt();
end

procedure morph21
begin
    Reply(162);
    giq_option(4, NAME, 163, morph08, NEUTRAL_REACTION);
    giq_option(4, NAME, 164, morph16, NEUTRAL_REACTION);
end

procedure morph23
begin
    Reply(165);
    giq_option(4, NAME, 166, morph12, NEUTRAL_REACTION);
    giq_option(4, NAME, 167, morph16, NEUTRAL_REACTION);
    giq_option(4, NAME, 168, morph11, BAD_REACTION);
    giq_option(4, NAME, 169, morph15, BAD_REACTION);
end

procedure morph24
begin
    Reply(170);
    giq_option(4, NAME, 171, morphcbt, BAD_REACTION);
    giq_option(7, NAME, 172, morphcbt, BAD_REACTION);
    giq_option(4, NAME, 173, morphcbt, BAD_REACTION);
end

procedure morph26
begin
    Reply(174);
    giq_option(4, NAME, 175, morph12, NEUTRAL_REACTION);
    giq_option(5, NAME, 176, morph16, NEUTRAL_REACTION);
    giq_option(4, NAME, 177, morph11, BAD_REACTION);
    giq_option(4, NAME, 178, morph15, BAD_REACTION);
end

procedure morph27
begin
    Reply(179);
    giq_option(4, NAME, 180, morph02_1, NEUTRAL_REACTION);
    giq_option(4, NAME, 181, morph27_1, NEUTRAL_REACTION);
end

procedure morph27_1
begin
    if (is_success(roll_vs_skill(dude_obj, 14, -20))) then begin
        call morph07();
    end
    else begin
        call morph06();
    end
end

procedure morph28
begin
    Reply(182);
    giq_option(5, NAME, 183, morph29, NEUTRAL_REACTION);
    giq_option(4, NAME, 184, morphend, NEUTRAL_REACTION);
    giq_option(-3, NAME, 185, morph42c, NEUTRAL_REACTION);
end

procedure morph29
begin
    Reply(186);
    giq_option(4, NAME, 187, morph30, NEUTRAL_REACTION);
    giq_option(4, NAME, 188, morphend, NEUTRAL_REACTION);
end

procedure morph30
begin
    gsay_reply(0, 0);
    giq_option(4, NAME, 189, morph31, NEUTRAL_REACTION);
    giq_option(4, NAME, 190, morphend, NEUTRAL_REACTION);
    giq_option(4, NAME, 191, morph42a, NEUTRAL_REACTION);
end

procedure morph31
begin
    Reply(192);
    giq_option(4, NAME, 193, morph32, NEUTRAL_REACTION);
    giq_option(4, NAME, 194, morph39, NEUTRAL_REACTION);
end

procedure morph32
begin
    Reply(195);
    giq_option(4, NAME, 196, morph32a, BAD_REACTION);
    giq_option(4, NAME, 197, morph38, NEUTRAL_REACTION);
end

procedure morph33
begin
    Reply(198);
    giq_option(4, NAME, 199, morph34, NEUTRAL_REACTION);
    giq_option(4, NAME, 200, morph33_1, NEUTRAL_REACTION);
end

procedure morph33_1
begin
    if (is_success(roll_vs_skill(dude_obj, 14, -5))) then begin
        call morph35();
    end
    else begin
        call morph37();
    end
end

procedure morph34
begin
    gsay_message(NAME, 201, NEUTRAL_REACTION);
    call morphx4();
end

procedure morph35
begin
    Reply(202);
    giq_option(4, NAME, 203, morph36, NEUTRAL_REACTION);
    giq_option(4, NAME, 204, morphend, NEUTRAL_REACTION);
end

procedure morph36
begin
    gsay_message(NAME, 205, NEUTRAL_REACTION);
    call morph30();
end

procedure morph37
begin
    gsay_message(NAME, 206, GOOD_REACTION);
    call morphx4();
end

procedure morph38
begin
    Reply(207);
    giq_option(4, NAME, 208, morph36, NEUTRAL_REACTION);
    giq_option(4, NAME, 209, morphend, NEUTRAL_REACTION);
end

procedure morph39
begin
    Reply(210);
    giq_option(4, NAME, 211, morph39a, BAD_REACTION);
    giq_option(4, NAME, 212, morph39_1, NEUTRAL_REACTION);
end

procedure morph39_1
begin
end

procedure morph40
begin
    gsay_message(NAME, 213, NEUTRAL_REACTION);
    call morph30();
end

procedure morph41
begin
    Reply(214);
    giq_option(4, NAME, 215, morph30, NEUTRAL_REACTION);
    giq_option(4, NAME, 216, morphend, NEUTRAL_REACTION);
end

procedure morph42
begin
    Reply(217);
    giq_option(4, NAME, 218, morph36, NEUTRAL_REACTION);
    giq_option(4, NAME, 219, morphend, NEUTRAL_REACTION);
end

procedure morph42a
begin
    Reply(220);
    giq_option(4, NAME, 221, morph42a_1, NEUTRAL_REACTION);
end

procedure morph42a_1
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call morph42b();
    end
    else begin
        call morph42c();
    end
end

procedure morph42b
begin
    gsay_message(NAME, 222, NEUTRAL_REACTION);
    call morphx2();
end

procedure morph42c
begin
    gsay_message(NAME, 223, NEUTRAL_REACTION);
    call morphx4();
end

procedure morph45
begin
    gsay_message(NAME, 224, NEUTRAL_REACTION);
end

procedure morph46
begin
    gsay_message(NAME, 225, NEUTRAL_REACTION);
end

procedure morph47
begin
    gsay_message(NAME, 226, NEUTRAL_REACTION);
end

procedure morph48
begin
    gsay_message(NAME, 227, NEUTRAL_REACTION);
end

procedure morph49
begin
    gsay_message(NAME, 228, NEUTRAL_REACTION);
end

procedure morph50
begin
    gsay_message(NAME, 229, NEUTRAL_REACTION);
end

procedure morph51
begin
    gsay_message(NAME, 230, NEUTRAL_REACTION);
end

procedure morph52
begin
    gsay_message(NAME, 231, NEUTRAL_REACTION);
end

procedure morph53
begin
    gsay_message(NAME, 232, NEUTRAL_REACTION);
end

procedure morph54
begin
    gsay_message(NAME, 233, NEUTRAL_REACTION);
end

procedure morph55
begin
    gsay_message(NAME, 234, NEUTRAL_REACTION);
end

procedure morph56
begin
    gsay_message(NAME, 235, NEUTRAL_REACTION);
end

procedure morph57
begin
    gsay_message(NAME, 236, NEUTRAL_REACTION);
end

procedure morph58
begin
    gsay_message(NAME, 237, NEUTRAL_REACTION);
end

procedure morph59
begin
    gsay_message(NAME, 238, NEUTRAL_REACTION);
end

procedure morph60
begin
    gsay_message(NAME, 239, NEUTRAL_REACTION);
end

procedure morph61
begin
    gsay_message(NAME, 240, NEUTRAL_REACTION);
end

procedure morph62
begin
    gsay_message(NAME, 241, NEUTRAL_REACTION);
end

procedure morph63
begin
    gsay_message(NAME, 242, NEUTRAL_REACTION);
end

procedure morph64
begin
    gsay_message(NAME, 243, NEUTRAL_REACTION);
end

procedure morph65
begin
    gsay_message(NAME, 244, NEUTRAL_REACTION);
end

procedure morphx
begin
    Signal_wait := 1;
    add_timer_event(self_obj, game_ticks(15), 1);
end

procedure morphx2
begin
    deliver_player := 1;
    set_global_var(GVAR_MORPHEUS_DELIVERS_PLAYER, 1);
    load_map("mstrlr34.map", 12);
end

procedure morphx4
begin
end

procedure morph66
begin
    float_msg(self_obj, mstr(245), FLOAT_MSG_RED);
end

procedure morph05a
begin
    call DownReact();
    call morph06();
end

procedure morph08a
begin
    call DownReact();
    call morph09();
end

procedure morph32a
begin
    call DownReact();
    call morph33();
end

procedure morph39a
begin
    call DownReact();
    call morph33();
end

procedure morph05b
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call morph07();
    end
    else begin
        call morph26();
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
