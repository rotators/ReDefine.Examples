procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure Paul01;
procedure Paul02;
procedure Paul03;
procedure Paul04;
procedure Paul05;
procedure Paul06;
procedure Paul07;
procedure Paul08;
procedure Paul09;
procedure Paul10;
procedure Paul11;
procedure Paul12;
procedure Paul13;
procedure Paul14;
procedure Paul15;
procedure PaulEnd;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 44);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_BROTHERHOOD_KNIGHT);
    end
    if (script_action == look_at_proc) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == pickup_proc) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == talk_proc) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == critter_proc) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == destroy_proc) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack(dude_obj);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    start_gdialog(865, self_obj, 4, -1, -1);
    gsay_start;
    if (local_var(4) == 0) then begin
        set_local_var(4, 1);
        call Paul01();
    end
    else begin
        call Paul14();
    end
    gsay_end;
    end_dialogue;
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure Paul01
begin
    Reply(101);
    giq_option(4, NAME, 102, Paul02, NEUTRAL_REACTION);
    giq_option(4, NAME, 103, Paul04, NEUTRAL_REACTION);
    if (map_var(0) == 1) then begin
        giq_option(4, NAME, 104, Paul07, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_NECROP_WATER_CHIP_TAKEN) != 1) then begin
        giq_option(4, NAME, 105, Paul09, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_CALM_REBELS_7) == 1) then begin
        giq_option(4, NAME, 106, Paul12, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 108, PaulEnd, NEUTRAL_REACTION);
    giq_option(-3, NAME, 107, Paul15, NEUTRAL_REACTION);
end

procedure Paul02
begin
    Reply(109);
    giq_option(4, NAME, 110, Paul03, NEUTRAL_REACTION);
    if (map_var(0) == 1) then begin
        giq_option(4, NAME, 111, Paul07, NEUTRAL_REACTION);
    end
end

procedure Paul03
begin
    Reply(112);
    giq_option(4, NAME, 113, Paul04, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, PaulEnd, NEUTRAL_REACTION);
end

procedure Paul04
begin
    Reply(115);
    giq_option(4, NAME, 116, Paul05, NEUTRAL_REACTION);
    giq_option(4, NAME, 117, PaulEnd, NEUTRAL_REACTION);
end

procedure Paul05
begin
    Reply(118);
    giq_option(4, NAME, 119, Paul06, NEUTRAL_REACTION);
    giq_option(4, NAME, 120, PaulEnd, NEUTRAL_REACTION);
end

procedure Paul06
begin
    Reply(121);
    giq_option(4, NAME, 122, Paul04, NEUTRAL_REACTION);
    if (global_var(GVAR_NECROP_WATER_CHIP_TAKEN) != 1) then begin
        giq_option(4, NAME, 123, Paul09, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_CALM_REBELS_7) == 1) then begin
        giq_option(4, NAME, 124, Paul12, NEUTRAL_REACTION);
    end
    if (map_var(0) == 1) then begin
        giq_option(4, NAME, 125, Paul07, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 126, PaulEnd, NEUTRAL_REACTION);
end

procedure Paul07
begin
    Reply(127);
    giq_option(4, NAME, 128, Paul08, NEUTRAL_REACTION);
    giq_option(4, NAME, 129, Paul11, NEUTRAL_REACTION);
end

procedure Paul08
begin
    Reply(130);
    giq_option(4, NAME, 131, Paul05, NEUTRAL_REACTION);
    giq_option(4, NAME, 132, PaulEnd, NEUTRAL_REACTION);
    giq_option(4, NAME, 133, Paul06, NEUTRAL_REACTION);
end

procedure Paul09
begin
    Reply(134);
    giq_option(4, NAME, 135, Paul10, NEUTRAL_REACTION);
end

procedure Paul10
begin
    Reply(136);
    giq_option(4, NAME, 138, Paul06, NEUTRAL_REACTION);
    giq_option(4, NAME, 137, PaulEnd, NEUTRAL_REACTION);
end

procedure Paul11
begin
    Reply(139);
    giq_option(4, NAME, 140, Paul08, NEUTRAL_REACTION);
end

procedure Paul12
begin
    Reply(141);
    giq_option(4, NAME, 142, Paul13, NEUTRAL_REACTION);
    giq_option(4, NAME, 143, PaulEnd, NEUTRAL_REACTION);
end

procedure Paul13
begin
    Reply(144);
    giq_option(4, NAME, 146, Paul06, NEUTRAL_REACTION);
    giq_option(4, NAME, 145, PaulEnd, NEUTRAL_REACTION);
end

procedure Paul14
begin
    Reply(mstr(147) + proto_data(obj_pid(dude_obj), 1) + mstr(148));
    giq_option(4, NAME, 149, Paul02, NEUTRAL_REACTION);
    giq_option(4, NAME, 150, Paul04, NEUTRAL_REACTION);
    if (map_var(0) == 1) then begin
        giq_option(4, NAME, 151, Paul07, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_NECROP_WATER_CHIP_TAKEN) != 1) then begin
        giq_option(4, NAME, 152, Paul09, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_CALM_REBELS_7) == 1) then begin
        giq_option(4, NAME, 153, Paul12, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 155, PaulEnd, NEUTRAL_REACTION);
    giq_option(-3, NAME, 154, Paul15, NEUTRAL_REACTION);
end

procedure Paul15
begin
    gsay_message(NAME, 156, NEUTRAL_REACTION);
end

procedure PaulEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
