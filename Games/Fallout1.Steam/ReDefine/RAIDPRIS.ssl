procedure start;
procedure do_dialogue;
procedure prisoner00;
procedure prisoner01;
procedure prisoner02;
procedure prisoner03;
procedure prisoner04;
procedure prisonerend;
procedure Critter_Action;
procedure damage_p_proc;

variable hostile;
variable only_once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (only_once) then begin
        only_once := 0;
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 6);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_GENERIC_RAIDER);
    end
    if (script_action == talk_proc) then begin
        call do_dialogue();
    end
    else begin
        if (script_action == look_at_proc) then begin
            script_overrides;
            display_mstr(100);
        end
        else begin
            if (script_action == critter_proc) then begin
                call Critter_Action();
                if (hostile) then begin
                    hostile := 0;
                    attack(dude_obj);
                end
            end
            else begin
                if (script_action == pickup_proc) then begin
                    hostile := 1;
                end
                else begin
                    if (script_action == damage_proc) then begin
                        call damage_p_proc();
                    end
                    else begin
                        if (script_action == destroy_proc) then begin
                            if (source_obj == dude_obj) then begin
                                if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                                    set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                                    set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                                end
                                if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                                    set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                                    set_global_var(GVAR_BERSERKER_REPUTATION, 0);
                                end
                                set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
                                if ((global_var(GVAR_BAD_MONSTER) % 6) == 0) then begin
                                    set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 1);
                                end
                            end
                            set_global_var(GVAR_ENEMY_RAIDERS, 1);
                            set_global_var(GVAR_GARLS_FRIEND, 0);
                            set_global_var(GVAR_TOTAL_RAIDERS, global_var(GVAR_TOTAL_RAIDERS) - 1);
                        end
                    end
                end
            end
        end
    end
end

procedure do_dialogue
begin
    set_local_var(3, 1);
    call get_reaction();
    start_gdialog(138, self_obj, 4, -1, -1);
    gsay_start;
    if (local_var(4)) then begin
        call prisoner03();
    end
    else begin
        set_local_var(4, 1);
        call prisoner00();
    end
    gsay_end;
    end_dialogue;
end

procedure prisoner00
begin
    Reply(101);
    giq_option(4, NAME, 102, prisoner01, NEUTRAL_REACTION);
    giq_option(6, NAME, 103, prisoner02, NEUTRAL_REACTION);
    giq_option(-3, NAME, 104, prisoner01, NEUTRAL_REACTION);
end

procedure prisoner01
begin
    set_local_var(4, 1);
    gsay_message(NAME, 105, NEUTRAL_REACTION);
end

procedure prisoner02
begin
    Reply(106);
    giq_option(4, NAME, 107, prisonerend, NEUTRAL_REACTION);
    giq_option(4, NAME, 108, prisonerend, NEUTRAL_REACTION);
end

procedure prisoner03
begin
    gsay_message(NAME, 109, NEUTRAL_REACTION);
end

procedure prisoner04
begin
    gsay_message(NAME, 110, NEUTRAL_REACTION);
end

procedure prisonerend
begin
end

procedure Critter_Action
begin
    variable LVar0 := 0;
    if (global_var(GVAR_TANDI_STATUS) == 2) then begin
        set_global_var(GVAR_ENEMY_RAIDERS, 1);
    end
    else begin
        if (global_var(GVAR_MISTAKEN_ID)) then begin
            set_global_var(GVAR_ENEMY_RAIDERS, 0);
            if (tile_distance_objs(self_obj, dude_obj) < 3) then begin
                LVar0 := tile_num_in_direction(tile_num(self_obj), random(0, 5), 3);
                if (tile_distance(tile_num(self_obj), LVar0) > 2) then begin
                    if (random(0, 9) == 0) then begin
                        float_msg(self_obj, message_str(SCRIPT_GENRAIDR, random(102, 106)), FLOAT_MSG_YELLOW);
                    end
                    animate_move_obj_to_tile(self_obj, LVar0, 0);
                end
            end
        end
        else begin
            if (global_var(GVAR_TANDI_ESCAPE)) then begin
                set_global_var(GVAR_ENEMY_RAIDERS, 1);
            end
            if (obj_can_see_obj(self_obj, dude_obj)) then begin
                if (global_var(GVAR_RAID_LOOTING)) then begin
                    set_global_var(GVAR_ENEMY_RAIDERS, 1);
                end
            end
            if (map_var(2) == 1) then begin
                set_global_var(GVAR_ENEMY_RAIDERS, 1);
            end
        end
    end
    if (global_var(GVAR_ENEMY_RAIDERS) and obj_can_see_obj(self_obj, dude_obj)) then begin
        hostile := 1;
    end
    if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
        hostile := 0;
    end
end

procedure damage_p_proc
begin
    if (global_var(GVAR_MISTAKEN_ID) == 0) then begin
        set_global_var(GVAR_ENEMY_RAIDERS, 1);
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
