procedure start;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure Chuck01;
procedure Chuck02;
procedure Chuck03;
procedure Chuck04;
procedure Chuck05;
procedure Chuck06;
procedure Chuck07;
procedure Chuck08;
procedure Chuck09;
procedure Chuck10;
procedure Chuck11;
procedure Chuck12;
procedure Chuck13;
procedure Chuck14;
procedure Chuck15;
procedure Chuck16;
procedure Chuck17;
procedure Chuck18;
procedure Chuck19;
procedure Chuck20;
procedure Chuck21;
procedure Chuck22;
procedure Chuck23;
procedure ChuckCards;
procedure ChuckCards2;
procedure ChuckBye;
procedure ChuckEnd;

variable initialized;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    variable LVar0 := 0;
    if (not(initialized)) then begin
        if (obj_is_carrying_obj_pid(self_obj, 41) == 0) then begin
            LVar0 := create_object(41, 0, 0);
            add_mult_objs_to_inven(self_obj, LVar0, random(0, 20));
            if ((global_var(GVAR_BLADES) == 9103) or (global_var(GVAR_BLADES) == 9102)) then begin
                critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 0);
            end
            else begin
                critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 49);
            end
        end
        initialized := 1;
    end
    else begin
        if (script_action == destroy_proc) then begin
            call destroy_p_proc();
        end
        else begin
            if (script_action == look_at_proc) then begin
                call look_at_p_proc();
            end
            else begin
                if (script_action == talk_proc) then begin
                    call talk_p_proc();
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_ENEMY_ADYTUM, 1);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 49);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_ENEMY_ADYTUM, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
            end
            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                set_global_var(GVAR_BERSERKER_REPUTATION, 0);
            end
            set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
            if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
                set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
            end
        end
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 49);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4)) then begin
        display_mstr(101);
    end
    else begin
        display_mstr(100);
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    start_gdialog(664, self_obj, 4, -1, -1);
    gsay_start;
    if (local_var(4)) then begin
        call Chuck22();
    end
    else begin
        call Chuck01();
    end
    gsay_end;
    end_dialogue;
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (global_var(GVAR_ENEMY_ADYTUM) == 1) then begin
            attack(dude_obj);
        end
    end
end

procedure pickup_p_proc
begin
    set_global_var(GVAR_ENEMY_ADYTUM, 1);
end

procedure Chuck01
begin
    set_local_var(4, 1);
    Reply(102);
    giq_option(-3, NAME, 103, Chuck02, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, Chuck03, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, Chuck04, NEUTRAL_REACTION);
    giq_option(6, NAME, 106, Chuck05, NEUTRAL_REACTION);
end

procedure Chuck02
begin
    gsay_message(NAME, 107, NEUTRAL_REACTION);
end

procedure Chuck03
begin
    Reply(108);
    giq_option(4, NAME, 109, Chuck09, NEUTRAL_REACTION);
    giq_option(4, NAME, 110, Chuck14, NEUTRAL_REACTION);
    giq_option(6, NAME, 111, Chuck15, GOOD_REACTION);
end

procedure Chuck04
begin
    Reply(112);
    giq_option(4, NAME, 113, Chuck14, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, Chuck18, NEUTRAL_REACTION);
    giq_option(4, NAME, 115, ChuckBye, NEUTRAL_REACTION);
end

procedure Chuck05
begin
    Reply(117);
    giq_option(4, NAME, 118, ChuckBye, NEUTRAL_REACTION);
    giq_option(4, NAME, 119, ChuckCards, NEUTRAL_REACTION);
end

procedure Chuck06
begin
    call DownReact();
    Reply(128);
    giq_option(4, NAME, 129, Chuck07, BAD_REACTION);
    giq_option(4, NAME, 130, Chuck08, NEUTRAL_REACTION);
end

procedure Chuck07
begin
    call DownReact();
    set_local_var(5, 4);
    gsay_message(NAME, 131, BAD_REACTION);
end

procedure Chuck08
begin
    call UpReact();
    gsay_message(NAME, 132, NEUTRAL_REACTION);
end

procedure Chuck09
begin
    Reply(133);
    giq_option(4, NAME, 134, ChuckBye, NEUTRAL_REACTION);
    giq_option(4, NAME, 135, Chuck10, NEUTRAL_REACTION);
    giq_option(6, NAME, 136, Chuck19, NEUTRAL_REACTION);
end

procedure Chuck10
begin
    Reply(137);
    giq_option(4, NAME, 138, ChuckBye, NEUTRAL_REACTION);
    giq_option(4, NAME, 139, Chuck11, NEUTRAL_REACTION);
end

procedure Chuck11
begin
    Reply(140);
    giq_option(4, NAME, 134, ChuckBye, NEUTRAL_REACTION);
    giq_option(4, NAME, 141, Chuck12, BAD_REACTION);
    giq_option(4, NAME, 142, Chuck13, NEUTRAL_REACTION);
end

procedure Chuck12
begin
    Reply(143);
    giq_option(4, NAME, 144, Chuck07, BAD_REACTION);
    giq_option(5, NAME, 145, UpReact, NEUTRAL_REACTION);
    giq_option(4, NAME, 146, ChuckBye, NEUTRAL_REACTION);
end

procedure Chuck13
begin
    Reply(147);
    giq_option(4, NAME, 148, ChuckCards, GOOD_REACTION);
    giq_option(4, NAME, 144, Chuck07, BAD_REACTION);
end

procedure Chuck14
begin
    Reply(149);
    giq_option(4, NAME, 150, ChuckEnd, NEUTRAL_REACTION);
    giq_option(4, NAME, 151, Chuck10, NEUTRAL_REACTION);
end

procedure Chuck15
begin
    Reply(152);
    giq_option(4, NAME, 153, ChuckBye, NEUTRAL_REACTION);
    giq_option(4, NAME, 150, ChuckEnd, NEUTRAL_REACTION);
    giq_option(6, NAME, 154, Chuck16, NEUTRAL_REACTION);
end

procedure Chuck16
begin
    Reply(155);
    giq_option(4, NAME, 156, ChuckBye, NEUTRAL_REACTION);
    giq_option(6, NAME, 157, Chuck17, NEUTRAL_REACTION);
end

procedure Chuck17
begin
    Reply(158);
    giq_option(4, NAME, 159, ChuckBye, NEUTRAL_REACTION);
    giq_option(4, NAME, 150, DownReact, BAD_REACTION);
end

procedure Chuck18
begin
    set_local_var(6, 1);
    Reply(160);
    giq_option(4, NAME, 146, ChuckBye, NEUTRAL_REACTION);
    giq_option(4, NAME, 161, ChuckCards, NEUTRAL_REACTION);
end

procedure Chuck19
begin
    Reply(162);
    giq_option(4, NAME, 146, ChuckBye, NEUTRAL_REACTION);
    giq_option(6, NAME, 163, Chuck20, NEUTRAL_REACTION);
    giq_option(6, NAME, 164, Chuck21, NEUTRAL_REACTION);
end

procedure Chuck20
begin
    Reply(165);
    giq_option(4, NAME, 146, ChuckBye, NEUTRAL_REACTION);
    giq_option(6, NAME, 164, Chuck21, NEUTRAL_REACTION);
end

procedure Chuck21
begin
    Reply(166);
    giq_option(0, NAME, 125, ChuckBye, NEUTRAL_REACTION);
end

procedure Chuck22
begin
    Reply(random(167, 169));
    giq_option(-3, NAME, 103, Chuck02, NEUTRAL_REACTION);
    giq_option(4, NAME, 170, Chuck23, NEUTRAL_REACTION);
    if (local_var(5) < 4) then begin
        giq_option(4, NAME, 171, ChuckCards, NEUTRAL_REACTION);
    end
    if (local_var(6) == 0) then begin
        giq_option(4, NAME, 172, Chuck18, NEUTRAL_REACTION);
    end
end

procedure Chuck23
begin
    Reply(173);
    giq_option(0, NAME, 125, ChuckBye, NEUTRAL_REACTION);
end

procedure ChuckCards
begin
    Reply(120);
    giq_option(0, NAME, 125, ChuckCards2, NEUTRAL_REACTION);
end

procedure ChuckCards2
begin
    if (local_var(5) == 0) then begin
        if (global_var(GVAR_BROTHERHOOD_OF_STEEL) < 1) then begin
            Reply(121);
        end
        else begin
            set_local_var(5, 1);
        end
    end
    if (local_var(5) == 1) then begin
        if (global_var(GVAR_THE_VATS) < 1) then begin
            Reply(122);
        end
        else begin
            set_local_var(5, 2);
        end
    end
    if (local_var(5) == 2) then begin
        if (global_var(GVAR_MASTERS_LAIR) < 1) then begin
            Reply(123);
        end
        else begin
            set_local_var(5, 3);
        end
    end
    if (local_var(5) >= 3) then begin
        Reply(124);
        set_critter_stat(dude_obj, STAT_lu, 1);
    end
    set_local_var(5, local_var(5) + 1);
    giq_option(4, NAME, 126, ChuckBye, NEUTRAL_REACTION);
    giq_option(4, NAME, 127, Chuck06, NEUTRAL_REACTION);
end

procedure ChuckBye
begin
    gsay_message(NAME, 116, NEUTRAL_REACTION);
end

procedure ChuckEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
