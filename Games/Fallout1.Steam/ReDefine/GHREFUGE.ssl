procedure start;
procedure do_dialogue;
procedure ghoulend;
procedure ghoulcbt;
procedure ghoul00;
procedure ghoul00a;
procedure ghoul01;
procedure ghoul02;
procedure ghoul03;
procedure ghoul04;
procedure ghoul05;
procedure ghoul05a;
procedure ghoul06;
procedure ghoul07;
procedure ghoul07a;
procedure ghoul08;
procedure ghoul09;
procedure ghoul09a;
procedure ghoul10;
procedure ghoul11;
procedure ghoul12;
procedure ghoul13;
procedure ghoul14;
procedure ghoul15;
procedure ghoul16;
procedure Critter_Action;
procedure timetomove;
procedure pickup_p_proc;

variable Hostile;
variable init;
variable maxleash := 20;
variable noevent;
variable loopcount;
variable new_tile;
variable HENRY;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(init)) then begin
        if (local_var(7) == 0) then begin
            set_local_var(7, tile_num(self_obj));
            set_local_var(5, 0);
        end
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 30);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_GHOUL_COWARD);
        init := 1;
    end
    if (script_action == talk_proc) then begin
        call do_dialogue();
    end
    else begin
        if ((script_action == look_at_proc) or (script_action == description_proc)) then begin
            script_overrides;
            display_mstr(100);
        end
        else begin
            if (script_action == pickup_proc) then begin
                call pickup_p_proc();
            end
            else begin
                if (script_action == critter_proc) then begin
                    call Critter_Action();
                end
                else begin
                    if (script_action == destroy_proc) then begin
                        if (source_obj == dude_obj) then begin
                            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                                set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                            end
                            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                                set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                                set_global_var(GVAR_BERSERKER_REPUTATION, 0);
                            end
                            set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
                            if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
                                set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure do_dialogue
begin
    call get_reaction();
    start_gdialog(74, self_obj, 4, -1, -1);
    gsay_start;
    if (local_var(4)) then begin
        if (local_var(1) >= 2) then begin
            call ghoul14();
        end
        else begin
            call ghoul03();
        end
    end
    else begin
        if (local_var(1) >= 2) then begin
            set_local_var(4, 1);
            call ghoul00();
        end
        else begin
            set_local_var(4, 1);
            call ghoul03();
        end
    end
    gsay_end;
    end_dialogue;
end

procedure ghoulend
begin
end

procedure ghoulcbt
begin
    Hostile := 1;
end

procedure ghoul00
begin
    Reply(101);
    giq_option(4, NAME, 102, ghoul00a, NEUTRAL_REACTION);
    giq_option(4, NAME, 103, ghoulend, NEUTRAL_REACTION);
    giq_option(5, NAME, 104, ghoul05, NEUTRAL_REACTION);
    giq_option(-3, NAME, 105, ghoul01, NEUTRAL_REACTION);
end

procedure ghoul00a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call ghoul02();
    end
    else begin
        call ghoul01();
    end
end

procedure ghoul01
begin
    gsay_message(NAME, 106, NEUTRAL_REACTION);
    call ghoulcbt();
end

procedure ghoul02
begin
    Reply(107);
    giq_option(4, NAME, 108, ghoulend, NEUTRAL_REACTION);
    giq_option(4, NAME, 109, ghoul04, NEUTRAL_REACTION);
end

procedure ghoul03
begin
    gsay_message(NAME, 110, NEUTRAL_REACTION);
    call ghoulcbt();
end

procedure ghoul04
begin
    Reply(111);
    giq_option(4, NAME, 112, ghoulcbt, NEUTRAL_REACTION);
    giq_option(4, NAME, 113, ghoul05, NEUTRAL_REACTION);
end

procedure ghoul05
begin
    if (local_var(1) < 2) then begin
        Reply(114);
    end
    else begin
        Reply(115);
    end
    giq_option(4, NAME, 116, ghoul12, NEUTRAL_REACTION);
    giq_option(4, NAME, 117, ghoul11, NEUTRAL_REACTION);
    giq_option(6, NAME, 118, ghoul05a, NEUTRAL_REACTION);
end

procedure ghoul05a
begin
    if (HENRY == 0) then begin
        call ghoul07();
    end
    else begin
        call ghoul06();
    end
end

procedure ghoul06
begin
    Reply(119);
    giq_option(4, NAME, 120, ghoulend, NEUTRAL_REACTION);
    giq_option(4, NAME, 121, ghoul03, NEUTRAL_REACTION);
end

procedure ghoul07
begin
    Reply(122);
    giq_option(4, NAME, 123, ghoul07a, NEUTRAL_REACTION);
    giq_option(4, NAME, 124, ghoulend, NEUTRAL_REACTION);
end

procedure ghoul07a
begin
    if (local_var(1) < 2) then begin
        call ghoul08();
    end
    else begin
        call ghoul09();
    end
end

procedure ghoul08
begin
    Reply(125);
    giq_option(4, NAME, 126, ghoulend, NEUTRAL_REACTION);
    giq_option(4, NAME, 127, ghoul03, NEUTRAL_REACTION);
end

procedure ghoul09
begin
    Reply(128);
    giq_option(4, NAME, 129, ghoulend, NEUTRAL_REACTION);
    giq_option(4, NAME, 130, ghoul09a, NEUTRAL_REACTION);
end

procedure ghoul09a
begin
    call DownReact();
    if (local_var(1) < 2) then begin
        call ghoul03();
    end
    else begin
        call ghoul10();
    end
end

procedure ghoul10
begin
    Reply(131);
    giq_option(4, NAME, 132, ghoulend, NEUTRAL_REACTION);
end

procedure ghoul11
begin
    Reply(133);
    giq_option(4, NAME, 134, ghoul05a, NEUTRAL_REACTION);
end

procedure ghoul12
begin
    Reply(135);
    giq_option(4, NAME, 136, ghoul05a, NEUTRAL_REACTION);
    giq_option(4, NAME, 137, ghoul13, NEUTRAL_REACTION);
end

procedure ghoul13
begin
    Reply(138);
    giq_option(4, NAME, 139, ghoulcbt, NEUTRAL_REACTION);
    giq_option(4, NAME, 140, ghoulend, NEUTRAL_REACTION);
end

procedure ghoul14
begin
    Reply(141);
    giq_option(4, NAME, 142, ghoul15, NEUTRAL_REACTION);
    giq_option(4, NAME, 143, ghoul16, NEUTRAL_REACTION);
    giq_option(-3, NAME, 105, ghoul01, NEUTRAL_REACTION);
end

procedure ghoul15
begin
    Reply(144);
    giq_option(4, NAME, 145, ghoulend, NEUTRAL_REACTION);
end

procedure ghoul16
begin
    gsay_message(NAME, 146, NEUTRAL_REACTION);
end

procedure Critter_Action
begin
    if (Hostile > 0) then begin
        Hostile := 0;
        attack(dude_obj);
    end
    else begin
        if (local_var(5)) then begin
            loopcount := loopcount + 1;
            if (loopcount > 40) then begin
                loopcount := 0;
                if (noevent == 0) then begin
                    noevent := 1;
                    add_timer_event(self_obj, game_ticks(random(5, 13)), 0);
                end
            end
        end
    end
end

procedure timetomove
begin
    noevent := 0;
    set_local_var(6, tile_num(self_obj));
    new_tile := tile_num_in_direction(local_var(6), random(0, 5), 2);
    if (tile_distance(local_var(7), new_tile) < maxleash) then begin
        animate_move_obj_to_tile(self_obj, new_tile, 0);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        Hostile := 1;
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
