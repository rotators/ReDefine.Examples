procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure Ltcbt;
procedure Lt01;
procedure Lt01a;
procedure Lt01b;
procedure Lt02;
procedure Lt03;
procedure Lt04;
procedure Lt05;
procedure Lt06;
procedure Lt07;
procedure Lt08;
procedure Lt08a;
procedure Lt09;
procedure Lt10;
procedure Lt11;
procedure Lt12;
procedure Lt13;
procedure Lt14;
procedure Lt15;
procedure Lt16;
procedure Lt17;
procedure Lt18;
procedure Lt18a;
procedure Lt19;
procedure Lt20;
procedure Lt21;
procedure Lt22;
procedure Lt23;
procedure Lt24;
procedure Lt25;
procedure Lt26;
procedure Lt27;
procedure Lt28;
procedure Lt29;
procedure Lt30;
procedure Lt31;
procedure Lt32;
procedure Lt33;
procedure Lt34;
procedure Lt35;
procedure Lt35a;
procedure Lt36;
procedure Lt37;
procedure Lt37b;
procedure Lt38;
procedure Lt39;
procedure Lt39a;
procedure Lt39b;
procedure Lt40;
procedure Lt40a;
procedure Lt41;
procedure Lt42;
procedure Lt43;
procedure Lt44;
procedure Lt45;
procedure Lt46;
procedure Lt48;
procedure Ltx1;
procedure Ltx2;
procedure Ltx3;
procedure Ltx4;
procedure Ltx6;
procedure Torture;

variable rndx;
variable rndy;
variable rndz;
variable hostile;
variable HEREBEFORE;
variable go_to_cell;
variable DESTROYED;
variable KILLEDANY;
variable initialized;
variable hit_dude;
variable torture_setting;
variable End_The_Game;

import variable Lt_ptr;
import variable VWeapLocker_ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;

procedure Lt40_5;
procedure Lt50;
procedure Lt51;
procedure Lt52;
procedure Lt53;
procedure Lt54;
procedure Lt55;
procedure Lt56;
procedure Lt57;
procedure Lt58;
procedure Lt59;
procedure Lt60;
procedure Lt61;
procedure Lt62;
procedure Lt63;
procedure Lt64;
procedure Lt65;
procedure Lt66;


procedure start
begin
    variable LVar0 := 0;
    if (not(initialized)) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 34);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, 49);
        Lt_ptr := self_obj;
        if (local_var(6) == 0) then begin
            LVar0 := create_object_sid(58, 0, 0, SCRIPT_LTCODES);
            add_obj_to_inven(self_obj, LVar0);
            set_local_var(6, 1);
        end
        initialized := 1;
    end
    else begin
        if (script_action == critter_proc) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == destroy_proc) then begin
                call destroy_p_proc();
            end
            else begin
                if (script_action == look_at_proc) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == talk_proc) then begin
                        call talk_p_proc();
                    end
                    else begin
                        if (script_action == timed_event_proc) then begin
                            call timed_event_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure combat_p_proc
begin
    if (fixed_param == 2) then begin
        if (global_var(GVAR_DESTROY_VATS_4)) then begin
            if (random(0, 3) == 3) then begin
                critter_injure(dude_obj, 1);
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack(dude_obj);
    end
    else begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            if (torture_setting > 0) then begin
                if (hit_dude == 0) then begin
                    call Torture();
                end
            end
            else begin
                if (tile_distance_objs(self_obj, dude_obj) < 12) then begin
                    if (not(global_var(GVAR_DESTROY_VATS_4))) then begin
                        if (not(local_var(4))) then begin
                            dialogue_system_enter;
                        end
                        else begin
                            if (not(local_var(5))) then begin
                                dialogue_system_enter;
                            end
                        end
                    end
                    else begin
                        hostile := 1;
                    end
                end
            end
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
        if ((global_var(GVAR_BAD_MONSTER) % 6) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 1);
        end
    end
    set_global_var(GVAR_LIEUTENANTS_DEAD, 1);
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure talk_p_proc
begin
    call get_reaction();
    if (local_var(7) == 0) then begin
        start_gdialog(50, self_obj, 4, 11, 6);
        gsay_start;
        if (torture_setting == 2) then begin
            call Lt36();
            torture_setting := 3;
        end
        else begin
            if (torture_setting == 3) then begin
                call Lt37b();
                torture_setting := 4;
            end
            else begin
                if (torture_setting == 4) then begin
                    call Lt38();
                    torture_setting := 5;
                end
                else begin
                    if (global_var(GVAR_ENTERING_VATS_HOW) == 1) then begin
                        call Lt01();
                    end
                    else begin
                        if (global_var(GVAR_ENTERING_VATS_HOW) == 2) then begin
                            call Lt41();
                        end
                        else begin
                            if (global_var(GVAR_ENTERING_VATS_HOW) == 3) then begin
                                call Lt46();
                            end
                            else begin
                                call Lt45();
                            end
                        end
                    end
                end
            end
        end
        gsay_end;
        end_dialogue;
    end
    else begin
        float_msg(self_obj, mstr(236), FLOAT_MSG_RED);
        hostile := 1;
    end
    if (local_var(7) == 1) then begin
        set_local_var(7, 2);
        gfade_out(600);
        move_obj_inven_to_obj(dude_obj, VWeapLocker_ptr);
        move_to(dude_obj, 25543, 0);
        critter_injure(dude_obj, 2);
        reg_anim_func(2, dude_obj);
        reg_anim_func(1, 1);
        reg_anim_animate(dude_obj, 48, -1);
        reg_anim_animate(dude_obj, 37, -1);
        reg_anim_func(3, 0);
        gfade_in(600);
    end
    if (End_The_Game == 1) then begin
        set_obj_visibility(dude_obj, 1);
        move_to(dude_obj, 12528, 1);
        move_to(self_obj, 12528, 1);
        play_gmovie(10);
        play_gmovie(7);
        signal_end_game;
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        if (torture_setting == 1) then begin
            critter_damage(dude_obj, get_critter_stat(dude_obj, STAT_current_hp) / 3);
        end
        else begin
            if (torture_setting == 2) then begin
                critter_damage(dude_obj, get_critter_stat(dude_obj, STAT_current_hp) / 2);
            end
            else begin
                if (torture_setting == 3) then begin
                    critter_damage(dude_obj, get_critter_stat(dude_obj, STAT_current_hp) - 1);
                end
            end
        end
        anim(dude_obj, 37, 0);
        torture_setting := torture_setting + 1;
        add_timer_event(self_obj, game_ticks(3), 2);
    end
    else begin
        if (fixed_param == 2) then begin
            hit_dude := 0;
            game_ui_enable;
            dialogue_system_enter;
        end
    end
end

procedure Ltcbt
begin
    hostile := 1;
end

procedure Lt01
begin
    Reply(101);
    giq_option(4, NAME, 102, Lt02, NEUTRAL_REACTION);
    giq_option(4, NAME, 103, Lt01a, NEUTRAL_REACTION);
    giq_option(5, NAME, 104, Lt03, NEUTRAL_REACTION);
    giq_option(-3, NAME, 105, Lt48, NEUTRAL_REACTION);
end

procedure Lt01a
begin
    Reply(106);
    giq_option(4, NAME, 107, Lt35, NEUTRAL_REACTION);
    giq_option(4, NAME, 108, Lt03, NEUTRAL_REACTION);
    giq_option(4, NAME, 109, Lt01b, GOOD_REACTION);
end

procedure Lt01b
begin
    gsay_message(NAME, 110, NEUTRAL_REACTION);
    call Ltx3();
end

procedure Lt02
begin
    Reply(111);
    giq_option(4, NAME, 112, Lt35a, NEUTRAL_REACTION);
    giq_option(4, NAME, 113, Lt03, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, Lt35, NEUTRAL_REACTION);
    giq_option(4, NAME, 115, Lt40, NEUTRAL_REACTION);
end

procedure Lt03
begin
    Reply(116);
    giq_option(4, NAME, 117, Lt04, NEUTRAL_REACTION);
    giq_option(4, NAME, 118, Lt04, NEUTRAL_REACTION);
    giq_option(4, NAME, 119, Lt05, NEUTRAL_REACTION);
end

procedure Lt04
begin
    Reply(120);
    giq_option(4, NAME, 121, Lt05, NEUTRAL_REACTION);
    giq_option(4, NAME, 122, Lt35, NEUTRAL_REACTION);
    giq_option(5, NAME, 123, Lt35a, NEUTRAL_REACTION);
end

procedure Lt05
begin
    gsay_message(NAME, 124, NEUTRAL_REACTION);
    call Lt06();
end

procedure Lt06
begin
    giq_option(5, NAME, 125, Lt07, NEUTRAL_REACTION);
    giq_option(6, NAME, 126, Lt20, NEUTRAL_REACTION);
    giq_option(4, NAME, 127, Lt27, NEUTRAL_REACTION);
    giq_option(4, NAME, 128, Lt34, NEUTRAL_REACTION);
end

procedure Lt07
begin
    Reply(129);
    giq_option(5, NAME, 130, Lt10, NEUTRAL_REACTION);
    giq_option(5, NAME, 131, Lt08, NEUTRAL_REACTION);
    giq_option(4, NAME, 132, Lt20, NEUTRAL_REACTION);
end

procedure Lt08
begin
    Reply(133);
    giq_option(4, NAME, 134, Lt08a, NEUTRAL_REACTION);
end

procedure Lt08a
begin
    gsay_message(NAME, 135, NEUTRAL_REACTION);
    call Lt06();
end

procedure Lt09
begin
    gsay_message(NAME, 136, NEUTRAL_REACTION);
    call Lt06();
end

procedure Lt10
begin
    Reply(137);
    giq_option(4, NAME, 138, Lt11, NEUTRAL_REACTION);
end

procedure Lt11
begin
    Reply(139);
    giq_option(4, NAME, 140, Lt12, NEUTRAL_REACTION);
    giq_option(6, NAME, 141, Lt14, NEUTRAL_REACTION);
    giq_option(6, NAME, 142, Lt13, NEUTRAL_REACTION);
end

procedure Lt12
begin
    Reply(143);
    giq_option(6, NAME, 144, Lt13, NEUTRAL_REACTION);
    giq_option(4, NAME, 145, Lt19, NEUTRAL_REACTION);
end

procedure Lt13
begin
    Reply(146);
    giq_option(6, NAME, 147, Lt14, NEUTRAL_REACTION);
    giq_option(5, NAME, 148, Lt18a, BAD_REACTION);
end

procedure Lt14
begin
    Reply(149);
    giq_option(6, NAME, 150, Lt15, NEUTRAL_REACTION);
end

procedure Lt15
begin
    Reply(151);
    giq_option(6, NAME, 152, Lt16, NEUTRAL_REACTION);
end

procedure Lt16
begin
    Reply(153);
    giq_option(6, NAME, 154, Lt17, NEUTRAL_REACTION);
end

procedure Lt17
begin
    Reply(155);
    giq_option(6, NAME, 156, Lt09, NEUTRAL_REACTION);
    giq_option(6, NAME, 157, Lt18a, BAD_REACTION);
end

procedure Lt18
begin
    Reply(158);
    giq_option(6, NAME, 159, Lt35, BAD_REACTION);
    giq_option(6, NAME, 160, Lt09, NEUTRAL_REACTION);
end

procedure Lt18a
begin
    call DownReact();
    call Lt18();
end

procedure Lt19
begin
    Reply(161);
    giq_option(4, NAME, 162, Lt18, NEUTRAL_REACTION);
    giq_option(4, NAME, 163, Lt14, NEUTRAL_REACTION);
end

procedure Lt20
begin
    Reply(164);
    giq_option(6, NAME, 165, Lt21, NEUTRAL_REACTION);
    giq_option(4, NAME, 166, Lt10, NEUTRAL_REACTION);
end

procedure Lt21
begin
    Reply(167);
    giq_option(6, NAME, 168, Lt22, NEUTRAL_REACTION);
    giq_option(6, NAME, 169, Lt29, NEUTRAL_REACTION);
end

procedure Lt22
begin
    Reply(170);
    giq_option(6, NAME, 171, Lt23, NEUTRAL_REACTION);
    giq_option(6, NAME, 172, Lt26, NEUTRAL_REACTION);
end

procedure Lt23
begin
    Reply(173);
    giq_option(6, NAME, 174, Lt24, NEUTRAL_REACTION);
    giq_option(6, NAME, 175, Lt25, NEUTRAL_REACTION);
end

procedure Lt24
begin
    Reply(176);
    giq_option(6, NAME, 177, Lt18a, BAD_REACTION);
    giq_option(6, NAME, 178, Lt09, NEUTRAL_REACTION);
end

procedure Lt25
begin
    Reply(179);
    giq_option(4, NAME, 180, Lt18, NEUTRAL_REACTION);
    giq_option(6, NAME, 181, Lt28, NEUTRAL_REACTION);
end

procedure Lt26
begin
    Reply(182);
    giq_option(5, NAME, 183, Lt27, NEUTRAL_REACTION);
    giq_option(6, NAME, 184, Lt28, NEUTRAL_REACTION);
end

procedure Lt27
begin
    Reply(185);
    giq_option(4, NAME, 186, Lt35, NEUTRAL_REACTION);
    giq_option(6, NAME, 187, Lt08a, NEUTRAL_REACTION);
    giq_option(6, NAME, 188, Lt30, NEUTRAL_REACTION);
end

procedure Lt28
begin
    Reply(189);
    call Lt06();
end

procedure Lt29
begin
    Reply(190);
    giq_option(4, NAME, 191, Lt22, NEUTRAL_REACTION);
    giq_option(4, NAME, 192, Lt28, NEUTRAL_REACTION);
    giq_option(4, NAME, 193, Lt23, NEUTRAL_REACTION);
end

procedure Lt30
begin
    Reply(194);
    giq_option(6, NAME, 195, Lt31, NEUTRAL_REACTION);
    giq_option(7, NAME, 196, Lt33, NEUTRAL_REACTION);
end

procedure Lt31
begin
    Reply(197);
    giq_option(6, NAME, 198, Lt32, NEUTRAL_REACTION);
end

procedure Lt32
begin
    Reply(199);
    giq_option(6, NAME, 200, Lt35, BAD_REACTION);
    giq_option(6, NAME, 201, Lt28, NEUTRAL_REACTION);
end

procedure Lt33
begin
    Reply(202);
    giq_option(6, NAME, 203, Lt35, BAD_REACTION);
    giq_option(6, NAME, 204, Lt08a, NEUTRAL_REACTION);
end

procedure Lt34
begin
    Reply(205);
    giq_option(4, NAME, 206, Lt35, BAD_REACTION);
end

procedure Lt35
begin
    gsay_message(NAME, 207, BAD_REACTION);
    torture_setting := 1;
end

procedure Lt35a
begin
    gsay_message(NAME, 208, NEUTRAL_REACTION);
    torture_setting := 1;
end

procedure Lt36
begin
    Reply(209);
    giq_option(4, NAME, 210, Lt37, BAD_REACTION);
    giq_option(4, NAME, 211, Lt40, GOOD_REACTION);
end

procedure Lt37
begin
    gsay_message(NAME, 212, GOOD_REACTION);
    torture_setting := 2;
end

procedure Lt37b
begin
    Reply(213);
    giq_option(4, NAME, 214, Ltx1, BAD_REACTION);
    giq_option(4, NAME, 215, Lt40, GOOD_REACTION);
end

procedure Lt38
begin
    Reply(216);
    giq_option(4, NAME, 217, Lt39, NEUTRAL_REACTION);
    giq_option(4, NAME, 218, Lt40, NEUTRAL_REACTION);
end

procedure Lt39
begin
    if (dude_gender == 0) then begin
        Reply(272);
    end
    else begin
        Reply(271);
    end
    giq_option(6, NAME, 220, Lt39a, NEUTRAL_REACTION);
end

procedure Lt39a
begin
    Reply(221);
    giq_option(7, NAME, 222, Lt39b, NEUTRAL_REACTION);
    giq_option(6, NAME, 223, Ltx2, BAD_REACTION);
end

procedure Lt39b
begin
    Reply(224);
    giq_option(7, NAME, 225, Lt40, GOOD_REACTION);
    giq_option(7, NAME, 226, Ltx2, BAD_REACTION);
end

procedure Lt40
begin
    Reply(227);
    giq_option(4, NAME, 228, Ltx3, GOOD_REACTION);
    giq_option(4, NAME, 229, Lt35, NEUTRAL_REACTION);
    giq_option(5, NAME, 230, Lt09, NEUTRAL_REACTION);
end

procedure Lt40a
begin
    call Lt40();
end

procedure Lt41
begin
    Reply(235);
    giq_option(4, NAME, 236, Lt42, BAD_REACTION);
    giq_option(5, NAME, 237, Lt43, NEUTRAL_REACTION);
    giq_option(-3, NAME, 238, Lt48, NEUTRAL_REACTION);
end

procedure Lt42
begin
    Reply(239);
    giq_option(6, NAME, 240, Lt43, NEUTRAL_REACTION);
    giq_option(4, NAME, 241, Lt44, NEUTRAL_REACTION);
end

procedure Lt43
begin
    Reply(242);
    giq_option(4, NAME, 243, Lt35, NEUTRAL_REACTION);
    giq_option(5, NAME, 244, Lt03, NEUTRAL_REACTION);
end

procedure Lt44
begin
    Reply(245);
    giq_option(4, NAME, 246, Lt35, NEUTRAL_REACTION);
    giq_option(4, NAME, 247, Lt03, NEUTRAL_REACTION);
end

procedure Lt45
begin
    set_global_var(GVAR_ENTERING_VATS_HOW, 3);
    set_local_var(4, 1);
    if (dude_gender == 1) then begin
        gsay_message(NAME, 248, NEUTRAL_REACTION);
    end
    else begin
        gsay_message(NAME, 270, NEUTRAL_REACTION);
    end
    call Ltx4();
end

procedure Lt46
begin
    set_local_var(5, 1);
    Reply(249);
    giq_option(4, NAME, 251, Lt43, NEUTRAL_REACTION);
end

procedure Lt48
begin
    gsay_message(NAME, 252, NEUTRAL_REACTION);
    call Ltx2();
end

procedure Ltx1
begin
    torture_setting := 3;
end

procedure Ltx2
begin
    torture_setting := 0;
    set_local_var(7, 1);
end

procedure Ltx3
begin
    End_The_Game := 1;
end

procedure Ltx4
begin
    set_global_var(GVAR_DESTROY_VATS_4, 1);
end

procedure Ltx6
begin
    torture_setting := 0;
    set_local_var(7, 1);
end

procedure Torture
begin
    if (tile_num(self_obj) != tile_num_in_direction(dude_tile, 1, 1)) then begin
        animate_move_obj_to_tile(self_obj, tile_num_in_direction(dude_tile, 1, 1), 0);
    end
    else begin
        game_ui_disable;
        anim(self_obj, 1000, 4);
        anim(self_obj, 16, 0);
        anim(dude_obj, 20, 0);
        add_timer_event(self_obj, game_ticks(torture_setting), 1);
        hit_dude := 1;
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure Lt40_5
begin
    Reply(231);
    giq_option(4, NAME, 232, Ltx3, GOOD_REACTION);
    giq_option(4, NAME, 233, Ltx2, BAD_REACTION);
    giq_option(5, NAME, 234, Lt09, NEUTRAL_REACTION);
end

procedure Lt50
begin
    gsay_message(NAME, 253, NEUTRAL_REACTION);
end

procedure Lt51
begin
    gsay_message(NAME, 254, NEUTRAL_REACTION);
end

procedure Lt52
begin
    gsay_message(NAME, 255, NEUTRAL_REACTION);
end

procedure Lt53
begin
    gsay_message(NAME, 256, NEUTRAL_REACTION);
end

procedure Lt54
begin
    gsay_message(NAME, 257, NEUTRAL_REACTION);
end

procedure Lt55
begin
    gsay_message(NAME, 258, NEUTRAL_REACTION);
end

procedure Lt56
begin
    gsay_message(NAME, 259, NEUTRAL_REACTION);
end

procedure Lt57
begin
    gsay_message(NAME, 260, NEUTRAL_REACTION);
end

procedure Lt58
begin
    gsay_message(NAME, 261, NEUTRAL_REACTION);
end

procedure Lt59
begin
    gsay_message(NAME, 262, NEUTRAL_REACTION);
end

procedure Lt60
begin
    gsay_message(NAME, 263, NEUTRAL_REACTION);
end

procedure Lt61
begin
    gsay_message(NAME, 264, NEUTRAL_REACTION);
end

procedure Lt62
begin
    gsay_message(NAME, 265, NEUTRAL_REACTION);
end

procedure Lt63
begin
    gsay_message(NAME, 266, NEUTRAL_REACTION);
end

procedure Lt64
begin
    gsay_message(NAME, 267, NEUTRAL_REACTION);
end

procedure Lt65
begin
    gsay_message(NAME, 268, NEUTRAL_REACTION);
end

procedure Lt66
begin
    gsay_message(NAME, 269, NEUTRAL_REACTION);
end
