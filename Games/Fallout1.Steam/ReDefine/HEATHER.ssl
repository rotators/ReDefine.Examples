procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure heather0;
procedure heather0a;
procedure heather0b;
procedure heather1;
procedure heather1a;
procedure heather2;
procedure heather3;
procedure heather3a;
procedure heather3b;
procedure heather3c;
procedure heather4;
procedure heather5;
procedure heather5a;
procedure heather6;
procedure heather7;
procedure heather8;
procedure heather9;
procedure heather10;
procedure heather11;
procedure heather12;
procedure heather13;
procedure heather14;
procedure heather15;
procedure heather16;
procedure heather17;
procedure heather18;
procedure heather19;
procedure heather20;
procedure heather21;
procedure heather22;
procedure heather22a;
procedure heather23;
procedure heather24;
procedure heather25;
procedure heather26;
procedure heather27;
procedure heather28;
procedure HeatherEnd;
procedure combat;

variable hostile;
variable initialized;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 20);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_CHILDREN_TRUE);
        initialized := 1;
    end
    else begin
        if (script_action == critter_proc) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == destroy_proc) then begin
                call destroy_p_proc();
            end
            else begin
                if (script_action == look_at_proc) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == pickup_proc) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == talk_proc) then begin
                            call talk_p_proc();
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (global_var(GVAR_DESTROY_FOLLOWERS) == 2) then begin
        kill_critter(self_obj, 57);
    end
    else begin
        if (hostile) then begin
            hostile := 0;
            attack(dude_obj);
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
        if ((global_var(GVAR_BAD_MONSTER) % 6) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 1);
        end
    end
    set_global_var(GVAR_FIND_AGENT, 2);
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure talk_p_proc
begin
    script_overrides;
    call get_reaction();
    if ((game_time_hour >= 700) and (game_time_hour < 1800)) then begin
        start_gdialog(266, self_obj, 4, -1, -1);
        gsay_start;
        call heather0();
        gsay_end;
        end_dialogue;
    end
    else begin
        call heather28();
    end
end

procedure heather0
begin
    Reply(101);
    giq_option(-3, NAME, 102, combat, NEUTRAL_REACTION);
    giq_option(-3, NAME, 103, HeatherEnd, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, heather0a, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, combat, NEUTRAL_REACTION);
    giq_option(6, NAME, 106, heather0b, NEUTRAL_REACTION);
end

procedure heather0a
begin
    if (local_var(1) < 2) then begin
        call heather19();
    end
    else begin
        call heather1();
    end
end

procedure heather0b
begin
    if (local_var(1) < 2) then begin
        call heather27();
    end
    else begin
        call heather21();
    end
end

procedure heather1
begin
    Reply(107);
    if (dude_gender == 0) then begin
        giq_option(4, NAME, 108, heather2, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_FIND_AGENT) == 1) then begin
        giq_option(4, NAME, 109, heather1a, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 110, heather19, NEUTRAL_REACTION);
    giq_option(4, NAME, 111, heather20, NEUTRAL_REACTION);
end

procedure heather1a
begin
    call BigDownReact();
    call heather3();
end

procedure heather2
begin
    gsay_message(NAME, 112, NEUTRAL_REACTION);
end

procedure heather3
begin
    Reply(113);
    giq_option(5, NAME, 114, heather3a, NEUTRAL_REACTION);
    giq_option(4, NAME, 115, heather3b, NEUTRAL_REACTION);
    giq_option(4, NAME, 116, heather3c, NEUTRAL_REACTION);
    giq_option(4, NAME, 117, HeatherEnd, NEUTRAL_REACTION);
end

procedure heather3a
begin
    call DownReact();
    call heather4();
end

procedure heather3b
begin
    call UpReact();
    call heather10();
end

procedure heather3c
begin
    call BigDownReact();
    call heather8();
end

procedure heather4
begin
    Reply(118);
    giq_option(5, NAME, 119, heather5, NEUTRAL_REACTION);
    giq_option(6, NAME, 120, heather10, NEUTRAL_REACTION);
    giq_option(7, NAME, 121, heather17, NEUTRAL_REACTION);
end

procedure heather5
begin
    Reply(122);
    giq_option(5, NAME, 123, heather5a, NEUTRAL_REACTION);
    giq_option(5, NAME, 124, heather7, NEUTRAL_REACTION);
    giq_option(6, NAME, 125, heather9, NEUTRAL_REACTION);
end

procedure heather5a
begin
    call BigUpReact();
    call heather6();
end

procedure heather6
begin
    gsay_message(NAME, 126, NEUTRAL_REACTION);
end

procedure heather7
begin
    Reply(127);
    giq_option(4, NAME, 128, heather6, NEUTRAL_REACTION);
    giq_option(4, NAME, 129, heather8, NEUTRAL_REACTION);
end

procedure heather8
begin
    gsay_message(NAME, 130, NEUTRAL_REACTION);
    call combat();
end

procedure heather9
begin
    Reply(131);
    giq_option(4, NAME, 132, heather6, NEUTRAL_REACTION);
    giq_option(4, NAME, 133, heather8, NEUTRAL_REACTION);
end

procedure heather10
begin
    Reply(134);
    giq_option(4, NAME, 135, heather11, NEUTRAL_REACTION);
    giq_option(5, NAME, 136, heather12, NEUTRAL_REACTION);
    giq_option(4, NAME, 137, HeatherEnd, NEUTRAL_REACTION);
end

procedure heather11
begin
    Reply(138);
    giq_option(4, NAME, 139, HeatherEnd, NEUTRAL_REACTION);
end

procedure heather12
begin
    Reply(140);
    giq_option(4, NAME, 141, heather6, NEUTRAL_REACTION);
    giq_option(4, NAME, 142, heather13, NEUTRAL_REACTION);
    giq_option(4, NAME, 143, HeatherEnd, NEUTRAL_REACTION);
end

procedure heather13
begin
    Reply(144);
    giq_option(4, NAME, 145, heather14, NEUTRAL_REACTION);
    giq_option(4, NAME, 146, heather15, NEUTRAL_REACTION);
    giq_option(4, NAME, 147, heather16, NEUTRAL_REACTION);
end

procedure heather14
begin
    Reply(148);
    giq_option(4, NAME, 149, heather6, NEUTRAL_REACTION);
    giq_option(4, NAME, 150, heather8, NEUTRAL_REACTION);
end

procedure heather15
begin
    Reply(151);
    giq_option(4, NAME, 152, heather8, NEUTRAL_REACTION);
    giq_option(4, NAME, 153, combat, NEUTRAL_REACTION);
end

procedure heather16
begin
    gsay_message(NAME, 154, NEUTRAL_REACTION);
end

procedure heather17
begin
    Reply(155);
    giq_option(4, NAME, 156, heather8, NEUTRAL_REACTION);
    giq_option(4, NAME, 157, heather18, NEUTRAL_REACTION);
end

procedure heather18
begin
    Reply(158);
    giq_option(4, NAME, 159, heather8, NEUTRAL_REACTION);
    giq_option(4, NAME, 160, heather6, NEUTRAL_REACTION);
end

procedure heather19
begin
    gsay_message(NAME, 161, NEUTRAL_REACTION);
end

procedure heather20
begin
    gsay_message(NAME, 162, NEUTRAL_REACTION);
end

procedure heather21
begin
    Reply(163);
    giq_option(6, NAME, 164, heather22, NEUTRAL_REACTION);
    giq_option(6, NAME, 165, heather26, NEUTRAL_REACTION);
    giq_option(6, NAME, 166, heather25, NEUTRAL_REACTION);
end

procedure heather22
begin
    Reply(167);
    giq_option(6, NAME, 168, heather22a, NEUTRAL_REACTION);
    giq_option(6, NAME, 169, heather25, NEUTRAL_REACTION);
end

procedure heather22a
begin
    variable LVar0 := 0;
    if (item_caps_total(dude_obj) >= 300) then begin
        item_caps_adjust(dude_obj, -300);
        item_caps_adjust(self_obj, 300);
        call heather23();
    end
    else begin
        call heather24();
    end
end

procedure heather23
begin
    gsay_message(NAME, 170, NEUTRAL_REACTION);
end

procedure heather24
begin
    gsay_message(NAME, 171, NEUTRAL_REACTION);
    call combat();
end

procedure heather25
begin
    gsay_message(NAME, 172, NEUTRAL_REACTION);
end

procedure heather26
begin
    Reply(173);
    giq_option(6, NAME, 174, heather22a, NEUTRAL_REACTION);
    giq_option(6, NAME, 175, heather25, NEUTRAL_REACTION);
end

procedure heather27
begin
    gsay_message(NAME, 176, NEUTRAL_REACTION);
end

procedure heather28
begin
    float_msg(self_obj, mstr(177), FLOAT_MSG_NORMAL);
end

procedure HeatherEnd
begin
end

procedure combat
begin
    hostile := 1;
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
