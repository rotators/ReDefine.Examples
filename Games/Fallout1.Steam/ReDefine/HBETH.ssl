/*******************************************************
*      Some unreferenced imported varables found.      *
*      Because of it it is impossible to specify       *
*      the real names of global variables.             *
*******************************************************/

variable GVar0;
variable GVar1 := 1;
variable GVar2;

procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure damage_p_proc;
procedure look_at_p_proc;
procedure Beth00;
procedure Beth01;
procedure Beth02;
procedure Beth02a;
procedure Beth02b;
procedure Beth03;
procedure Beth03a;
procedure Beth04;
procedure Beth05;
procedure Beth06;
procedure Beth07;
procedure Beth08;
procedure Beth09;
procedure Beth10;
procedure Beth11;
procedure Beth12;
procedure Beth13;
procedure Beth14;
procedure Beth15;
procedure Beth15a;
procedure Beth16;
procedure Beth16a;
procedure Beth17;
procedure Beth17a;
procedure Beth17b;
procedure Beth18;
procedure Beth19;
procedure Beth20;
procedure Beth21;
procedure Beth22;
procedure Beth23;
procedure Beth24;
procedure Beth25;
procedure Beth26;
procedure Beth27;
procedure Beth27a;
procedure Beth28;
procedure Beth29;
procedure Beth30;
procedure Beth31;
procedure Beth32;
procedure Beth33;
procedure Beth34;
procedure Beth35;
procedure Beth35a;
procedure Beth36;
procedure Beth37;
procedure Beth38;
procedure Beth39;
procedure Beth40;
procedure Beth40a;
procedure Beth41;
procedure Beth42;
procedure Beth43;
procedure Beth44;
procedure Beth45;
procedure Beth46;
procedure Beth47;
procedure Beth48;
procedure Beth49;
procedure Beth50;
procedure Beth52;
procedure Beth52a;
procedure Beth53;
procedure Beth54;
procedure Beth55;
procedure Beth56;
procedure Beth57;
procedure Beth58;
procedure Beth59;
procedure Beth60;
procedure Beth61;
procedure Beth62;
procedure Beth63;
procedure Beth64;
procedure Beth65;
procedure Beth66;
procedure Beth67;
procedure Beth68;
procedure Beth69;
procedure BethEnd;
procedure Get_Stuff;
procedure Put_Stuff;

/* ?import? variable hostile; */
/* ?import? variable Only_Once; */
/* ?import? variable Sid_Ptr; */

import variable Beth_Ptr;
import variable Beth_Box_Ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

/* ?import? variable exit_line; */

procedure Beth02c;


procedure start
begin
    variable LVar0 := 0;
    if (GVar1) then begin
        GVar1 := 0;
        Beth_Ptr := self_obj;
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 37);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_MERCHANT);
    end
    if (script_action == look_at_proc) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == pickup_proc) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == talk_proc) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == critter_proc) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == destroy_proc) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    GVar0 := 1;
end

procedure critter_p_proc
begin
    if (GVar0) then begin
        GVar0 := 0;
        attack(dude_obj);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        GVar0 := 1;
    end
end

procedure talk_p_proc
begin
    variable LVar0 := 0;
    call Get_Stuff();
    call get_reaction();
    if ((((game_time / (10 * 60 * 60 * 24)) - local_var(16)) >= 1) or (local_var(16) == 0)) then begin
        set_local_var(16, game_time / (10 * 60 * 60 * 24));
        set_local_var(17, 1000 + random(0, 1000));
        LVar0 := item_caps_adjust(self_obj, local_var(17));
    end
    else begin
        LVar0 := item_caps_adjust(self_obj, local_var(17));
    end
    if (map_var(10) == 1) then begin
        gdialog_set_barter_mod(5);
    end
    else begin
        gdialog_set_barter_mod(-10);
    end
    set_map_var(33, 1);
    if (local_var(11) == 0) then begin
        set_local_var(11, game_time / (10 * 60 * 60));
    end
    if ((game_time_hour >= 1900) or (game_time_hour < 600)) then begin
        float_msg(self_obj, mstr(361), FLOAT_MSG_RED);
    end
    else begin
        if ((obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND)) == 3) or (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND)) == 3) and (local_var(14) == 0)) then begin
            call Beth55();
        end
        else begin
            if ((obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND)) == 3) or (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND)) == 3) and (local_var(14) == 1)) then begin
                call Beth56();
            end
            else begin
                if (local_var(4) == 1) then begin
                    start_gdialog(617, self_obj, 4, -1, -1);
                    gsay_start;
                    if (local_var(1) > 1) then begin
                        call Beth64();
                    end
                    else begin
                        call Beth65();
                    end
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    set_local_var(4, 1);
                    start_gdialog(617, self_obj, 4, -1, -1);
                    gsay_start;
                    call Beth00();
                    gsay_end;
                    end_dialogue;
                end
            end
        end
    end
    set_local_var(11, game_time / (10 * 60 * 60));
    LVar0 := item_caps_adjust(self_obj, -1 * item_caps_total(self_obj));
    call Put_Stuff();
end

procedure destroy_p_proc
begin
    move_obj_inven_to_obj(Beth_Box_Ptr, self_obj);
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(source_obj);
    if (party_member_obj(LVar0) != 0) then begin
        set_global_var(GVAR_ENEMY_HUB, 1);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure Beth00
begin
    Reply(101);
    call Beth01();
end

procedure Beth01
begin
    giq_option(4, NAME, 102, Beth09, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, Beth62, GOOD_REACTION);
    giq_option(4, NAME, 398, Beth68, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, Beth63, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, Beth06, NEUTRAL_REACTION);
    giq_option(4, NAME, 107, BethEnd, NEUTRAL_REACTION);
    giq_option(-3, NAME, 108, Beth04, NEUTRAL_REACTION);
end

procedure Beth02
begin
    if (map_var(41) == 1) then begin
        giq_option(4, NAME, 109, Beth36, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_HUB_FILLER_29) >= 1) then begin
        giq_option(4, NAME, 110, Beth02a, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_DECKER_KNOWN) == 1) then begin
        giq_option(4, NAME, 112, Beth02b, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 398, Beth69, NEUTRAL_REACTION);
    giq_option(4, NAME, 113, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, Beth03a, NEUTRAL_REACTION);
    giq_option(4, NAME, 115, BethEnd, NEUTRAL_REACTION);
end

procedure Beth02a
begin
    if (global_var(GVAR_HUB_FILLER_29) == 5) then begin
        call Beth37();
    end
    else begin
        call Beth38();
    end
end

procedure Beth02b
begin
    if (global_var(GVAR_DECKER_STATUS) != 0) then begin
        call Beth66();
    end
    else begin
        call Beth14();
    end
end

procedure Beth03
begin
    if (local_var(10) == 1) then begin
        if ((local_var(5) == 0) and (global_var(GVAR_DECKER_STATUS) == 2)) then begin
            set_local_var(5, 1);
            set_global_var(GVAR_DECKER_KNOWN, 1);
            Reply(123);
        end
        else begin
            if ((local_var(6) == 0) and (global_var(GVAR_DECKER_STATUS) == 2)) then begin
                set_local_var(5, 1);
                Reply(124);
            end
            else begin
                if ((local_var(7) == 0) and (global_var(GVAR_KILL_JAIN) == 2)) then begin
                    set_local_var(5, 1);
                    Reply(125);
                end
                else begin
                    if ((local_var(8) == 0) and (global_var(GVAR_MASTER_BLOWN) == 1)) then begin
                        set_local_var(5, 1);
                        Reply(126);
                    end
                    else begin
                        if ((local_var(9) == 0) and (global_var(GVAR_VATS_BLOWN) == 1)) then begin
                            set_local_var(5, 1);
                            Reply(127);
                        end
                    end
                end
            end
        end
    end
    else begin
        set_local_var(10, 1);
        if ((local_var(5) == 0) and (global_var(GVAR_DECKER_STATUS) == 2)) then begin
            set_local_var(5, 1);
            set_global_var(GVAR_DECKER_KNOWN, 1);
            Reply(117);
        end
        else begin
            if ((local_var(6) == 0) and (global_var(GVAR_DECKER_STATUS) == 2)) then begin
                set_local_var(5, 1);
                Reply(118);
            end
            else begin
                if ((local_var(7) == 0) and (global_var(GVAR_KILL_JAIN) == 2)) then begin
                    set_local_var(5, 1);
                    Reply(119);
                end
                else begin
                    if ((local_var(8) == 0) and (global_var(GVAR_MASTER_BLOWN) == 1)) then begin
                        set_local_var(5, 1);
                        Reply(121);
                    end
                    else begin
                        if ((local_var(9) == 0) and (global_var(GVAR_VATS_BLOWN) == 1)) then begin
                            set_local_var(5, 1);
                            Reply(122);
                        end
                    end
                end
            end
        end
    end
    giq_option(4, NAME, 128, Beth03a, NEUTRAL_REACTION);
    giq_option(4, NAME, 129, Beth39, NEUTRAL_REACTION);
    giq_option(4, NAME, 130, BethEnd, NEUTRAL_REACTION);
end

procedure Beth03a
begin
    if ((local_var(5) == 0) and (global_var(GVAR_DECKER_STATUS) == 2) or ((local_var(6) == 0) and (global_var(GVAR_DECKER_STATUS) == 2)) or ((local_var(7) == 0) and (global_var(GVAR_KILL_JAIN) == 2)) or ((local_var(8) == 0) and (global_var(GVAR_MASTER_BLOWN) == 1)) or ((local_var(9) == 0) and (global_var(GVAR_VATS_BLOWN) == 1))) then begin
        call Beth03();
    end
    else begin
        call Beth12();
    end
end

procedure Beth04
begin
    Reply(131);
    giq_option(-3, NAME, 132, Beth05, NEUTRAL_REACTION);
    giq_option(-3, NAME, 133, Beth05, NEUTRAL_REACTION);
end

procedure Beth05
begin
    gsay_message(NAME, 134, NEUTRAL_REACTION);
end

procedure Beth06
begin
    Reply(135);
    giq_option(4, NAME, 136, BethEnd, NEUTRAL_REACTION);
end

procedure Beth07
begin
    Reply(137);
    giq_option(4, NAME, 138, Beth08, NEUTRAL_REACTION);
    giq_option(4, NAME, 139, Beth11, NEUTRAL_REACTION);
end

procedure Beth08
begin
    Reply(140);
    call Beth01();
end

procedure Beth09
begin
    Reply(141);
    call Beth02();
end

procedure Beth10
begin
    Reply(142);
    call Beth02();
end

procedure Beth11
begin
    gsay_message(NAME, 143, NEUTRAL_REACTION);
end

procedure Beth12
begin
    Reply(144);
    giq_option(4, NAME, 145, Beth08, NEUTRAL_REACTION);
    giq_option(4, NAME, 146, Beth13, NEUTRAL_REACTION);
end

procedure Beth13
begin
    gsay_message(NAME, 147, NEUTRAL_REACTION);
end

procedure Beth14
begin
    Reply(148);
    giq_option(4, NAME, 149, Beth15, NEUTRAL_REACTION);
    giq_option(4, NAME, 150, Beth20, NEUTRAL_REACTION);
end

procedure Beth15
begin
    set_global_var(GVAR_DECKER_KNOWN, 1);
    Reply(151);
    giq_option(4, NAME, 152, Beth16, NEUTRAL_REACTION);
    if ((map_var(46) >= 4) or (map_var(46) >= 4)) then begin
        giq_option(4, NAME, 153, Beth15a, BAD_REACTION);
    end
    giq_option(4, NAME, 154, BethEnd, NEUTRAL_REACTION);
end

procedure Beth15a
begin
    call BigDownReact();
    call Beth21();
end

procedure Beth16
begin
    set_map_var(48, 1);
    Reply(155);
    if ((map_var(46) >= 5) or (map_var(46) >= 5)) then begin
        giq_option(4, NAME, 156, Beth16a, BAD_REACTION);
    end
    giq_option(4, NAME, 157, Beth17, NEUTRAL_REACTION);
    giq_option(4, NAME, 158, Beth18, NEUTRAL_REACTION);
    giq_option(4, NAME, 159, Beth18, NEUTRAL_REACTION);
end

procedure Beth16a
begin
    call BottomReact();
    call Beth22();
end

procedure Beth17
begin
    Reply(160);
    giq_option(4, NAME, 161, Beth18, NEUTRAL_REACTION);
    giq_option(4, NAME, 162, Beth17a, BAD_REACTION);
    giq_option(4, NAME, 163, Beth17b, BAD_REACTION);
end

procedure Beth17a
begin
    call DownReact();
    call Beth19();
end

procedure Beth17b
begin
    call BigDownReact();
    call Beth19();
end

procedure Beth18
begin
    Reply(164);
    call Beth02();
end

procedure Beth19
begin
    gsay_message(NAME, 165, BAD_REACTION);
end

procedure Beth20
begin
    Reply(166);
    call Beth02();
end

procedure Beth21
begin
    gsay_message(NAME, 167, BAD_REACTION);
end

procedure Beth22
begin
    gsay_message(NAME, 168, BAD_REACTION);
end

procedure Beth23
begin
    Reply(169);
    call Beth24();
end

procedure Beth24
begin
    giq_option(4, NAME, 170, Beth25, NEUTRAL_REACTION);
    giq_option(4, NAME, 172, Beth30, NEUTRAL_REACTION);
    giq_option(4, NAME, 173, Beth33, NEUTRAL_REACTION);
    giq_option(4, NAME, 174, Beth42, NEUTRAL_REACTION);
    giq_option(4, NAME, 175, BethEnd, NEUTRAL_REACTION);
end

procedure Beth25
begin
    Reply(177);
    giq_option(4, NAME, 178, Beth27, NEUTRAL_REACTION);
    if (map_var(41) == 1) then begin
        giq_option(4, NAME, 179, Beth34, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 180, Beth26, NEUTRAL_REACTION);
    giq_option(4, NAME, 181, BethEnd, NEUTRAL_REACTION);
end

procedure Beth26
begin
    Reply(182);
    call Beth24();
end

procedure Beth27
begin
    Reply(183);
    giq_option(4, NAME, 184, Beth28, NEUTRAL_REACTION);
    giq_option(4, NAME, 185, Beth27a, BAD_REACTION);
    giq_option(4, NAME, 186, Beth26, NEUTRAL_REACTION);
    giq_option(4, NAME, 187, BethEnd, NEUTRAL_REACTION);
end

procedure Beth27a
begin
    call BigDownReact();
    call BethEnd();
end

procedure Beth28
begin
    Reply(188);
    giq_option(4, NAME, 189, Beth29, NEUTRAL_REACTION);
    giq_option(4, NAME, 190, Beth26, NEUTRAL_REACTION);
    giq_option(4, NAME, 191, BethEnd, NEUTRAL_REACTION);
end

procedure Beth29
begin
    Reply(192);
    call Beth24();
end

procedure Beth30
begin
    Reply(193);
    giq_option(4, NAME, 194, Beth32, NEUTRAL_REACTION);
    giq_option(4, NAME, 195, Beth31, NEUTRAL_REACTION);
    giq_option(4, NAME, 196, Beth26, NEUTRAL_REACTION);
    giq_option(4, NAME, 197, BethEnd, NEUTRAL_REACTION);
end

procedure Beth31
begin
    Reply(198);
    giq_option(4, NAME, 199, Beth32, NEUTRAL_REACTION);
    giq_option(4, NAME, 200, Beth26, NEUTRAL_REACTION);
    giq_option(4, NAME, 201, BethEnd, NEUTRAL_REACTION);
end

procedure Beth32
begin
    Reply(202);
    giq_option(4, NAME, 203, Beth31, NEUTRAL_REACTION);
    giq_option(4, NAME, 204, Beth26, NEUTRAL_REACTION);
    giq_option(4, NAME, 205, BethEnd, NEUTRAL_REACTION);
end

procedure Beth33
begin
    Reply(206);
    call Beth24();
end

procedure Beth34
begin
    Reply(207);
    call Beth35();
end

procedure Beth35
begin
    if (map_var(41) == 1) then begin
        giq_option(4, NAME, 208, Beth40, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_HUB_FILLER_29) >= 1) then begin
        giq_option(4, NAME, 209, Beth46, NEUTRAL_REACTION);
    end
    if (map_var(41) == 1) then begin
        giq_option(4, NAME, 212, Beth35a, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 213, Beth24, NEUTRAL_REACTION);
    giq_option(4, NAME, 214, BethEnd, NEUTRAL_REACTION);
end

procedure Beth35a
begin
    if (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 3) then begin
        call Beth54();
    end
    else begin
        call Beth53();
    end
end

procedure Beth36
begin
    Reply(215);
    call Beth35();
end

procedure Beth37
begin
    Reply(216);
    call Beth35();
end

procedure Beth38
begin
    Reply(217);
    call Beth35();
end

procedure Beth39
begin
    Reply(218);
    call Beth02();
end

procedure Beth40
begin
    Reply(219);
    giq_option(4, NAME, 220, Beth43, NEUTRAL_REACTION);
    giq_option(4, NAME, 221, Beth44, NEUTRAL_REACTION);
    giq_option(4, NAME, 222, Beth35, NEUTRAL_REACTION);
    giq_option(4, NAME, 223, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 224, Beth40a, BAD_REACTION);
    giq_option(4, NAME, 225, BethEnd, NEUTRAL_REACTION);
end

procedure Beth40a
begin
    call BigDownReact();
    call Beth41();
end

procedure Beth41
begin
    gsay_message(NAME, 226, BAD_REACTION);
end

procedure Beth42
begin
    Reply(227);
    call Beth24();
end

procedure Beth43
begin
    Reply(228);
    giq_option(4, NAME, 229, Beth44, NEUTRAL_REACTION);
    giq_option(4, NAME, 230, Beth35, NEUTRAL_REACTION);
    giq_option(4, NAME, 231, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 232, BethEnd, NEUTRAL_REACTION);
end

procedure Beth44
begin
    Reply(233);
    giq_option(4, NAME, 234, Beth44, NEUTRAL_REACTION);
    giq_option(4, NAME, 235, Beth35, NEUTRAL_REACTION);
    giq_option(4, NAME, 236, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 237, Beth45, BAD_REACTION);
    giq_option(4, NAME, 238, BethEnd, NEUTRAL_REACTION);
end

procedure Beth45
begin
    call BigDownReact();
    gsay_message(NAME, 239, BAD_REACTION);
end

procedure Beth46
begin
    Reply(240);
    giq_option(4, NAME, 241, Beth47, NEUTRAL_REACTION);
    giq_option(4, NAME, 242, Beth49, BAD_REACTION);
    giq_option(4, NAME, 243, Beth47, NEUTRAL_REACTION);
    giq_option(4, NAME, 244, Beth50, NEUTRAL_REACTION);
end

procedure Beth47
begin
    set_global_var(GVAR_HUB_FILLER_29, 2);
    Reply(245);
    giq_option(4, NAME, 246, Beth48, NEUTRAL_REACTION);
    if (dude_gender == 0) then begin
        giq_option(4, NAME, 247, Beth49, BAD_REACTION);
    end
    else begin
        giq_option(4, NAME, 248, Beth49, BAD_REACTION);
    end
    giq_option(4, NAME, 249, Beth35, NEUTRAL_REACTION);
    giq_option(4, NAME, 250, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 251, BethEnd, NEUTRAL_REACTION);
end

procedure Beth48
begin
    Reply(252);
    giq_option(4, NAME, 253, Beth35, NEUTRAL_REACTION);
    giq_option(4, NAME, 254, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 255, BethEnd, NEUTRAL_REACTION);
end

procedure Beth49
begin
    gsay_message(NAME, 256, BAD_REACTION);
end

procedure Beth50
begin
    set_global_var(GVAR_HUB_FILLER_29, 2);
    Reply(257);
    giq_option(4, NAME, 258, Beth35, NEUTRAL_REACTION);
    giq_option(4, NAME, 259, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 394, Beth48, NEUTRAL_REACTION);
    giq_option(4, NAME, 260, BethEnd, NEUTRAL_REACTION);
end

procedure Beth52
begin
    Reply(266);
    giq_option(4, NAME, 267, Beth35, NEUTRAL_REACTION);
    giq_option(4, NAME, 268, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 269, Beth52a, BAD_REACTION);
    giq_option(4, NAME, 270, BethEnd, NEUTRAL_REACTION);
end

procedure Beth52a
begin
    call DownReact();
    call BethEnd();
end

procedure Beth53
begin
    Reply(271);
    if (global_var(GVAR_BECOME_AN_INITIATE) == 2) then begin
        giq_option(4, NAME, 272, Beth57, NEUTRAL_REACTION);
        giq_option(4, NAME, 273, Beth59, NEUTRAL_REACTION);
    end
    else begin
        if (global_var(GVAR_BROTHERHOOD_OF_STEEL) == 2) then begin
            giq_option(4, NAME, 274, Beth58, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, NAME, 275, Beth58, NEUTRAL_REACTION);
        end
    end
end

procedure Beth54
begin
    Reply(276);
    if (global_var(GVAR_BECOME_AN_INITIATE) == 2) then begin
        giq_option(4, NAME, 277, Beth61, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 278, Beth57, NEUTRAL_REACTION);
    giq_option(4, NAME, 279, Beth58, NEUTRAL_REACTION);
end

procedure Beth55
begin
    set_local_var(14, 1);
    if (dude_gender == 0) then begin
        float_msg(self_obj, mstr(280), FLOAT_MSG_RED);
    end
    else begin
        float_msg(self_obj, mstr(281), FLOAT_MSG_RED);
    end
end

procedure Beth56
begin
    float_msg(self_obj, mstr(282), FLOAT_MSG_RED);
end

procedure Beth57
begin
    Reply(283);
    call Beth60();
end

procedure Beth58
begin
    Reply(284);
    call Beth60();
end

procedure Beth59
begin
    Reply(285);
    call Beth60();
end

procedure Beth60
begin
    giq_option(4, NAME, 286, Beth35, NEUTRAL_REACTION);
    giq_option(4, NAME, 287, Beth23, NEUTRAL_REACTION);
    giq_option(4, NAME, 288, BethEnd, NEUTRAL_REACTION);
end

procedure Beth61
begin
    Reply(289);
    call Beth60();
end

procedure Beth62
begin
    gsay_message(NAME, random(290, 295), NEUTRAL_REACTION);
    if (map_var(10) == 1) then begin
        gsay_message(NAME, 297, GOOD_REACTION);
        gdialog_mod_barter(5);
        Reply(395);
        giq_option(4, NAME, 396, BethEnd, NEUTRAL_REACTION);
        giq_option(-3, NAME, 397, BethEnd, NEUTRAL_REACTION);
    end
    else begin
        gdialog_mod_barter(-10);
        Reply(395);
        giq_option(4, NAME, 396, BethEnd, NEUTRAL_REACTION);
        giq_option(-3, NAME, 397, BethEnd, NEUTRAL_REACTION);
    end
end

procedure Beth63
begin
    gsay_message(NAME, random(300, 305), NEUTRAL_REACTION);
    if (map_var(10) == 1) then begin
        gsay_message(NAME, 297, GOOD_REACTION);
        gdialog_mod_barter(5);
        Reply(395);
        giq_option(4, NAME, 396, BethEnd, NEUTRAL_REACTION);
        giq_option(-3, NAME, 397, BethEnd, NEUTRAL_REACTION);
    end
    else begin
        gdialog_mod_barter(-10);
        Reply(395);
        giq_option(4, NAME, 396, BethEnd, NEUTRAL_REACTION);
        giq_option(-3, NAME, 397, BethEnd, NEUTRAL_REACTION);
    end
end

procedure Beth64
begin
    if ((dude_charisma >= 7) and (dude_gender == 0)) then begin
        if ((((game_time / (10 * 60 * 60)) - local_var(11)) <= 1) and (dude_gender == 1)) then begin
            Reply(mstr(random(311, 314)) + " " + mstr(315));
        end
        else begin
            if (((game_time / (10 * 60 * 60)) - local_var(11)) <= 1) then begin
                Reply(mstr(random(311, 314)) + " " + mstr(316));
            end
            else begin
                if ((((game_time / (10 * 60 * 60)) - local_var(11)) > 1) and (((game_time / (10 * 60 * 60)) - local_var(11)) <= 96)) then begin
                    Reply(mstr(random(311, 314)) + " " + mstr(317));
                end
                else begin
                    if ((((game_time / (10 * 60 * 60)) - local_var(11)) > 96) and (((game_time / (10 * 60 * 60)) - local_var(11)) <= 168)) then begin
                        Reply(mstr(random(311, 314)) + " " + mstr(318));
                    end
                    else begin
                        if ((((game_time / (10 * 60 * 60)) - local_var(11)) > 168) and (((game_time / (10 * 60 * 60)) - local_var(11)) <= 336)) then begin
                            Reply(mstr(random(311, 314)) + " " + mstr(319));
                        end
                        else begin
                            if (((game_time / (10 * 60 * 60)) - local_var(11)) > 336) then begin
                                Reply(mstr(random(311, 314)) + " " + mstr(320));
                            end
                        end
                    end
                end
            end
        end
    end
    else begin
        if ((((game_time / (10 * 60 * 60)) - local_var(11)) <= 1) and (dude_gender == 1)) then begin
            Reply(mstr(random(311, 313)) + " " + mstr(315));
        end
        else begin
            if (((game_time / (10 * 60 * 60)) - local_var(11)) <= 1) then begin
                Reply(mstr(random(311, 313)) + " " + mstr(316));
            end
            else begin
                if ((((game_time / (10 * 60 * 60)) - local_var(11)) > 1) and (((game_time / (10 * 60 * 60)) - local_var(11)) <= 96)) then begin
                    Reply(mstr(random(311, 313)) + " " + mstr(317));
                end
                else begin
                    if ((((game_time / (10 * 60 * 60)) - local_var(11)) > 96) and (((game_time / (10 * 60 * 60)) - local_var(11)) <= 168)) then begin
                        Reply(mstr(random(311, 313)) + " " + mstr(318));
                    end
                    else begin
                        if ((((game_time / (10 * 60 * 60)) - local_var(11)) > 168) and (((game_time / (10 * 60 * 60)) - local_var(11)) <= 336)) then begin
                            Reply(mstr(random(311, 313)) + " " + mstr(319));
                        end
                        else begin
                            if (((game_time / (10 * 60 * 60)) - local_var(11)) > 336) then begin
                                Reply(mstr(random(311, 313)) + " " + mstr(320));
                            end
                        end
                    end
                end
            end
        end
    end
    call Beth01();
end

procedure Beth65
begin
    Reply(random(322, 329));
    call Beth01();
end

procedure Beth66
begin
    if (local_var(12) == 0) then begin
        set_local_var(12, 1);
        Reply(330);
    end
    else begin
        Reply(331);
    end
    giq_option(4, NAME, 332, Beth18, NEUTRAL_REACTION);
    if (local_var(13) == 0) then begin
        giq_option(4, NAME, 333, Beth67, NEUTRAL_REACTION);
    end
end

procedure Beth67
begin
    variable LVar0 := 0;
    set_local_var(13, 1);
    if (dude_gender == 0) then begin
        gsay_message(NAME, 334, GOOD_REACTION);
    end
    else begin
        gsay_message(NAME, 335, GOOD_REACTION);
    end
    LVar0 := create_object(40, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    LVar0 := create_object(40, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    LVar0 := create_object(40, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    LVar0 := create_object(40, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    LVar0 := create_object(40, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    LVar0 := create_object(40, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
end

procedure Beth68
begin
    set_global_var(GVAR_DECKER_KNOWN, 1);
    Reply(399);
    call Beth01();
end

procedure Beth69
begin
    set_global_var(GVAR_DECKER_KNOWN, 1);
    Reply(399);
    call Beth02();
end

procedure BethEnd
begin
end

procedure Get_Stuff
begin
    move_obj_inven_to_obj(Beth_Box_Ptr, self_obj);
end

procedure Put_Stuff
begin
    move_obj_inven_to_obj(self_obj, Beth_Box_Ptr);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    GVar2 := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure Beth02c
begin
    if ((local_var(5) == 0) and (global_var(GVAR_DECKER_STATUS) == 2) or ((local_var(6) == 0) and (global_var(GVAR_DECKER_STATUS) == 2)) or ((local_var(7) == 0) and (global_var(GVAR_KILL_JAIN) == 2)) or ((local_var(8) == 0) and (global_var(GVAR_MASTER_BLOWN) == 1)) or ((local_var(9) == 0) and (global_var(GVAR_VATS_BLOWN) == 1))) then begin
        call Beth03();
    end
    else begin
        call Beth07();
    end
end
