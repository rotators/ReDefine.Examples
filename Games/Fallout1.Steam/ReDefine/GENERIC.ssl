procedure start;
procedure do_dialogue;
procedure genericend;
procedure genericcbt;
procedure generic00;
procedure generic01;
procedure generic02;
procedure generic03;
procedure Critter_Action;
procedure timetomove;

variable Hostile;
variable init;
variable maxleash := 9;
variable noevent;
variable loopcount;
variable rndx;
variable rndy;
variable rndz;
variable dist;
variable new_tile;
variable SET;
variable MUTANTS;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(init)) then begin
        if (local_var(7) == 0) then begin
            set_local_var(7, tile_num(self_obj));
            set_local_var(5, 1);
        end
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 32);
        init := 1;
    end
    else begin
        if (script_action == timed_event_proc) then begin
            call timetomove();
        end
        else begin
            if (script_action == talk_proc) then begin
                call do_dialogue();
            end
            else begin
                if (script_action == pickup_proc) then begin
                    Hostile := 1;
                end
                else begin
                    if (script_action == critter_proc) then begin
                        call Critter_Action();
                    end
                    else begin
                        if (script_action == destroy_proc) then begin
                            if (source_obj == dude_obj) then begin
                                if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                                    set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                                    set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                                end
                                if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                                    set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                                    set_global_var(GVAR_BERSERKER_REPUTATION, 0);
                                end
                                set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
                                if ((global_var(GVAR_BAD_MONSTER) % 6) == 0) then begin
                                    set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 1);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure do_dialogue
begin
    if (local_var(4) == 0) then begin
        set_local_var(4, 1);
        if (local_var(1) < 2) then begin
            if (is_success(do_check(dude_obj, 6, 0))) then begin
                Hostile := Hostile + 1;
            end
            else begin
                Hostile := Hostile + 2;
            end
        end
    end
    if (Hostile) then begin
        call generic01();
    end
    else begin
        call generic00();
    end
end

procedure genericend
begin
end

procedure genericcbt
begin
end

procedure generic00
begin
    rndx := random(1, 7);
    if (rndx == 1) then begin
        float_msg(self_obj, mstr(100), FLOAT_MSG_LIGHT_RED);
    end
    if (rndx == 2) then begin
        float_msg(self_obj, mstr(101), FLOAT_MSG_LIGHT_RED);
    end
    if (rndx == 3) then begin
        float_msg(self_obj, mstr(102), FLOAT_MSG_LIGHT_RED);
    end
    if (rndx == 4) then begin
        float_msg(self_obj, mstr(103), FLOAT_MSG_LIGHT_RED);
    end
    if (rndx == 5) then begin
        float_msg(self_obj, mstr(104), FLOAT_MSG_LIGHT_RED);
    end
    if (rndx == 6) then begin
        call generic02();
    end
    if (rndx == 7) then begin
        call generic03();
    end
end

procedure generic01
begin
    rndx := random(1, 4);
    if (rndx == 1) then begin
        float_msg(self_obj, mstr(105), FLOAT_MSG_LIGHT_RED);
    end
    if (rndx == 2) then begin
        float_msg(self_obj, mstr(106), FLOAT_MSG_LIGHT_RED);
    end
    if (rndx == 3) then begin
        float_msg(self_obj, mstr(107), FLOAT_MSG_LIGHT_RED);
    end
    if (rndx == 4) then begin
        float_msg(self_obj, mstr(108), FLOAT_MSG_LIGHT_RED);
    end
end

procedure generic02
begin
    if (SET == 0) then begin
        rndx := random(1, 2);
        if (rndx == 1) then begin
            float_msg(self_obj, mstr(109), FLOAT_MSG_LIGHT_RED);
        end
        if (rndx == 2) then begin
            float_msg(self_obj, mstr(110), FLOAT_MSG_LIGHT_RED);
        end
    end
    else begin
        float_msg(self_obj, mstr(111), FLOAT_MSG_LIGHT_RED);
    end
end

procedure generic03
begin
    if (MUTANTS == 0) then begin
        rndx := random(1, 2);
        if (rndx == 1) then begin
            float_msg(self_obj, mstr(112), FLOAT_MSG_LIGHT_RED);
        end
        if (rndx == 2) then begin
            float_msg(self_obj, mstr(113), FLOAT_MSG_LIGHT_RED);
        end
    end
    else begin
        float_msg(self_obj, mstr(114), FLOAT_MSG_LIGHT_RED);
    end
end

procedure Critter_Action
begin
    if (Hostile > 0) then begin
        Hostile := 0;
        attack(dude_obj);
    end
    else begin
        if (local_var(5)) then begin
            loopcount := loopcount + 1;
            if (loopcount > 40) then begin
                loopcount := 0;
                if (noevent == 0) then begin
                    noevent := 1;
                    add_timer_event(self_obj, game_ticks(random(5, 13)), 0);
                end
            end
        end
    end
end

procedure timetomove
begin
    noevent := 0;
    set_local_var(8, tile_num(self_obj));
    new_tile := tile_num_in_direction(local_var(8), random(0, 5), 2);
    if (tile_distance(local_var(7), new_tile) < maxleash) then begin
        animate_move_obj_to_tile(self_obj, new_tile, 0);
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
