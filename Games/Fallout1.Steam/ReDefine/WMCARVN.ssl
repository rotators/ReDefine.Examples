procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure RecalcDate;
procedure RecalcDateString;
procedure damage_p_proc;
procedure WMDriver00;
procedure WMDriver01;
procedure WMDriver02;
procedure WMDriver03;
procedure WMDriver04;
procedure WMDriver04a;
procedure WMDriver05;
procedure WMDriver06;
procedure WMDriver07;
procedure WMDriver08;
procedure WMDriver10;
procedure WMDriver10a;
procedure WMDriver11;
procedure WMDriver12;
procedure WMDriver13;
procedure WMDriver14;
procedure WMDriver15;
procedure WMDriver17;
procedure WMDriver18;
procedure WMDriver19;
procedure WMDriver20;
procedure WMDriver21a;
procedure WMDriver21b;
procedure WMDriver27;
procedure WMDriver28;
procedure WMDriver29;
procedure WMDriver30;
procedure WMDriver31;
procedure WMDriver32;
procedure WMDriver33;
procedure WMDriver34;
procedure WMDriver35;

variable hostile;
variable Only_Once := 1;
variable DayString := "None";

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 35);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_MERCHANT);
    end
    if (script_action == look_at_proc) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == pickup_proc) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == talk_proc) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == critter_proc) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == destroy_proc) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack(dude_obj);
    end
end

procedure pickup_p_proc
begin
    call WMDriver10();
end

procedure talk_p_proc
begin
    variable LVar0 := 0;
    call get_reaction();
    if (local_var(10) == 1) then begin
        if (local_var(7) < (game_time / (10 * 60 * 60 * 24 * 365))) then begin
            set_local_var(10, 0);
        end
        else begin
            if ((local_var(6) < get_month) or (local_var(6) == 12) and (get_month == 1) and ((local_var(6) != 1) or (get_month != 12))) then begin
                set_local_var(10, 0);
            end
            else begin
                if ((local_var(5) < get_day) and ((local_var(6) != 1) or (get_month != 12))) then begin
                    set_local_var(10, 0);
                end
            end
        end
    end
    call RecalcDate();
    LVar0 := local_var(5);
    if (local_var(8) > 0) then begin
        call WMDriver14();
    end
    else begin
        if (map_var(2) == 0) then begin
            call WMDriver15();
        end
        else begin
            if (global_var(GVAR_WATER_JOB) == 3) then begin
                start_gdialog(605, self_obj, 4, -1, -1);
                gsay_start;
                call WMDriver19();
                gsay_end;
                end_dialogue;
            end
            else begin
                if (global_var(GVAR_WATER_JOB) == 4) then begin
                    start_gdialog(605, self_obj, 4, -1, -1);
                    gsay_start;
                    call WMDriver27();
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    if (map_var(1) == 0) then begin
                        call WMDriver00();
                    end
                    else begin
                        if ((map_var(1) == 1) and (local_var(10) == 0)) then begin
                            start_gdialog(605, self_obj, 4, -1, -1);
                            gsay_start;
                            if (local_var(9) == 0) then begin
                                call WMDriver01();
                            end
                            else begin
                                call WMDriver03();
                            end
                            gsay_end;
                            end_dialogue;
                        end
                        else begin
                            if ((local_var(10) == 1) and (LVar0 == get_day)) then begin
                                start_gdialog(605, self_obj, 4, -1, -1);
                                gsay_start;
                                call WMDriver28();
                                gsay_end;
                                end_dialogue;
                            end
                            else begin
                                if ((local_var(10) == 1) and (LVar0 != get_day)) then begin
                                    start_gdialog(605, self_obj, 4, -1, -1);
                                    gsay_start;
                                    call WMDriver29();
                                    gsay_end;
                                    end_dialogue;
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    set_local_var(4, 1);
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure RecalcDate
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    LVar0 := get_day;
    if ((LVar0 > 1) and (LVar0 <= 5)) then begin
        LVar0 := 5;
        LVar1 := get_month;
        LVar2 := game_time / (10 * 60 * 60 * 24 * 365);
    end
    else begin
        if ((LVar0 > 5) and (LVar0 <= 10)) then begin
            LVar0 := 10;
            LVar1 := get_month;
            LVar2 := game_time / (10 * 60 * 60 * 24 * 365);
        end
        else begin
            if ((LVar0 > 10) and (LVar0 <= 15)) then begin
                LVar0 := 15;
                LVar1 := get_month;
                LVar2 := game_time / (10 * 60 * 60 * 24 * 365);
            end
            else begin
                if ((LVar0 > 15) and (LVar0 <= 20)) then begin
                    LVar0 := 20;
                    LVar1 := get_month;
                    LVar2 := game_time / (10 * 60 * 60 * 24 * 365);
                end
                else begin
                    if ((LVar0 > 20) and (LVar0 <= 25)) then begin
                        LVar0 := 25;
                        LVar1 := get_month;
                        LVar2 := game_time / (10 * 60 * 60 * 24 * 365);
                    end
                    else begin
                        if (LVar0 > 25) then begin
                            LVar0 := 1;
                            LVar1 := get_month;
                            if (LVar1 == 12) then begin
                                LVar1 := 1;
                                LVar2 := (game_time / (10 * 60 * 60 * 24 * 365)) + 1;
                            end
                            else begin
                                LVar1 := LVar1 + 1;
                                LVar2 := game_time / (10 * 60 * 60 * 24 * 365);
                            end
                        end
                        else begin
                            if (LVar0 == 1) then begin
                                LVar1 := get_month;
                                LVar2 := game_time / (10 * 60 * 60 * 24 * 365);
                            end
                        end
                    end
                end
            end
        end
    end
    set_local_var(5, LVar0);
    set_local_var(6, LVar1);
    set_local_var(7, LVar2);
end

procedure RecalcDateString
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    call RecalcDate();
    LVar0 := local_var(6);
    LVar1 := local_var(5);
    if (LVar0 == 1) then begin
        DayString := mstr(204);
    end
    else begin
        if (LVar0 == 2) then begin
            DayString := mstr(205);
        end
        else begin
            if (LVar0 == 3) then begin
                DayString := mstr(206);
            end
            else begin
                if (LVar0 == 4) then begin
                    DayString := mstr(207);
                end
                else begin
                    if (LVar0 == 5) then begin
                        DayString := mstr(208);
                    end
                    else begin
                        if (LVar0 == 6) then begin
                            DayString := mstr(209);
                        end
                        else begin
                            if (LVar0 == 7) then begin
                                DayString := mstr(210);
                            end
                            else begin
                                if (LVar0 == 8) then begin
                                    DayString := mstr(211);
                                end
                                else begin
                                    if (LVar0 == 9) then begin
                                        DayString := mstr(212);
                                    end
                                    else begin
                                        if (LVar0 == 10) then begin
                                            DayString := mstr(213);
                                        end
                                        else begin
                                            if (LVar0 == 11) then begin
                                                DayString := mstr(214);
                                            end
                                            else begin
                                                if (LVar0 == 12) then begin
                                                    DayString := mstr(215);
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    if (LVar1 == 1) then begin
        DayString := DayString + mstr(197);
    end
    else begin
        if (LVar1 == 5) then begin
            DayString := DayString + mstr(198);
        end
        else begin
            if (LVar1 == 10) then begin
                DayString := DayString + mstr(199);
            end
            else begin
                if (LVar1 == 15) then begin
                    DayString := DayString + mstr(200);
                end
                else begin
                    if (LVar1 == 20) then begin
                        DayString := DayString + mstr(201);
                    end
                    else begin
                        if (LVar1 == 25) then begin
                            DayString := DayString + mstr(202);
                        end
                    end
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(source_obj);
    if (party_member_obj(LVar0) != 0) then begin
        set_global_var(GVAR_ENEMY_HUB, 1);
    end
end

procedure WMDriver00
begin
    if (local_var(4) == 0) then begin
        float_msg(self_obj, mstr(101), FLOAT_MSG_RED);
        set_local_var(4, 1);
    end
    else begin
        float_msg(self_obj, mstr(102), FLOAT_MSG_RED);
    end
end

procedure WMDriver01
begin
    if (global_var(GVAR_JUNKTOWN) == 0) then begin
        set_global_var(GVAR_JUNKTOWN, 1);
    end
    if (global_var(GVAR_ANGELS_BONEYARD) == 0) then begin
        set_global_var(GVAR_ANGELS_BONEYARD, 1);
    end
    Reply(103);
    giq_option(4, NAME, 104, WMDriver02, NEUTRAL_REACTION);
    giq_option(-3, NAME, 105, WMDriver02, NEUTRAL_REACTION);
end

procedure WMDriver02
begin
    variable LVar0 := 0;
    call RecalcDateString();
    LVar0 := local_var(5);
    if (LVar0 == get_day) then begin
        Reply(mstr(106) + mstr(107));
    end
    else begin
        Reply(mstr(106) + mstr(108) + DayString + mstr(111));
    end
    call WMDriver04();
end

procedure WMDriver03
begin
    variable LVar0 := 0;
    if (local_var(1) != 1) then begin
        call RecalcDateString();
        LVar0 := local_var(5);
        if (LVar0 == get_day) then begin
            Reply(mstr(107));
        end
        else begin
            Reply(mstr(108) + DayString + mstr(111));
        end
        call WMDriver04();
    end
    else begin
        Reply(112);
        call WMDriver04();
    end
end

procedure WMDriver04
begin
    giq_option(4, NAME, 113, WMDriver04a, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, WMDriver05, NEUTRAL_REACTION);
    giq_option(4, NAME, 115, WMDriver06, NEUTRAL_REACTION);
    giq_option(-3, NAME, 116, WMDriver07, NEUTRAL_REACTION);
    giq_option(-3, NAME, 117, WMDriver07, NEUTRAL_REACTION);
end

procedure WMDriver04a
begin
    variable LVar0 := 0;
    set_local_var(10, 1);
    call RecalcDate();
    LVar0 := local_var(5);
    if (LVar0 == get_day) then begin
        call WMDriver17();
    end
    else begin
        call WMDriver18();
    end
end

procedure WMDriver05
begin
    set_local_var(10, 0);
    gsay_message(NAME, 118, NEUTRAL_REACTION);
end

procedure WMDriver06
begin
    set_local_var(10, 0);
    gsay_message(NAME, 120, NEUTRAL_REACTION);
end

procedure WMDriver07
begin
    gsay_message(NAME, 121, NEUTRAL_REACTION);
end

procedure WMDriver08
begin
    gsay_message(NAME, 123, NEUTRAL_REACTION);
end

procedure WMDriver10
begin
    if (local_var(8) == 0) then begin
        set_local_var(8, 1);
        set_map_var(2, 0);
        Reply(125);
        giq_option(4, NAME, 126, WMDriver08, NEUTRAL_REACTION);
        giq_option(4, NAME, 127, WMDriver10a, NEUTRAL_REACTION);
        giq_option(4, NAME, 128, WMDriver31, BAD_REACTION);
        giq_option(-3, NAME, 130, WMDriver31, BAD_REACTION);
    end
    else begin
        gsay_message(NAME, 131, BAD_REACTION);
        call combat();
    end
end

procedure WMDriver10a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 20)) == 1) then begin
        call WMDriver11();
    end
    else begin
        call WMDriver12();
    end
end

procedure WMDriver11
begin
    set_map_var(1, 0);
    set_map_var(2, 0);
    gsay_message(NAME, 132, NEUTRAL_REACTION);
end

procedure WMDriver12
begin
    gsay_message(NAME, 133, BAD_REACTION);
    call combat();
end

procedure WMDriver13
begin
    float_msg(self_obj, mstr(137), FLOAT_MSG_RED);
end

procedure WMDriver14
begin
    if (local_var(8) > 0) then begin
        float_msg(self_obj, mstr(138), FLOAT_MSG_RED);
    end
    else begin
        float_msg(self_obj, mstr(139), FLOAT_MSG_RED);
        call WMDriver31();
    end
end

procedure WMDriver15
begin
    variable LVar0 := 0;
    LVar0 := random(1, 4);
    if (LVar0 == 1) then begin
        float_msg(self_obj, mstr(140), FLOAT_MSG_RED);
    end
    else begin
        if (LVar0 == 2) then begin
            float_msg(self_obj, mstr(141), FLOAT_MSG_RED);
        end
        else begin
            if (LVar0 == 3) then begin
                float_msg(self_obj, mstr(142), FLOAT_MSG_RED);
            end
            else begin
                if (LVar0 == 4) then begin
                    float_msg(self_obj, mstr(143), FLOAT_MSG_RED);
                end
            end
        end
    end
end

procedure WMDriver17
begin
    Reply(145);
    call WMDriver33();
    call WMDriver20();
end

procedure WMDriver18
begin
    call RecalcDateString();
    Reply(mstr(146) + DayString + mstr(153));
    giq_option(4, NAME, 154, WMDriver30, NEUTRAL_REACTION);
    giq_option(4, NAME, 155, WMDriver34, NEUTRAL_REACTION);
end

procedure WMDriver19
begin
    set_map_var(2, 0);
    set_global_var(GVAR_WATER_JOB, 0);
    gsay_message(NAME, 156, BAD_REACTION);
end

procedure WMDriver20
begin
    giq_option(4, NAME, 157, WMDriver21a, NEUTRAL_REACTION);
    giq_option(4, NAME, 158, WMDriver21b, NEUTRAL_REACTION);
    giq_option(4, NAME, 159, WMDriver34, NEUTRAL_REACTION);
end

procedure WMDriver21a
begin
    variable LVar0 := 0;
    set_global_var(GVAR_WATER_MERCHANTS_STATUS, 1);
    LVar0 := random(1, 7);
    if (LVar0 == 1) then begin
        gsay_message(NAME, 160, NEUTRAL_REACTION);
    end
    else begin
        if (LVar0 == 2) then begin
            gsay_message(NAME, 161, NEUTRAL_REACTION);
        end
        else begin
            if (LVar0 == 3) then begin
                gsay_message(NAME, 162, NEUTRAL_REACTION);
            end
            else begin
                if (LVar0 == 4) then begin
                    gsay_message(NAME, 163, NEUTRAL_REACTION);
                end
                else begin
                    if (LVar0 == 5) then begin
                        gsay_message(NAME, 167, NEUTRAL_REACTION);
                    end
                    else begin
                        if (LVar0 == 6) then begin
                            gsay_message(NAME, 168, NEUTRAL_REACTION);
                        end
                        else begin
                            if (LVar0 == 7) then begin
                                gsay_message(NAME, 169, NEUTRAL_REACTION);
                            end
                        end
                    end
                end
            end
        end
    end
    LVar0 := random(1, 4);
    if (LVar0 < 4) then begin
        load_map(58, 3);
    end
    else begin
        load_map(10, 1);
    end
end

procedure WMDriver21b
begin
    variable LVar0 := 0;
    set_global_var(GVAR_WATER_MERCHANTS_STATUS, 1);
    LVar0 := random(1, 7);
    if (LVar0 == 1) then begin
        gsay_message(NAME, 160, NEUTRAL_REACTION);
    end
    else begin
        if (LVar0 == 2) then begin
            gsay_message(NAME, 161, NEUTRAL_REACTION);
        end
        else begin
            if (LVar0 == 3) then begin
                gsay_message(NAME, 162, NEUTRAL_REACTION);
            end
            else begin
                if (LVar0 == 4) then begin
                    gsay_message(NAME, 163, NEUTRAL_REACTION);
                end
                else begin
                    if (LVar0 == 5) then begin
                        gsay_message(NAME, 164, NEUTRAL_REACTION);
                    end
                    else begin
                        if (LVar0 == 6) then begin
                            gsay_message(NAME, 165, NEUTRAL_REACTION);
                        end
                        else begin
                            if (LVar0 == 7) then begin
                                gsay_message(NAME, 166, NEUTRAL_REACTION);
                            end
                        end
                    end
                end
            end
        end
    end
    LVar0 := random(1, 4);
    if (LVar0 < 3) then begin
        load_map(56, 3);
    end
    else begin
        load_map(28, 1);
    end
end

procedure WMDriver27
begin
    Reply(185);
    giq_option(4, NAME, 186, WMDriver04a, NEUTRAL_REACTION);
    giq_option(4, NAME, 187, WMDriver05, NEUTRAL_REACTION);
    giq_option(4, NAME, 188, WMDriver06, NEUTRAL_REACTION);
    giq_option(-3, NAME, 189, WMDriver07, NEUTRAL_REACTION);
    giq_option(-3, NAME, 190, WMDriver07, NEUTRAL_REACTION);
end

procedure WMDriver28
begin
    Reply(191);
    giq_option(4, NAME, 192, WMDriver17, NEUTRAL_REACTION);
    giq_option(4, NAME, 193, WMDriver35, NEUTRAL_REACTION);
    giq_option(-3, NAME, 194, WMDriver07, NEUTRAL_REACTION);
end

procedure WMDriver29
begin
    variable LVar0 := 0;
    call RecalcDateString();
    LVar0 := local_var(5);
    gsay_message(NAME, mstr(196) + DayString + mstr(203) + mstr(195), NEUTRAL_REACTION);
end

procedure WMDriver30
begin
    set_local_var(10, 1);
end

procedure WMDriver31
begin
    call combat();
end

procedure WMDriver32
begin
end

procedure WMDriver33
begin
    variable LVar0 := 0;
    set_local_var(10, 0);
    set_global_var(GVAR_WATER_JOB, 1);
    LVar0 := local_var(9);
    set_local_var(9, LVar0 + 1);
end

procedure WMDriver34
begin
    set_local_var(10, 0);
end

procedure WMDriver35
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
