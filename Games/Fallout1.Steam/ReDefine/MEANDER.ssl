procedure start;
procedure do_dialogue;
procedure timeforwhat;
procedure genericend;
procedure genericcbt;
procedure generic00;
procedure generic01;
procedure generic02;
procedure generic03;

variable prev_tile;
variable new_tile;
variable loopcount;
variable noevent;
variable rndx;
variable rndy;
variable rndz;
variable dist;
variable curtime;
variable prevtime;
variable hostile;
variable SET;
variable MUTANTS;
variable MAXLEASH := 9;
variable DAY;
variable initialized;


procedure start
begin
    if (not(initialized)) then begin
        if (local_var(0) == 0) then begin
            set_local_var(0, 1);
        end
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 32);
        initialized := 1;
    end
    curtime := DAY;
    if (prevtime != curtime) then begin
        noevent := curtime;
        prevtime := curtime;
        animate_move_obj_to_tile(self_obj, local_var(0), 0);
    end
    if (script_action == timed_event_proc) then begin
        call timeforwhat();
    end
    else begin
        if (script_action == talk_proc) then begin
            call do_dialogue();
        end
        else begin
            if (script_action == pickup_proc) then begin
                hostile := 1;
            end
            else begin
                if (script_action == critter_proc) then begin
                    if (hostile) then begin
                        hostile := 0;
                        attack(dude_obj);
                    end
                    else begin
                        loopcount := loopcount + 1;
                        if (loopcount > 40) then begin
                            loopcount := 0;
                            if (noevent == 0) then begin
                                noevent := 1;
                                rndx := 5 + random(1, 10);
                                add_timer_event(self_obj, game_ticks(rndx), 0);
                            end
                        end
                    end
                end
                else begin
                    if (script_action == destroy_proc) then begin
                        if (source_obj == dude_obj) then begin
                            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                                set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                            end
                            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                                set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                                set_global_var(GVAR_BERSERKER_REPUTATION, 0);
                            end
                            set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
                            if ((global_var(GVAR_BAD_MONSTER) % 6) == 0) then begin
                                set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 1);
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure do_dialogue
begin
    start_gdialog(84, self_obj, 4, -1, -1);
    gsay_start;
    if (hostile) then begin
        call generic01();
    end
    else begin
        call generic00();
    end
    gsay_end;
    end_dialogue;
end

procedure timeforwhat
begin
    noevent := curtime;
    rndy := random(1, 6);
    if (rndy > 1) then begin
        dist := 2;
    end
    if (rndy > 5) then begin
        dist := 3;
    end
    rndz := random(0, 5);
    prev_tile := tile_num(self_obj);
    new_tile := tile_num_in_direction(prev_tile, rndz, dist);
    if (tile_distance(local_var(0), new_tile) < MAXLEASH) then begin
        animate_move_obj_to_tile(self_obj, new_tile, 0);
    end
end

procedure genericend
begin
end

procedure genericcbt
begin
end

procedure generic00
begin
    rndx := random(1, 7);
    if (rndx == 1) then begin
        gsay_message(NAME, 100, NEUTRAL_REACTION);
    end
    if (rndx == 2) then begin
        gsay_message(NAME, 101, NEUTRAL_REACTION);
    end
    if (rndx == 3) then begin
        gsay_message(NAME, 102, NEUTRAL_REACTION);
    end
    if (rndx == 4) then begin
        gsay_message(NAME, 103, NEUTRAL_REACTION);
    end
    if (rndx == 5) then begin
        gsay_message(NAME, 104, NEUTRAL_REACTION);
    end
    if (rndx == 6) then begin
        call generic02();
    end
    if (rndx == 7) then begin
        call generic03();
    end
end

procedure generic01
begin
    rndx := random(1, 4);
    if (rndx == 1) then begin
        gsay_message(NAME, 105, NEUTRAL_REACTION);
    end
    if (rndx == 2) then begin
        gsay_message(NAME, 106, NEUTRAL_REACTION);
    end
    if (rndx == 3) then begin
        gsay_message(NAME, 107, NEUTRAL_REACTION);
    end
    if (rndx == 4) then begin
        gsay_message(NAME, 108, NEUTRAL_REACTION);
    end
end

procedure generic02
begin
    if (SET == 0) then begin
        rndx := random(1, 2);
        if (rndx == 1) then begin
            gsay_message(NAME, 109, NEUTRAL_REACTION);
        end
        if (rndx == 2) then begin
            gsay_message(NAME, 110, NEUTRAL_REACTION);
        end
    end
    else begin
        gsay_message(NAME, 111, NEUTRAL_REACTION);
    end
end

procedure generic03
begin
    if (MUTANTS == 0) then begin
        rndx := random(1, 2);
        if (rndx == 1) then begin
            gsay_message(NAME, 112, NEUTRAL_REACTION);
        end
        if (rndx == 2) then begin
            gsay_message(NAME, 113, NEUTRAL_REACTION);
        end
    end
    else begin
        gsay_message(NAME, 114, NEUTRAL_REACTION);
    end
end
