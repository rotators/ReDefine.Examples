/*******************************************************
*      Some unreferenced imported varables found.      *
*      Because of it it is impossible to specify       *
*      the real names of global variables.             *
*******************************************************/

variable GVar0;
variable GVar1;
variable GVar2;
variable GVar3;
variable GVar4;
variable GVar5;
variable GVar6;
variable GVar7;

procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure description_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure Lars00;
procedure Lars01;
procedure Lars02;
procedure Lars03;
procedure Lars04;
procedure Lars05;
procedure Lars06;
procedure Lars07;
procedure Lars08;
procedure Lars09;
procedure Lars10;
procedure Lars11;
procedure Lars12;
procedure Lars13;
procedure Lars14;
procedure Lars15;
procedure Lars16;
procedure Lars17;
procedure Lars18;
procedure Lars19;
procedure Lars20;
procedure Lars21;
procedure Lars22;
procedure Lars23;
procedure Lars24;
procedure Lars25;
procedure Lars26;
procedure Lars27;
procedure LarsEnd;
procedure LarsKillNeal;

/* ?import? variable hostile; */
/* ?import? variable initialized; */
/* ?import? variable round_counter; */
/* ?import? variable Lars_bust_Skulz; */
/* ?import? variable Lars_kill_Neal; */
/* ?import? variable nail_Gizmo; */
/* ?import? variable wait_for_Lars; */
/* ?import? variable removal_ptr; */

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

/* ?import? variable exit_line; */

procedure timed_event_p_proc;


procedure start
begin
    if (script_action == critter_proc) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == description_proc) then begin
            call description_p_proc();
        end
        else begin
            if (script_action == destroy_proc) then begin
                call destroy_p_proc();
            end
            else begin
                if (script_action == look_at_proc) then begin
                    call look_at_p_proc();
                end
                else begin
                    if (script_action == map_enter_proc) then begin
                        call map_enter_p_proc();
                    end
                    else begin
                        if (script_action == pickup_proc) then begin
                            call pickup_p_proc();
                        end
                        else begin
                            if (script_action == talk_proc) then begin
                                call talk_p_proc();
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure combat_p_proc
begin
    if (cur_map_index != 11) then begin
        if (fixed_param == 4) then begin
            GVar2 := GVar2 + 1;
        end
        if (GVar2 > 3) then begin
            if (global_var(GVAR_ENEMY_JUNKTOWN) == 0) then begin
                set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
                set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 5);
            end
        end
    end
end

procedure critter_p_proc
begin
    if (GVar0) then begin
        GVar0 := 0;
        attack(dude_obj);
    end
    else begin
        if (map_var(0) == 1) then begin
            item_caps_adjust(dude_obj, 500);
            float_msg(self_obj, mstr(162), FLOAT_MSG_GREEN);
            set_map_var(0, 2);
        end
    end
    if (global_var(GVAR_ENEMY_JUNKTOWN) == 1) then begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            attack(dude_obj);
        end
    end
end

procedure description_p_proc
begin
    if (is_success(do_check(dude_obj, 1, has_trait(TRAIT_PERK, dude_obj, PERK_bonus_awareness)))) then begin
        display_mstr(103);
    end
    else begin
        display_mstr(102);
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
            end
            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                set_global_var(GVAR_BERSERKER_REPUTATION, 0);
            end
            set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
            if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
                set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
            end
        end
    end
    if (cur_map_index == 11) then begin
        script_overrides;
        display_mstr(168);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4)) then begin
        display_mstr(101);
    end
    else begin
        display_mstr(100);
    end
end

procedure map_enter_p_proc
begin
    if (cur_map_index == 11) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 0);
    end
    else begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 12);
    end
    if ((global_var(GVAR_GIZMO_DEAD) == 1) and (cur_map_index == 11)) then begin
        destroy_object(self_obj);
    end
end

procedure pickup_p_proc
begin
    float_msg(self_obj, mstr(104), FLOAT_MSG_NORMAL);
    GVar0 := 1;
end

procedure talk_p_proc
begin
    call get_reaction();
    start_gdialog(518, self_obj, 4, -1, -1);
    gsay_start;
    if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
        call Lars01();
    end
    else begin
        if (global_var(GVAR_ENEMY_JUNKTOWN) == 1) then begin
            call Lars27();
        end
        else begin
            if ((global_var(GVAR_GIZMO_DEAD) == 1) and (global_var(GVAR_CAPTURE_GIZMO) != 2)) then begin
                call Lars26();
            end
            else begin
                if (global_var(GVAR_CAPTURE_GIZMO) == 1) then begin
                    set_local_var(4, 1);
                    call Lars21();
                end
                else begin
                    if (local_var(4) == 0) then begin
                        call Lars00();
                    end
                    else begin
                        if (global_var(GVAR_BUST_SKULZ) == 2) then begin
                            call Lars19();
                        end
                        else begin
                            call Lars12();
                        end
                    end
                end
            end
        end
    end
    gsay_end;
    end_dialogue;
    if (GVar5) then begin
        GVar5 := 0;
        load_map(11, 4);
    end
    else begin
        if ((global_var(GVAR_BUST_SKULZ) == 2) and (local_var(5) == 0)) then begin
            set_local_var(5, 1);
            gfade_out(600);
            give_exp_points(500);
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 3);
            display_mstr(174);
            game_time_advance(game_ticks(7200));
            gfade_in(600);
        end
        else begin
            if (GVar6) then begin
                gfade_out(600);
                game_time_advance(game_ticks(3000));
                set_global_var(GVAR_CAPTURE_GIZMO, 2);
                gfade_in(600);
                GVar6 := 0;
            end
            else begin
                if (GVar4) then begin
                    GVar4 := 0;
                    load_map(11, 7);
                end
                else begin
                    if (GVar3) then begin
                        GVar3 := 0;
                        gfade_out(600);
                        set_global_var(GVAR_BUST_SKULZ, 2);
                        set_global_var(GVAR_DESTROY_VATS_11, 0);
                        display_mstr(167);
                        gfade_in(600);
                    end
                end
            end
        end
    end
end

procedure Lars00
begin
    Reply(105);
    giq_option(4, NAME, 106, Lars02, NEUTRAL_REACTION);
    giq_option(4, NAME, 107, Lars05, NEUTRAL_REACTION);
    giq_option(4, NAME, 108, Lars10, NEUTRAL_REACTION);
    giq_option(-3, NAME, 109, Lars20, NEUTRAL_REACTION);
    if (global_var(GVAR_BUST_SKULZ) == 1) then begin
        giq_option(6, NAME, 110, Lars13, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_CAPTURE_GIZMO) == 1) then begin
        giq_option(4, NAME, 161, Lars22, GOOD_REACTION);
    end
    if (global_var(GVAR_DESTROY_VATS_11) > (game_time / (10 * 60 * 60 * 24))) then begin
        giq_option(4, NAME, 166, Lars24, GOOD_REACTION);
    end
end

procedure Lars01
begin
    gsay_message(NAME, 111, BAD_REACTION);
    GVar0 := 1;
end

procedure Lars02
begin
    Reply(112);
    giq_option(4, NAME, 113, Lars03, NEUTRAL_REACTION);
    call Goodbyes();
    giq_option(4, NAME, GVar7, LarsEnd, NEUTRAL_REACTION);
end

procedure Lars03
begin
    Reply(114);
    giq_option(4, NAME, 115, Lars04, NEUTRAL_REACTION);
    call Goodbyes();
    giq_option(4, NAME, GVar7, LarsEnd, NEUTRAL_REACTION);
end

procedure Lars04
begin
    call DownReact();
    gsay_message(NAME, 116, BAD_REACTION);
end

procedure Lars05
begin
    Reply(117);
    giq_option(4, NAME, 118, Lars04, NEUTRAL_REACTION);
    giq_option(4, NAME, 119, Lars06, NEUTRAL_REACTION);
    giq_option(6, NAME, 120, Lars07, NEUTRAL_REACTION);
end

procedure Lars06
begin
    gsay_message(NAME, 121, NEUTRAL_REACTION);
end

procedure Lars07
begin
    Reply(122);
    giq_option(4, NAME, 123, Lars08, NEUTRAL_REACTION);
    giq_option(4, NAME, 124, Lars09, NEUTRAL_REACTION);
end

procedure Lars08
begin
    set_global_var(GVAR_BUST_SKULZ, 1);
    gsay_message(NAME, 125, NEUTRAL_REACTION);
end

procedure Lars09
begin
    gsay_message(NAME, 126, NEUTRAL_REACTION);
end

procedure Lars10
begin
    variable LVar0 := 0;
    set_local_var(4, 1);
    LVar0 := mstr(128) + proto_data(obj_pid(dude_obj), 1) + mstr(129);
    Reply(127);
    giq_option(4, NAME, LVar0, Lars11, NEUTRAL_REACTION);
    giq_option(4, NAME, 130, Lars04, NEUTRAL_REACTION);
    if (global_var(GVAR_CAPTURE_GIZMO) == 1) then begin
        giq_option(4, NAME, 160, Lars22, GOOD_REACTION);
    end
end

procedure Lars11
begin
    variable LVar0 := 0;
    LVar0 := mstr(131) + proto_data(obj_pid(dude_obj), 1) + mstr(132);
    Reply(LVar0);
    giq_option(4, NAME, 133, Lars05, NEUTRAL_REACTION);
    giq_option(4, NAME, 134, Lars02, NEUTRAL_REACTION);
    call Goodbyes();
    giq_option(4, NAME, GVar7, LarsEnd, NEUTRAL_REACTION);
end

procedure Lars12
begin
    if (local_var(1) > 1) then begin
        Reply(135);
    end
    else begin
        if (global_var(GVAR_CAPTURE_GIZMO) == 2) then begin
            Reply(171);
        end
        else begin
            Reply(136);
        end
    end
    if (not(global_var(GVAR_BUST_SKULZ))) then begin
        giq_option(4, NAME, 137, Lars18, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 138, LarsEnd, NEUTRAL_REACTION);
    if (global_var(GVAR_GENERIC_FILLER_20) and (global_var(GVAR_BUST_SKULZ) == 1)) then begin
        giq_option(4, NAME, 139, Lars14, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_DESTROY_VATS_11) > (game_time / (10 * 60 * 60 * 24))) then begin
        giq_option(4, NAME, 166, Lars24, GOOD_REACTION);
    end
end

procedure Lars13
begin
    set_local_var(4, 1);
    Reply(140);
    giq_option(4, NAME, 141, Lars17, NEUTRAL_REACTION);
    if (global_var(GVAR_GENERIC_FILLER_20)) then begin
        giq_option(4, NAME, 142, Lars16, NEUTRAL_REACTION);
    end
end

procedure Lars14
begin
    Reply(143);
    giq_option(4, NAME, 144, Lars15, NEUTRAL_REACTION);
    if (global_var(GVAR_GENERIC_FILLER_20)) then begin
        giq_option(4, NAME, 145, Lars16, NEUTRAL_REACTION);
    end
end

procedure Lars15
begin
    Reply(146);
    giq_option(4, NAME, 147, LarsEnd, NEUTRAL_REACTION);
    if (global_var(GVAR_GENERIC_FILLER_20)) then begin
        giq_option(4, NAME, 148, Lars16, NEUTRAL_REACTION);
    end
end

procedure Lars16
begin
    set_global_var(GVAR_BUST_SKULZ, 2);
    gsay_message(NAME, 149, GOOD_REACTION);
end

procedure Lars17
begin
    call DownReact();
    gsay_message(NAME, 150, BAD_REACTION);
end

procedure Lars18
begin
    set_global_var(GVAR_BUST_SKULZ, 1);
    Reply(151);
    call Goodbyes();
    giq_option(4, NAME, GVar7, LarsEnd, NEUTRAL_REACTION);
end

procedure Lars19
begin
    gsay_message(NAME, 152, NEUTRAL_REACTION);
end

procedure Lars20
begin
    gsay_message(NAME, 153, NEUTRAL_REACTION);
end

procedure Lars21
begin
    Reply(155);
    giq_option(4, NAME, 156, Lars22, GOOD_REACTION);
    giq_option(4, NAME, 157, Lars23, NEUTRAL_REACTION);
    giq_option(-3, NAME, 172, Lars22, NEUTRAL_REACTION);
    giq_option(-3, NAME, 173, Lars23, NEUTRAL_REACTION);
end

procedure Lars22
begin
    gsay_message(NAME, 158, GOOD_REACTION);
    GVar5 := 1;
end

procedure Lars23
begin
    gsay_message(NAME, 159, NEUTRAL_REACTION);
    GVar6 := 1;
end

procedure Lars24
begin
    set_global_var(GVAR_DESTROY_VATS_15, 1);
    Reply(163);
    giq_option(4, NAME, 164, Lars25, NEUTRAL_REACTION);
    giq_option(4, NAME, 165, LarsKillNeal, GOOD_REACTION);
    set_local_var(4, 1);
end

procedure Lars25
begin
    GVar3 := 1;
    set_local_var(5, 1);
end

procedure Lars26
begin
    gsay_message(NAME, 169, BAD_REACTION);
end

procedure Lars27
begin
    gsay_message(NAME, 170, BAD_REACTION);
    rm_timer_event(self_obj);
    add_timer_event(self_obj, game_ticks(15), 1);
end

procedure LarsEnd
begin
end

procedure LarsKillNeal
begin
    GVar4 := 1;
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    GVar7 := message_str(SCRIPT_MODREACT, random(100, 105));
end

procedure timed_event_p_proc
begin
    GVar0 := 1;
end
