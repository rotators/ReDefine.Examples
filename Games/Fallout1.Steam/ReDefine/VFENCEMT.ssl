procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure VFenceMt00;
procedure VFenceMt03;
procedure VFenceMt03a;
procedure VFenceMt03b;
procedure VFenceMt04;
procedure VFenceMt05;
procedure VFenceMt06;
procedure VFenceMt07;
procedure VFenceMt08;
procedure VFenceMtAlert;
procedure VFenceMtxx;

variable initialized;
variable hostile;
variable round_count;
variable home_tile := 7000;
variable fence_tile_1 := 16706;
variable fence_tile_2 := 25705;
variable waypoint;

import variable ignoring_dude;
import variable removal_ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 34);
        add_timer_event(self_obj, game_ticks(30), 1);
        initialized := 1;
    end
    else begin
        if (script_action == combat_proc) then begin
            call combat_p_proc();
        end
        else begin
            if (script_action == critter_proc) then begin
                call critter_p_proc();
            end
            else begin
                if (script_action == destroy_proc) then begin
                    call destroy_p_proc();
                end
                else begin
                    if (script_action == pickup_proc) then begin
                        call pickup_p_proc();
                    end
                    else begin
                        if (script_action == talk_proc) then begin
                            call talk_p_proc();
                        end
                        else begin
                            if (script_action == timed_event_proc) then begin
                                call timed_event_p_proc();
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure combat_p_proc
begin
    if (fixed_param == 4) then begin
        round_count := round_count + 1;
    end
    if (round_count > 2) then begin
        call VFenceMtAlert();
    end
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (hostile) then begin
            hostile := 0;
            attack(dude_obj);
        end
        else begin
            if (global_var(GVAR_VATS_ALERT)) then begin
                hostile := 1;
            end
            else begin
                if (not(ignoring_dude)) then begin
                    if (tile_distance_objs(self_obj, dude_obj) < 12) then begin
                        dialogue_system_enter;
                    end
                end
            end
        end
    end
    if (map_var(0)) then begin
        if (not(waypoint)) then begin
            if (tile_num(self_obj) != 22312) then begin
                animate_move_obj_to_tile(self_obj, 22312, 0);
            end
            else begin
                waypoint := 1;
            end
        end
        else begin
            if (waypoint == 1) then begin
                if (tile_num(self_obj) != 26317) then begin
                    animate_move_obj_to_tile(self_obj, 26317, 0);
                end
                else begin
                    waypoint := 2;
                end
            end
            else begin
                if (waypoint == 2) then begin
                    if (tile_num(self_obj) != 31517) then begin
                        animate_move_obj_to_tile(self_obj, 32319, 0);
                    end
                    else begin
                        waypoint := 3;
                    end
                end
                else begin
                    if (waypoint == 3) then begin
                        removal_ptr := self_obj;
                    end
                end
            end
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
        if ((global_var(GVAR_BAD_MONSTER) % 6) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) + 1);
        end
    end
end

procedure pickup_p_proc
begin
    hostile := 1;
end

procedure talk_p_proc
begin
    if (global_var(GVAR_LIEUTENANTS_DEAD)) then begin
        call VFenceMt08();
    end
    else begin
        if ((obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND)) == 3) or (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND)) == 3) and not(hostile)) then begin
            if (random(0, 5) == 5) then begin
                call VFenceMt00();
            end
            else begin
                hostile := 1;
            end
        end
        else begin
            start_gdialog(433, self_obj, 4, -1, -1);
            gsay_start;
            call VFenceMt03();
            gsay_end;
            end_dialogue;
        end
    end
end

procedure timed_event_p_proc
begin
    if (not(map_var(0))) then begin
        if (tile_num(self_obj) == fence_tile_1) then begin
            animate_move_obj_to_tile(self_obj, fence_tile_2, 0);
        end
        else begin
            animate_move_obj_to_tile(self_obj, fence_tile_1, 0);
        end
        add_timer_event(self_obj, game_ticks(60), 1);
    end
end

procedure VFenceMt00
begin
    float_msg(self_obj, message_str(SCRIPT_GENSUPR, random(101, 103)), FLOAT_MSG_RED);
    hostile := 1;
end

procedure VFenceMt03
begin
    gsay_reply(SCRIPT_GENSUPR, random(104, 106));
    giq_option(-3, SCRIPT_GENSUPR, 107, VFenceMt04, BAD_REACTION);
    giq_option(4, SCRIPT_GENSUPR, 108, VFenceMt04, BAD_REACTION);
    giq_option(5, SCRIPT_GENSUPR, 109, VFenceMt05, NEUTRAL_REACTION);
    giq_option(6, SCRIPT_GENSUPR, 110, VFenceMt03a, NEUTRAL_REACTION);
    if (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 113) then begin
        giq_option(6, SCRIPT_GENSUPR, 111, VFenceMt03b, NEUTRAL_REACTION);
    end
end

procedure VFenceMt03a
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
        call VFenceMt07();
    end
    else begin
        call VFenceMt06();
    end
end

procedure VFenceMt03b
begin
    if (is_success(roll_vs_skill(dude_obj, 14, 25))) then begin
        call VFenceMt07();
    end
    else begin
        call VFenceMt06();
    end
end

procedure VFenceMt04
begin
    hostile := 1;
    gsay_message(SCRIPT_GENSUPR, random(112, 114), BAD_REACTION);
end

procedure VFenceMt05
begin
    gsay_reply(SCRIPT_GENSUPR, 115);
    giq_option(5, SCRIPT_GENSUPR, 116, VFenceMtxx, NEUTRAL_REACTION);
    giq_option(5, SCRIPT_GENSUPR, 117, VFenceMtAlert, BAD_REACTION);
end

procedure VFenceMt06
begin
    hostile := 1;
    gsay_message(SCRIPT_GENSUPR, random(118, 120), BAD_REACTION);
end

procedure VFenceMt07
begin
    ignoring_dude := 1;
    gsay_message(SCRIPT_GENSUPR, random(121, 123), NEUTRAL_REACTION);
end

procedure VFenceMt08
begin
    float_msg(self_obj, message_str(SCRIPT_GENSUPR, random(124, 127)), FLOAT_MSG_RED);
    hostile := 1;
end

procedure VFenceMtAlert
begin
    set_global_var(GVAR_VATS_ALERT, 1);
    hostile := 1;
end

procedure VFenceMtxx
begin
    set_global_var(GVAR_ENTERING_VATS_HOW, 2);
    load_map(32, 5);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
