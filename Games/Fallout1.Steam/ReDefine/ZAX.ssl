procedure start;
procedure talk_p_proc;
procedure Zax01;
procedure Zax02;
procedure Zax03;
procedure Zax04;
procedure Zax05;
procedure Zax06;
procedure Zax07;
procedure Zax08;
procedure Zax09;
procedure Zax10;
procedure Zax11;
procedure Zax12;
procedure Zax13;
procedure Zax14;
procedure Zax15;
procedure Zax16;
procedure Zax17;
procedure Zax18;
procedure Zax19;
procedure Zax20;
procedure Zax21;
procedure Zax22;
procedure Zax23;
procedure Zax24;
procedure Zax25;
procedure ZaxClearance;
procedure Term01;
procedure Term02;
procedure Term03;
procedure Term03a;
procedure Term04;
procedure Term05;
procedure Term06;
procedure Term06a;
procedure Term07;
procedure Term08;
procedure Term09;
procedure Term09a;
procedure Term10;
procedure Term11;
procedure Term11a;
procedure Term12;
procedure Term13;
procedure Term14;
procedure Term14a;
procedure Term15;
procedure TermEnd;
procedure TermStart;
procedure Mainframe00;
procedure Mainframe01;
procedure Mainframe02;
procedure Mainframe03;
procedure Mainframe04;
procedure Mainframe04a;
procedure Mainframe05;
procedure Mainframe05a;
procedure Mainframe05b;
procedure Mainframe05c;
procedure Mainframe06;
procedure Mainframe06a;
procedure Mainframe07;
procedure Mainframe07a;
procedure Mainframe08;
procedure Mainframe08a;
procedure Mainframe09;
procedure Mainframe10;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (script_action == talk_proc) then begin
        call talk_p_proc();
    end
    else begin
        if (script_action == use_proc) then begin
            dialogue_system_enter;
        end
        else begin
            if ((script_action == look_at_proc) or (script_action == description_proc)) then begin
                script_overrides;
                if (local_var(4) == 1) then begin
                    display_mstr(100);
                end
                else begin
                    display_mstr(101);
                end
            end
        end
    end
end

procedure talk_p_proc
begin
    script_overrides;
    start_gdialog(312, self_obj, 4, -1, -1);
    gsay_start;
    call Zax01();
    gsay_end;
    end_dialogue;
end

procedure Zax01
begin
    Reply(102);
    if (local_var(4) == 0) then begin
        giq_option(5, NAME, 103, Zax02, NEUTRAL_REACTION);
    end
    giq_option(5, NAME, 105, Zax04, NEUTRAL_REACTION);
    if (local_var(6) == 0) then begin
        giq_option(5, NAME, 106, Zax12, NEUTRAL_REACTION);
    end
    giq_option(5, SCRIPT_GPWRTERM, 200, Mainframe00, NEUTRAL_REACTION);
    giq_option(5, NAME, 108, Zax13, NEUTRAL_REACTION);
    giq_option(-4, NAME, 109, Zax05, NEUTRAL_REACTION);
end

procedure Zax02
begin
    set_local_var(4, 1);
    Reply(110);
    giq_option(5, NAME, 111, Zax06, NEUTRAL_REACTION);
    giq_option(5, NAME, 112, Zax04, NEUTRAL_REACTION);
    giq_option(5, NAME, 113, Zax07, NEUTRAL_REACTION);
    giq_option(7, NAME, 114, Zax08, NEUTRAL_REACTION);
    giq_option(0, NAME, 115, Zax13, NEUTRAL_REACTION);
end

procedure Zax03
begin
    gsay_message(NAME, 116, NEUTRAL_REACTION);
    set_local_var(5, 1);
    call Zax01();
end

procedure Zax04
begin
    call ZaxClearance();
    gsay_reply(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 211) + message_str(SCRIPT_GPWRTERM, 241) + message_str(SCRIPT_GPWRTERM, 242) + message_str(SCRIPT_GPWRTERM, 243));
    giq_option(7, NAME, 119, Zax21, NEUTRAL_REACTION);
    giq_option(7, NAME, 120, Zax15, NEUTRAL_REACTION);
    giq_option(5, NAME, 121, Zax13, NEUTRAL_REACTION);
end

procedure Zax05
begin
    gsay_message(NAME, 122, NEUTRAL_REACTION);
end

procedure Zax06
begin
    call ZaxClearance();
    Reply(123);
    giq_option(5, NAME, 124, Zax14, NEUTRAL_REACTION);
    giq_option(7, NAME, 125, Zax15, NEUTRAL_REACTION);
    giq_option(5, NAME, 126, Zax07, NEUTRAL_REACTION);
end

procedure Zax07
begin
    Reply(127);
    giq_option(7, NAME, 128, Zax08, NEUTRAL_REACTION);
end

procedure Zax08
begin
    gsay_message(NAME, 129, NEUTRAL_REACTION);
    Reply(130);
    giq_option(5, NAME, 131, Zax01, NEUTRAL_REACTION);
    giq_option(7, NAME, 132, Zax09, NEUTRAL_REACTION);
    giq_option(9, NAME, 133, Zax11, NEUTRAL_REACTION);
end

procedure Zax09
begin
    gsay_message(NAME, 134, NEUTRAL_REACTION);
    Reply(135);
    giq_option(7, NAME, 136, Zax10, NEUTRAL_REACTION);
    giq_option(7, NAME, 137, Zax01, NEUTRAL_REACTION);
    giq_option(9, NAME, 138, Zax11, NEUTRAL_REACTION);
end

procedure Zax10
begin
    gsay_message(NAME, 139, NEUTRAL_REACTION);
    Reply(140);
    giq_option(7, NAME, 141, Zax01, NEUTRAL_REACTION);
    giq_option(9, NAME, 142, Zax11, NEUTRAL_REACTION);
end

procedure Zax11
begin
    gsay_message(NAME, 143, NEUTRAL_REACTION);
    gsay_message(NAME, 144, NEUTRAL_REACTION);
    Reply(145);
    giq_option(5, NAME, 146, Zax01, NEUTRAL_REACTION);
    giq_option(5, NAME, 147, Zax13, NEUTRAL_REACTION);
end

procedure Zax12
begin
    variable LVar0 := 0;
    gsay_message(NAME, 148, NEUTRAL_REACTION);
    gfade_out(600);
    game_time_advance(game_ticks(7200));
    LVar0 := do_check(dude_obj, 4, 0);
    gfade_in(600);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            Reply(149);
            set_local_var(6, 1);
            give_exp_points(700);
        end
        else begin
            Reply(150);
        end
    end
    else begin
        Reply(150);
    end
    giq_option(5, NAME, 151, Zax12, NEUTRAL_REACTION);
    giq_option(5, NAME, 152, Zax01, NEUTRAL_REACTION);
end

procedure Zax13
begin
    gsay_message(NAME, 153, NEUTRAL_REACTION);
end

procedure Zax14
begin
    Reply(154);
    giq_option(5, NAME, 155, Zax13, NEUTRAL_REACTION);
    giq_option(5, NAME, 156, Zax01, NEUTRAL_REACTION);
end

procedure Zax15
begin
    gsay_message(NAME, 157, NEUTRAL_REACTION);
    Reply(158);
    giq_option(5, NAME, 159, Zax16, NEUTRAL_REACTION);
    giq_option(7, NAME, 160, Zax17, NEUTRAL_REACTION);
    giq_option(9, NAME, 161, Zax18, NEUTRAL_REACTION);
end

procedure Zax16
begin
    Reply(162);
    giq_option(5, NAME, 163, Zax01, NEUTRAL_REACTION);
    giq_option(7, NAME, 164, Zax17, NEUTRAL_REACTION);
    giq_option(9, NAME, 165, Zax18, NEUTRAL_REACTION);
end

procedure Zax17
begin
    Reply(166);
    giq_option(5, NAME, 167, Zax01, NEUTRAL_REACTION);
    giq_option(9, NAME, 168, Zax18, NEUTRAL_REACTION);
end

procedure Zax18
begin
    gsay_message(NAME, 169, NEUTRAL_REACTION);
    gsay_message(NAME, 170, NEUTRAL_REACTION);
    gsay_message(NAME, 171, NEUTRAL_REACTION);
    gsay_message(NAME, 172, NEUTRAL_REACTION);
    Reply(173);
    giq_option(9, NAME, 174, Zax19, NEUTRAL_REACTION);
    giq_option(10, NAME, 175, Zax20, NEUTRAL_REACTION);
    giq_option(5, NAME, 176, Zax01, NEUTRAL_REACTION);
    giq_option(5, NAME, 177, Zax13, NEUTRAL_REACTION);
end

procedure Zax19
begin
    gsay_message(NAME, 178, NEUTRAL_REACTION);
    gsay_message(NAME, 179, NEUTRAL_REACTION);
    Reply(180);
    giq_option(10, NAME, 181, Zax20, NEUTRAL_REACTION);
    giq_option(5, NAME, 182, Zax01, NEUTRAL_REACTION);
    giq_option(5, NAME, 183, Zax13, NEUTRAL_REACTION);
end

procedure Zax20
begin
    Reply(184);
    giq_option(9, NAME, 185, Zax19, NEUTRAL_REACTION);
    giq_option(5, NAME, 186, Zax01, NEUTRAL_REACTION);
    giq_option(5, NAME, 187, Zax13, NEUTRAL_REACTION);
end

procedure Zax21
begin
    Reply(188);
    giq_option(5, NAME, 189, Zax22, NEUTRAL_REACTION);
    giq_option(5, NAME, 190, Zax23, NEUTRAL_REACTION);
    giq_option(5, NAME, 191, Zax24, NEUTRAL_REACTION);
    giq_option(5, NAME, 192, Zax01, NEUTRAL_REACTION);
end

procedure Zax22
begin
    Reply(193);
    giq_option(5, NAME, 194, Zax23, NEUTRAL_REACTION);
    giq_option(5, NAME, 195, Zax24, NEUTRAL_REACTION);
    giq_option(5, NAME, 196, Zax01, NEUTRAL_REACTION);
    giq_option(5, NAME, 197, Zax13, NEUTRAL_REACTION);
end

procedure Zax23
begin
    Reply(198);
    giq_option(5, NAME, 199, Zax22, NEUTRAL_REACTION);
    giq_option(5, NAME, 200, Zax24, NEUTRAL_REACTION);
    giq_option(5, NAME, 201, Zax01, NEUTRAL_REACTION);
    giq_option(5, NAME, 202, Zax13, NEUTRAL_REACTION);
end

procedure Zax24
begin
    Reply(203);
    giq_option(5, NAME, 204, Zax22, NEUTRAL_REACTION);
    giq_option(5, NAME, 205, Zax23, NEUTRAL_REACTION);
    giq_option(5, NAME, 206, Zax01, NEUTRAL_REACTION);
    giq_option(5, NAME, 207, Zax13, NEUTRAL_REACTION);
end

procedure Zax25
begin
    gsay_message(NAME, 208, NEUTRAL_REACTION);
    if (global_var(GVAR_WEAPON_LOCKER) == 1) then begin
        gsay_message(NAME, 209, NEUTRAL_REACTION);
        set_global_var(GVAR_WEAPON_LOCKER, 2);
    end
end

procedure ZaxClearance
begin
    if (global_var(GVAR_WEAPONS_ARMED)) then begin
        gsay_message(NAME, 210, NEUTRAL_REACTION);
        gsay_message(NAME, 211, NEUTRAL_REACTION);
        set_global_var(GVAR_WEAPONS_ARMED, 0);
    end
end

procedure Term01
begin
    gsay_reply(SCRIPT_GPWRTERM, 100);
    giq_option(4, SCRIPT_GPWRTERM, 101, Term02, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 102, Term10, NEUTRAL_REACTION);
    giq_option(0, SCRIPT_GPWRTERM, 103, Mainframe02, NEUTRAL_REACTION);
end

procedure Term02
begin
    gsay_reply(SCRIPT_GPWRTERM, 104);
    giq_option(4, SCRIPT_GPWRTERM, 105, Term03, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 106, Term06, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 107, Term01, NEUTRAL_REACTION);
end

procedure Term03
begin
    gsay_reply(SCRIPT_GPWRTERM, 108);
    giq_option(4, SCRIPT_GPWRTERM, 109, Term03a, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 110, Term02, NEUTRAL_REACTION);
end

procedure Term03a
begin
    if (global_var(GVAR_START_POWER) != 2) then begin
        call Term04();
    end
    else begin
        set_global_var(GVAR_GLOW_POWER, 2);
    end
end

procedure Term04
begin
    gsay_reply(SCRIPT_GPWRTERM, 111);
    giq_option(8, SCRIPT_GPWRTERM, 112, Term05, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 113, Term02, NEUTRAL_REACTION);
end

procedure Term05
begin
    gsay_reply(SCRIPT_GPWRTERM, 114);
    giq_option(4, SCRIPT_GPWRTERM, 115, Term02, NEUTRAL_REACTION);
end

procedure Term06
begin
    gsay_reply(SCRIPT_GPWRTERM, 116);
    giq_option(4, SCRIPT_GPWRTERM, 117, Term06a, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 118, Term02, NEUTRAL_REACTION);
end

procedure Term06a
begin
    set_global_var(GVAR_GLOW_POWER, 0);
end

procedure Term07
begin
    gsay_reply(SCRIPT_GPWRTERM, 119);
    giq_option(4, SCRIPT_GPWRTERM, 120, Term08, NEUTRAL_REACTION);
    giq_option(0, SCRIPT_GPWRTERM, 121, Mainframe02, NEUTRAL_REACTION);
end

procedure Term08
begin
    gsay_reply(SCRIPT_GPWRTERM, 122);
    giq_option(4, SCRIPT_GPWRTERM, 123, Term09a, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 124, Term07, NEUTRAL_REACTION);
end

procedure Term09
begin
    gsay_reply(SCRIPT_GPWRTERM, 125);
    giq_option(-3, SCRIPT_GPWRTERM, 126, Term09a, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 127, Term09a, NEUTRAL_REACTION);
    giq_option(0, SCRIPT_GPWRTERM, 128, Mainframe02, NEUTRAL_REACTION);
end

procedure Term09a
begin
    set_global_var(GVAR_GLOW_POWER, 1);
end

procedure Term10
begin
    gsay_reply(SCRIPT_GPWRTERM, 129);
    giq_option(-3, SCRIPT_GPWRTERM, 130, Term11, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 131, Term13, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 132, Term01, NEUTRAL_REACTION);
end

procedure Term11
begin
    gsay_reply(SCRIPT_GPWRTERM, 133);
    giq_option(-3, SCRIPT_GPWRTERM, 134, Term11a, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 135, Term10, NEUTRAL_REACTION);
end

procedure Term11a
begin
    if (global_var(GVAR_START_POWER) != 2) then begin
        call Term12();
    end
    else begin
        set_global_var(GVAR_GLOW_POWER, 2);
    end
end

procedure Term12
begin
    gsay_reply(SCRIPT_GPWRTERM, 136);
    giq_option(-3, SCRIPT_GPWRTERM, 137, Term10, NEUTRAL_REACTION);
end

procedure Term13
begin
    gsay_reply(SCRIPT_GPWRTERM, 138);
    giq_option(-3, SCRIPT_GPWRTERM, 148, Term06a, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 137, Term10, NEUTRAL_REACTION);
end

procedure Term14
begin
    gsay_reply(SCRIPT_GPWRTERM, 139);
    giq_option(4, SCRIPT_GPWRTERM, 140, Term14a, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 141, Term15, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 142, Term15, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 143, Term14a, NEUTRAL_REACTION);
    giq_option(-3, SCRIPT_GPWRTERM, 144, Term15, NEUTRAL_REACTION);
    giq_option(0, SCRIPT_GPWRTERM, 145, Mainframe02, NEUTRAL_REACTION);
end

procedure Term14a
begin
    set_global_var(GVAR_GLOW_POWER, 1);
    if (global_var(GVAR_START_POWER) == 2) then begin
        call Term01();
    end
end

procedure Term15
begin
    gsay_reply(SCRIPT_GPWRTERM, 146);
    giq_option(0, SCRIPT_GPWRTERM, 147, Mainframe02, NEUTRAL_REACTION);
end

procedure TermEnd
begin
end

procedure TermStart
begin
    if (global_var(GVAR_GLOW_POWER) == 0) then begin
        call Term14();
    end
    else begin
        if (global_var(GVAR_GLOW_POWER) == 1) then begin
            call Term01();
        end
        else begin
            call Term09();
        end
    end
end

procedure Mainframe00
begin
    if (dude_skill(SKILL_SCIENCE) >= 25) then begin
        set_local_var(8, 0);
    end
    if (local_var(8) == 0) then begin
        if (local_var(7) == 1) then begin
            call Mainframe01();
        end
        else begin
            if (is_success(roll_vs_skill(dude_obj, 12, -10))) then begin
                set_local_var(7, 1);
                call Mainframe01();
            end
            else begin
                if (dude_skill(SKILL_SCIENCE) < 25) then begin
                    set_local_var(8, 1);
                end
                gsay_message(SCRIPT_GPWRTERM, 201, NEUTRAL_REACTION);
            end
        end
    end
    else begin
        gsay_message(SCRIPT_GPWRTERM, 201, NEUTRAL_REACTION);
        display_mstr(300);
    end
end

procedure Mainframe01
begin
    gsay_reply(SCRIPT_GPWRTERM, 202);
    giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 204, Zax01, NEUTRAL_REACTION);
end

procedure Mainframe02
begin
    gsay_reply(SCRIPT_GPWRTERM, 206);
    giq_option(4, SCRIPT_GPWRTERM, 207, Mainframe03, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 208, Mainframe04, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 209, Mainframe05, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 210, TermStart, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 204, Zax01, NEUTRAL_REACTION);
end

procedure Mainframe03
begin
    gsay_reply(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 211) + message_str(SCRIPT_GPWRTERM, 241) + message_str(SCRIPT_GPWRTERM, 242) + message_str(SCRIPT_GPWRTERM, 243));
    giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe04
begin
    if ((global_var(GVAR_WEAPONS_ARMED) == 0) and (global_var(GVAR_GLOW_POWER) == 2)) then begin
        gsay_reply(SCRIPT_GPWRTERM, 212);
    end
    else begin
        gsay_reply(SCRIPT_GPWRTERM, 213);
    end
    if (global_var(GVAR_GLOW_POWER) == 2) then begin
        if (global_var(GVAR_WEAPONS_ARMED) == 0) then begin
            giq_option(4, SCRIPT_GPWRTERM, 214, Mainframe04a, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, SCRIPT_GPWRTERM, 215, Mainframe04a, NEUTRAL_REACTION);
        end
    end
    giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe04a
begin
    game_time_advance(game_ticks(600));
    if (dude_skill(SKILL_SCIENCE) >= 40) then begin
        set_local_var(9, 0);
    end
    if (global_var(GVAR_SECURITY_DISK) == 1) then begin
        if (global_var(GVAR_WEAPONS_ARMED) == 0) then begin
            set_global_var(GVAR_WEAPONS_ARMED, 1);
        end
        else begin
            set_global_var(GVAR_WEAPONS_ARMED, 0);
        end
        give_exp_points(100);
        call Mainframe09();
    end
    if (local_var(9) == 0) then begin
        if (is_success(roll_vs_skill(dude_obj, 12, -25))) then begin
            if (global_var(GVAR_WEAPONS_ARMED) == 0) then begin
                set_global_var(GVAR_WEAPONS_ARMED, 1);
            end
            else begin
                set_global_var(GVAR_WEAPONS_ARMED, 0);
            end
            give_exp_points(100);
            call Mainframe09();
        end
        else begin
            if (dude_skill(SKILL_SCIENCE) < 40) then begin
                set_local_var(9, 1);
            end
            call Mainframe10();
        end
    end
    else begin
        if (local_var(9) == 1) then begin
            display_mstr(300);
            call Mainframe10();
        end
        else begin
            call Mainframe10();
        end
    end
end

procedure Mainframe05
begin
    gsay_reply(SCRIPT_GPWRTERM, 216);
    giq_option(4, SCRIPT_GPWRTERM, 217, Mainframe05a, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 218, Mainframe05b, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 219, Mainframe05c, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe05a
begin
    call Mainframe06();
end

procedure Mainframe05b
begin
    call Mainframe07();
end

procedure Mainframe05c
begin
    call Mainframe08();
end

procedure Mainframe06
begin
    gsay_message(SCRIPT_GPWRTERM, 220, NEUTRAL_REACTION);
    gsay_message(SCRIPT_GPWRTERM, 221, NEUTRAL_REACTION);
    gsay_message(SCRIPT_GPWRTERM, 222, NEUTRAL_REACTION);
    gsay_message(SCRIPT_GPWRTERM, 223, NEUTRAL_REACTION);
    gsay_message(SCRIPT_GPWRTERM, 224, NEUTRAL_REACTION);
    gsay_message(SCRIPT_GPWRTERM, 225, NEUTRAL_REACTION);
    gsay_message(SCRIPT_GPWRTERM, 226, NEUTRAL_REACTION);
    gsay_message(SCRIPT_GPWRTERM, 227, NEUTRAL_REACTION);
    gsay_reply(SCRIPT_GPWRTERM, 228);
    giq_option(4, SCRIPT_GPWRTERM, 229, Mainframe06a, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 230, Mainframe05, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe06a
begin
    set_global_var(GVAR_WATER_CHIP_3, 1);
    call Mainframe05();
end

procedure Mainframe07
begin
    gsay_reply(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 231) + message_str(SCRIPT_GPWRTERM, 250) + message_str(SCRIPT_GPWRTERM, 251) + message_str(SCRIPT_GPWRTERM, 252));
    giq_option(4, SCRIPT_GPWRTERM, 229, Mainframe07a, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 230, Mainframe05, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe07a
begin
    set_global_var(GVAR_WATER_CHIP_2, 1);
    call Mainframe05();
end

procedure Mainframe08
begin
    gsay_message(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 232) + message_str(SCRIPT_GPWRTERM, 233), NEUTRAL_REACTION);
    gsay_message(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 234) + message_str(SCRIPT_GPWRTERM, 235), NEUTRAL_REACTION);
    gsay_reply(SCRIPT_GPWRTERM, message_str(SCRIPT_GPWRTERM, 236) + message_str(SCRIPT_GPWRTERM, 237) + message_str(SCRIPT_GPWRTERM, 238));
    giq_option(4, SCRIPT_GPWRTERM, 229, Mainframe08a, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 230, Mainframe05, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe08a
begin
    set_global_var(GVAR_WATER_CHIP_1, 1);
    call Mainframe05();
end

procedure Mainframe09
begin
    gsay_reply(SCRIPT_GPWRTERM, 239);
    giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure Mainframe10
begin
    game_time_advance(game_ticks(18000));
    gsay_reply(SCRIPT_GPWRTERM, 240);
    giq_option(4, SCRIPT_GPWRTERM, 203, Mainframe02, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_GPWRTERM, 205, TermEnd, NEUTRAL_REACTION);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
