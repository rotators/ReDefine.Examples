procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure flee_dude;
procedure Duc01;
procedure Duc02;
procedure Duc03;
procedure Duc04;
procedure Duc05;
procedure Duc06;
procedure Duc07;
procedure Duc08;
procedure Duc09;
procedure Duc10;
procedure DucBarter;
procedure DucEnd;

variable known;
variable initialized;
variable Tandi_seed;
variable Tandi_rescued;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 2);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_PEASANT);
        known := global_var(GVAR_SAVE_TANDI_4);
        initialized := 1;
    end
    else begin
        if (script_action == critter_proc) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == damage_proc) then begin
                call damage_p_proc();
            end
            else begin
                if (script_action == destroy_proc) then begin
                    call destroy_p_proc();
                end
                else begin
                    if (script_action == look_at_proc) then begin
                        call look_at_p_proc();
                    end
                    else begin
                        if (script_action == pickup_proc) then begin
                            call pickup_p_proc();
                        end
                        else begin
                            if (script_action == talk_proc) then begin
                                call talk_p_proc();
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if ((global_var(GVAR_WATER_THIEF_2) == 1) and (tile_distance_objs(dude_obj, self_obj) < 8)) then begin
        call flee_dude();
    end
end

procedure damage_p_proc
begin
    set_global_var(GVAR_WATER_THIEF_2, 1);
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (source_obj == dude_obj) then begin
            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
            end
            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                set_global_var(GVAR_BERSERKER_REPUTATION, 0);
            end
            set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
            if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
                set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
            end
        end
    end
    set_global_var(GVAR_SAVE_TANDI_2, 1);
    set_global_var(GVAR_WATER_THIEF_2, 1);
end

procedure look_at_p_proc
begin
    script_overrides;
    if (not(known)) then begin
        display_mstr(100);
    end
    else begin
        display_mstr(101);
    end
end

procedure pickup_p_proc
begin
    set_global_var(GVAR_WATER_THIEF_2, 1);
end

procedure talk_p_proc
begin
    if (global_var(GVAR_WATER_THIEF_2) == 1) then begin
        float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), FLOAT_MSG_NORMAL);
    end
    else begin
        start_gdialog(243, self_obj, 4, -1, -1);
        gsay_start;
        call get_reaction();
        if ((global_var(GVAR_TANDI_STATUS) == 1) and (Tandi_seed == 0)) then begin
            call Duc09();
        end
        else begin
            if ((global_var(GVAR_TANDI_STATUS) == 2) and (Tandi_rescued == 0)) then begin
                call Duc10();
            end
            else begin
                if (not(known)) then begin
                    if (local_var(1) > 1) then begin
                        call Duc01();
                    end
                    else begin
                        call Duc06();
                    end
                end
                else begin
                    if (local_var(1) > 1) then begin
                        call Duc07();
                    end
                    else begin
                        call Duc08();
                    end
                end
            end
        end
        gsay_end;
        end_dialogue;
    end
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(dude_tile, tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(dude_tile, LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure Duc01
begin
    Reply(102);
    known := 1;
    set_global_var(GVAR_SAVE_TANDI_4, known);
    giq_option(4, NAME, 103, Duc02, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, Duc03, NEUTRAL_REACTION);
    giq_option(-3, NAME, 105, Duc04, NEUTRAL_REACTION);
end

procedure Duc02
begin
    Reply(106);
    giq_option(0, SCRIPT_MODREACT, 106, DucBarter, GOOD_REACTION);
end

procedure Duc03
begin
    Reply(107);
    giq_option(4, NAME, 108, Duc05, NEUTRAL_REACTION);
    giq_option(4, NAME, 109, DucEnd, NEUTRAL_REACTION);
end

procedure Duc04
begin
    gsay_message(NAME, 110, NEUTRAL_REACTION);
end

procedure Duc05
begin
    gsay_message(NAME, 111, NEUTRAL_REACTION);
    game_time_advance(game_ticks(86400));
    if (global_var(GVAR_SHADY_SANDS) < 1) then begin
        set_global_var(GVAR_SHADY_SANDS, 1);
    end
    load_map(26, 1);
end

procedure Duc06
begin
    Reply(113);
    giq_option(4, NAME, 114, Duc04, BAD_REACTION);
    giq_option(4, NAME, mstr(115) + proto_data(obj_pid(dude_obj), 1) + mstr(116), Duc08, NEUTRAL_REACTION);
    giq_option(-3, NAME, 117, Duc04, NEUTRAL_REACTION);
end

procedure Duc07
begin
    Reply(118);
    giq_option(4, NAME, 119, Duc05, NEUTRAL_REACTION);
    giq_option(4, NAME, 120, Duc02, NEUTRAL_REACTION);
    giq_option(4, NAME, 121, DucEnd, NEUTRAL_REACTION);
end

procedure Duc08
begin
    Reply(122);
    known := 1;
    set_global_var(GVAR_SAVE_TANDI_4, known);
    giq_option(6, NAME, 123, DucEnd, NEUTRAL_REACTION);
    giq_option(6, NAME, 124, Duc02, NEUTRAL_REACTION);
    giq_option(-3, NAME, 125, Duc04, NEUTRAL_REACTION);
end

procedure Duc09
begin
    gsay_message(NAME, 126, NEUTRAL_REACTION);
    Tandi_seed := 1;
end

procedure Duc10
begin
    gsay_message(NAME, 127, GOOD_REACTION);
    Tandi_rescued := 1;
    call UpReact();
end

procedure DucBarter
begin
    gdialog_barter;
    giq_option(0, SCRIPT_MODREACT, 100, DucEnd, NEUTRAL_REACTION);
end

procedure DucEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
