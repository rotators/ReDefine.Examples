procedure Start;
procedure look_at_p_proc;
procedure description_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure DialogWeapon;
procedure DialogFirstTime;
procedure DialogSubsequent;
procedure DialogExit;
procedure DialogWeapon1;
procedure DialogWeapon2;
procedure DialogWeapon3;
procedure DialogWeapon4;
procedure DialogMain;
procedure DialogMain1;
procedure DialogMain2;
procedure DialogMain3;
procedure DialogMain4;
procedure DialogMain5;
procedure DialogMain6;
procedure DialogMain7;
procedure DialogMain8;
procedure DialogMain9;
procedure DialogMain10;
procedure DialogSpecial1;
procedure DialogSpecial2;
procedure DialogSpecial3;
procedure DialogSpecial4;

variable Initialize := 1;
variable Hostile;
variable DisplayMessage;
variable Hurt;
variable Equipment;
variable Barter;
variable Bartered;
variable Place;
variable World;
variable Yourself;
variable Vault;
variable Vaulted;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure Start
begin
    if (Initialize == 1) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 2);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_PEASANT);
        Initialize := 0;
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure talk_p_proc
begin
    if (global_var(GVAR_ENEMY_SHADY_SANDS) == 1) then begin
        float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), FLOAT_MSG_RED);
    end
    else begin
        call get_reaction();
        start_gdialog(211, self_obj, -1, -1, -1);
        gsay_start;
        if ((obj_item_subtype(critter_inven_obj(dude_obj, 1)) == 3) or (obj_item_subtype(critter_inven_obj(dude_obj, 2)) == 3)) then begin
            call DialogWeapon();
        end
        else begin
            if (local_var(4) == 0) then begin
                set_local_var(4, 1);
                call DialogFirstTime();
            end
            else begin
                call DialogSubsequent();
            end
        end
        gsay_end;
        end_dialogue;
        Hurt := 0;
        Equipment := 0;
        Barter := 0;
        Bartered := 0;
        Place := 0;
        World := 0;
        Yourself := 0;
        Vault := 0;
        Vaulted := 0;
    end
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (global_var(GVAR_ENEMY_SHADY_SANDS) == 1) then begin
            attack(dude_obj);
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_ENEMY_SHADY_SANDS, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_ENEMY_SHADY_SANDS, 1);
        if (source_obj == dude_obj) then begin
            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
                set_global_var(GVAR_BERSERKER_REPUTATION, 1);
                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
            end
            if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
                set_global_var(GVAR_CHAMPION_REPUTATION, 1);
                set_global_var(GVAR_BERSERKER_REPUTATION, 0);
            end
            set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
            if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
                set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
            end
        end
    end
end

procedure pickup_p_proc
begin
    if (local_var(6) == 0) then begin
        float_msg(self_obj, mstr(151), FLOAT_MSG_RED);
        set_local_var(6, 1);
    end
    else begin
        set_global_var(GVAR_ENEMY_SHADY_SANDS, 1);
    end
end

procedure DialogWeapon
begin
    Reply(101);
    giq_option(-3, NAME, 102, DialogWeapon1, NEUTRAL_REACTION);
    giq_option(4, NAME, 103, DialogWeapon2, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, DialogWeapon3, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, DialogWeapon4, NEUTRAL_REACTION);
end

procedure DialogFirstTime
begin
    Reply(111);
    DisplayMessage := 125;
    giq_option(-3, NAME, 112, DialogSpecial1, NEUTRAL_REACTION);
    giq_option(4, NAME, 113, DialogMain5, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, DialogMain, NEUTRAL_REACTION);
    giq_option(5, NAME, 115, DialogMain8, NEUTRAL_REACTION);
    if (global_var(GVAR_RADSCORPION_SEED) == 1) then begin
        giq_option(4, NAME, 116, DialogMain9, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_TANDI_STATUS) == 1) then begin
        giq_option(4, NAME, 117, DialogMain10, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 118, DialogExit, NEUTRAL_REACTION);
end

procedure DialogSubsequent
begin
    variable LVar0 := 0;
    LVar0 := game_time_hour;
    Reply(144);
    DisplayMessage := 125;
    giq_option(-3, NAME, 112, DialogSpecial1, NEUTRAL_REACTION);
    if ((LVar0 > 1800) or (LVar0 < 800)) then begin
        giq_option(4, NAME, 145, DialogSpecial4, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 113, DialogMain5, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 114, DialogMain, NEUTRAL_REACTION);
    giq_option(5, NAME, 115, DialogMain8, NEUTRAL_REACTION);
    if (global_var(GVAR_RADSCORPION_SEED) == 1) then begin
        giq_option(4, NAME, 116, DialogMain9, NEUTRAL_REACTION);
    end
    if (global_var(GVAR_TANDI_STATUS) == 1) then begin
        giq_option(4, NAME, 117, DialogMain10, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 118, DialogExit, NEUTRAL_REACTION);
end

procedure DialogExit
begin
end

procedure DialogWeapon1
begin
    display_mstr(106);
end

procedure DialogWeapon2
begin
    Reply(107);
    giq_option(4, NAME, 108, DialogExit, NEUTRAL_REACTION);
end

procedure DialogWeapon3
begin
    Reply(109);
    giq_option(4, NAME, 110, DialogExit, NEUTRAL_REACTION);
end

procedure DialogWeapon4
begin
    Reply(109);
    giq_option(4, NAME, 110, DialogExit, NEUTRAL_REACTION);
end

procedure DialogMain
begin
    Reply(DisplayMessage);
    if (Hurt == 0) then begin
        giq_option(4, NAME, 126, DialogMain1, NEUTRAL_REACTION);
    end
    if (Equipment == 0) then begin
        giq_option(4, NAME, 127, DialogMain2, NEUTRAL_REACTION);
    end
    else begin
        if (Barter == 1) then begin
            giq_option(4, NAME, 134, DialogMain6, NEUTRAL_REACTION);
        end
    end
    if (Place == 0) then begin
        giq_option(4, NAME, 128, DialogMain3, NEUTRAL_REACTION);
    end
    if (World == 0) then begin
        giq_option(4, NAME, 129, DialogMain4, NEUTRAL_REACTION);
    end
    if (Yourself == 0) then begin
        giq_option(4, NAME, 130, DialogMain5, NEUTRAL_REACTION);
    end
    else begin
        if (Vault == 1) then begin
            giq_option(4, NAME, 138, DialogMain7, NEUTRAL_REACTION);
        end
    end
    giq_option(4, NAME, 131, DialogExit, NEUTRAL_REACTION);
    if ((local_var(5) == 0) and ((Hurt == 1) and (Equipment == 1) and (Place == 1) and (World == 1) and (Yourself == 1) and (Bartered == 1) and (Vaulted == 1))) then begin
        set_local_var(5, 1);
        give_exp_points(250);
        display_mstr(150);
    end
end

procedure DialogMain1
begin
    Hurt := 1;
    DisplayMessage := 132;
    call DialogMain();
end

procedure DialogMain2
begin
    Equipment := 1;
    DisplayMessage := 133;
    Barter := 1;
    call DialogMain();
end

procedure DialogMain3
begin
    Place := 1;
    DisplayMessage := 135;
    call DialogMain();
end

procedure DialogMain4
begin
    World := 1;
    DisplayMessage := 136;
    call DialogMain();
end

procedure DialogMain5
begin
    Yourself := 1;
    DisplayMessage := 137;
    Vault := 1;
    call DialogMain();
end

procedure DialogMain6
begin
    Barter := 0;
    DisplayMessage := 139;
    Bartered := 1;
    call DialogMain();
end

procedure DialogMain7
begin
    Vault := 0;
    DisplayMessage := 140;
    Vaulted := 1;
    call DialogMain();
end

procedure DialogMain8
begin
    DisplayMessage := 143;
    call DialogMain();
end

procedure DialogMain9
begin
    DisplayMessage := 141;
    call DialogMain();
end

procedure DialogMain10
begin
    DisplayMessage := 142;
    call DialogMain();
end

procedure DialogSpecial1
begin
    Reply(119);
    giq_option(-3, NAME, 120, DialogSpecial2, NEUTRAL_REACTION);
end

procedure DialogSpecial2
begin
    Reply(121);
    giq_option(-3, NAME, 122, DialogSpecial3, NEUTRAL_REACTION);
end

procedure DialogSpecial3
begin
    Reply(123);
    giq_option(-3, NAME, 124, DialogExit, NEUTRAL_REACTION);
end

procedure DialogSpecial4
begin
    Reply(146);
    giq_option(4, NAME, 147, DialogExit, NEUTRAL_REACTION);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
