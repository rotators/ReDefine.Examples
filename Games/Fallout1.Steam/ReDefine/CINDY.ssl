procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure description_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure map_enter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure Cindy01;
procedure Cindy02;
procedure Cindy03;
procedure Cindy04;
procedure Cindy05;
procedure Cindy06;
procedure Cindy07;
procedure CindyEnd;
procedure flee_dude;
procedure get_rations;

variable crying;
variable hostile;
variable ration_tile := 7000;
variable sleeping_disabled;

procedure sleeping;

variable night_person;
variable wake_time;
variable sleep_time;
variable home_tile;
variable sleep_tile;

import variable recipient;
import variable WtrGrd_ptr;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (script_action == critter_proc) then begin
        call critter_p_proc();
    end
    else begin
        if (script_action == damage_proc) then begin
            call damage_p_proc();
        end
        else begin
            if (script_action == description_proc) then begin
                call description_p_proc();
            end
            else begin
                if (script_action == destroy_proc) then begin
                    call destroy_p_proc();
                end
                else begin
                    if (script_action == look_at_proc) then begin
                        call look_at_p_proc();
                    end
                    else begin
                        if (script_action == map_enter_proc) then begin
                            call map_enter_p_proc();
                        end
                        else begin
                            if (script_action == pickup_proc) then begin
                                call pickup_p_proc();
                            end
                            else begin
                                if (script_action == talk_proc) then begin
                                    call talk_p_proc();
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack(dude_obj);
    end
    else begin
        if (local_var(6) == 1) then begin
            if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
                call flee_dude();
            end
            else begin
                if (tile_distance(dude_tile, home_tile) > 3) then begin
                    animate_move_obj_to_tile(self_obj, home_tile, 0);
                end
            end
        end
        else begin
            if (global_var(GVAR_FIND_WATER_CHIP) == 0) then begin
                if (local_var(7) == 0) then begin
                    if ((elevation(self_obj) == elevation(WtrGrd_ptr)) and (elevation(self_obj) == dude_elevation)) then begin
                        if ((game_time_hour > 700) and (game_time_hour < 900)) then begin
                            call get_rations();
                        end
                    end
                end
            end
            if (not((game_time_hour >= 700) and (game_time_hour < 1800))) then begin
                set_local_var(7, 0);
            end
            if (sleeping_disabled == 0) then begin
                call sleeping();
            end
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(6, 1);
    end
end

procedure description_p_proc
begin
    if (local_var(4)) then begin
        display_mstr(101);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_WATER_CHIP_4, 1);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure map_enter_p_proc
begin
    sleep_tile := 24883;
    home_tile := 24687;
    sleep_time := random(1900, 1930);
    wake_time := random(600, 630);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 1);
end

procedure pickup_p_proc
begin
    if ((game_time / (10 * 60 * 60 * 24)) >= 30) then begin
        float_msg(self_obj, mstr(122), FLOAT_MSG_RED);
    end
    hostile := 1;
end

procedure talk_p_proc
begin
    if (not(local_var(4))) then begin
        if ((global_var(GVAR_WATER_CHIP_4) == 1) or (local_var(6) == 1)) then begin
            float_msg(self_obj, mstr(125), FLOAT_MSG_NORMAL);
            set_local_var(4, 1);
        end
        else begin
            if (global_var(GVAR_FIND_WATER_CHIP) == 2) then begin
                float_msg(self_obj, mstr(123), FLOAT_MSG_NORMAL);
            end
            else begin
                if (global_var(GVAR_WATER_THIEF) == 2) then begin
                    float_msg(self_obj, mstr(124), FLOAT_MSG_NORMAL);
                end
                else begin
                    start_gdialog(168, self_obj, 4, -1, -1);
                    gsay_start;
                    call Cindy01();
                    gsay_end;
                    end_dialogue;
                end
            end
        end
    end
end

procedure Cindy01
begin
    Reply(mstr(102) + proto_data(obj_pid(dude_obj), 1) + mstr(103));
    giq_option(4, NAME, 104, Cindy03, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, Cindy04, NEUTRAL_REACTION);
    giq_option(-3, NAME, 106, Cindy02, NEUTRAL_REACTION);
end

procedure Cindy02
begin
    set_local_var(4, 1);
    Reply(107);
    giq_option(-3, NAME, 108, CindyEnd, NEUTRAL_REACTION);
end

procedure Cindy03
begin
    gsay_message(NAME, random(109, 111), NEUTRAL_REACTION);
end

procedure Cindy04
begin
    if ((game_time / (10 * 60 * 60 * 24)) < 30) then begin
        Reply(126);
        giq_option(4, NAME, 127, CindyEnd, GOOD_REACTION);
        giq_option(4, NAME, 128, CindyEnd, BAD_REACTION);
    end
    else begin
        Reply(113);
        giq_option(4, NAME, 114, Cindy05, NEUTRAL_REACTION);
        giq_option(4, NAME, 115, Cindy06, NEUTRAL_REACTION);
    end
end

procedure Cindy05
begin
    Reply(116);
    giq_option(4, NAME, 117, CindyEnd, NEUTRAL_REACTION);
end

procedure Cindy06
begin
    Reply(118);
    giq_option(4, NAME, 119, Cindy07, NEUTRAL_REACTION);
end

procedure Cindy07
begin
    set_global_var(GVAR_WATER_THIEF, 1);
    Reply(120);
    giq_option(4, NAME, 121, CindyEnd, NEUTRAL_REACTION);
    giq_option(4, NAME, 112, Cindy05, NEUTRAL_REACTION);
end

procedure CindyEnd
begin
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(dude_tile, tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(dude_tile, LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure get_rations
begin
    if (tile_num(self_obj) != ration_tile) then begin
        sleeping_disabled := 1;
        if (random(0, 1)) then begin
            animate_move_obj_to_tile(self_obj, ration_tile, 0);
        end
        else begin
            animate_move_obj_to_tile(self_obj, ration_tile, 1);
        end
    end
    else begin
        if (not(recipient)) then begin
            recipient := self_obj;
            add_timer_event(self_obj, game_ticks(3), 1);
            set_local_var(7, 1);
            sleeping_disabled := 0;
        end
    end
end

procedure sleeping
begin
    if (local_var(5) == 1) then begin
        if (not(night_person) and (game_time_hour >= wake_time) and (game_time_hour < sleep_time) or (night_person and ((game_time_hour >= wake_time) or (game_time_hour < sleep_time)))) then begin
            if (((game_time_hour - wake_time) < 10) and ((game_time_hour - wake_time) > 0)) then begin
                if (tile_num(self_obj) != home_tile) then begin
                    animate_move_obj_to_tile(self_obj, home_tile, 0);
                end
                else begin
                    set_local_var(5, 0);
                end
            end
            else begin
                move_to(self_obj, home_tile, elevation(self_obj));
                if (tile_num(self_obj) == home_tile) then begin
                    set_local_var(5, 0);
                end
            end
        end
    end
    else begin
        if (night_person and (game_time_hour >= sleep_time) and (game_time_hour < wake_time) or (not(night_person) and ((game_time_hour >= sleep_time) or (game_time_hour < wake_time)))) then begin
            if (((game_time_hour - sleep_time) < 10) and ((game_time_hour - sleep_time) > 0)) then begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    animate_move_obj_to_tile(self_obj, self_obj, 0);
                end
                else begin
                    set_local_var(5, 1);
                end
            end
            else begin
                if (tile_num(self_obj) != sleep_tile) then begin
                    move_to(self_obj, sleep_tile, elevation(self_obj));
                end
                else begin
                    set_local_var(5, 1);
                end
            end
        end
    end
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
