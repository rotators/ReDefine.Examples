procedure start;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure FishrSon00;
procedure FishrSon01;
procedure FishrSon02;
procedure FishrSon02a;
procedure FishrSon03;
procedure FishrSon04;
procedure FishrSon05;
procedure FishrSon05a;
procedure FishrSon06;
procedure FishrSon07;
procedure FishrSon08;
procedure FishrSon09;
procedure FishrSon10;
procedure FishrSon11;
procedure FishrSon11a;
procedure FishrSon12;
procedure FishrSon13;
procedure FishrSon14;
procedure FishrSon15;
procedure FishrSon16;
procedure FishrSon17;
procedure FishrSon18;
procedure FishrSon19;
procedure FishrSon20;
procedure FishrSon21;
procedure flee_dude;

variable initialized;
variable known;

import variable dude_enemy;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (not(initialized)) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 2);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_LITTLE_KIDS);
        dude_enemy := global_var(GVAR_SAVE_TANDI_5);
        initialized := 1;
    end
    else begin
        if (script_action == critter_proc) then begin
            call critter_p_proc();
        end
        else begin
            if (script_action == damage_proc) then begin
                call damage_p_proc();
            end
            else begin
                if (script_action == destroy_proc) then begin
                    call destroy_p_proc();
                end
                else begin
                    if (script_action == look_at_proc) then begin
                        call look_at_p_proc();
                    end
                    else begin
                        if (script_action == pickup_proc) then begin
                            call pickup_p_proc();
                        end
                        else begin
                            if (script_action == talk_proc) then begin
                                call talk_p_proc();
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure critter_p_proc
begin
    if (dude_enemy and (tile_distance_objs(dude_obj, self_obj) < 8)) then begin
        call flee_dude();
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        dude_enemy := 1;
        set_global_var(GVAR_SAVE_TANDI_5, 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure pickup_p_proc
begin
    dude_enemy := 1;
    set_global_var(GVAR_SAVE_TANDI_5, 1);
end

procedure talk_p_proc
begin
    call get_reaction();
    if (dude_enemy) then begin
        float_msg(self_obj, message_str(SCRIPT_ENEMY, 103), FLOAT_MSG_NORMAL);
    end
    else begin
        if ((global_var(GVAR_CHILDKILLER_REPUATION) > 2) or (local_var(1) < 2) or (global_var(GVAR_PLAYER_REPUATION) < -30)) then begin
            call FishrSon00();
        end
        else begin
            if ((obj_item_subtype(critter_inven_obj(dude_obj, 1)) == 3) or (obj_item_subtype(critter_inven_obj(dude_obj, 2)) == 3)) then begin
                call FishrSon01();
            end
            else begin
                start_gdialog(645, self_obj, 4, -1, -1);
                gsay_start;
                if (known or (global_var(GVAR_PLAYER_REPUATION) < 30)) then begin
                    call FishrSon04();
                end
                else begin
                    call FishrSon02();
                end
                gsay_end;
                end_dialogue;
            end
        end
    end
end

procedure FishrSon00
begin
    float_msg(self_obj, mstr(101), FLOAT_MSG_NORMAL);
end

procedure FishrSon01
begin
    float_msg(self_obj, mstr(102), FLOAT_MSG_NORMAL);
end

procedure FishrSon02
begin
    known := 1;
    Reply(103);
    call FishrSon02a();
end

procedure FishrSon02a
begin
    giq_option(4, NAME, 104, FishrSon06, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, FishrSon07, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, FishrSon08, NEUTRAL_REACTION);
    giq_option(4, NAME, 107, FishrSon10, NEUTRAL_REACTION);
    giq_option(-3, NAME, 108, FishrSon09, NEUTRAL_REACTION);
end

procedure FishrSon03
begin
    known := 1;
    Reply(109);
    giq_option(4, NAME, 110, FishrSon05, NEUTRAL_REACTION);
    call FishrSon02a();
end

procedure FishrSon04
begin
    Reply(111);
    giq_option(4, NAME, 110, FishrSon05, NEUTRAL_REACTION);
    call FishrSon02a();
end

procedure FishrSon05
begin
    Reply(112);
    giq_option(0, SCRIPT_MODREACT, 106, FishrSon05a, NEUTRAL_REACTION);
end

procedure FishrSon05a
begin
    Reply(113);
    giq_option(4, NAME, 104, FishrSon06, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, FishrSon07, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, FishrSon08, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, FishrSon12, NEUTRAL_REACTION);
    giq_option(4, NAME, 115, FishrSon13, NEUTRAL_REACTION);
end

procedure FishrSon06
begin
    Reply(116);
    giq_option(4, NAME, 117, FishrSon14, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, FishrSon06, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, FishrSon07, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, FishrSon08, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, FishrSon12, NEUTRAL_REACTION);
end

procedure FishrSon07
begin
    gsay_message(NAME, 118, NEUTRAL_REACTION);
end

procedure FishrSon08
begin
    Reply(119);
    giq_option(4, NAME, 110, FishrSon05, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, FishrSon06, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, FishrSon07, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, FishrSon08, NEUTRAL_REACTION);
    giq_option(4, NAME, 120, FishrSon15, NEUTRAL_REACTION);
end

procedure FishrSon09
begin
    gsay_message(NAME, 121, NEUTRAL_REACTION);
end

procedure FishrSon10
begin
    Reply(122);
    giq_option(4, NAME, 123, FishrSon16, GOOD_REACTION);
    giq_option(4, NAME, 124, FishrSon16, GOOD_REACTION);
    giq_option(4, NAME, 125, FishrSon16, GOOD_REACTION);
end

procedure FishrSon11
begin
    Reply(126);
    giq_option(0, SCRIPT_MODREACT, 106, FishrSon11a, GOOD_REACTION);
end

procedure FishrSon11a
begin
    gsay_message(NAME, 127, GOOD_REACTION);
end

procedure FishrSon12
begin
    Reply(128);
    giq_option(4, NAME, 110, FishrSon05, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, FishrSon06, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, FishrSon07, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, FishrSon08, NEUTRAL_REACTION);
end

procedure FishrSon13
begin
    Reply(129);
    giq_option(4, NAME, 110, FishrSon05, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, FishrSon06, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, FishrSon07, NEUTRAL_REACTION);
    giq_option(4, NAME, 106, FishrSon08, NEUTRAL_REACTION);
    giq_option(4, NAME, 130, FishrSon17, NEUTRAL_REACTION);
end

procedure FishrSon14
begin
    gsay_message(NAME, 131, NEUTRAL_REACTION);
end

procedure FishrSon15
begin
    Reply(132);
    giq_option(4, NAME, 110, FishrSon05, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, FishrSon06, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, FishrSon07, NEUTRAL_REACTION);
    giq_option(4, NAME, 133, FishrSon18, NEUTRAL_REACTION);
    giq_option(4, NAME, 134, FishrSon19, NEUTRAL_REACTION);
end

procedure FishrSon16
begin
    gsay_message(NAME, 135, GOOD_REACTION);
end

procedure FishrSon17
begin
    Reply(136);
    giq_option(4, NAME, 137, FishrSon20, NEUTRAL_REACTION);
    if (global_var(GVAR_BROTHERHOOD_OF_STEEL) > 0) then begin
        giq_option(4, NAME, 138, FishrSon21, NEUTRAL_REACTION);
    end
end

procedure FishrSon18
begin
    Reply(139);
    giq_option(4, NAME, 110, FishrSon05, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, FishrSon06, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, FishrSon07, NEUTRAL_REACTION);
    giq_option(4, NAME, 134, FishrSon18, NEUTRAL_REACTION);
end

procedure FishrSon19
begin
    gsay_message(NAME, 140, NEUTRAL_REACTION);
end

procedure FishrSon20
begin
    gsay_message(NAME, 141, GOOD_REACTION);
end

procedure FishrSon21
begin
    gsay_message(NAME, 142, NEUTRAL_REACTION);
end

procedure flee_dude
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    while (LVar1 < 5) do begin
        if (tile_distance(dude_tile, tile_num_in_direction(tile_num(self_obj), LVar1, 3)) > LVar2) then begin
            LVar0 := tile_num_in_direction(tile_num(self_obj), LVar1, 3);
            LVar2 := tile_distance(dude_tile, LVar0);
        end
        LVar1 := LVar1 + 1;
    end
    animate_move_obj_to_tile(self_obj, LVar0, 1);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
