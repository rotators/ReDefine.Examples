procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure Do_Dialogue;
procedure thomasend;
procedure thomas00;
procedure thomas01;
procedure thomas02;
procedure thomas03;
procedure thomas04;
procedure thomas05;
procedure thomas06;
procedure thomas07;
procedure thomas08;
procedure thomas09;
procedure thomas10;
procedure thomas11;
procedure thomas12;
procedure thomas13;
procedure thomas14;
procedure thomas15;
procedure thomas16;
procedure thomas17;
procedure thomas18;
procedure thomas19;
procedure thomas20;
procedure thomas21;
procedure thomas22;

variable hostile;
variable Only_Once := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 44);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_BROTHERHOOD_KNIGHT);
    end
    if (script_action == look_at_proc) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == pickup_proc) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == talk_proc) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == critter_proc) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == destroy_proc) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (global_var(GVAR_ENEMY_BROTHERHOOD)) then begin
        hostile := 1;
    end
    if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
        hostile := 0;
    end
    if (hostile) then begin
        set_global_var(GVAR_ENEMY_BROTHERHOOD, 1);
        hostile := 0;
        attack(dude_obj);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    start_gdialog(685, self_obj, 4, -1, -1);
    gsay_start;
    call Do_Dialogue();
    gsay_end;
    end_dialogue;
end

procedure destroy_p_proc
begin
    set_global_var(GVAR_ENEMY_BROTHERHOOD, 1);
    rm_timer_event(self_obj);
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure Do_Dialogue
begin
    if (local_var(4) != 1) then begin
        set_local_var(4, 1);
        if (local_var(1) == 1) then begin
            call thomas01();
        end
        else begin
            call thomas00();
        end
    end
    else begin
        if (local_var(1) == 1) then begin
            if (local_var(6) != 0) then begin
                call thomas09();
            end
            else begin
                call thomas08();
            end
        end
        else begin
            if (local_var(6) != 0) then begin
                call thomas20();
            end
            else begin
                call thomas19();
            end
        end
    end
end

procedure thomasend
begin
end

procedure thomas00
begin
    Reply(101);
    giq_option(4, NAME, 102, thomas05, NEUTRAL_REACTION);
    giq_option(4, NAME, 103, thomas06, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, thomas04, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, thomasend, NEUTRAL_REACTION);
    giq_option(-3, NAME, 106, thomas02, NEUTRAL_REACTION);
end

procedure thomas01
begin
    Reply(108);
    giq_option(4, NAME, 102, thomas05, NEUTRAL_REACTION);
    giq_option(4, NAME, 103, thomas06, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, thomas04, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, thomasend, NEUTRAL_REACTION);
    giq_option(-3, NAME, 106, thomas02, NEUTRAL_REACTION);
end

procedure thomas02
begin
    gsay_message(NAME, 109, BAD_REACTION);
end

procedure thomas03
begin
    gsay_message(NAME, 110, BAD_REACTION);
end

procedure thomas04
begin
    gsay_message(NAME, mstr(111) + proto_data(obj_pid(dude_obj), 1) + mstr(112), BAD_REACTION);
end

procedure thomas05
begin
    gsay_message(NAME, 113, NEUTRAL_REACTION);
end

procedure thomas06
begin
    if (dude_gender == 0) then begin
        Reply(114);
    end
    else begin
        Reply(115);
    end
    call thomas10();
end

procedure thomas07
begin
    Reply(125);
    call thomas10();
end

procedure thomas08
begin
    if (local_var(5) != 0) then begin
        set_local_var(5, 1);
        Reply(126);
    end
    else begin
        Reply(127);
    end
    call thomas10();
end

procedure thomas09
begin
    Reply(125);
    giq_option(4, NAME, 102, thomas05, NEUTRAL_REACTION);
    giq_option(4, NAME, 103, thomas06, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, thomas04, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, thomas21, NEUTRAL_REACTION);
    giq_option(-3, NAME, 107, thomas02, NEUTRAL_REACTION);
end

procedure thomas10
begin
    giq_option(4, NAME, 118, thomas11, NEUTRAL_REACTION);
    giq_option(4, NAME, 119, thomas12, NEUTRAL_REACTION);
    giq_option(4, NAME, 120, thomas13, NEUTRAL_REACTION);
    giq_option(4, NAME, 121, thomas14, NEUTRAL_REACTION);
    giq_option(4, NAME, 122, thomas15, NEUTRAL_REACTION);
    giq_option(4, NAME, 123, thomas16, NEUTRAL_REACTION);
    giq_option(4, NAME, 124, thomas17, NEUTRAL_REACTION);
    giq_option(-3, NAME, 106, thomas02, NEUTRAL_REACTION);
end

procedure thomas11
begin
    gfade_out(600);
    gfade_in(600);
    display_mstr(130);
    set_local_var(6, 1);
end

procedure thomas12
begin
    gfade_out(600);
    gfade_in(600);
    display_mstr(132);
    set_local_var(6, 1);
end

procedure thomas13
begin
    gfade_out(600);
    gfade_in(600);
    display_mstr(134);
    set_local_var(6, 1);
end

procedure thomas14
begin
    gfade_out(600);
    gfade_in(600);
    display_mstr(135);
    set_local_var(6, 1);
end

procedure thomas15
begin
    gfade_out(600);
    gfade_in(600);
    display_mstr(136);
    set_local_var(6, 1);
end

procedure thomas16
begin
    gfade_out(600);
    gfade_in(600);
    display_mstr(137);
    set_local_var(6, 1);
end

procedure thomas17
begin
    gsay_message(NAME, 138, NEUTRAL_REACTION);
end

procedure thomas18
begin
    gsay_message(NAME, 139, BAD_REACTION);
end

procedure thomas19
begin
    if (local_var(5) != 0) then begin
        set_local_var(5, 1);
        Reply(140);
    end
    else begin
        Reply(127);
    end
    call thomas10();
end

procedure thomas20
begin
    Reply(140);
    giq_option(4, NAME, 102, thomas03, NEUTRAL_REACTION);
    giq_option(4, NAME, 103, thomas07, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, thomas04, NEUTRAL_REACTION);
    giq_option(4, NAME, 105, thomas22, NEUTRAL_REACTION);
    giq_option(-3, NAME, 107, thomas02, NEUTRAL_REACTION);
end

procedure thomas21
begin
    gsay_message(NAME, 142, NEUTRAL_REACTION);
end

procedure thomas22
begin
    gsay_message(NAME, 143, BAD_REACTION);
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
