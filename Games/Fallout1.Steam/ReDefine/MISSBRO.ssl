procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure Brother00;
procedure Brother01;
procedure Brother02;
procedure Brother03;
procedure Brother04;
procedure Brother05;
procedure Brother06;
procedure Brother07;
procedure Brother08;
procedure Brother09;
procedure Brother10;
procedure Brother11;
procedure Brother12;
procedure BrotherEnd;

variable hostile;
variable Only_Once := 1;
variable visible := 1;

procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable exit_line;


procedure start
begin
    if (Only_Once) then begin
        Only_Once := 0;
        if (local_var(5) == 1) then begin
            visible := 0;
        end
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 44);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_BROTHERHOOD_INITIATE);
    end
    if (script_action == look_at_proc) then begin
        call look_at_p_proc();
    end
    else begin
        if (script_action == pickup_proc) then begin
            call pickup_p_proc();
        end
        else begin
            if (script_action == talk_proc) then begin
                call talk_p_proc();
            end
            else begin
                if (script_action == critter_proc) then begin
                    call critter_p_proc();
                end
                else begin
                    if (script_action == destroy_proc) then begin
                        call destroy_p_proc();
                    end
                end
            end
        end
    end
end

procedure combat
begin
    hostile := 1;
end

procedure critter_p_proc
begin
    if (hostile) then begin
        hostile := 0;
        attack(dude_obj);
    end
    if (local_var(5) == 1) then begin
        if (tile_num(self_obj) != 17145) then begin
            animate_move_obj_to_tile(self_obj, 17145, 0);
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        hostile := 1;
    end
end

procedure talk_p_proc
begin
    call get_reaction();
    if (local_var(4) == 1) then begin
        float_msg(self_obj, mstr(random(134, 136)), FLOAT_MSG_RED);
    end
    else begin
        set_local_var(4, 1);
        start_gdialog(651, self_obj, 4, -1, -1);
        gsay_start;
        call Brother00();
        gsay_end;
        end_dialogue;
    end
    animate_move_obj_to_tile(self_obj, 17145, 0);
    set_local_var(5, 1);
end

procedure destroy_p_proc
begin
    set_global_var(GVAR_FIND_LOST_INITIATE, 5);
    if (source_obj == dude_obj) then begin
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if ((global_var(GVAR_GOOD_MONSTER) % 2) == 0) then begin
            set_global_var(GVAR_PLAYER_REPUATION, global_var(GVAR_PLAYER_REPUATION) - 1);
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure Brother00
begin
    Reply(101);
    if (global_var(GVAR_BROTHERHOOD_OF_STEEL) < 1) then begin
        giq_option(4, NAME, 102, Brother01, NEUTRAL_REACTION);
    end
    else begin
        if (global_var(GVAR_FIND_LOST_INITIATE) == 0) then begin
            giq_option(4, NAME, 103, Brother03, NEUTRAL_REACTION);
            giq_option(4, NAME, 104, Brother04, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, NAME, 105, Brother02, NEUTRAL_REACTION);
        end
    end
    giq_option(4, NAME, 106, Brother03, NEUTRAL_REACTION);
    giq_option(-3, NAME, 107, BrotherEnd, NEUTRAL_REACTION);
    set_global_var(GVAR_FIND_LOST_INITIATE, 2);
end

procedure Brother01
begin
    Reply(108);
    if (global_var(GVAR_BROTHERHOOD_OF_STEEL) < 1) then begin
        set_global_var(GVAR_BROTHERHOOD_OF_STEEL, 1);
    end
    call Brother08();
end

procedure Brother02
begin
    Reply(109);
    giq_option(4, NAME, 110, Brother05, NEUTRAL_REACTION);
    giq_option(4, NAME, 111, Brother11, NEUTRAL_REACTION);
    giq_option(4, NAME, 112, Brother12, NEUTRAL_REACTION);
end

procedure Brother03
begin
    gsay_message(NAME, 113, NEUTRAL_REACTION);
end

procedure Brother04
begin
    gsay_message(NAME, 114, NEUTRAL_REACTION);
end

procedure Brother05
begin
    Reply(115);
    giq_option(4, NAME, 116, Brother07, NEUTRAL_REACTION);
    giq_option(4, NAME, 117, Brother06, NEUTRAL_REACTION);
    giq_option(4, NAME, 118, Brother10, NEUTRAL_REACTION);
    giq_option(4, NAME, 119, Brother09, NEUTRAL_REACTION);
end

procedure Brother06
begin
    Reply(120);
    call Brother08();
end

procedure Brother07
begin
    Reply(121);
    call Brother08();
end

procedure Brother08
begin
    giq_option(4, NAME, 122, Brother03, NEUTRAL_REACTION);
    giq_option(4, NAME, 123, Brother04, NEUTRAL_REACTION);
end

procedure Brother09
begin
    gsay_message(NAME, 124, NEUTRAL_REACTION);
end

procedure Brother10
begin
    gsay_message(NAME, 125, NEUTRAL_REACTION);
end

procedure Brother11
begin
    Reply(126);
    giq_option(4, NAME, 127, Brother05, NEUTRAL_REACTION);
    giq_option(4, NAME, 128, Brother03, NEUTRAL_REACTION);
    giq_option(4, NAME, 129, Brother04, NEUTRAL_REACTION);
end

procedure Brother12
begin
    Reply(130);
    giq_option(4, NAME, 131, Brother05, NEUTRAL_REACTION);
    giq_option(4, NAME, 132, Brother03, NEUTRAL_REACTION);
    giq_option(4, NAME, 133, Brother04, NEUTRAL_REACTION);
end

procedure BrotherEnd
begin
end

procedure get_reaction
begin
    if (local_var(2) == 0) then begin
        set_local_var(0, 50);
        set_local_var(1, 2);
        set_local_var(2, 1);
        set_local_var(0, local_var(0) + (5 * dude_charisma) - 25);
        set_local_var(0, local_var(0) + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence)));
        if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
            if (global_var(GVAR_PLAYER_REPUATION) > 0) then begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(0, local_var(0) - global_var(GVAR_PLAYER_REPUATION));
            end
            else begin
                set_local_var(0, local_var(0) + global_var(GVAR_PLAYER_REPUATION));
            end
        end
        if (global_var(GVAR_CHILDKILLER_REPUATION) > 2) then begin
            set_local_var(0, local_var(0) - 30);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(160) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) + 20);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_local_var(0, local_var(0) - 20);
        end
        call ReactToLevel();
    end
end

procedure ReactToLevel
begin
    if (local_var(0) <= 25) then begin
        set_local_var(1, 1);
    end
    else begin
        if (local_var(0) <= 75) then begin
            set_local_var(1, 2);
        end
        else begin
            set_local_var(1, 3);
        end
    end
end

procedure LevelToReact
begin
    if (local_var(1) == 1) then begin
        set_local_var(0, random(1, 25));
    end
    else begin
        if (local_var(1) == 2) then begin
            set_local_var(0, random(26, 75));
        end
        else begin
            set_local_var(0, random(76, 100));
        end
    end
end

procedure UpReact
begin
    set_local_var(0, local_var(0) + 10);
    call ReactToLevel();
end

procedure DownReact
begin
    set_local_var(0, local_var(0) - 10);
    call ReactToLevel();
end

procedure BottomReact
begin
    set_local_var(1, 1);
    set_local_var(0, 1);
end

procedure TopReact
begin
    set_local_var(0, 100);
    set_local_var(1, 3);
end

procedure BigUpReact
begin
    set_local_var(0, local_var(0) + 25);
    call ReactToLevel();
end

procedure BigDownReact
begin
    set_local_var(0, local_var(0) - 25);
    call ReactToLevel();
end

procedure UpReactLevel
begin
    set_local_var(1, local_var(1) + 1);
    if (local_var(1) > 3) then begin
        set_local_var(1, 3);
    end
    call LevelToReact();
end

procedure DownReactLevel
begin
    set_local_var(1, local_var(1) - 1);
    if (local_var(1) < 1) then begin
        set_local_var(1, 1);
    end
    call LevelToReact();
end

procedure Goodbyes
begin
    exit_line := message_str(SCRIPT_MODREACT, random(100, 105));
end
