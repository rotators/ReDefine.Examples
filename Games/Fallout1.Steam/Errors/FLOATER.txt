Fallout script decompiler, version 8.4.6 (sfall edition)
Copyright (C) Anchorite (TeamX), 2005-2009
anchorite2001@yandex.ru
Continued by Nirran, phobos2077, Mr.Stalin (2014-2020)
Crossplatformed by alexeevdv (2015)
int2ssl is using Fallout 1 code.
Loading file Games/Fallout1.Steam/scripts/FLOATER.int...
  Read startup code
  Read procedures table
  Read namespace
  Read stringspace
  Read tail of startup code
    Check "Jump to 'start' procedure" / "Jump to end of statup code"
    Check "# of argument to 'start' procedure"
    Extract "Export var" section
    Extract "Set exported var values" section
    Extract "Export procedures" section
    Extract "Global variables" section
  Read procedure's bodies
    Procedure: 0
    Procedure: 1
    Procedure: 2
    Procedure: 3
File Games/Fallout1.Steam/scripts/FLOATER.int loaded successfuly

Decompiling...
  Init definitions
  Processing code
    Intial reducing
    Building execution tree
        Procedure: 0
        Procedure: 1
        Procedure: 2
        Procedure: 3
    Extracting and reducing conditions
    Setting borders of blocks
        Procedure: 0
        Procedure: 1
Error: Conditional expression left in stack

============== Procedures table ==================

======== Procedure 0 ========
Name offset:       0x00000006
Type:              0x00000000  // No special types
Time:              0x00000000  // 0
Expression offset: 0x00000000
Body offset:       0x0000010E
Number of args:    0x00000000  // 0

======== Procedure 1 ========
Name offset:       0x00000018
Type:              0x00000000  // No special types
Time:              0x00000000  // 0
Expression offset: 0x00000000
Body offset:       0x0000010E
Number of args:    0x00000000  // 0

======== Procedure 2 ========
Name offset:       0x00000020
Type:              0x00000000  // No special types
Time:              0x00000000  // 0
Expression offset: 0x00000000
Body offset:       0x0000025E
Number of args:    0x00000000  // 0

======== Procedure 3 ========
Name offset:       0x00000032
Type:              0x00000000  // No special types
Time:              0x00000000  // 0
Expression offset: 0x00000000
Body offset:       0x000003BC
Number of args:    0x00000000  // 0



============== Namespace ==================
0x00000006: ".............."
0x00000018: "start"
0x00000020: "destroy_p_proc"
0x00000032: "critter_p_proc"
0x00000044: "start_init"
0x00000052: "hostile"
==================
6 item(s)



============== Stringspace ==================
Empty


============== Global variables values ==================
0: O_INTOP(0x00000000)   // 0 (0)
1: O_INTOP(0x00000000)   // 0 (0)


============== Exported variables ==================
Not found


============== Procedures ==================

0: .............. (0x0000010e)
===============================

1: start (0x0000010e)
===============================
0x0000010E: 0x802B            - O_PUSH_BASE
0x00000110: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x00000116: 0xC001 0x000001ea - O_INTOP(0x000001ea)   // 490 (490)
0x0000011C: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x00000122: 0x8012            - O_FETCH_GLOBAL
0x00000124: 0x8045            - O_NOT
0x00000126: 0xC001 0x0000000e - O_INTOP(0x0000000e)   // 14 (14)
0x0000012C: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x00000132: 0x810B            - O_METARULE
0x00000134: 0x803E            - O_AND
0x00000136: 0x802F            - O_IF
0x00000138: 0x80BC            - O_SELF_OBJ
0x0000013A: 0x8100            - O_OBJ_PID
0x0000013C: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x00000142: 0x8031            - O_STORE
0x00000144: 0xC001 0x00000190 - O_INTOP(0x00000190)   // 400 (400)
0x0000014A: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x00000150: 0x8032            - O_FETCH
0x00000152: 0xC001 0x0100002d - O_INTOP(0x0100002d)   // 16777261 (16777261)
0x00000158: 0x8033            - O_EQUAL
0x0000015A: 0x802F            - O_IF
0x0000015C: 0x80BC            - O_SELF_OBJ
0x0000015E: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x00000164: 0xC001 0x00000005 - O_INTOP(0x00000005)   // 5 (5)
0x0000016A: 0xC001 0x00000049 - O_INTOP(0x00000049)   // 73 (73)
0x00000170: 0x8102            - O_CRITTER_ADD_TRAIT
0x00000172: 0x80BC            - O_SELF_OBJ
0x00000174: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x0000017A: 0xC001 0x00000006 - O_INTOP(0x00000006)   // 6 (6)
0x00000180: 0xC001 0x0000002b - O_INTOP(0x0000002b)   // 43 (43)
0x00000186: 0x8102            - O_CRITTER_ADD_TRAIT
0x00000188: 0xC001 0x000001d4 - O_INTOP(0x000001d4)   // 468 (468)
0x0000018E: 0x8004            - O_JMP
0x00000190: 0xC001 0x000001d4 - O_INTOP(0x000001d4)   // 468 (468)
0x00000196: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x0000019C: 0x8032            - O_FETCH
0x0000019E: 0xC001 0x0100002b - O_INTOP(0x0100002b)   // 16777259 (16777259)
0x000001A4: 0x8033            - O_EQUAL
0x000001A6: 0x802F            - O_IF
0x000001A8: 0x80BC            - O_SELF_OBJ
0x000001AA: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x000001B0: 0xC001 0x00000005 - O_INTOP(0x00000005)   // 5 (5)
0x000001B6: 0xC001 0x00000048 - O_INTOP(0x00000048)   // 72 (72)
0x000001BC: 0x8102            - O_CRITTER_ADD_TRAIT
0x000001BE: 0x80BC            - O_SELF_OBJ
0x000001C0: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x000001C6: 0xC001 0x00000006 - O_INTOP(0x00000006)   // 6 (6)
0x000001CC: 0xC001 0x0000002b - O_INTOP(0x0000002b)   // 43 (43)
0x000001D2: 0x8102            - O_CRITTER_ADD_TRAIT
0x000001D4: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x000001DA: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x000001E0: 0x8013            - O_STORE_GLOBAL
0x000001E2: 0xC001 0x00000246 - O_INTOP(0x00000246)   // 582 (582)
0x000001E8: 0x8004            - O_JMP
0x000001EA: 0xC001 0x0000021c - O_INTOP(0x0000021c)   // 540 (540)
0x000001F0: 0x80C7            - O_SCRIPT_ACTION
0x000001F2: 0xC001 0x00000012 - O_INTOP(0x00000012)   // 18 (18)
0x000001F8: 0x8033            - O_EQUAL
0x000001FA: 0x802F            - O_IF
0x000001FC: 0xC001 0x00000212 - O_INTOP(0x00000212)   // 530 (530)
0x00000202: 0x800D            - O_D_TO_A
0x00000204: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x0000020A: 0xC001 0x00000002 - O_INTOP(0x00000002)   // 2 (2)
0x00000210: 0x8005            - O_CALL
0x00000212: 0x801A            - O_POP
0x00000214: 0xC001 0x00000246 - O_INTOP(0x00000246)   // 582 (582)
0x0000021A: 0x8004            - O_JMP
0x0000021C: 0xC001 0x00000246 - O_INTOP(0x00000246)   // 582 (582)
0x00000222: 0x80C7            - O_SCRIPT_ACTION
0x00000224: 0xC001 0x0000000c - O_INTOP(0x0000000c)   // 12 (12)
0x0000022A: 0x8033            - O_EQUAL
0x0000022C: 0x802F            - O_IF
0x0000022E: 0xC001 0x00000244 - O_INTOP(0x00000244)   // 580 (580)
0x00000234: 0x800D            - O_D_TO_A
0x00000236: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x0000023C: 0xC001 0x00000003 - O_INTOP(0x00000003)   // 3 (3)
0x00000242: 0x8005            - O_CALL
0x00000244: 0x801A            - O_POP
0x00000246: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x0000024C: 0x800D            - O_D_TO_A
0x0000024E: 0x8019            - O_SWAPA
0x00000250: 0x802A            - O_POP_TO_BASE
0x00000252: 0x8029            - O_POP_BASE
0x00000254: 0x800C            - O_A_TO_D
0x00000256: 0x801C            - O_POP_RETURN
0x00000258: 0x802A            - O_POP_TO_BASE
0x0000025A: 0x8029            - O_POP_BASE
0x0000025C: 0x801C            - O_POP_RETURN

2: destroy_p_proc (0x0000025e)
===============================
0x0000025E: 0x802B            - O_PUSH_BASE
0x00000260: 0xC001 0x000003a4 - O_INTOP(0x000003a4)   // 932 (932)
0x00000266: 0x80BD            - O_SOURCE_OBJ
0x00000268: 0x80BF            - O_DUDE_OBJ
0x0000026A: 0x8033            - O_EQUAL
0x0000026C: 0x802F            - O_IF
0x0000026E: 0xC001 0x000003a4 - O_INTOP(0x000003a4)   // 932 (932)
0x00000274: 0x80BD            - O_SOURCE_OBJ
0x00000276: 0x80BF            - O_DUDE_OBJ
0x00000278: 0x8033            - O_EQUAL
0x0000027A: 0x802F            - O_IF
0x0000027C: 0xC001 0x000002e8 - O_INTOP(0x000002e8)   // 744 (744)
0x00000282: 0xC001 0x000000a0 - O_INTOP(0x000000a0)   // 160 (160)
0x00000288: 0x80C5            - O_GLOBAL_VAR
0x0000028A: 0xC001 0x0000009f - O_INTOP(0x0000009f)   // 159 (159)
0x00000290: 0x80C5            - O_GLOBAL_VAR
0x00000292: 0x8039            - O_ADD
0x00000294: 0xC001 0x00000019 - O_INTOP(0x00000019)   // 25 (25)
0x0000029A: 0x8036            - O_GREATER_EQUAL
0x0000029C: 0xC001 0x0000009f - O_INTOP(0x0000009f)   // 159 (159)
0x000002A2: 0x80C5            - O_GLOBAL_VAR
0x000002A4: 0xC001 0x00000002 - O_INTOP(0x00000002)   // 2 (2)
0x000002AA: 0xC001 0x000000a0 - O_INTOP(0x000000a0)   // 160 (160)
0x000002B0: 0x80C5            - O_GLOBAL_VAR
0x000002B2: 0x803B            - O_MUL
0x000002B4: 0x8038            - O_GREATER
0x000002B6: 0xC001 0x0000009c - O_INTOP(0x0000009c)   // 156 (156)
0x000002BC: 0x80C5            - O_GLOBAL_VAR
0x000002BE: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x000002C4: 0x8033            - O_EQUAL
0x000002C6: 0x803F            - O_OR
0x000002C8: 0x803E            - O_AND
0x000002CA: 0x802F            - O_IF
0x000002CC: 0xC001 0x0000009c - O_INTOP(0x0000009c)   // 156 (156)
0x000002D2: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x000002D8: 0x80C6            - O_SET_GLOBAL_VAR
0x000002DA: 0xC001 0x0000009d - O_INTOP(0x0000009d)   // 157 (157)
0x000002E0: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x000002E6: 0x80C6            - O_SET_GLOBAL_VAR
0x000002E8: 0xC001 0x00000354 - O_INTOP(0x00000354)   // 852 (852)
0x000002EE: 0xC001 0x000000a0 - O_INTOP(0x000000a0)   // 160 (160)
0x000002F4: 0x80C5            - O_GLOBAL_VAR
0x000002F6: 0xC001 0x0000009f - O_INTOP(0x0000009f)   // 159 (159)
0x000002FC: 0x80C5            - O_GLOBAL_VAR
0x000002FE: 0x8039            - O_ADD
0x00000300: 0xC001 0x00000019 - O_INTOP(0x00000019)   // 25 (25)
0x00000306: 0x8036            - O_GREATER_EQUAL
0x00000308: 0xC001 0x000000a0 - O_INTOP(0x000000a0)   // 160 (160)
0x0000030E: 0x80C5            - O_GLOBAL_VAR
0x00000310: 0xC001 0x00000003 - O_INTOP(0x00000003)   // 3 (3)
0x00000316: 0xC001 0x0000009f - O_INTOP(0x0000009f)   // 159 (159)
0x0000031C: 0x80C5            - O_GLOBAL_VAR
0x0000031E: 0x803B            - O_MUL
0x00000320: 0x8038            - O_GREATER
0x00000322: 0xC001 0x0000009d - O_INTOP(0x0000009d)   // 157 (157)
0x00000328: 0x80C5            - O_GLOBAL_VAR
0x0000032A: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x00000330: 0x8033            - O_EQUAL
0x00000332: 0x803F            - O_OR
0x00000334: 0x803E            - O_AND
0x00000336: 0x802F            - O_IF
0x00000338: 0xC001 0x0000009d - O_INTOP(0x0000009d)   // 157 (157)
0x0000033E: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x00000344: 0x80C6            - O_SET_GLOBAL_VAR
0x00000346: 0xC001 0x0000009c - O_INTOP(0x0000009c)   // 156 (156)
0x0000034C: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x00000352: 0x80C6            - O_SET_GLOBAL_VAR
0x00000354: 0xC001 0x000000a0 - O_INTOP(0x000000a0)   // 160 (160)
0x0000035A: 0xC001 0x000000a0 - O_INTOP(0x000000a0)   // 160 (160)
0x00000360: 0x80C5            - O_GLOBAL_VAR
0x00000362: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x00000368: 0x8039            - O_ADD
0x0000036A: 0x80C6            - O_SET_GLOBAL_VAR
0x0000036C: 0xC001 0x000003a4 - O_INTOP(0x000003a4)   // 932 (932)
0x00000372: 0xC001 0x000000a0 - O_INTOP(0x000000a0)   // 160 (160)
0x00000378: 0x80C5            - O_GLOBAL_VAR
0x0000037A: 0xC001 0x00000006 - O_INTOP(0x00000006)   // 6 (6)
0x00000380: 0x803D            - O_MOD
0x00000382: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x00000388: 0x8033            - O_EQUAL
0x0000038A: 0x802F            - O_IF
0x0000038C: 0xC001 0x0000009b - O_INTOP(0x0000009b)   // 155 (155)
0x00000392: 0xC001 0x0000009b - O_INTOP(0x0000009b)   // 155 (155)
0x00000398: 0x80C5            - O_GLOBAL_VAR
0x0000039A: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x000003A0: 0x8039            - O_ADD
0x000003A2: 0x80C6            - O_SET_GLOBAL_VAR
0x000003A4: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x000003AA: 0x800D            - O_D_TO_A
0x000003AC: 0x8019            - O_SWAPA
0x000003AE: 0x802A            - O_POP_TO_BASE
0x000003B0: 0x8029            - O_POP_BASE
0x000003B2: 0x800C            - O_A_TO_D
0x000003B4: 0x801C            - O_POP_RETURN
0x000003B6: 0x802A            - O_POP_TO_BASE
0x000003B8: 0x8029            - O_POP_BASE
0x000003BA: 0x801C            - O_POP_RETURN

3: critter_p_proc (0x000003bc)
===============================
0x000003BC: 0x802B            - O_PUSH_BASE
0x000003BE: 0xC001 0x0000040c - O_INTOP(0x0000040c)   // 1036 (1036)
0x000003C4: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x000003CA: 0x8012            - O_FETCH_GLOBAL
0x000003CC: 0x8045            - O_NOT
0x000003CE: 0x802F            - O_IF
0x000003D0: 0x80BF            - O_DUDE_OBJ
0x000003D2: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x000003D8: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x000003DE: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x000003E4: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x000003EA: 0xC001 0x00007530 - O_INTOP(0x00007530)   // 30000 (30000)
0x000003F0: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x000003F6: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x000003FC: 0x80D0            - O_ATTACK_COMPLEX
0x000003FE: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x00000404: 0xC001 0x00000001 - O_INTOP(0x00000001)   // 1 (1)
0x0000040A: 0x8013            - O_STORE_GLOBAL
0x0000040C: 0xC001 0x00000000 - O_INTOP(0x00000000)   // 0 (0)
0x00000412: 0x800D            - O_D_TO_A
0x00000414: 0x8019            - O_SWAPA
0x00000416: 0x802A            - O_POP_TO_BASE
0x00000418: 0x8029            - O_POP_BASE
0x0000041A: 0x800C            - O_A_TO_D
0x0000041C: 0x801C            - O_POP_RETURN
0x0000041E: 0x802A            - O_POP_TO_BASE
0x00000420: 0x8029            - O_POP_BASE
0x00000422: 0x801C            - O_POP_RETURN

