procedure checkPartyMembersNearDoor;
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure Look_Traps_And_Locks;
procedure Look_Traps;
procedure Look_Locks;
procedure Skill_Disarm_Traps;
procedure Disarm_Traps;
procedure Unlock_Lock;
procedure Lockpick_Lock;
procedure Lockpick_Door;
procedure Super_Lockpick_Lock;
procedure Lock_Door;
procedure Set_Lock;
procedure Set_Lockpick_Lock;
procedure Super_Set_Lockpick_Lock;
procedure Set_Trap;
procedure Pry_Door;
procedure Damage_Critter;

variable Locks_Roll;
variable Traps_Roll;
variable last_source_obj;

procedure timed_event_p_proc;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777718) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777718)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777719) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777719)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777720) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777720)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure use_p_proc
begin
    Traps_Roll := roll_vs_skill(source_obj, 11, 0);
    if (local_var(1) == 0) then begin
        if (is_success(Traps_Roll)) then begin
            script_overrides;
            set_local_var(2, 1);
            reg_anim_func(2, source_obj);
            if (source_obj == dude_obj) then begin
                display_mstr(204);
            end
            else begin
                display_mstr(205);
            end
        end
        else begin
            if (obj_is_locked(self_obj)) then begin
                script_overrides;
                display_mstr(203);
                call Damage_Critter();
            end
            else begin
                call Damage_Critter();
            end
        end
    end
    else begin
        if (obj_is_locked(self_obj)) then begin
            script_overrides;
            display_mstr(203);
        end
    end
    if (1 == 1) then begin
        last_source_obj := source_obj;
        add_timer_event(self_obj, 10, 1);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (proto_data(obj_pid(self_obj), 11) == 3) then begin
        display_mstr(100);
    end
    else begin
        display_mstr(101);
    end
end

procedure description_p_proc
begin
    script_overrides;
    if ((local_var(0) == 0) and (local_var(1) == 0)) then begin
        call Look_Traps_And_Locks();
    end
    else begin
        if (local_var(1) == 0) then begin
            call Look_Traps();
        end
        else begin
            if (local_var(0) == 0) then begin
                call Look_Locks();
            end
            else begin
                display_mstr(132);
            end
        end
    end
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := action_being_used;
    if (LVar0 == 9) then begin
        script_overrides;
        if (local_var(0) == 0) then begin
            call Unlock_Lock();
        end
        else begin
            call Set_Lock();
        end
    end
    else begin
        if (LVar0 == 11) then begin
            script_overrides;
            if (local_var(1) == 0) then begin
                call Skill_Disarm_Traps();
            end
            else begin
                if (source_obj == dude_obj) then begin
                    display_mstr(195);
                end
                else begin
                    display_msg(obj_name(source_obj) + mstr(200));
                end
            end
        end
    end
    return 0;
    LVar0 := 0;
end

procedure use_obj_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(obj_being_used_with);
    if (LVar0 == 84) then begin
        script_overrides;
        if (local_var(0) == 0) then begin
            call Lockpick_Lock();
        end
        else begin
            call Set_Lockpick_Lock();
        end
    end
    else begin
        if (LVar0 == 410) then begin
            script_overrides;
            if (local_var(0) == 0) then begin
                call Super_Lockpick_Lock();
            end
            else begin
                call Super_Set_Lockpick_Lock();
            end
        end
        else begin
            if (LVar0 == 77) then begin
                script_overrides;
                if (local_var(0) == 0) then begin
                    call Lockpick_Lock();
                end
                else begin
                    call Set_Lockpick_Lock();
                end
            end
            else begin
                if (LVar0 == 411) then begin
                    script_overrides;
                    if (local_var(0) == 0) then begin
                        call Super_Lockpick_Lock();
                    end
                    else begin
                        call Super_Set_Lockpick_Lock();
                    end
                end
                else begin
                    if (LVar0 == 20) then begin
                        script_overrides;
                        call Pry_Door();
                    end
                    else begin
                        if ((LVar0 == 51) or (LVar0 == 85)) then begin
                            script_overrides;
                            call Set_Trap();
                        end
                    end
                end
            end
        end
    end
    return 0;
    LVar0 := 0;
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    if (weapon_dmg_type(target_obj) == 6) then begin
        if (proto_data(obj_pid(self_obj), 11) != 1) then begin
            if (local_var(1) == 0) then begin
                set_local_var(1, 1);
                set_local_var(0, 1);
                LVar0 := random(10, 20);
                explosion(tile_num(self_obj), elevation(self_obj), LVar0);
                destroy_object(self_obj);
            end
            else begin
                set_local_var(1, 1);
                set_local_var(0, 1);
                destroy_object(self_obj);
            end
        end
        else begin
            set_local_var(4, local_var(4) + 1);
            if (local_var(1) == 0) then begin
                set_local_var(0, 1);
                LVar0 := random(10, 20);
                explosion(tile_num(self_obj), elevation(self_obj), LVar0);
            end
            else begin
                if (local_var(4) > 2) then begin
                    set_local_var(1, 1);
                    set_local_var(0, 1);
                    destroy_object(self_obj);
                end
            end
        end
    end
    else begin
        display_mstr(193);
    end
    return 0;
    LVar0 := 0;
end

procedure map_enter_p_proc
begin
    if (local_var(3) == 0) then begin
        set_local_var(3, 1);
        set_local_var(0, 1);
        set_local_var(1, 1);
    end
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure map_update_p_proc
begin
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure Look_Traps_And_Locks
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 11, 0);
    LVar2 := roll_vs_skill(dude_obj, 9, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(102);
                        end
                        else begin
                            display_mstr(103);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(104);
                        end
                        else begin
                            display_mstr(105);
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(106);
                        end
                        else begin
                            display_mstr(107);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(108);
                        end
                        else begin
                            display_mstr(109);
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(110);
                        end
                        else begin
                            display_mstr(111);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(112);
                        end
                        else begin
                            display_mstr(113);
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(114);
                        end
                        else begin
                            display_mstr(115);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(116);
                        end
                        else begin
                            display_mstr(117);
                        end
                    end
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(118);
                        end
                        else begin
                            display_mstr(119);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(120);
                        end
                        else begin
                            display_mstr(121);
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(122);
                        end
                        else begin
                            display_mstr(123);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(124);
                        end
                        else begin
                            display_mstr(125);
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(126);
                        end
                        else begin
                            display_mstr(127);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(128);
                        end
                        else begin
                            display_mstr(129);
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(130);
                        end
                        else begin
                            display_mstr(131);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(132);
                        end
                        else begin
                            display_mstr(133);
                        end
                    end
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(134);
                        end
                        else begin
                            display_mstr(135);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(136);
                        end
                        else begin
                            display_mstr(137);
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(138);
                        end
                        else begin
                            display_mstr(139);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(140);
                        end
                        else begin
                            display_mstr(141);
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(142);
                        end
                        else begin
                            display_mstr(143);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(144);
                        end
                        else begin
                            display_mstr(145);
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(146);
                        end
                        else begin
                            display_mstr(147);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(148);
                        end
                        else begin
                            display_mstr(149);
                        end
                    end
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(150);
                        end
                        else begin
                            display_mstr(151);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(152);
                        end
                        else begin
                            display_mstr(153);
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(154);
                        end
                        else begin
                            display_mstr(155);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(156);
                        end
                        else begin
                            display_mstr(157);
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(158);
                        end
                        else begin
                            display_mstr(159);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(160);
                        end
                        else begin
                            display_mstr(161);
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(162);
                        end
                        else begin
                            display_mstr(163);
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_mstr(164);
                        end
                        else begin
                            display_mstr(165);
                        end
                    end
                end
            end
        end
    end
    return 0;
    LVar0 := 0;
    LVar1 := 0;
    LVar2 := 0;
end

procedure Look_Traps
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 11, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_mstr(104);
                end
                else begin
                    display_mstr(108);
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_mstr(112);
                end
                else begin
                    display_mstr(116);
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_mstr(120);
                end
                else begin
                    display_mstr(124);
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_mstr(128);
                end
                else begin
                    display_mstr(132);
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_mstr(136);
                end
                else begin
                    display_mstr(140);
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_mstr(144);
                end
                else begin
                    display_mstr(148);
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_mstr(152);
                end
                else begin
                    display_mstr(156);
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_mstr(160);
                end
                else begin
                    display_mstr(164);
                end
            end
        end
    end
    return 0;
    LVar0 := 0;
    LVar1 := 0;
end

procedure Look_Locks
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 9, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_mstr(114);
                end
                else begin
                    display_mstr(115);
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_mstr(116);
                end
                else begin
                    display_mstr(117);
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_mstr(130);
                end
                else begin
                    display_mstr(131);
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_mstr(132);
                end
                else begin
                    display_mstr(133);
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_mstr(146);
                end
                else begin
                    display_mstr(147);
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_mstr(148);
                end
                else begin
                    display_mstr(149);
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_mstr(162);
                end
                else begin
                    display_mstr(163);
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_mstr(164);
                end
                else begin
                    display_mstr(165);
                end
            end
        end
    end
    return 0;
    LVar0 := 0;
    LVar1 := 0;
end

procedure Skill_Disarm_Traps
begin
    Traps_Roll := roll_vs_skill(source_obj, 11, 0);
    call Disarm_Traps();
end

procedure Disarm_Traps
begin
    if (is_success(Traps_Roll)) then begin
        if (local_var(2) == 0) then begin
            set_local_var(2, 1);
            if (source_obj == dude_obj) then begin
                display_mstr(194);
            end
            else begin
                display_mstr(199);
            end
            if (local_var(6) == 0) then begin
                set_local_var(6, 1);
                give_exp_points(25);
                display_msg(g_mstr(100) + 25 + g_mstr(101));
            end
        end
        else begin
            set_local_var(1, 1);
            if (source_obj == dude_obj) then begin
                display_mstr(196);
            end
            else begin
                display_msg(obj_name(source_obj) + mstr(201));
            end
        end
    end
    else begin
        if (is_critical(Traps_Roll)) then begin
            call Damage_Critter();
        end
        else begin
            if (local_var(2) == 0) then begin
                if (source_obj == dude_obj) then begin
                    display_mstr(195);
                end
                else begin
                    display_msg(obj_name(source_obj) + mstr(200));
                end
            end
            else begin
                display_msg(obj_name(source_obj) + mstr(202));
            end
        end
    end
end

procedure Unlock_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20);
    call Lockpick_Door();
end

procedure Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 20);
    call Lockpick_Door();
end

procedure Lockpick_Door
begin
    if (is_success(Locks_Roll)) then begin
        set_local_var(0, 1);
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_mstr(170);
        end
        else begin
            display_msg(obj_name(source_obj) + mstr(173));
        end
        if (local_var(5) == 0) then begin
            set_local_var(5, 1);
            give_exp_points(25);
            display_msg(g_mstr(100) + 25 + g_mstr(101));
        end
    end
    else begin
        if (is_critical(Locks_Roll)) then begin
            jam_lock(self_obj);
            if (source_obj == dude_obj) then begin
                display_mstr(171);
            end
            else begin
                display_msg(obj_name(source_obj) + mstr(174));
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_mstr(172);
            end
            else begin
                display_msg(obj_name(source_obj) + mstr(175));
            end
        end
    end
end

procedure Super_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 40);
    call Lockpick_Door();
end

procedure Lock_Door
begin
    if (is_success(Locks_Roll)) then begin
        set_local_var(0, 0);
        obj_lock(self_obj);
        if (source_obj == dude_obj) then begin
            display_mstr(189);
        end
        else begin
            display_msg(obj_name(source_obj) + mstr(191));
        end
        if (local_var(5) == 0) then begin
            set_local_var(5, 1);
            give_exp_points(25);
            display_msg(g_mstr(100) + 25 + g_mstr(101));
        end
    end
    else begin
        if (source_obj == dude_obj) then begin
            display_mstr(190);
        end
        else begin
            display_msg(obj_name(source_obj) + mstr(192));
        end
    end
end

procedure Set_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20);
    call Lock_Door();
end

procedure Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 20);
    call Lock_Door();
end

procedure Super_Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 40);
    call Lock_Door();
end

procedure Set_Trap
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    Traps_Roll := roll_vs_skill(source_obj, 11, 0 - 10);
    LVar0 := obj_being_used_with;
    if (obj_is_open(self_obj)) then begin
        script_overrides;
        if (source_obj == dude_obj) then begin
            display_mstr(206);
        end
        else begin
            display_msg(obj_name(source_obj) + mstr(207));
        end
    end
    else begin
        script_overrides;
        LVar1 := rm_mult_objs_from_inven(source_obj, LVar0, 1);
        if (is_success(Traps_Roll)) then begin
            set_local_var(1, 0);
            if (source_obj == dude_obj) then begin
                display_mstr(208);
            end
            else begin
                display_msg(obj_name(source_obj) + mstr(210));
            end
        end
        else begin
            if (is_critical(Traps_Roll)) then begin
                call Damage_Critter();
            end
            else begin
                if (source_obj == dude_obj) then begin
                    display_mstr(209);
                end
                else begin
                    display_msg(obj_name(source_obj) + mstr(211));
                end
            end
        end
    end
    return 0;
    LVar0 := 0;
    LVar1 := 0;
end

procedure Pry_Door
begin
    variable LVar0 := 0;
    LVar0 := do_check(source_obj, 0, 0);
    if (is_success(LVar0)) then begin
        set_local_var(0, 1);
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_mstr(176);
        end
        else begin
            display_mstr(181);
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            critter_dmg(source_obj, 2, 0 bwor 256);
            if (source_obj == dude_obj) then begin
                display_msg(mstr(178) + 2 + mstr(179));
            end
            else begin
                if (get_critter_stat(source_obj, STAT_gender) == 0) then begin
                    display_msg(mstr(183) + 2 + mstr(184));
                end
                else begin
                    display_msg(mstr(187) + 2 + mstr(188));
                end
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_mstr(180);
            end
            else begin
                display_mstr(185);
            end
        end
    end
    return 0;
    LVar0 := 0;
end

procedure Damage_Critter
begin
    variable LVar0 := 0;
    script_overrides;
    LVar0 := random(10, 20);
    if (source_obj == dude_obj) then begin
        script_overrides;
        critter_dmg(dude_obj, LVar0, 6 bwor 256);
        display_msg(mstr(166) + LVar0 + mstr(167));
    end
    else begin
        script_overrides;
        critter_dmg(source_obj, LVar0, 6 bwor 256);
        display_msg(obj_name(source_obj) + mstr(168) + LVar0 + mstr(169));
    end
    set_local_var(1, 1);
    return 0;
    LVar0 := 0;
end

procedure timed_event_p_proc
begin
    if (obj_is_open(self_obj)) then begin
        if (not(combat_is_initialized)) then begin
            if ((tile_distance_objs(dude_obj, self_obj) > 2) and (checkPartyMembersNearDoor() == 0) and ((tile_distance_objs(self_obj, last_source_obj) > 2) or (critter_state(last_source_obj) == 1))) then begin
                obj_close(self_obj);
            end
            else begin
                add_timer_event(self_obj, 10, 1);
            end
        end
        else begin
            add_timer_event(self_obj, 10, 1);
        end
    end
end
