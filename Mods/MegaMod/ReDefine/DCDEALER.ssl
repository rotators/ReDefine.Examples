variable tmp_gen_rep;
variable global_temp;
variable restock_amt;
variable restock_obj;
variable removed_qty;

procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure destroy_p_proc;
procedure Node999;
procedure Node998;
procedure Node001;
procedure NodeBarter;

variable dealer;

procedure timed_event_p_proc;


procedure start
begin
end

procedure use_p_proc
begin
end

procedure look_at_p_proc
begin
    script_overrides;
    if (dealer) then begin
        display_msg(message_str(SCRIPT_DENBUS2, 8100));
    end
    else begin
        display_msg(message_str(SCRIPT_DENBUS2, 8200));
    end
end

procedure description_p_proc
begin
    script_overrides;
    if (dealer) then begin
        display_msg(message_str(SCRIPT_DENBUS2, 8101));
    end
    else begin
        display_msg(message_str(SCRIPT_DENBUS2, 8201));
    end
end

procedure use_skill_on_p_proc
begin
end

procedure use_obj_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(4, local_var(4) bwor 8);
        set_local_var(4, local_var(4) bwor 2);
        set_map_var(1, 1);
    end
end

procedure map_enter_p_proc
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    if (elevation(self_obj) != dude_elevation) then begin
        move_to(self_obj, tile_num(self_obj), dude_elevation);
    end
    if (tile_num(self_obj) == 14462) then begin
        dealer := 1;
    end
    if (is_loading_game == 0) then begin
        if ((game_time < 0) and (local_var(9) == 0)) then begin
            set_local_var(8, game_time - 1);
            set_local_var(9, 1);
        end
        if (local_var(8) < game_time) then begin
            LVar0 := create_object(128, 5, 0);
            if (obj_is_carrying_obj_pid(self_obj, 479) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 479);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 479) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 479);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 356) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 356);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 377) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 377);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 366) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 366);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 446) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 446);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 492) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 492);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 288) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 288);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 253) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 253);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 254) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 254);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 266) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 266);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 267) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 267);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 258) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 258);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 255) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 255);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 256) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 256);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 257) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 257);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 96) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 96);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 97) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 97);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 99) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 99);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 223) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 223);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 252) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 252);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 298) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 298);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 302) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 302);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 303) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 303);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 305) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 305);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 306) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 306);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 307) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 307);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 335) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 335);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 336) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 336);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 337) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 337);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 338) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 338);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 339) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 339);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 340) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 340);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 341) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 341);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 414) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 414);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 422) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 422);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 431);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 431);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 432) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 432);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 431);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 447) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 447);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 448) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 448);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 449) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 449);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 456) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 456);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 468) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 468);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 471) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 471);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 476) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 476);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 488) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 488);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            if (obj_is_carrying_obj_pid(self_obj, 495) > 0) then begin
                LVar1 := obj_carrying_pid_obj(self_obj, 495);
                rm_obj_from_inven(self_obj, LVar1);
                add_obj_to_inven(LVar0, LVar1);
            end
            global_temp := create_object(128, 0, 0);
            move_obj_inven_to_obj(self_obj, global_temp);
            destroy_object(global_temp);
            restock_amt := random(2, 5);
            if (obj_is_carrying_obj_pid(self_obj, 259) < restock_amt) then begin
                if (100 >= random(1, 100)) then begin
                    restock_obj := create_object(259, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 259));
                end
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 259) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 259);
                    if ((obj_is_carrying_obj_pid(self_obj, 259) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 259) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 259);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 259);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
            restock_amt := random(0, 1);
            if (obj_is_carrying_obj_pid(self_obj, 87) < restock_amt) then begin
                if (100 >= random(1, 100)) then begin
                    restock_obj := create_object(87, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 87));
                end
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 87) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 87);
                    if ((obj_is_carrying_obj_pid(self_obj, 87) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 87) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 87);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 87);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
            restock_amt := random(2, 3);
            if (obj_is_carrying_obj_pid(self_obj, 40) < restock_amt) then begin
                if (100 >= random(1, 100)) then begin
                    restock_obj := create_object(40, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 40));
                end
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 40) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 40);
                    if ((obj_is_carrying_obj_pid(self_obj, 40) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 40) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 40);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 40);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
            restock_amt := random(2, 3);
            if (obj_is_carrying_obj_pid(self_obj, 124) < restock_amt) then begin
                if (100 >= random(1, 100)) then begin
                    restock_obj := create_object(124, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 124));
                end
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 124) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 124);
                    if ((obj_is_carrying_obj_pid(self_obj, 124) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 124) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 124);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 124);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
            restock_amt := random(1, 2);
            if (obj_is_carrying_obj_pid(self_obj, 106) < restock_amt) then begin
                if (100 >= random(1, 100)) then begin
                    restock_obj := create_object(106, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 106));
                end
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 106) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 106);
                    if ((obj_is_carrying_obj_pid(self_obj, 106) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 106);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 106);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
            restock_amt := random(15, 30);
            if (obj_is_carrying_obj_pid(self_obj, 41) < restock_amt) then begin
                if (100 >= random(1, 100)) then begin
                    restock_obj := create_object(41, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 41));
                end
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 41) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 41);
                    if ((obj_is_carrying_obj_pid(self_obj, 41) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 41) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 41);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 41);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
            set_local_var(8, (random(1, 2) * (24 * (60 * (60 * 10)))) + game_time);
            move_obj_inven_to_obj(LVar0, self_obj);
            destroy_object(LVar0);
        end
    end
    if ((dealer == 1) and (local_var(7) == 0)) then begin
        LVar0 := create_object(18, 5, 0);
        wield_obj_critter(self_obj, LVar0);
        set_local_var(7, 1);
    end
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 213);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_THUGS);
    return 0;
    LVar0 := 0;
    LVar1 := 0;
end

procedure map_update_p_proc
begin
end

procedure talk_p_proc
begin
    if (dealer) then begin
        start_gdialog(60, self_obj, 4, -1, -1);
        gsay_start;
        call Node001();
        gsay_end;
        end_dialogue;
    end
    else begin
        float_msg(self_obj, message_str(SCRIPT_DENBUS2, 8202), FLOAT_MSG_YELLOW);
    end
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (((local_var(4) bwand 2) != 0) or (map_var(1) == 1)) then begin
            set_map_var(1, 2);
            if (critter_is_fleeing(self_obj)) then begin
                if (anim_busy(self_obj) == 0) then begin
                    if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                        if (anim_busy(self_obj) == 0) then begin
                            global_temp := rotation_to_tile(dude_tile, tile_num(self_obj));
                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                            global_temp := (global_temp + 1) % 6;
                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(dude_tile, tile_num(self_obj)))) do begin
                                debug_msg("flee loop: rot == " + global_temp);
                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                global_temp := (global_temp + 1) % 6;
                            end
                        end
                    end
                end
            end
            else begin
                attack(dude_obj);
            end
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        call Node998();
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_BAD_MONSTER, global_var(GVAR_BAD_MONSTER) + 1);
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(4) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1)) and (global_var(GVAR_CHILDKILLER_REPUTATION) == 0)) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + 1);
        debug_msg("Player gains " + 1 + " Karma Points.");
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION);
        if (has_trait(TRAIT_PERK, dude_obj, PERK_karma_beacon_perk)) then begin
            tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION) * 2;
        end
        if (tmp_gen_rep >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (tmp_gen_rep >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (tmp_gen_rep >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (tmp_gen_rep >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (tmp_gen_rep > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (tmp_gen_rep > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (tmp_gen_rep > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (tmp_gen_rep > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure Node999
begin
end

procedure Node998
begin
    set_local_var(4, local_var(4) bwor 2);
end

procedure Node001
begin
    gsay_reply(SCRIPT_DENBUS2, 8102);
    giq_option(4, SCRIPT_DENBUS2, 8103, NodeBarter, NEUTRAL_REACTION);
    giq_option(4, SCRIPT_DENBUS2, 8104, Node999, NEUTRAL_REACTION);
end

procedure NodeBarter
begin
    gdialog_barter;
    gsay_reply(SCRIPT_DENBUS2, 8105);
    giq_option(4, SCRIPT_DENBUS2, 8106, Node999, NEUTRAL_REACTION);
end

procedure timed_event_p_proc
begin
end
