variable weapon_flags;
variable weapon_anim;
variable weapon_damage_type;
variable weapon_1st_attack_mode;
variable weapon_2nd_attack_mode;
variable big_gun_flag;
variable weapon_attack_type;
variable random_roll;
variable weapon_stat;
variable weapon_stata;
variable weapon_statb;
variable weapon_statc;
variable weapon_statd;
variable weapon_state;
variable random_damage;
variable perk_math := 0.00000;
variable perk_mod_math := 0.00000;
variable target_special_flag;
variable attacker_special_flag;
variable threshold;
variable resistance;
variable value;
variable count;
variable total;
variable target;
variable attacker;
variable target_damage;
variable attacker_damage;
variable attack_weapon;
variable body_part;
variable proto_minimum_damage;
variable proto_maximum_damage;
variable attack_ammo_pid;
variable unarmed_armor_piercing;
variable one;
variable two;
variable three;
variable four;
variable five;
variable six;
variable seven;
variable eight;
variable nine;
variable ten;
variable eleven;
variable twelve;
variable thirteen;
variable fourteen;
variable fifteen;
variable sixteen;
variable seventeen;
variable eighteen;
variable nineteen;
variable twenty;
variable twenty_one;
variable twenty_two;
variable twenty_three;
variable cycles;
variable cycle_value;
variable C1;
variable L;
variable R;
variable C2;
variable curRounds_S;
variable curRounds_S1;
variable curRounds_L;
variable curRounds_L1;
variable curRounds_R;
variable curRounds_R1;
variable bullets_into_target;
variable weapon;
variable temp;
variable chance_for_full_armor_penetrate;
variable weapon_perk;
variable Weapon_Long_Range;
variable Weapon_Accurate;
variable Weapon_Penetrate;
variable Weapon_Knockback;
variable Weapon_Scope_Range;
variable Weapon_Fast_Reload;
variable Weapon_Night_Sight;
variable Weapon_Flameboy;
variable full_armor_penetrate;
variable decimal;
variable convert_one;
variable convert_two;
variable convert_three;
variable convert_four;
variable convert_five;
variable convert_six;
variable convert_seven;
variable convert_eight;
variable convert_nine;
variable convert_ten;
variable convert_eleven;
variable convert_twelve;
variable convert_thirteen;
variable convert_fourteen;
variable convert_fifteen;
variable convert_sixteen;
variable convert_seventeen;
variable convert_eighteen;
variable convert_nineteen;
variable convert_twenty;
variable convert_twenty_one;
variable convert_twenty_two;
variable convert_twenty_three;
variable attack_min;
variable attack_max;
variable target_flags;
variable attacker_flags;
variable critter_flags;

procedure start;
procedure CalcCrit(variable arg0);
procedure Knockdown(variable arg0);
procedure GetFloatValue(variable arg0);
procedure DamageType;
procedure CombatDifficulty;
procedure Get_Min;
procedure Get_Max;
procedure Get_Skill;
procedure Get_Burst;
procedure Get_Ammo_Mod_A;
procedure Get_Ammo_Mod_B;
procedure Get_Ammo_DR_Mod;
procedure Get_Weapon_Perks;
procedure MainAttack(variable arg0);
procedure SecondaryAttack(variable arg0);
procedure BonusDamage(variable arg0, variable arg1);
procedure DamageFormula(variable arg0, variable arg1);
procedure Damage_Calculation(variable arg0, variable arg1, variable arg2, variable arg3, variable arg4);
procedure GetThreshold;
procedure ModifiedThreshold;
procedure GetResistance;
procedure ModifiedResistance;
procedure Drop_Weapons(variable arg0);
procedure CalculateCriticalDamage(variable arg0);
procedure PartyCritMultiplier;
procedure ConvertBitFlagField(variable arg0);
procedure RebuildBitFlagField;
procedure Roll_Critical_Check(variable arg0, variable arg1);
procedure Unlimited_Ammo;
procedure Get_Facing(variable arg0, variable arg1);
procedure Calculate_Facing_Bonus(variable arg0, variable arg1);
procedure Back_Stab(variable arg0);
procedure Right_Arm(variable arg0, variable arg1, variable arg2);
procedure Left_Arm(variable arg0, variable arg1, variable arg2);
procedure Is_Ap_Ammo;

variable range_perks;
variable math;
variable float_math := 0.00000;

procedure modify_critter(variable arg0);
procedure CalculateBonuses;
procedure HealCritter(variable arg0);
procedure MapEnterHealCritter(variable arg0);
procedure IsBigGun(variable arg0);


procedure start
begin
    if (init_hook) then begin
        set_sfall_global(4263, get_ini_setting("Damage.ini|MISC|BypassArmorDivider"));
        set_sfall_global(4264, get_ini_setting("Damage.ini|MISC|ArmorPiercingAmmoDivider"));
        set_sfall_global(4266, get_ini_setting("Damage.ini|MISC|SniperCritPercent"));
        set_sfall_global(4308, get_ini_setting("Damage.ini|MISC|SlayerInstantKillPercent"));
        set_sfall_global(4305, get_ini_setting("Damage.ini|MISC|CriticalDamagePercent"));
        set_sfall_global(4309, get_ini_setting("Damage.ini|MISC|EasySettingMultiplier"));
        set_sfall_global(4310, get_ini_setting("Damage.ini|MISC|NormalSettingMultiplier"));
        set_sfall_global(4311, get_ini_setting("Damage.ini|MISC|HardSettingMultiplier"));
        set_sfall_global(4313, get_ini_setting("Damage.ini|MISC|LoseNextTurnPercent"));
        set_sfall_global(4314, get_ini_setting("Damage.ini|MISC|KnockoutPercent"));
        set_sfall_global(4421, get_ini_setting("Damage.ini|MISC|WeaponKnockdownPercent"));
        set_sfall_global(4422, get_ini_setting("Damage.ini|MISC|AimedHeadPercent"));
        set_sfall_global(4423, get_ini_setting("Damage.ini|MISC|AimedLeftArmPercent"));
        set_sfall_global(4424, get_ini_setting("Damage.ini|MISC|AimedRightArmPercent"));
        set_sfall_global(4425, get_ini_setting("Damage.ini|MISC|AimedTorsoPercent"));
        set_sfall_global(4426, get_ini_setting("Damage.ini|MISC|AimedRightLegPercent"));
        set_sfall_global(4427, get_ini_setting("Damage.ini|MISC|AimedLeftLegPercent"));
        set_sfall_global(4428, get_ini_setting("Damage.ini|MISC|AimedEyesPercent"));
        set_sfall_global(4429, get_ini_setting("Damage.ini|MISC|AimedGroinPercent"));
        set_sfall_global(4430, get_ini_setting("Damage.ini|MISC|AimedHeadKillPercent"));
        set_sfall_global(4431, get_ini_setting("Damage.ini|MISC|WeaponPenetrateDivider"));
        set_sfall_global(4432, get_ini_setting("Damage.ini|MISC|FullArmorPenetrateDivider"));
        set_sfall_global(4433, get_ini_setting("Damage.ini|MISC|UnarmedPiercingDivider"));
        set_sfall_global(4501, get_ini_setting("Damage.ini|MISC|FacingBonusDamageBackToFront"));
        set_sfall_global(4502, get_ini_setting("Damage.ini|MISC|FacingBonusDamageRearFlank"));
        set_sfall_global(4503, get_ini_setting("Damage.ini|MISC|FacingBonusDamageFrontFlank"));
        set_sfall_global(4504, get_ini_setting("Damage.ini|MISC|FacingBonusDamageFaceToFace"));
        set_sfall_global(6200, get_ini_setting("Damage.ini|MISC|FacingBonusEnable"));
        set_sfall_global(4565, get_ini_setting("Damage.ini|MISC|FacingDistanceRequierment"));
        set_sfall_global(6000, get_ini_setting("Damage.ini|MISC|CrippledDropOnly"));
        set_sfall_global(6001, get_ini_setting("Damage.ini|MISC|CrippleDropPositive"));
        set_sfall_global(6002, get_ini_setting("Damage.ini|MISC|CrippleDropCritical"));
        set_sfall_global(6003, get_ini_setting("Damage.ini|MISC|CrippleDropCrippled"));
        set_sfall_global(6010, get_ini_setting("Damage.ini|MISC|CrippleDropCrippledMustBeAimedAt"));
        set_sfall_global(6011, get_ini_setting("Damage.ini|MISC|CrippleDropCodeAffectsPlayer"));
        set_sfall_global(6069, get_ini_setting("Damage.ini|MISC|CrippleDropDisable"));
    end
    else begin
        convert_one := 0;
        convert_two := 0;
        convert_three := 0;
        convert_four := 0;
        convert_five := 0;
        convert_six := 0;
        convert_seven := 0;
        convert_eight := 0;
        convert_nine := 0;
        convert_ten := 0;
        convert_eleven := 0;
        convert_twelve := 0;
        convert_thirteen := 0;
        convert_fourteen := 0;
        convert_fifteen := 0;
        convert_sixteen := 0;
        convert_seventeen := 0;
        convert_eighteen := 0;
        convert_nineteen := 0;
        convert_twenty := 0;
        convert_twenty_one := 0;
        convert_twenty_two := 0;
        convert_twenty_three := 0;
        random_roll := 0;
        weapon_stat := 0;
        weapon_stata := 0;
        weapon_statb := 0;
        weapon_statc := 0;
        weapon_statd := 0;
        weapon_state := 0;
        random_damage := 0;
        perk_math := 0.00000;
        perk_mod_math := 0.00000;
        target_special_flag := 0;
        attacker_special_flag := 0;
        threshold := 0;
        resistance := 0;
        value := 0;
        count := 0;
        total := 0;
        target := 0;
        attacker := 0;
        target_damage := 0;
        attacker_damage := 0;
        attack_weapon := 0;
        body_part := 0;
        proto_minimum_damage := 0;
        proto_maximum_damage := 0;
        attack_ammo_pid := 0;
        unarmed_armor_piercing := 0;
        one := 0;
        two := 0;
        three := 0;
        four := 0;
        five := 0;
        six := 0;
        seven := 0;
        eight := 0;
        nine := 0;
        ten := 0;
        eleven := 0;
        twelve := 0;
        thirteen := 0;
        fourteen := 0;
        fifteen := 0;
        sixteen := 0;
        seventeen := 0;
        eighteen := 0;
        nineteen := 0;
        twenty := 0;
        twenty_one := 0;
        twenty_two := 0;
        twenty_three := 0;
        cycles := 0;
        cycle_value := 0;
        C1 := 0;
        L := 0;
        R := 0;
        C2 := 0;
        curRounds_S := 0;
        curRounds_S1 := 0;
        curRounds_L := 0;
        curRounds_L1 := 0;
        curRounds_R := 0;
        curRounds_R1 := 0;
        bullets_into_target := 0;
        weapon := 0;
        temp := 0;
        chance_for_full_armor_penetrate := 0;
        weapon_perk := 0;
        Weapon_Long_Range := 0;
        Weapon_Accurate := 0;
        Weapon_Penetrate := 0;
        Weapon_Knockback := 0;
        Weapon_Scope_Range := 0;
        Weapon_Fast_Reload := 0;
        Weapon_Night_Sight := 0;
        Weapon_Flameboy := 0;
        full_armor_penetrate := 0;
        decimal := 0;
        attack_min := 0;
        attack_max := 0;
        critter_flags := 0;
        target := get_sfall_arg;
        attacker := get_sfall_arg;
        target_damage := get_sfall_arg;
        attacker_damage := get_sfall_arg;
        target_flags := get_sfall_arg;
        attacker_flags := get_sfall_arg;
        attack_weapon := get_sfall_arg;
        body_part := get_sfall_arg;
        if ((get_sfall_global_int(6000) == 1) and (get_sfall_global_int(6069) == 0)) then begin
            if ((target == dude_obj) and (get_sfall_global_int(6011) == 1) or (target != dude_obj)) then begin
                if ((target_damage > 0) and (get_sfall_global_int(6001) == 1) or (get_sfall_global_int(6001) == 0)) then begin
                    if ((attacker_flags bwand 512) and (get_sfall_global_int(6002) == 1) or (get_sfall_global_int(6002) == 0)) then begin
                        if ((Right_Arm(target_flags, target, body_part) == 1) or (Left_Arm(target_flags, target, body_part) == 1)) then begin
                            call Drop_Weapons(target);
                            fifteen := 1;
                            return 0;
                        end
                        else begin
                            return 0;
                        end
                    end
                    else begin
                        return 0;
                    end
                end
                else begin
                    return 0;
                end
            end
            else begin
                return 0;
            end
        end
        if (obj_pid(attack_weapon) > 0) then begin
            value := get_weapon_ammo_pid(attack_weapon);
            if (value > 0) then begin
                attack_ammo_pid := value;
            end
            else begin
                attack_ammo_pid := -1;
            end
        end
        else begin
            attack_ammo_pid := -1;
        end
        if (attacker == dude_obj) then begin
            call Damage_Calculation(0, 0, 0, 0, 0);
        end
        else begin
            if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777376) and (get_sfall_global_int(4306) == 0)) then begin
                call Damage_Calculation(get_sfall_global_int(3512), get_sfall_global_int(3511), get_sfall_global_int(3513), 0, 0);
            end
            else begin
                if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777377) and (get_sfall_global_int(4306) == 0)) then begin
                    call Damage_Calculation(get_sfall_global_int(3212), get_sfall_global_int(3211), get_sfall_global_int(3213), 0, 0);
                end
                else begin
                    if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777305) and (get_sfall_global_int(4306) == 0)) then begin
                        call Damage_Calculation(get_sfall_global_int(2312), get_sfall_global_int(2311), get_sfall_global_int(2313), 0, 0);
                    end
                    else begin
                        if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777313) and (get_sfall_global_int(4306) == 0)) then begin
                            call Damage_Calculation(get_sfall_global_int(3912), get_sfall_global_int(3911), get_sfall_global_int(3913), 0, 0);
                        end
                        else begin
                            if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777323) and (get_sfall_global_int(4306) == 0)) then begin
                                call Damage_Calculation(get_sfall_global_int(3112), get_sfall_global_int(3111), get_sfall_global_int(3113), 0, 0);
                            end
                            else begin
                                if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777352) and (get_sfall_global_int(4306) == 0)) then begin
                                    call Damage_Calculation(get_sfall_global_int(2412), get_sfall_global_int(2411), get_sfall_global_int(2413), 0, 0);
                                end
                                else begin
                                    if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777368) and (get_sfall_global_int(4306) == 0)) then begin
                                        call Damage_Calculation(get_sfall_global_int(2812), get_sfall_global_int(2811), get_sfall_global_int(2813), 0, 0);
                                    end
                                    else begin
                                        if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777291) and (get_sfall_global_int(4306) == 0)) then begin
                                            call Damage_Calculation(get_sfall_global_int(3712), get_sfall_global_int(3711), get_sfall_global_int(3713), 0, 0);
                                        end
                                        else begin
                                            if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777278) and (get_sfall_global_int(4306) == 0)) then begin
                                                call Damage_Calculation(get_sfall_global_int(4012), get_sfall_global_int(4011), get_sfall_global_int(4013), 0, 0);
                                            end
                                            else begin
                                                if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777379) and (get_sfall_global_int(4306) == 0)) then begin
                                                    call Damage_Calculation(get_sfall_global_int(2512), get_sfall_global_int(2511), get_sfall_global_int(2513), 0, 0);
                                                end
                                                else begin
                                                    if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777380) and (get_sfall_global_int(4306) == 0)) then begin
                                                        call Damage_Calculation(get_sfall_global_int(3412), get_sfall_global_int(3411), get_sfall_global_int(3413), 0, 0);
                                                    end
                                                    else begin
                                                        if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777859) and (get_sfall_global_int(4306) == 0)) then begin
                                                            call Damage_Calculation(get_sfall_global_int(3012), get_sfall_global_int(3011), get_sfall_global_int(3013), 0, 0);
                                                        end
                                                        else begin
                                                            if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777558) and (get_sfall_global_int(4306) == 0)) then begin
                                                                call Damage_Calculation(get_sfall_global_int(2712), get_sfall_global_int(2711), get_sfall_global_int(2713), 0, 0);
                                                            end
                                                            else begin
                                                                if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777687) and (get_sfall_global_int(4306) == 0)) then begin
                                                                    call Damage_Calculation(get_sfall_global_int(2912), get_sfall_global_int(2911), get_sfall_global_int(2913), 0, 0);
                                                                end
                                                                else begin
                                                                    if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777766) and (get_sfall_global_int(4306) == 0)) then begin
                                                                        call Damage_Calculation(get_sfall_global_int(2612), get_sfall_global_int(2611), get_sfall_global_int(2613), 0, 0);
                                                                    end
                                                                    else begin
                                                                        if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777762) and (get_sfall_global_int(4306) == 0)) then begin
                                                                            call Damage_Calculation(get_sfall_global_int(3312), get_sfall_global_int(3311), get_sfall_global_int(3313), 0, 0);
                                                                        end
                                                                        else begin
                                                                            if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777785) and (get_sfall_global_int(4306) == 0)) then begin
                                                                                call Damage_Calculation(get_sfall_global_int(3812), get_sfall_global_int(3811), get_sfall_global_int(3813), 0, 0);
                                                                            end
                                                                            else begin
                                                                                if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777718) and (get_sfall_global_int(4306) == 0)) then begin
                                                                                    call Damage_Calculation(get_sfall_global_int(4612), get_sfall_global_int(4611), get_sfall_global_int(4613), 0, 0);
                                                                                end
                                                                                else begin
                                                                                    if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777720) and (get_sfall_global_int(4306) == 0)) then begin
                                                                                        call Damage_Calculation(get_sfall_global_int(4712), get_sfall_global_int(4711), get_sfall_global_int(4713), 0, 0);
                                                                                    end
                                                                                    else begin
                                                                                        if ((obj_in_party(attacker)) or (attacker == dude_obj) and (obj_pid(attacker) == 16777719) and (get_sfall_global_int(4306) == 0)) then begin
                                                                                            call Damage_Calculation(get_sfall_global_int(4812), get_sfall_global_int(4811), get_sfall_global_int(4813), 0, 0);
                                                                                        end
                                                                                        else begin
                                                                                            if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
                                                                                                call Damage_Calculation(get_sfall_global_int(2195), get_sfall_global_int(2194), get_sfall_global_int(2199), get_sfall_global_int(2198), get_sfall_global_int(4262));
                                                                                            end
                                                                                        end
                                                                                    end
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure CalcCrit(variable arg0)
begin
    value := 0;
    weapon_state := get_attack_type;
    if (weapon_state == 9) then begin
        value := 5;
    end
    else begin
        if (weapon_state == 10) then begin
            value := 15;
        end
        else begin
            if (weapon_state == 11) then begin
                value := 5;
            end
            else begin
                if (weapon_state == 12) then begin
                    value := 15;
                end
                else begin
                    if (weapon_state == 13) then begin
                        value := 40;
                    end
                    else begin
                        if (weapon_state == 16) then begin
                            value := 5;
                        end
                        else begin
                            if (weapon_state == 18) then begin
                                value := 10;
                            end
                            else begin
                                if (weapon_state == 19) then begin
                                    value := 50;
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    if (has_trait(TRAIT_TRAIT, attacker, TRAIT_finesse)) then begin
        value := value + 10;
    end
    if (attacker == dude_obj) then begin
        value := value + get_critter_extra_stat(dude_obj, 15) + get_critter_base_stat(dude_obj, 15);
    end
    else begin
        value := value + get_critter_extra_stat(attacker, 15) + get_critter_base_stat(attacker, 15) + arg0;
    end
    if (body_part == 0) then begin
        value := value + get_sfall_global_int(4422);
    end
    else begin
        if (body_part == 1) then begin
            value := value + get_sfall_global_int(4423);
        end
        else begin
            if (body_part == 2) then begin
                value := value + get_sfall_global_int(4424);
            end
            else begin
                if (body_part == 3) then begin
                    value := value + get_sfall_global_int(4425);
                end
                else begin
                    if (body_part == 4) then begin
                        value := value + get_sfall_global_int(4426);
                    end
                    else begin
                        if (body_part == 5) then begin
                            value := value + get_sfall_global_int(4427);
                        end
                        else begin
                            if (body_part == 6) then begin
                                value := value + get_sfall_global_int(4428);
                            end
                            else begin
                                if (body_part == 7) then begin
                                    value := value + get_sfall_global_int(4429);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return value;
end

procedure Knockdown(variable arg0)
begin
    if (attacker == dude_obj) then begin
        if (has_fake_perk("Stun")) then begin
            if (random(1, 100) >= (100 - (has_fake_perk("Stun") * get_sfall_global_int(105)))) then begin
                one := 1;
                if (get_sfall_global_int(6011)) then begin
                    fifteen := 1;
                    call Drop_Weapons(target);
                end
            end
        end
        if ((art_anim(obj_art_fid(target)) != 20) and (art_anim(obj_art_fid(target)) != 21)) then begin
            if (has_fake_perk("Disarm")) then begin
                if (random(1, 100) >= (100 - (has_fake_perk("Disarm") * get_sfall_global_int(108)))) then begin
                    two := 1;
                end
            end
        end
        if (has_fake_perk("Knockdown")) then begin
            if (random(1, 100) > (100 - (has_fake_perk("Knockdown") * get_sfall_global_int(111)))) then begin
                fifteen := 1;
                call Drop_Weapons(target);
            end
        end
        if (has_fake_perk("Mild Stun")) then begin
            if (random(1, 100) > (100 - (has_fake_perk("Mild Stun") * get_sfall_global_int(193)))) then begin
                sixteen := 1;
            end
        end
    end
    else begin
        if ((art_anim(obj_art_fid(target)) != 20) and (art_anim(obj_art_fid(target)) != 21)) then begin
            if (arg0 > 0) then begin
                if (random(1, 100) >= (100 - arg0)) then begin
                    if (target == dude_obj) then begin
                        if (has_fake_perk("Knockdown Imunity") < 1) then begin
                            two := 1;
                        end
                    end
                    else begin
                        if ((obj_in_party(target)) or (target == dude_obj)) then begin
                            if (has_fake_perk("Knockdown Imunity") < 2) then begin
                                two := 1;
                            end
                        end
                        else begin
                            two := 1;
                        end
                    end
                end
            end
        end
    end
    if (ten == 1) then begin
        if (random(1, 100) > (100 - get_sfall_global_int(4313))) then begin
            if (not(has_fake_perk("Stun")) and (attacker == dude_obj) or (attacker != dude_obj)) then begin
                one := 1;
                if (get_sfall_global_int(6011)) then begin
                    fifteen := 1;
                    call Drop_Weapons(target);
                end
            end
        end
        if (random(1, 100) > (100 - get_sfall_global_int(4314))) then begin
            if (not(has_fake_perk("Mild Stun")) and (attacker == dude_obj) or (attacker != dude_obj) and (target != dude_obj)) then begin
                sixteen := 1;
            end
        end
        if ((body_part == 0) and (target != dude_obj)) then begin
            one := 1;
            if (random(1, 100) > (100 - get_sfall_global_int(4430))) then begin
                eight := 1;
            end
            if (get_sfall_global_int(6011)) then begin
                fifteen := 1;
                call Drop_Weapons(target);
            end
        end
        else begin
            if (body_part == 1) then begin
                five := 1;
                if (get_sfall_global_int(6011)) then begin
                    call Drop_Weapons(target);
                    fifteen := 1;
                end
            end
            else begin
                if (body_part == 2) then begin
                    six := 1;
                    if (get_sfall_global_int(6011)) then begin
                        call Drop_Weapons(target);
                        fifteen := 1;
                    end
                end
                else begin
                    if (body_part == 4) then begin
                        four := 1;
                    end
                    else begin
                        if (body_part == 5) then begin
                            three := 1;
                        end
                        else begin
                            if (body_part == 6) then begin
                                seven := 1;
                            end
                            else begin
                                if ((body_part == 7) and (target != dude_obj)) then begin
                                    sixteen := 1;
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    call Get_Weapon_Perks();
    if (Weapon_Knockback == 1) then begin
        chance_for_full_armor_penetrate := 100 - (floor(ModifiedThreshold()) - floor(ModifiedResistance() / (2 * 1)));
        if (random(1, 100) <= get_sfall_global_int(4421)) then begin
            if (target == dude_obj) then begin
                if (has_fake_perk("Knockdown Imunity") < 1) then begin
                    two := 1;
                end
            end
            else begin
                if ((obj_in_party(target)) or (target == dude_obj)) then begin
                    if (has_fake_perk("Knockdown Imunity") < 2) then begin
                        two := 1;
                    end
                end
                else begin
                    two := 1;
                end
            end
        end
    end
    return RebuildBitFlagField();
end

procedure GetFloatValue(variable arg0)
begin
    decimal := 0;
    if (arg0 > 0) then begin
        while (arg0 >= 1000) do begin
            arg0 := arg0 - 1000;
            decimal := decimal + 10.00000;
        end
        while (arg0 >= 500) do begin
            arg0 := arg0 - 500;
            decimal := decimal + 5.00000;
        end
        while (arg0 >= 100) do begin
            arg0 := arg0 - 100;
            decimal := decimal + 1.00000;
        end
        while (arg0 >= 50) do begin
            arg0 := arg0 - 50;
            decimal := decimal + 0.50000;
        end
        while (arg0 >= 10) do begin
            arg0 := arg0 - 10;
            decimal := decimal + 0.10000;
        end
        while (arg0 >= 5) do begin
            arg0 := arg0 - 5;
            decimal := decimal + 0.05000;
        end
        while (arg0 >= 1) do begin
            arg0 := arg0 - 1;
            decimal := decimal + 0.01000;
        end
    end
    else begin
        if (arg0 < 0) then begin
            while (arg0 <= -1000) do begin
                arg0 := arg0 + 1000;
                decimal := decimal + 10.00000;
            end
            while (arg0 <= -500) do begin
                arg0 := arg0 + 500;
                decimal := decimal + 5.00000;
            end
            while (arg0 <= -100) do begin
                arg0 := arg0 + 100;
                decimal := decimal + 1.00000;
            end
            while (arg0 <= -50) do begin
                arg0 := arg0 + 50;
                decimal := decimal + 0.50000;
            end
            while (arg0 <= -10) do begin
                arg0 := arg0 + 10;
                decimal := decimal + 0.10000;
            end
            while (arg0 <= -5) do begin
                arg0 := arg0 + 5;
                decimal := decimal + 0.05000;
            end
            while (arg0 <= -1) do begin
                arg0 := arg0 + 1;
                decimal := decimal + 0.01000;
            end
            if (arg0 == 0) then begin
                decimal := decimal + 1.00000;
            end
            decimal := 0;
        end
    end
    return decimal;
end

procedure DamageType
begin
    if (obj_pid(attack_weapon) > 0) then begin
        value := get_proto_data(obj_pid(attack_weapon), 48);
    end
    else begin
        value := get_proto_data(obj_pid(attacker), 400);
    end
    return value;
end

procedure CombatDifficulty
begin
    value := 0;
    if ((combat_difficulty == 1) or (attacker == dude_obj)) then begin
        value := get_sfall_global_int(4310);
    end
    else begin
        if (combat_difficulty == 0) then begin
            value := get_sfall_global_int(4309);
        end
        else begin
            if (combat_difficulty == 2) then begin
                value := get_sfall_global_int(4311);
            end
        end
    end
    return GetFloatValue(value);
end

procedure Get_Min
begin
    attack_min := 0;
    proto_minimum_damage := get_proto_data(obj_pid(attack_weapon), 40);
    if (proto_minimum_damage == -1) then begin
        proto_minimum_damage := 1;
        weapon_state := get_attack_type;
        if (weapon_state == 9) then begin
            attack_min := 5;
        end
        else begin
            if (weapon_state == 10) then begin
                attack_min := 7;
            end
            else begin
                if (weapon_state == 11) then begin
                    attack_min := 7;
                end
                else begin
                    if (weapon_state == 12) then begin
                        attack_min := 7;
                        unarmed_armor_piercing := 1;
                    end
                    else begin
                        if (weapon_state == 13) then begin
                            attack_min := 10;
                            unarmed_armor_piercing := 1;
                        end
                        else begin
                            if (weapon_state == 14) then begin
                                attack_min := 5;
                            end
                            else begin
                                if (weapon_state == 15) then begin
                                    attack_min := 7;
                                end
                                else begin
                                    if (weapon_state == 16) then begin
                                        attack_min := 9;
                                    end
                                    else begin
                                        if (weapon_state == 17) then begin
                                            attack_min := 7;
                                        end
                                        else begin
                                            if (weapon_state == 18) then begin
                                                attack_min := 9;
                                                unarmed_armor_piercing := 1;
                                            end
                                            else begin
                                                if (weapon_state == 19) then begin
                                                    attack_min := 12;
                                                    unarmed_armor_piercing := 1;
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    else begin
        if (Get_Skill() == 3) then begin
            attack_min := 1;
        end
    end
    if ((Get_Skill() == 2) or (Get_Skill() == 1) or (Get_Skill() == 0)) then begin
        if (attacker == dude_obj) then begin
            attack_min := attack_min + proto_minimum_damage + (has_fake_perk("Minimum Range Damage") * get_sfall_global_int(114)) + (2 * has_trait(TRAIT_PERK, dude_obj, PERK_bonus_ranged_damage));
        end
        else begin
            attack_min := attack_min + proto_minimum_damage;
        end
    end
    else begin
        if ((Get_Skill() == 3) or (Get_Skill() == 4)) then begin
            if (attacker == dude_obj) then begin
                attack_min := attack_min + (get_sfall_global_int(91) * has_fake_perk("Minimum HtH Damage")) + proto_minimum_damage;
            end
            else begin
                attack_min := attack_min + proto_minimum_damage;
            end
        end
        else begin
            if (attacker == dude_obj) then begin
                attack_min := attack_min + proto_minimum_damage;
            end
            else begin
                attack_min := attack_min + proto_minimum_damage;
            end
        end
    end
    attack_min := attack_min + Calculate_Facing_Bonus(target, attacker);
    return attack_min;
end

procedure Get_Max
begin
    attack_max := 0;
    proto_maximum_damage := get_proto_data(obj_pid(attack_weapon), 44);
    if (proto_maximum_damage == -1) then begin
        proto_maximum_damage := 2;
        weapon_state := get_attack_type;
        if (weapon_state == 9) then begin
            attack_max := 5;
        end
        else begin
            if (weapon_state == 10) then begin
                attack_max := 7;
            end
            else begin
                if (weapon_state == 11) then begin
                    attack_max := 7;
                end
                else begin
                    if (weapon_state == 12) then begin
                        attack_max := 7;
                        unarmed_armor_piercing := 1;
                    end
                    else begin
                        if (weapon_state == 13) then begin
                            attack_max := 10;
                            unarmed_armor_piercing := 1;
                        end
                        else begin
                            if (weapon_state == 14) then begin
                                attack_max := 5;
                            end
                            else begin
                                if (weapon_state == 15) then begin
                                    attack_max := 7;
                                end
                                else begin
                                    if (weapon_state == 16) then begin
                                        attack_max := 9;
                                    end
                                    else begin
                                        if (weapon_state == 17) then begin
                                            attack_max := 7;
                                        end
                                        else begin
                                            if (weapon_state == 18) then begin
                                                attack_max := 9;
                                                unarmed_armor_piercing := 1;
                                            end
                                            else begin
                                                if (weapon_state == 19) then begin
                                                    attack_max := 12;
                                                    unarmed_armor_piercing := 1;
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    else begin
        if (Get_Skill() == 3) then begin
            attack_max := 2;
        end
    end
    if ((Get_Skill() == 2) or (Get_Skill() == 1) or (Get_Skill() == 0)) then begin
        if (attacker == dude_obj) then begin
            attack_max := attack_max + (has_fake_perk("Bonus Ranged Damage") * get_sfall_global_int(28)) + proto_maximum_damage + (2 * has_trait(TRAIT_PERK, dude_obj, PERK_bonus_ranged_damage));
        end
        else begin
            attack_max := attack_max + proto_maximum_damage;
        end
    end
    else begin
        if ((Get_Skill() == 3) or (Get_Skill() == 4)) then begin
            if (attacker == dude_obj) then begin
                attack_max := attack_max + get_critter_extra_stat(dude_obj, 11) + get_critter_base_stat(dude_obj, 11) + proto_maximum_damage;
            end
            else begin
                attack_max := attack_max + (get_critter_extra_stat(attacker, 11) + get_critter_base_stat(attacker, 11)) + proto_maximum_damage;
            end
        end
        else begin
            if (attacker == dude_obj) then begin
                attack_max := attack_max + proto_maximum_damage;
            end
            else begin
                attack_max := attack_max + proto_maximum_damage;
            end
        end
    end
    attack_max := attack_max + Calculate_Facing_Bonus(target, attacker);
    return attack_max;
end

procedure Get_Skill
begin
    weapon_flags := get_proto_data(obj_pid(attack_weapon), 24);
    weapon_anim := get_proto_data(obj_pid(attack_weapon), 36);
    weapon_damage_type := DamageType();
    if (obj_pid(attack_weapon) == -1) then begin
        return 3;
    end
    else begin
        weapon_1st_attack_mode := MainAttack(weapon_flags);
        weapon_2nd_attack_mode := SecondaryAttack(weapon_flags);
        big_gun_flag := IsBigGun(weapon_flags);
        weapon_attack_type := get_attack_type;
        if ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 1) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 1)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 1)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 1)) or ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 2)) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 2)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 2)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 2))) then begin
            return 3;
        end
        else begin
            if ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 3) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 3)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 3)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 3)) or ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 4)) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 4)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 4)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 4))) then begin
                return 4;
            end
            else begin
                if ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 5) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 5)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 5)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 5))) then begin
                    return 5;
                end
                else begin
                    if ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 8) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 8)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 8)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 8)) and (weapon_damage_type == 2)) then begin
                        return 18;
                    end
                    else begin
                        if ((big_gun_flag == 1) and ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 7)) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 7)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 7)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 7)) or ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 6)) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 6)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 6)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 6)) or ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 8)) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 8)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 8)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 8))) then begin
                            return 1;
                        end
                        else begin
                            if ((weapon_damage_type == 1) or ((weapon_damage_type >= 3) and (weapon_damage_type < 6)) and ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 7) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 7)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 7)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 7)) or ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 6)) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 6)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 6)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 6)))) then begin
                                return 2;
                            end
                            else begin
                                if ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 7) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 7)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 7)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 7)) or ((weapon_attack_type == 0) and (weapon_1st_attack_mode == 6)) or ((weapon_attack_type == 1) and (weapon_2nd_attack_mode == 6)) or ((weapon_attack_type == 2) and (weapon_1st_attack_mode == 6)) or ((weapon_attack_type == 3) and (weapon_2nd_attack_mode == 6))) then begin
                                    return 0;
                                end
                                else begin
                                    return 3;
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure Get_Burst
begin
    weapon_stat := get_proto_data(obj_pid(attack_weapon), 24);
    weapon_statb := get_proto_data(obj_pid(attack_weapon), 84);
    if (obj_pid(attack_weapon) > 0) then begin
        weapon_statc := MainAttack(weapon_stat);
        weapon_statd := SecondaryAttack(weapon_stat);
    end
    else begin
        weapon_statc := -1;
        weapon_statd := -1;
    end
    weapon_state := get_attack_type;
    if ((weapon_state == 0) and (weapon_statc == 7) or ((weapon_state == 1) and (weapon_statd == 7)) or ((weapon_state == 2) and (weapon_statc == 7) or ((weapon_state == 3) and (weapon_statd == 7))) and (weapon_statb > 1)) then begin
        C1 := weapon_statb / 6;
        L := (weapon_statb + 1) / 3;
        R := weapon_statb / 3;
        C2 := weapon_statb - C1 - L - R;
        curRounds_S := 0;
        curRounds_S1 := 0;
        curRounds_L := 0;
        curRounds_L1 := 0;
        curRounds_R := 0;
        curRounds_R1 := 0;
        bullets_into_target := 0;
        if ((tile_distance_objs(attacker, target) == 1) or (attack_ammo_pid == 95) or (weapon_statb <= 3)) then begin
            bullets_into_target := 0;
            count := 0;
            while (count < C1) do begin
                if (random(1, 100) <= (get_sfall_global_int(4420) - 10)) then begin
                    curRounds_S := curRounds_S + 1;
                end
                count := count + 1;
            end
            count := 0;
            while (count < C2) do begin
                if (random(1, 100) <= (get_sfall_global_int(4420) - 10)) then begin
                    curRounds_S1 := curRounds_S1 + 1;
                end
                count := count + 1;
            end
            count := 0;
            while (count < L) do begin
                if (random(1, 100) <= (get_sfall_global_int(4420) - 20)) then begin
                    curRounds_L1 := curRounds_L1 + 1;
                end
                count := count + 1;
            end
            count := 0;
            while (count < R) do begin
                if (random(1, 100) <= (get_sfall_global_int(4420) - 20)) then begin
                    curRounds_R1 := curRounds_R1 + 1;
                end
                count := count + 1;
            end
        end
        else begin
            bullets_into_target := 0;
            count := 0;
            while (count < C1) do begin
                if (random(1, 100) <= (get_sfall_global_int(4420) - 10)) then begin
                    curRounds_S := curRounds_S + 1;
                end
                count := count + 1;
            end
            count := 0;
            while (count < C2) do begin
                if (random(1, 100) <= (get_sfall_global_int(4420) - 10)) then begin
                    curRounds_S1 := curRounds_S1 + 1;
                end
                count := count + 1;
            end
        end
        bullets_into_target := curRounds_S + curRounds_S1 + curRounds_L + curRounds_L1 + curRounds_R + curRounds_R1;
    end
    else begin
        bullets_into_target := 1;
    end
    if (bullets_into_target > 8) then begin
        bullets_into_target := 8;
    end
    return bullets_into_target;
end

procedure Get_Ammo_Mod_A
begin
    if (attack_ammo_pid > 0) then begin
        return get_proto_data(attack_ammo_pid, 52);
    end
    else begin
        return 1;
    end
end

procedure Get_Ammo_Mod_B
begin
    if (attack_ammo_pid > 0) then begin
        return get_proto_data(attack_ammo_pid, 56);
    end
    else begin
        return 1;
    end
end

procedure Get_Ammo_DR_Mod
begin
    if (attack_ammo_pid > 0) then begin
        return get_proto_data(attack_ammo_pid, 48);
    end
    else begin
        return 1;
    end
end

procedure Get_Weapon_Perks
begin
    if (attack_weapon > 0) then begin
        weapon_perk := get_proto_data(obj_pid(attack_weapon), 80);
        if (weapon_perk == 67) then begin
            Weapon_Flameboy := 1;
        end
        else begin
            if (weapon_perk == 66) then begin
                Weapon_Night_Sight := 1;
            end
            else begin
                if (weapon_perk == 65) then begin
                    Weapon_Fast_Reload := 1;
                end
                else begin
                    if (weapon_perk == 64) then begin
                        Weapon_Scope_Range := 1;
                    end
                    else begin
                        if (weapon_perk == 61) then begin
                            Weapon_Knockback := 1;
                        end
                        else begin
                            if (weapon_perk == 60) then begin
                                Weapon_Penetrate := 1;
                            end
                            else begin
                                if (weapon_perk == 59) then begin
                                    Weapon_Accurate := 1;
                                end
                                else begin
                                    if (weapon_perk == 58) then begin
                                        Weapon_Long_Range := 1;
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure MainAttack(variable arg0)
begin
    call ConvertBitFlagField(arg0);
    arg0 := 0;
    if (convert_four == 1) then begin
        arg0 := arg0 + 8;
    end
    if (convert_three == 1) then begin
        arg0 := arg0 + 4;
    end
    if (convert_two == 1) then begin
        arg0 := arg0 + 2;
    end
    if (convert_one == 1) then begin
        arg0 := arg0 + 1;
    end
    return arg0;
end

procedure SecondaryAttack(variable arg0)
begin
    call ConvertBitFlagField(arg0);
    arg0 := 0;
    if (convert_eight == 1) then begin
        arg0 := arg0 + 8;
    end
    if (convert_seven == 1) then begin
        arg0 := arg0 + 4;
    end
    if (convert_six == 1) then begin
        arg0 := arg0 + 2;
    end
    if (convert_five == 1) then begin
        arg0 := arg0 + 1;
    end
    return arg0;
end

procedure BonusDamage(variable arg0, variable arg1)
begin
    value := 0;
    if (attacker == dude_obj) then begin
        if (has_trait(TRAIT_PERK, dude_obj, PERK_living_anatomy_perk) and (get_proto_data(obj_pid(target), 388) != 2)) then begin
            value := value + 5;
        end
        if ((DamageType() == 1) and has_fake_perk("Bonus Damage(Laser)")) then begin
            value := value + (has_fake_perk("Bonus Damage(Laser)") * get_sfall_global_int(1950));
        end
        else begin
            if ((DamageType() == 2) and has_fake_perk("Bonus Damage(Fire)")) then begin
                value := value + (has_fake_perk("Bonus Damage(Fire)") * get_sfall_global_int(178));
            end
            else begin
                if ((DamageType() == 3) and has_fake_perk("Bonus Damage(Plasma)")) then begin
                    value := value + (has_fake_perk("Bonus Damage(Plasma)") * get_sfall_global_int(1979));
                end
                else begin
                    if ((DamageType() == 4) and has_fake_perk("Bonus Damage(Electrical)")) then begin
                        value := value + (has_fake_perk("Bonus Damage(Electrical)") * get_sfall_global_int(2008));
                    end
                    else begin
                        if ((DamageType() == 6) and has_fake_perk("Bonus Damage(Explosion)")) then begin
                            value := value + (has_fake_perk("Bonus Damage(Explosion)") * get_sfall_global_int(2037));
                        end
                    end
                end
            end
        end
    end
    if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
        value := value + random(arg0, arg1);
    end
    return value;
end

procedure DamageFormula(variable arg0, variable arg1)
begin
    random_damage := random(Get_Min() + arg0, Get_Max() + arg1);
    if (random_damage > 0) then begin
        random_damage := random_damage * Get_Ammo_Mod_A();
    end
    if (random_damage > 0) then begin
        random_damage := floor(random_damage / Get_Ammo_Mod_B());
    end
    if (random_damage > 0) then begin
        random_damage := floor(random_damage * CombatDifficulty());
    end
    if (random_damage > 0) then begin
        random_damage := random_damage - ModifiedThreshold();
    end
    if (random_damage > 0) then begin
        random_damage := floor(random_damage * ModifiedResistance());
    end
    return random_damage;
end

procedure Damage_Calculation(variable arg0, variable arg1, variable arg2, variable arg3, variable arg4)
begin
    variable LVar5 := 0;
    variable LVar6 := 0;
    variable LVar7 := 0;
    cycles := 0;
    total := 0;
    cycle_value := 0;
    nine := 1;
    attacker_special_flag := 256;
    call Roll_Critical_Check(arg3, arg4);
    cycle_value := Get_Burst();
    if ((target == dude_obj) and has_fake_perk("Lightning Reflexes")) then begin
        anim(dude_obj, 1000, rotation_to_tile(dude_tile, tile_num(attacker)));
    end
    while (cycles < cycle_value) do begin
        if (LVar7 == 0) then begin
            LVar7 := 1;
            random_damage := DamageFormula(arg0, arg1);
        end
        else begin
            random_damage := DamageFormula(0, 0);
        end
        cycles := cycles + 1;
        if (random_damage < 1) then begin
            random_damage := 0;
        end
        total := total + random_damage;
        random_damage := 0;
    end
    random_damage := total + BonusDamage(0, 0);
    if ((get_sfall_global_int(6000) == 0) and (get_sfall_global_int(6069) == 0)) then begin
        if ((target == dude_obj) and (get_sfall_global_int(6011) == 1) or (target != dude_obj)) then begin
            if ((random_damage > 0) and (get_sfall_global_int(6001) == 1) or (get_sfall_global_int(6001) == 0)) then begin
                if ((attacker_flags bwand 512) and (get_sfall_global_int(6002) == 1) or (get_sfall_global_int(6002) == 0)) then begin
                    if ((Right_Arm(target_flags, target, body_part) == 1) or (Left_Arm(target_flags, target, body_part) == 1)) then begin
                        call Drop_Weapons(target);
                        fifteen := 1;
                    end
                end
            end
        end
    end
    if (random_damage > 0) then begin
        if (ten == 1) then begin
            random_damage := CalculateCriticalDamage(random_damage);
            attacker_special_flag := attacker_special_flag + 512;
        end
        random_damage := Back_Stab(random_damage);
        target_special_flag := Knockdown(arg2);
    end
    call Unlimited_Ammo();
    set_sfall_return(random_damage);
    set_sfall_return(0);
    set_sfall_return(target_special_flag);
    set_sfall_return(attacker_special_flag);
end

procedure GetThreshold
begin
    if (target == dude_obj) then begin
        if (DamageType() == 0) then begin
            threshold := get_critter_extra_stat(dude_obj, 17) + get_critter_base_stat(dude_obj, 17);
        end
        else begin
            if (DamageType() == 1) then begin
                threshold := get_critter_extra_stat(dude_obj, 18) + get_critter_base_stat(dude_obj, 18);
            end
            else begin
                if (DamageType() == 2) then begin
                    threshold := get_critter_extra_stat(dude_obj, 19) + get_critter_base_stat(dude_obj, 19);
                end
                else begin
                    if (DamageType() == 3) then begin
                        threshold := get_critter_extra_stat(dude_obj, 20) + get_critter_base_stat(dude_obj, 20);
                    end
                    else begin
                        if (DamageType() == 4) then begin
                            threshold := get_critter_extra_stat(dude_obj, 21) + get_critter_base_stat(dude_obj, 21);
                        end
                        else begin
                            if (DamageType() == 5) then begin
                                threshold := get_critter_extra_stat(dude_obj, 22) + get_critter_base_stat(dude_obj, 22);
                            end
                            else begin
                                if (DamageType() == 6) then begin
                                    threshold := get_critter_extra_stat(dude_obj, 23) + get_critter_base_stat(dude_obj, 23);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    else begin
        if (DamageType() == 0) then begin
            threshold := get_critter_extra_stat(target, 17) + get_critter_base_stat(target, 17);
        end
        else begin
            if (DamageType() == 1) then begin
                threshold := get_critter_extra_stat(target, 18) + get_critter_base_stat(target, 18);
            end
            else begin
                if (DamageType() == 2) then begin
                    threshold := get_critter_extra_stat(target, 19) + get_critter_base_stat(target, 19);
                end
                else begin
                    if (DamageType() == 3) then begin
                        threshold := get_critter_extra_stat(target, 20) + get_critter_base_stat(target, 20);
                    end
                    else begin
                        if (DamageType() == 4) then begin
                            threshold := get_critter_extra_stat(target, 21) + get_critter_base_stat(target, 21);
                        end
                        else begin
                            if (DamageType() == 5) then begin
                                threshold := get_critter_extra_stat(target, 22) + get_critter_base_stat(target, 22);
                            end
                            else begin
                                if (DamageType() == 6) then begin
                                    threshold := get_critter_extra_stat(target, 23) + get_critter_base_stat(target, 23);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return threshold;
end

procedure ModifiedThreshold
begin
    threshold := GetThreshold();
    if (((obj_in_party(target)) == 0) and (target != dude_obj) or ((target != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
        threshold := threshold + get_sfall_global_int(2193);
    end
    if (Is_Ap_Ammo() and (threshold > 0)) then begin
        threshold := threshold / get_sfall_global_int(4264);
    end
    if ((twelve == 1) and (threshold > 0)) then begin
        threshold := threshold / get_sfall_global_int(4263);
    end
    else begin
        if ((full_armor_penetrate == 1) and (threshold > 0)) then begin
            threshold := threshold / get_sfall_global_int(4432);
        end
        else begin
            if ((unarmed_armor_piercing == 1) and (threshold > 0)) then begin
                threshold := threshold / get_sfall_global_int(4433);
            end
            else begin
                if ((Weapon_Penetrate == 1) and (threshold > 0)) then begin
                    threshold := threshold / get_sfall_global_int(4431);
                end
            end
        end
    end
    return threshold;
end

procedure GetResistance
begin
    if (target == dude_obj) then begin
        if (DamageType() == 0) then begin
            resistance := get_critter_extra_stat(dude_obj, 24) + get_critter_base_stat(dude_obj, 24);
        end
        else begin
            if (DamageType() == 1) then begin
                resistance := get_critter_extra_stat(dude_obj, 25) + get_critter_base_stat(dude_obj, 25);
            end
            else begin
                if (DamageType() == 2) then begin
                    resistance := get_critter_extra_stat(dude_obj, 26) + get_critter_base_stat(dude_obj, 26);
                end
                else begin
                    if (DamageType() == 3) then begin
                        resistance := get_critter_extra_stat(dude_obj, 27) + get_critter_base_stat(dude_obj, 27);
                    end
                    else begin
                        if (DamageType() == 4) then begin
                            resistance := get_critter_extra_stat(dude_obj, 28) + get_critter_base_stat(dude_obj, 28);
                        end
                        else begin
                            if (DamageType() == 5) then begin
                                resistance := get_critter_extra_stat(dude_obj, 29) + get_critter_base_stat(dude_obj, 29);
                            end
                            else begin
                                if (DamageType() == 6) then begin
                                    resistance := get_critter_extra_stat(dude_obj, 30) + get_critter_base_stat(dude_obj, 30);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    else begin
        if (DamageType() == 0) then begin
            resistance := get_critter_extra_stat(target, 24) + get_critter_base_stat(target, 24);
        end
        else begin
            if (DamageType() == 1) then begin
                resistance := get_critter_extra_stat(target, 25) + get_critter_base_stat(target, 25);
            end
            else begin
                if (DamageType() == 2) then begin
                    resistance := get_critter_extra_stat(target, 26) + get_critter_base_stat(target, 26);
                end
                else begin
                    if (DamageType() == 3) then begin
                        resistance := get_critter_extra_stat(target, 27) + get_critter_base_stat(target, 27);
                    end
                    else begin
                        if (DamageType() == 4) then begin
                            resistance := get_critter_extra_stat(target, 28) + get_critter_base_stat(target, 28);
                        end
                        else begin
                            if (DamageType() == 5) then begin
                                resistance := get_critter_extra_stat(target, 29) + get_critter_base_stat(target, 29);
                            end
                            else begin
                                if (DamageType() == 6) then begin
                                    resistance := get_critter_extra_stat(target, 30) + get_critter_base_stat(target, 30);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return resistance;
end

procedure ModifiedResistance
begin
    resistance := Get_Ammo_DR_Mod() + GetResistance();
    if (((obj_in_party(target)) == 0) and (target != dude_obj) or ((target != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
        resistance := resistance + get_sfall_global_int(2192);
    end
    if (has_trait(TRAIT_TRAIT, attacker, TRAIT_finesse)) then begin
        resistance := resistance + 30;
    end
    if (Is_Ap_Ammo() and (resistance > 0)) then begin
        resistance := resistance / get_sfall_global_int(4264);
    end
    if ((twelve == 1) and (resistance > 0)) then begin
        resistance := resistance / get_sfall_global_int(4263);
    end
    else begin
        if ((full_armor_penetrate == 1) and (resistance > 0)) then begin
            resistance := resistance / get_sfall_global_int(4432);
        end
        else begin
            if ((unarmed_armor_piercing == 1) and (resistance > 0)) then begin
                resistance := resistance / get_sfall_global_int(4433);
            end
            else begin
                if ((Weapon_Penetrate == 1) and (resistance > 0)) then begin
                    resistance := resistance / get_sfall_global_int(4431);
                end
            end
        end
    end
    if (resistance >= 100) then begin
        resistance := 0.00000;
    end
    else begin
        if (resistance <= 0) then begin
            resistance := 1.00000;
        end
        else begin
            if (resistance > 0) then begin
                resistance := 1.00000 - GetFloatValue(resistance);
            end
        end
    end
    return resistance;
end

procedure Drop_Weapons(variable arg0)
begin
    variable LVar1 := 0;
    variable LVar2 := 0;
    variable LVar3 := 0;
    LVar3 := get_proto_data(obj_pid(arg0), 32);
    if (critter_inven_obj(arg0, 1)) then begin
        LVar1 := critter_inven_obj(arg0, 1);
        if (not(LVar3 bwand 64)) then begin
            rm_obj_from_inven(arg0, LVar1);
            LVar2 := tile_num_in_direction(tile_num(arg0), random(0, 5), random(1, 2));
            while (tile_contains_obj_pid(LVar2, dude_elevation, 33554499) != 0) do begin
                LVar2 := tile_num_in_direction(tile_num(arg0), random(0, 5), random(1, 2));
            end
            move_to(LVar1, LVar2, elevation(arg0));
        end
    end
    if (critter_inven_obj(arg0, 2)) then begin
        LVar1 := critter_inven_obj(arg0, 2);
        if (not(LVar3 bwand 64)) then begin
            rm_obj_from_inven(arg0, LVar1);
            LVar2 := tile_num_in_direction(tile_num(arg0), random(0, 5), random(1, 2));
            while (tile_contains_obj_pid(LVar2, dude_elevation, 33554499) != 0) do begin
                LVar2 := tile_num_in_direction(tile_num(arg0), random(0, 5), random(1, 2));
            end
            move_to(LVar1, LVar2, elevation(arg0));
        end
    end
end

procedure CalculateCriticalDamage(variable arg0)
begin
    random_roll := random(1, 100);
    perk_math := 0;
    if ((Get_Skill() == 3) or (Get_Skill() == 4)) then begin
        if (attacker == dude_obj) then begin
            if (ten == 1) then begin
                eight := 0;
                if (has_fake_perk("HtH/Melee Criticals Multiplied") > 0) then begin
                    perk_math := perk_math + (has_fake_perk("HtH/Melee Criticals Multiplied") * GetFloatValue(get_sfall_global_int(102)));
                end
                if (has_trait(TRAIT_PERK, dude_obj, PERK_better_criticals)) then begin
                    perk_math := perk_math + 0.20000;
                end
                perk_mod_math := perk_math * random_damage;
                random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                random_damage := floor(random_damage + perk_mod_math);
                if (has_trait(TRAIT_PERK, dude_obj, PERK_slayer)) then begin
                    if (random(1, 100) > (100 - get_sfall_global_int(4308))) then begin
                        if (target != dude_obj) then begin
                            eight := 1;
                        end
                        else begin
                            eight := 0;
                        end
                    end
                end
            end
        end
        else begin
            if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
                if (ten == 1) then begin
                    if (get_sfall_global_int(4300) > 0) then begin
                        perk_math := perk_math + GetFloatValue(get_sfall_global_int(4300));
                    end
                    perk_mod_math := perk_math * random_damage;
                    random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                    random_damage := floor(random_damage + perk_mod_math);
                end
            end
            else begin
                if (ten == 1) then begin
                    if ((obj_in_party(attacker)) or (attacker == dude_obj)) then begin
                        if ((obj_pid(attacker) == 16777376) and has_fake_perk("Multiply Criticals(Myron)") or ((obj_pid(attacker) == 16777377) and has_fake_perk("Multiply Criticals(Marcus)")) or ((obj_pid(attacker) == 16777305) and has_fake_perk("Multiply Criticals(Cassidy)")) or ((obj_pid(attacker) == 16777313) and has_fake_perk("Multiply Criticals(Sulik)")) or ((obj_pid(attacker) == 16777323) and has_fake_perk("Multiply Criticals(Lenny)")) or ((obj_pid(attacker) == 16777352) and has_fake_perk("Multiply Criticals(Cyberdog)")) or ((obj_pid(attacker) == 16777368) and has_fake_perk("Multiply Criticals(Goris)")) or ((obj_pid(attacker) == 16777291) and has_fake_perk("Multiply Criticals(Robobrain)")) or ((obj_pid(attacker) == 16777278) and has_fake_perk("Multiply Criticals(Vic)")) or ((obj_pid(attacker) == 16777379) and has_fake_perk("Multiply Criticals(Davin)")) or ((obj_pid(attacker) == 16777380) and has_fake_perk("Multiply Criticals(Miria)")) or ((obj_pid(attacker) == 16777859) and has_fake_perk("Multiply Criticals(Klint)")) or ((obj_pid(attacker) == 16777558) and has_fake_perk("Multiply Criticals(Dogmeat)")) or ((obj_pid(attacker) == 16777687) and has_fake_perk("Multiply Criticals(K9)")) or ((obj_pid(attacker) == 16777766) and has_fake_perk("Multiply Criticals(Diago)")) or ((obj_pid(attacker) == 16777762) and has_fake_perk("Multiply Criticals(Meris)")) or ((obj_pid(attacker) == 16777718) and has_fake_perk("Multiply Criticals(Kitsune)")) or ((obj_pid(attacker) == 16777720) and has_fake_perk("Multiply Criticals(Cat Jules)")) or ((obj_pid(attacker) == 16777719) and has_fake_perk("Multiply Criticals(Dex)")) or ((obj_pid(attacker) == 16777785) and has_fake_perk("Multiply Criticals(Skynet)"))) then begin
                            perk_math := perk_math + PartyCritMultiplier();
                        end
                        perk_mod_math := perk_math * random_damage;
                        random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                        random_damage := floor(random_damage + perk_mod_math);
                    end
                end
            end
        end
    end
    else begin
        if ((Get_Skill() == 2) or (Get_Skill() == 1) or (Get_Skill() == 0)) then begin
            if (attacker == dude_obj) then begin
                if (ten == 1) then begin
                    if (has_fake_perk("Ranged Criticals Multiplied") > 0) then begin
                        perk_math := perk_math + (has_fake_perk("Ranged Criticals Multiplied") * GetFloatValue(get_sfall_global_int(4269)));
                    end
                    if (has_trait(TRAIT_PERK, dude_obj, PERK_better_criticals)) then begin
                        perk_math := perk_math + 0.20000;
                    end
                    perk_mod_math := perk_math * random_damage;
                    random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                    random_damage := floor(random_damage + perk_mod_math);
                end
            end
            if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
                if (ten == 1) then begin
                    if (get_sfall_global_int(4300) > 0) then begin
                        perk_math := perk_math + GetFloatValue(get_sfall_global_int(4300));
                    end
                    perk_mod_math := perk_math * random_damage;
                    random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                    random_damage := floor(random_damage + perk_mod_math);
                end
            end
            else begin
                if (ten == 1) then begin
                    if ((obj_in_party(attacker)) or (attacker == dude_obj)) then begin
                        if ((obj_pid(attacker) == 16777376) and has_fake_perk("Multiply Criticals(Myron)") or ((obj_pid(attacker) == 16777377) and has_fake_perk("Multiply Criticals(Marcus)")) or ((obj_pid(attacker) == 16777305) and has_fake_perk("Multiply Criticals(Cassidy)")) or ((obj_pid(attacker) == 16777313) and has_fake_perk("Multiply Criticals(Sulik)")) or ((obj_pid(attacker) == 16777323) and has_fake_perk("Multiply Criticals(Lenny)")) or ((obj_pid(attacker) == 16777352) and has_fake_perk("Multiply Criticals(Cyberdog)")) or ((obj_pid(attacker) == 16777368) and has_fake_perk("Multiply Criticals(Goris)")) or ((obj_pid(attacker) == 16777291) and has_fake_perk("Multiply Criticals(Robobrain)")) or ((obj_pid(attacker) == 16777278) and has_fake_perk("Multiply Criticals(Vic)")) or ((obj_pid(attacker) == 16777379) and has_fake_perk("Multiply Criticals(Davin)")) or ((obj_pid(attacker) == 16777380) and has_fake_perk("Multiply Criticals(Miria)")) or ((obj_pid(attacker) == 16777859) and has_fake_perk("Multiply Criticals(Klint)")) or ((obj_pid(attacker) == 16777558) and has_fake_perk("Multiply Criticals(Dogmeat)")) or ((obj_pid(attacker) == 16777687) and has_fake_perk("Multiply Criticals(K9)")) or ((obj_pid(attacker) == 16777766) and has_fake_perk("Multiply Criticals(Diago)")) or ((obj_pid(attacker) == 16777762) and has_fake_perk("Multiply Criticals(Meris)")) or ((obj_pid(attacker) == 16777718) and has_fake_perk("Multiply Criticals(Kitsune)")) or ((obj_pid(attacker) == 16777720) and has_fake_perk("Multiply Criticals(Cat Jules)")) or ((obj_pid(attacker) == 16777719) and has_fake_perk("Multiply Criticals(Dex)")) or ((obj_pid(attacker) == 16777785) and has_fake_perk("Multiply Criticals(Skynet)"))) then begin
                            perk_math := perk_math + PartyCritMultiplier();
                        end
                        perk_mod_math := perk_math * random_damage;
                        random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                        random_damage := floor(random_damage + perk_mod_math);
                    end
                end
            end
            if ((Get_Skill() == 1) and (attack_ammo_pid == 34)) then begin
                random_damage := floor(random_damage * 0.40000);
            end
        end
        else begin
            if (ten == 1) then begin
                if (attacker == dude_obj) then begin
                    if (has_trait(TRAIT_PERK, dude_obj, PERK_better_criticals)) then begin
                        perk_math := perk_math + 0.20000;
                    end
                    perk_mod_math := perk_math * random_damage;
                    random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                    random_damage := floor(random_damage + perk_mod_math);
                end
                if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
                    if (get_sfall_global_int(4300) > 0) then begin
                        perk_math := perk_math + GetFloatValue(get_sfall_global_int(4300));
                    end
                    perk_mod_math := perk_math * random_damage;
                    random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                    random_damage := floor(random_damage + perk_mod_math);
                end
                else begin
                    if ((obj_in_party(attacker)) or (attacker == dude_obj)) then begin
                        if ((obj_pid(attacker) == 16777376) and has_fake_perk("Multiply Criticals(Myron)") or ((obj_pid(attacker) == 16777377) and has_fake_perk("Multiply Criticals(Marcus)")) or ((obj_pid(attacker) == 16777305) and has_fake_perk("Multiply Criticals(Cassidy)")) or ((obj_pid(attacker) == 16777313) and has_fake_perk("Multiply Criticals(Sulik)")) or ((obj_pid(attacker) == 16777323) and has_fake_perk("Multiply Criticals(Lenny)")) or ((obj_pid(attacker) == 16777352) and has_fake_perk("Multiply Criticals(Cyberdog)")) or ((obj_pid(attacker) == 16777368) and has_fake_perk("Multiply Criticals(Goris)")) or ((obj_pid(attacker) == 16777291) and has_fake_perk("Multiply Criticals(Robobrain)")) or ((obj_pid(attacker) == 16777278) and has_fake_perk("Multiply Criticals(Vic)")) or ((obj_pid(attacker) == 16777379) and has_fake_perk("Multiply Criticals(Davin)")) or ((obj_pid(attacker) == 16777380) and has_fake_perk("Multiply Criticals(Miria)")) or ((obj_pid(attacker) == 16777859) and has_fake_perk("Multiply Criticals(Klint)")) or ((obj_pid(attacker) == 16777558) and has_fake_perk("Multiply Criticals(Dogmeat)")) or ((obj_pid(attacker) == 16777687) and has_fake_perk("Multiply Criticals(K9)")) or ((obj_pid(attacker) == 16777766) and has_fake_perk("Multiply Criticals(Diago)")) or ((obj_pid(attacker) == 16777762) and has_fake_perk("Multiply Criticals(Meris)")) or ((obj_pid(attacker) == 16777718) and has_fake_perk("Multiply Criticals(Kitsune)")) or ((obj_pid(attacker) == 16777720) and has_fake_perk("Multiply Criticals(Cat Jules)")) or ((obj_pid(attacker) == 16777719) and has_fake_perk("Multiply Criticals(Dex)")) or ((obj_pid(attacker) == 16777785) and has_fake_perk("Multiply Criticals(Skynet)"))) then begin
                            perk_math := perk_math + PartyCritMultiplier();
                        end
                    end
                    perk_mod_math := perk_math * random_damage;
                    random_damage := random_damage * GetFloatValue(get_sfall_global_int(4305));
                    random_damage := floor(random_damage + perk_mod_math);
                end
            end
        end
    end
    return random_damage;
end

procedure PartyCritMultiplier
begin
    value := 0;
    if ((obj_pid(attacker) == 16777376) and has_fake_perk("Multiply Criticals(Myron)")) then begin
        value := has_fake_perk("Multiply Criticals(Myron)") * GetFloatValue(get_sfall_global_int(4302));
    end
    else begin
        if ((obj_pid(attacker) == 16777377) and has_fake_perk("Multiply Criticals(Marcus)")) then begin
            value := has_fake_perk("Multiply Criticals(Marcus)") * GetFloatValue(get_sfall_global_int(4302));
        end
        else begin
            if ((obj_pid(attacker) == 16777305) and has_fake_perk("Multiply Criticals(Cassidy)")) then begin
                value := has_fake_perk("Multiply Criticals(Cassidy)") * GetFloatValue(get_sfall_global_int(4302));
            end
            else begin
                if ((obj_pid(attacker) == 16777313) and has_fake_perk("Multiply Criticals(Sulik)")) then begin
                    value := has_fake_perk("Multiply Criticals(Sulik)") * GetFloatValue(get_sfall_global_int(4302));
                end
                else begin
                    if ((obj_pid(attacker) == 16777323) and has_fake_perk("Multiply Criticals(Lenny)")) then begin
                        value := has_fake_perk("Multiply Criticals(Lenny)") * GetFloatValue(get_sfall_global_int(4302));
                    end
                    else begin
                        if ((obj_pid(attacker) == 16777352) and has_fake_perk("Multiply Criticals(Cyberdog)")) then begin
                            value := has_fake_perk("Multiply Criticals(Cyberdog)") * GetFloatValue(get_sfall_global_int(4302));
                        end
                        else begin
                            if ((obj_pid(attacker) == 16777368) and has_fake_perk("Multiply Criticals(Goris)")) then begin
                                value := has_fake_perk("Multiply Criticals(Goris)") * GetFloatValue(get_sfall_global_int(4302));
                            end
                            else begin
                                if ((obj_pid(attacker) == 16777291) and has_fake_perk("Multiply Criticals(Robobrain)")) then begin
                                    value := has_fake_perk("Multiply Criticals(Robobrain)") * GetFloatValue(get_sfall_global_int(4302));
                                end
                                else begin
                                    if ((obj_pid(attacker) == 16777278) and has_fake_perk("Multiply Criticals(Vic)")) then begin
                                        value := has_fake_perk("Multiply Criticals(Vic)") * GetFloatValue(get_sfall_global_int(4302));
                                    end
                                    else begin
                                        if ((obj_pid(attacker) == 16777379) and has_fake_perk("Multiply Criticals(Davin)")) then begin
                                            value := has_fake_perk("Multiply Criticals(Davin)") * GetFloatValue(get_sfall_global_int(4302));
                                        end
                                        else begin
                                            if ((obj_pid(attacker) == 16777380) and has_fake_perk("Multiply Criticals(Miria)")) then begin
                                                value := has_fake_perk("Multiply Criticals(Miria)") * GetFloatValue(get_sfall_global_int(4302));
                                            end
                                            else begin
                                                if ((obj_pid(attacker) == 16777859) and has_fake_perk("Multiply Criticals(Klint)")) then begin
                                                    value := has_fake_perk("Multiply Criticals(Klint)") * GetFloatValue(get_sfall_global_int(4302));
                                                end
                                                else begin
                                                    if ((obj_pid(attacker) == 16777558) and has_fake_perk("Multiply Criticals(Dogmeat)")) then begin
                                                        value := has_fake_perk("Multiply Criticals(Dogmeat)") * GetFloatValue(get_sfall_global_int(4302));
                                                    end
                                                    else begin
                                                        if ((obj_pid(attacker) == 16777687) and has_fake_perk("Multiply Criticals(K9)")) then begin
                                                            value := has_fake_perk("Multiply Criticals(K9)") * GetFloatValue(get_sfall_global_int(4302));
                                                        end
                                                        else begin
                                                            if ((obj_pid(attacker) == 16777766) and has_fake_perk("Multiply Criticals(Diago)")) then begin
                                                                value := has_fake_perk("Multiply Criticals(Diago)") * GetFloatValue(get_sfall_global_int(4302));
                                                            end
                                                            else begin
                                                                if ((obj_pid(attacker) == 16777762) and has_fake_perk("Multiply Criticals(Meris)")) then begin
                                                                    value := has_fake_perk("Multiply Criticals(Meris)") * GetFloatValue(get_sfall_global_int(4302));
                                                                end
                                                                else begin
                                                                    if ((obj_pid(attacker) == 16777785) and has_fake_perk("Multiply Criticals(Skynet)")) then begin
                                                                        value := has_fake_perk("Multiply Criticals(Skynet)") * GetFloatValue(get_sfall_global_int(4302));
                                                                    end
                                                                    else begin
                                                                        if ((obj_pid(attacker) == 16777718) and has_fake_perk("Multiply Criticals(Kitsune)")) then begin
                                                                            value := has_fake_perk("Multiply Criticals(Kitsune)") * GetFloatValue(get_sfall_global_int(4302));
                                                                        end
                                                                        else begin
                                                                            if ((obj_pid(attacker) == 16777720) and has_fake_perk("Multiply Criticals(Cat Jules)")) then begin
                                                                                value := has_fake_perk("Multiply Criticals(Cat Jules)") * GetFloatValue(get_sfall_global_int(4302));
                                                                            end
                                                                            else begin
                                                                                if ((obj_pid(attacker) == 16777719) and has_fake_perk("Multiply Criticals(Dex)")) then begin
                                                                                    value := has_fake_perk("Multiply Criticals(Dex)") * GetFloatValue(get_sfall_global_int(4302));
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return value;
end

procedure ConvertBitFlagField(variable arg0)
begin
    convert_one := 0;
    convert_two := 0;
    convert_three := 0;
    convert_four := 0;
    convert_five := 0;
    convert_six := 0;
    convert_seven := 0;
    convert_eight := 0;
    convert_nine := 0;
    convert_ten := 0;
    convert_eleven := 0;
    convert_twelve := 0;
    convert_thirteen := 0;
    convert_fourteen := 0;
    convert_fifteen := 0;
    convert_sixteen := 0;
    convert_seventeen := 0;
    convert_eighteen := 0;
    convert_nineteen := 0;
    convert_twenty := 0;
    convert_twenty_one := 0;
    convert_twenty_two := 0;
    convert_twenty_three := 0;
    if (arg0 >= 4194304) then begin
        arg0 := arg0 - 4194304;
        convert_twenty_three := 1;
    end
    if (arg0 >= 2097152) then begin
        arg0 := arg0 - 2097152;
        convert_twenty_two := 1;
    end
    if (arg0 >= 1048576) then begin
        arg0 := arg0 - 1048576;
        convert_twenty_one := 1;
    end
    if (arg0 >= 524288) then begin
        arg0 := arg0 - 524288;
        convert_twenty := 1;
    end
    if (arg0 >= 262144) then begin
        arg0 := arg0 - 262144;
        convert_nineteen := 1;
    end
    if (arg0 >= 131072) then begin
        arg0 := arg0 - 131072;
        convert_eighteen := 1;
    end
    if (arg0 >= 65536) then begin
        arg0 := arg0 - 65536;
        convert_seventeen := 1;
    end
    if (arg0 >= 32768) then begin
        arg0 := arg0 - 32768;
        convert_sixteen := 1;
    end
    if (arg0 >= 16384) then begin
        arg0 := arg0 - 16384;
        convert_fifteen := 1;
    end
    if (arg0 >= 8192) then begin
        arg0 := arg0 - 8192;
        convert_fourteen := 1;
    end
    if (arg0 >= 4096) then begin
        arg0 := arg0 - 4096;
        convert_thirteen := 1;
    end
    if (arg0 >= 2048) then begin
        arg0 := arg0 - 2048;
        convert_twelve := 1;
    end
    if (arg0 >= 1024) then begin
        arg0 := arg0 - 1024;
        convert_eleven := 1;
    end
    if (arg0 >= 512) then begin
        arg0 := arg0 - 512;
        convert_ten := 1;
    end
    if (arg0 >= 256) then begin
        arg0 := arg0 - 256;
        convert_nine := 1;
    end
    if (arg0 >= 128) then begin
        arg0 := arg0 - 128;
        convert_eight := 1;
    end
    if (arg0 >= 64) then begin
        arg0 := arg0 - 64;
        convert_seven := 1;
    end
    if (arg0 >= 32) then begin
        arg0 := arg0 - 32;
        convert_six := 1;
    end
    if (arg0 >= 16) then begin
        arg0 := arg0 - 16;
        convert_five := 1;
    end
    if (arg0 >= 8) then begin
        arg0 := arg0 - 8;
        convert_four := 1;
    end
    if (arg0 >= 4) then begin
        arg0 := arg0 - 4;
        convert_three := 1;
    end
    if (arg0 >= 2) then begin
        arg0 := arg0 - 2;
        convert_two := 1;
    end
    if (arg0 >= 1) then begin
        arg0 := arg0 - 1;
        convert_one := 1;
    end
    return arg0;
end

procedure RebuildBitFlagField
begin
    value := 0;
    if (twenty_three == 1) then begin
        value := value + 4194304;
    end
    if (twenty_two == 1) then begin
        value := value + 2097152;
    end
    if (twenty_one == 1) then begin
        value := value + 1048576;
    end
    if (twenty == 1) then begin
        value := value + 524288;
    end
    if (nineteen == 1) then begin
        value := value + 262144;
    end
    if (eighteen == 1) then begin
        value := value + 131072;
    end
    if (seventeen == 1) then begin
        value := value + 65536;
    end
    if (sixteen == 1) then begin
        value := value + 32768;
    end
    if (fifteen == 1) then begin
        value := value + 16384;
    end
    if (fourteen == 1) then begin
        value := value + 8192;
    end
    if (thirteen == 1) then begin
        value := value + 4096;
    end
    if (twelve == 1) then begin
        value := value + 2048;
    end
    if (eleven == 1) then begin
        value := value + 1024;
    end
    if (ten == 1) then begin
        value := value + 512;
    end
    if (nine == 1) then begin
        value := value + 256;
    end
    if (eight == 1) then begin
        if (target != dude_obj) then begin
            value := value + 128;
        end
    end
    if (seven == 1) then begin
        value := value + 64;
    end
    if (six == 1) then begin
        value := value + 32;
    end
    if (five == 1) then begin
        value := value + 16;
    end
    if (four == 1) then begin
        value := value + 8;
    end
    if (three == 1) then begin
        value := value + 4;
    end
    if (two == 1) then begin
        value := value + 2;
    end
    if (one == 1) then begin
        value := value + 1;
    end
    return value;
end

procedure Roll_Critical_Check(variable arg0, variable arg1)
begin
    full_armor_penetrate := 0;
    chance_for_full_armor_penetrate := 0;
    random_roll := random(1, 100);
    if ((Get_Skill() == 3) or (Get_Skill() == 4)) then begin
        if (attacker == dude_obj) then begin
            if ((random_roll > (100 - CalcCrit(arg0))) or has_trait(TRAIT_PERK, dude_obj, PERK_slayer)) then begin
                ten := 1;
            end
        end
        else begin
            if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
                if (random_roll > (100 - CalcCrit(arg0))) then begin
                    ten := 1;
                end
            end
            else begin
                if (random_roll > (100 - CalcCrit(arg0))) then begin
                    if ((obj_in_party(attacker)) or (attacker == dude_obj)) then begin
                        ten := 1;
                    end
                end
            end
        end
    end
    else begin
        if ((Get_Skill() == 2) or (Get_Skill() == 1) or (Get_Skill() == 0)) then begin
            if (attacker == dude_obj) then begin
                if (has_trait(TRAIT_PERK, dude_obj, PERK_sniper) and (random(1, 100) >= (100 - (get_sfall_global_int(4266) - dude_luck))) or (random_roll > (100 - CalcCrit(arg0)))) then begin
                    ten := 1;
                end
            end
            if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
                if (random_roll > (100 - CalcCrit(arg0))) then begin
                    ten := 1;
                end
            end
            else begin
                if (random_roll > (100 - CalcCrit(arg0))) then begin
                    if ((obj_in_party(attacker)) or (attacker == dude_obj)) then begin
                        ten := 1;
                    end
                end
            end
        end
    end
    if (Get_Skill() == 5) then begin
        if (attacker == dude_obj) then begin
            if (has_fake_perk("Bullseye") or (random_roll > (100 - CalcCrit(arg0)))) then begin
                ten := 1;
            end
        end
        else begin
            if (random_roll > (100 - CalcCrit(arg0))) then begin
                if ((obj_in_party(attacker)) or (attacker == dude_obj)) then begin
                    ten := 1;
                end
            end
        end
    end
    else begin
        if (random_roll > (100 - CalcCrit(arg0))) then begin
            if (attacker == dude_obj) then begin
                ten := 1;
            end
            if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
                ten := 1;
            end
            else begin
                if ((obj_in_party(attacker)) or (attacker == dude_obj)) then begin
                    ten := 1;
                end
            end
        end
    end
    if ((DamageType() == 0) and (attack_ammo_pid > 0)) then begin
        chance_for_full_armor_penetrate := 80;
        if (((Get_Ammo_Mod_A() / Get_Ammo_Mod_B()) > 1) and (Get_Ammo_DR_Mod() > 0)) then begin
            chance_for_full_armor_penetrate := 100 - floor(3 * GetThreshold()) - floor(GetResistance() / (2 * 1));
        end
        if (((Get_Ammo_Mod_A() / Get_Ammo_Mod_B()) == 1) and (Get_Ammo_DR_Mod() == 0)) then begin
            chance_for_full_armor_penetrate := 100 - floor(2 * GetThreshold()) - floor(GetResistance() / (2 * 1));
        end
        if (((Get_Ammo_Mod_A() / Get_Ammo_Mod_B()) == 1) and (Get_Ammo_DR_Mod() < 0) and (Get_Ammo_DR_Mod() >= -20)) then begin
            chance_for_full_armor_penetrate := 100 - floor(1 * GetThreshold()) - floor(GetResistance() / (2 * 1));
        end
        if (((Get_Ammo_Mod_A() / Get_Ammo_Mod_B()) < 1) and (Get_Ammo_DR_Mod() < -20) and (Get_Ammo_DR_Mod() > -50)) then begin
            chance_for_full_armor_penetrate := 100 - floor(0.30000 * GetThreshold()) - floor(GetResistance() / (2 * 3));
        end
        if (((Get_Ammo_Mod_A() / Get_Ammo_Mod_B()) < 1) and (Get_Ammo_DR_Mod() <= -50)) then begin
            chance_for_full_armor_penetrate := 100 - floor(0.15000 * GetThreshold()) - floor(GetResistance() / (2 * 10));
        end
        if (random(1, 100) > chance_for_full_armor_penetrate) then begin
            full_armor_penetrate := 1;
        end
    end
    if (has_fake_perk("Bypass Armor Imunity") < 1) then begin
        random_roll := random(1, 100);
        if (attacker == dude_obj) then begin
            if (has_fake_perk("Bypass Armor Expert")) then begin
                if (random_roll >= (100 - (get_sfall_global_int(4232) * has_fake_perk("Bypass Armor Expert")))) then begin
                    twelve := 1;
                end
            end
            else begin
                if (random_roll >= 100) then begin
                    twelve := 1;
                end
            end
        end
        else begin
            if (arg1 > 0) then begin
                if (random_roll >= (100 - arg1)) then begin
                    twelve := 1;
                end
            end
            else begin
                if (random_roll >= 100) then begin
                    twelve := 1;
                end
            end
        end
    end
end

procedure Unlimited_Ammo
begin
    if (((obj_in_party(attacker)) == 0) and (attacker != dude_obj) or ((attacker != dude_obj) and (get_sfall_global_int(4306) == 1)) and (get_sfall_global_int(2200) == 1)) then begin
        if (obj_pid(attack_weapon) > 0) then begin
            if (attack_ammo_pid > 0) then begin
                if (get_weapon_ammo_count(attack_weapon) < get_proto_data(obj_pid(attack_weapon), 96)) then begin
                    set_weapon_ammo_count(attack_weapon, get_proto_data(obj_pid(attack_weapon), 96));
                end
            end
        end
    end
end

procedure Get_Facing(variable arg0, variable arg1)
begin
    if (get_sfall_global_int(6200) != 1) then begin
        return 0;
    end
    if ((arg0 == dude_obj) and has_fake_perk("Lightning Reflexes")) then begin
        return 1;
    end
    if (obj_get_rot(arg1) == obj_get_rot(arg0)) then begin
        return 4;
    end
    else begin
        if ((obj_get_rot(arg1) == (obj_get_rot(arg0) + 1)) or (obj_get_rot(arg1) == (obj_get_rot(arg0) - 1))) then begin
            return 3;
        end
        else begin
            if ((obj_get_rot(arg1) == (obj_get_rot(arg0) + 2)) or (obj_get_rot(arg1) == (obj_get_rot(arg0) - 2))) then begin
                return 2;
            end
            else begin
                if ((obj_get_rot(arg1) == (obj_get_rot(arg0) + 3)) or (obj_get_rot(arg1) == (obj_get_rot(arg0) - 3))) then begin
                    return 1;
                end
            end
        end
    end
end

procedure Calculate_Facing_Bonus(variable arg0, variable arg1)
begin
    variable LVar2 := 0;
    if (Get_Facing(arg0, arg1) == 4) then begin
        LVar2 := get_sfall_global_int(4506);
    end
    else begin
        if (Get_Facing(arg0, arg1) == 3) then begin
            LVar2 := get_sfall_global_int(4507);
        end
        else begin
            if (Get_Facing(arg0, arg1) == 2) then begin
                LVar2 := get_sfall_global_int(4508);
            end
            else begin
                if (Get_Facing(arg0, arg1) == 1) then begin
                    LVar2 := get_sfall_global_int(4509);
                end
            end
        end
    end
    return LVar2;
end

procedure Back_Stab(variable arg0)
begin
    if (attacker == dude_obj) then begin
        anim(dude_obj, 1000, rotation_to_tile(dude_tile, tile_num(target)));
    end
    if ((attacker == dude_obj) and has_fake_perk("Backstab") and (Get_Facing(target, attacker) == 4) and (tile_distance_objs(attacker, target) <= 1)) then begin
        arg0 := floor(arg0 * GetFloatValue(get_sfall_global_int(4538)));
        float_msg(dude_obj, "Backstab!", FLOAT_MSG_GREEN);
    end
    return arg0;
end

procedure Right_Arm(variable arg0, variable arg1, variable arg2)
begin
    if (get_sfall_global_int(6003) == 1) then begin
        if ((arg0 bwand 32) or (critter_state(arg1) bwand 32) or (six == 1)) then begin
            if (get_sfall_global_int(6010) == 1) then begin
                if (arg2 == 2) then begin
                    return 1;
                end
                else begin
                    return 0;
                end
            end
            else begin
                return 1;
            end
        end
        else begin
            return 0;
        end
    end
    else begin
        return 1;
    end
end

procedure Left_Arm(variable arg0, variable arg1, variable arg2)
begin
    if (get_sfall_global_int(6003) == 1) then begin
        if ((arg0 bwand 16) or (critter_state(arg1) bwand 16) or (five == 1)) then begin
            if (get_sfall_global_int(6010) == 1) then begin
                if (arg2 == 1) then begin
                    return 1;
                end
                else begin
                    return 0;
                end
            end
            else begin
                return 1;
            end
        end
        else begin
            return 0;
        end
    end
    else begin
        return 1;
    end
end

procedure Is_Ap_Ammo
begin
    if ((attack_ammo_pid == 30) or (attack_ammo_pid == 33) or (attack_ammo_pid == 30) or (attack_ammo_pid == 36) or (attack_ammo_pid == 37) or (attack_ammo_pid == 362)) then begin
        return 1;
    end
    return 0;
end

procedure modify_critter(variable arg0)
begin
    if (((obj_in_party(arg0)) == 0) and (arg0 != dude_obj) and (obj_pid(arg0) != 16777376) and (obj_pid(arg0) != 16777377) and (obj_pid(arg0) != 16777305) and (obj_pid(arg0) != 16777313) and (obj_pid(arg0) != 16777323) and (obj_pid(arg0) != 16777352) and (obj_pid(arg0) != 16777368) and (obj_pid(arg0) != 16777291) and (obj_pid(arg0) != 16777278) and (obj_pid(arg0) != 16777379) and (obj_pid(arg0) != 16777380) and (obj_pid(arg0) != 16777859) and (obj_pid(arg0) != 16777558) and (obj_pid(arg0) != 16777687) and (obj_pid(arg0) != 16777766) and (obj_pid(arg0) != 16777762) and (obj_pid(arg0) != 16777785) and (obj_pid(arg0) != 16777720) and (obj_pid(arg0) != 16777718) and (obj_pid(arg0) != 16777719) and (get_sfall_global_int(4306) == 0) or ((arg0 != dude_obj) and (get_sfall_global_int(4306) == 1))) then begin
        if (get_critter_base_stat(arg0, 29) < 10) then begin
            set_critter_base_stat(arg0, 29, 10);
            if (get_sfall_global_int(2197) > 0) then begin
                if ((get_critter_extra_stat(arg0, 7) + get_critter_base_stat(arg0, 7) + get_sfall_global_int(2197)) > 2000) then begin
                    set_critter_extra_stat(arg0, 7, 2000 - (get_critter_extra_stat(arg0, 7) + get_critter_base_stat(arg0, 7)));
                end
                else begin
                    set_critter_extra_stat(arg0, 7, get_critter_extra_stat(arg0, 7) + get_sfall_global_int(2197));
                end
            end
            if (get_sfall_global_int(2190) > 0) then begin
                if ((get_critter_extra_stat(arg0, 8) + get_critter_base_stat(arg0, 8) + get_sfall_global_int(2190)) > (get_pc_stat(PCSTAT_level) + 5)) then begin
                    set_critter_extra_stat(arg0, 8, get_pc_stat(PCSTAT_level) + 5 - (get_critter_extra_stat(arg0, 8) + get_critter_base_stat(arg0, 8)));
                end
                else begin
                    set_critter_extra_stat(arg0, 8, get_critter_extra_stat(arg0, 8) + get_sfall_global_int(2190));
                end
            end
            if (get_sfall_global_int(2196) > 0) then begin
                if ((get_critter_extra_stat(arg0, 9) + get_critter_base_stat(arg0, 9) + get_sfall_global_int(2196)) > (get_pc_stat(PCSTAT_level) + 5)) then begin
                    set_critter_extra_stat(arg0, 9, get_pc_stat(PCSTAT_level) + 5 - (get_critter_extra_stat(arg0, 9) + get_critter_base_stat(arg0, 9)));
                end
                else begin
                    set_critter_extra_stat(arg0, 9, get_critter_extra_stat(arg0, 9) + get_sfall_global_int(2196));
                end
            end
        end
    end
end

procedure CalculateBonuses
begin
    math := 0;
    if (get_sfall_global_int(2161) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2161);
    end
    if ((get_sfall_global_int(2162) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2162);
    end
    if (get_sfall_global_int(2163) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2163);
        end
        else begin
            math := get_sfall_global_int(2163);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > (get_pc_stat(PCSTAT_level) + 5)) then begin
        math := get_pc_stat(PCSTAT_level) + 5;
    end
    set_sfall_global(2190, math);
    math := 0;
    if (get_sfall_global_int(2164) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2164);
    end
    if ((get_sfall_global_int(2165) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2165);
    end
    if (get_sfall_global_int(2166) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2166);
        end
        else begin
            math := get_sfall_global_int(2166);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 200) then begin
        math := 200;
    end
    set_sfall_global(2191, math);
    math := 0;
    if (get_sfall_global_int(2167) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2167);
    end
    if ((get_sfall_global_int(2168) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2168);
    end
    if (get_sfall_global_int(2169) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2169);
        end
        else begin
            math := get_sfall_global_int(2169);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 95) then begin
        math := 95;
    end
    set_sfall_global(2192, math);
    math := 0;
    if (get_sfall_global_int(2170) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2170);
    end
    if ((get_sfall_global_int(2171) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2171);
    end
    if (get_sfall_global_int(2172) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2172);
        end
        else begin
            math := get_sfall_global_int(2172);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > (get_pc_stat(PCSTAT_level) + 5)) then begin
        math := get_pc_stat(PCSTAT_level) + 5;
    end
    set_sfall_global(2193, math);
    math := 0;
    if (get_sfall_global_int(2173) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2173);
    end
    if ((get_sfall_global_int(2174) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2174);
    end
    if (get_sfall_global_int(2175) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2175);
        end
        else begin
            math := get_sfall_global_int(2175);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 200) then begin
        math := 200;
    end
    set_sfall_global(2194, math);
    math := 0;
    if (get_sfall_global_int(2176) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2176);
    end
    if ((get_sfall_global_int(2177) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2177);
    end
    if (get_sfall_global_int(2178) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2178);
        end
        else begin
            math := get_sfall_global_int(2178);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 200) then begin
        math := 200;
    end
    set_sfall_global(2195, math);
    math := 0;
    if (get_sfall_global_int(2179) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2179);
    end
    if ((get_sfall_global_int(2180) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2180);
    end
    if (get_sfall_global_int(2181) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2181);
        end
        else begin
            math := get_sfall_global_int(2181);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > (get_pc_stat(PCSTAT_level) + 5)) then begin
        math := get_pc_stat(PCSTAT_level) + 5;
    end
    set_sfall_global(2196, math);
    math := 0;
    if (get_sfall_global_int(2182) > 0) then begin
        math := get_pc_stat(PCSTAT_level) * get_sfall_global_int(2182);
    end
    if (get_sfall_global_int(2183) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2183);
        end
        else begin
            math := get_sfall_global_int(2183);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 2000) then begin
        math := 2000;
    end
    set_sfall_global(2197, math);
    math := 0;
    if (get_sfall_global_int(2184) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2184);
    end
    if ((get_sfall_global_int(2185) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2185);
    end
    if (get_sfall_global_int(2186) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2186);
        end
        else begin
            math := get_sfall_global_int(2186);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 90) then begin
        math := 90;
    end
    set_sfall_global(2198, math);
    math := 0;
    if (get_sfall_global_int(2187) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(2187);
    end
    if ((get_sfall_global_int(2188) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(2188);
    end
    if (get_sfall_global_int(2189) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(2189);
        end
        else begin
            math := get_sfall_global_int(2189);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 90) then begin
        math := 90;
    end
    set_sfall_global(2199, math);
    math := 0;
    if (get_sfall_global_int(4259) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(4259);
    end
    if ((get_sfall_global_int(4260) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(4260);
    end
    if (get_sfall_global_int(4261) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(4261);
        end
        else begin
            math := get_sfall_global_int(4261);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 90) then begin
        math := 90;
    end
    set_sfall_global(4262, math);
    math := 0;
    if (get_sfall_global_int(4297) > 0) then begin
        math := get_pc_stat(PCSTAT_level) / get_sfall_global_int(4297);
    end
    if ((get_sfall_global_int(4298) > 0) and (math > 0)) then begin
        math := math * get_sfall_global_int(4298);
    end
    if (get_sfall_global_int(4299) > 0) then begin
        if (math > 0) then begin
            math := math + get_sfall_global_int(4299);
        end
        else begin
            math := get_sfall_global_int(4299);
        end
    end
    else begin
        if (math > 0) then begin
            math := math;
        end
        else begin
            math := 0;
        end
    end
    if (math > 200) then begin
        math := 200;
    end
    set_sfall_global(4300, math);
end

procedure HealCritter(variable arg0)
begin
    if (((obj_in_party(arg0)) == 0) and (arg0 != dude_obj) or ((arg0 != dude_obj) and (get_sfall_global_int(4306) == 1)) and not(combat_is_initialized) and not(critter_state(arg0) bwand 2)) then begin
        critter_heal(arg0, 2000);
        critter_injure(arg0, 4 bwor 8 bwor 16 bwor 32 bwor 64 bwor 8388608);
    end
end

procedure MapEnterHealCritter(variable arg0)
begin
    if (((obj_in_party(arg0)) == 0) and (arg0 != dude_obj) or ((arg0 != dude_obj) and (get_sfall_global_int(4306) == 1)) and not(critter_state(arg0) bwand 2)) then begin
        critter_heal(arg0, 2000);
    end
end

procedure IsBigGun(variable arg0)
begin
    call ConvertBitFlagField(arg0);
    arg0 := 0;
    if (convert_nine == 1) then begin
        arg0 := 1;
    end
    return arg0;
end
