variable ValueOfRollCheck := 1;

procedure getTimeBit;
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;

import variable i_field_obj;

variable field_count;

procedure Do_Damage_Critter(variable arg0);
procedure Check_State;
procedure Delay_Field;
procedure Destroy_Field;
procedure Do_Flicker;
procedure timed_event_p_proc;


procedure getTimeBit
begin
    variable LVar0 := 0;
    LVar0 := game_time_hour;
    if ((LVar0 >= 100) and (LVar0 <= 159)) then begin
        return 1;
    end
    if ((LVar0 >= 200) and (LVar0 <= 259)) then begin
        return 2;
    end
    if ((LVar0 >= 300) and (LVar0 <= 359)) then begin
        return 4;
    end
    if ((LVar0 >= 400) and (LVar0 <= 459)) then begin
        return 8;
    end
    if ((LVar0 >= 500) and (LVar0 <= 559)) then begin
        return 16;
    end
    if ((LVar0 >= 600) and (LVar0 <= 659)) then begin
        return 32;
    end
    if ((LVar0 >= 700) and (LVar0 <= 759)) then begin
        return 64;
    end
    if ((LVar0 >= 800) and (LVar0 <= 859)) then begin
        return 128;
    end
    if ((LVar0 >= 900) and (LVar0 <= 959)) then begin
        return 256;
    end
    if ((LVar0 >= 1000) and (LVar0 <= 1059)) then begin
        return 512;
    end
    if ((LVar0 >= 1100) and (LVar0 <= 1159)) then begin
        return 1024;
    end
    if ((LVar0 >= 1200) and (LVar0 <= 1259)) then begin
        return 2048;
    end
    if ((LVar0 >= 1300) and (LVar0 <= 1359)) then begin
        return 4096;
    end
    if ((LVar0 >= 1400) and (LVar0 <= 1459)) then begin
        return 8192;
    end
    if ((LVar0 >= 1500) and (LVar0 <= 1559)) then begin
        return 16384;
    end
    if ((LVar0 >= 1600) and (LVar0 <= 1659)) then begin
        return 32768;
    end
    if ((LVar0 >= 1700) and (LVar0 <= 1759)) then begin
        return 65536;
    end
    if ((LVar0 >= 1800) and (LVar0 <= 1859)) then begin
        return 131072;
    end
    if ((LVar0 >= 1900) and (LVar0 <= 1959)) then begin
        return 262144;
    end
    if ((LVar0 >= 2000) and (LVar0 <= 2059)) then begin
        return 524288;
    end
    if ((LVar0 >= 2100) and (LVar0 <= 2159)) then begin
        return 1048576;
    end
    if ((LVar0 >= 2200) and (LVar0 <= 2259)) then begin
        return 2097152;
    end
    if ((LVar0 >= 2300) and (LVar0 <= 2359)) then begin
        return 4194304;
    end
    if ((LVar0 >= 2400) and (LVar0 <= 2459)) then begin
        return 8388608;
    end
    return 0;
    LVar0 := 0;
end

procedure start
begin
    i_field_obj := self_obj;
end

procedure use_p_proc
begin
    script_overrides;
    call Do_Damage_Critter(source_obj);
end

procedure look_at_p_proc
begin
end

procedure description_p_proc
begin
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := action_being_used;
    if (LVar0 == 12) then begin
        if (is_success(roll_vs_skill(dude_obj, LVar0, 0))) then begin
            script_overrides;
            display_mstr(200);
        end
        else begin
            call use_p_proc();
        end
    end
    else begin
        call use_p_proc();
    end
    return 0;
    LVar0 := 0;
end

procedure use_obj_on_p_proc
begin
    call use_p_proc();
end

procedure damage_p_proc
begin
    script_overrides;
    display_mstr(151);
end

procedure map_enter_p_proc
begin
    add_timer_event(self_obj, 0, 1);
end

procedure map_update_p_proc
begin
end

procedure talk_p_proc
begin
end

procedure Do_Damage_Critter(variable arg0)
begin
    if (arg0 == dude_obj) then begin
        critter_dmg(dude_obj, random(10, 20), 0);
        display_mstr(150);
    end
    return 0;
    arg0 := 0;
end

procedure Check_State
begin
    variable LVar0 := 0;
    if (map_var(2) == 1) then begin
        if ((map_var(3) bwand 16) != 0) then begin
            field_count := field_count + 1;
            if (field_count < 30) then begin
                set_obj_visibility(self_obj, field_count bwand 1);
            end
            else begin
                set_map_var(3, map_var(3) bwand (-1 - 16));
                field_count := 0;
            end
        end
        else begin
            if ((map_var(3) bwand 4) != 0) then begin
                if (local_var(0) < 15) then begin
                    set_local_var(0, local_var(0) + 1);
                    set_obj_visibility(self_obj, 1);
                end
                else begin
                    set_map_var(3, map_var(3) bwand (-1 - 4));
                    set_local_var(0, 0);
                    if ((map_var(3) bwand 1) != 0) then begin
                        set_obj_visibility(self_obj, 0);
                    end
                end
            end
            else begin
                if (map_var(3) bwand 1) then begin
                    set_obj_visibility(self_obj, 0);
                end
                else begin
                    if (map_var(3) bwand 2) then begin
                        set_obj_visibility(self_obj, 1);
                        debug_msg("BSFIELD: field should be off and invisible");
                    end
                    else begin
                        if (map_var(3) bwand 8) then begin
                            set_obj_visibility(self_obj, 1);
                            debug_msg("BSFIELD: field should be destroyed and invis");
                        end
                    end
                end
            end
        end
    end
    else begin
        set_obj_visibility(self_obj, 1);
    end
    return 0;
    LVar0 := 0;
end

procedure Delay_Field
begin
    set_map_var(3, map_var(3) bwor 4);
    display_mstr(152);
    call Check_State();
end

procedure Destroy_Field
begin
    set_map_var(3, 0);
    set_map_var(3, map_var(3) bwor 8);
    debug_msg("BSFIELD: cleard the field var should only have destoryed set:" + map_var(3));
    debug_msg("BSFIELD: cleard the field var should only have destoryed set:" + map_var(3));
    debug_msg("BSFIELD: cleard the field var should only have destoryed set:" + map_var(3));
    destroy_object(self_obj);
end

procedure Do_Flicker
begin
    set_map_var(3, map_var(3) bwor 16);
    call Check_State();
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        call Check_State();
        if ((map_var(3) bwand 16) != 0) then begin
            add_timer_event(self_obj, random(1, 5), 1);
        end
        else begin
            add_timer_event(self_obj, 10, 1);
        end
    end
    else begin
        if (fixed_param == 2) then begin
            call Delay_Field();
        end
        else begin
            if (fixed_param == 3) then begin
                call Destroy_Field();
            end
            else begin
                if (fixed_param == 4) then begin
                    call Do_Flicker();
                end
            end
        end
    end
end
