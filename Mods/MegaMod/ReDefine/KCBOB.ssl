variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable Static_Reaction;
variable Evil_Critter;
variable Slavery_Tolerant := 2;
variable Karma_Perception;
variable reaction_bonus_town_rep;
variable reaction_bonus_karma;

procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure push_p_proc;
procedure timed_event_p_proc;
procedure map_update_p_proc;
procedure bob_is_drunk;
procedure NodeBarter;
procedure Node990;
procedure Node998;
procedure Node999;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;

variable Only_Once;
variable mybooze;
variable num_of_bottles;
variable stored_node;
variable drinking;
variable drunk;

procedure move_to_still;
procedure move_to_dwntwn1;
procedure move_to_dwntwn2;
procedure bob_booze;
procedure bob_it_aint_free;
procedure bob_spares;
procedure bob_coil_pipe;
procedure bob_valve;
procedure drink;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure critter_p_proc
begin
    if ((local_var(5) == 2) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        attack(dude_obj);
    end
    if ((global_var(GVAR_KLAMATH_REP_UNION) <= -1) and obj_can_see_obj(self_obj, dude_obj)) then begin
        attack(dude_obj);
    end
    if ((obj_get_rot(self_obj) != 2) and (anim_busy(self_obj) == 0)) then begin
        anim(self_obj, 1000, 2);
    end
    if ((drinking == 1) and (anim_busy(self_obj) == 0)) then begin
        if (tile_num(self_obj) != local_var(10)) then begin
            if ((tile_num(self_obj) != local_var(10)) and (local_var(10) != 0)) then begin
                if ((dest_tile == local_var(10)) and (step_tile < 0)) then begin
                    step_tile := step_tile + 1;
                end
                else begin
                    if (anim_busy(self_obj) == 0) then begin
                        dest_tile := local_var(10);
                        step_tile := local_var(10);
                        animate_move_obj_to_tile(self_obj, step_tile, 0);
                        debug_msg("move_to_point: self_tile == " + tile_num(self_obj));
                        while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), local_var(10)) >= tile_distance(step_tile, local_var(10)))) do begin
                            step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), 1 % tile_distance(step_tile, tile_num(self_obj)));
                            debug_msg("move_to_point: step_tile == " + step_tile);
                            animate_move_obj_to_tile(self_obj, step_tile, 0);
                        end
                        if (anim_busy(self_obj) == 0) then begin
                            if (tile_get_next_critter(tile_num_in_direction(tile_num(self_obj), obj_get_rot(self_obj), 1), elevation(self_obj), 0) != 0) then begin
                                if (anim_busy(self_obj) == 0) then begin
                                    global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), obj_get_rot(self_obj), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                    global_temp := (global_temp + 1) % 6;
                                    while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), obj_get_rot(self_obj), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                        debug_msg("flee loop: rot == " + global_temp);
                                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                        global_temp := (global_temp + 1) % 6;
                                    end
                                end
                            end
                            else begin
                                step_tile := -10;
                            end
                        end
                    end
                    else begin
                        if (tile_distance(tile_num(self_obj), local_var(10)) < tile_distance(dest_tile, local_var(10))) then begin
                            reg_anim_func(2, self_obj);
                        end
                    end
                end
            end
        end
        else begin
            game_ui_enable;
            dialogue_system_enter;
        end
    end
    if (CUR_MAP_KLATRAP) then begin
        if (global_var(GVAR_RESERVED) == 1) then begin
            dialogue_system_enter;
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(5, 2);
    end
end

procedure talk_p_proc
begin
    in_dialog := 1;
    if (drunk == 0) then begin
        if (local_var(6) == 1) then begin
            float_msg(self_obj, mstr(106), FLOAT_MSG_RED);
        end
        else begin
            if (drinking == 1) then begin
                drinking := 0;
                start_gdialog(74, self_obj, 4, -1, -1);
                gsay_start;
                call stored_node();
                gsay_end;
                end_dialogue;
            end
            else begin
                if ((global_var(GVAR_RESERVED) == 1) and (CUR_MAP_KLATRAP)) then begin
                    start_gdialog(74, self_obj, 4, -1, -1);
                    gsay_start;
                    call Node016();
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    if (local_var(4) == 0) then begin
                        start_gdialog(74, self_obj, 4, -1, -1);
                        gsay_start;
                        call Node001();
                        gsay_end;
                        end_dialogue;
                    end
                    else begin
                        if (local_var(4) > 0) then begin
                            start_gdialog(74, self_obj, 4, -1, -1);
                            gsay_start;
                            call Node012();
                            gsay_end;
                            end_dialogue;
                        end
                    end
                end
            end
        end
    end
    else begin
        display_mstr(616);
    end
    in_dialog := 0;
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(4) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1)) and (global_var(GVAR_CHILDKILLER_REPUTATION) == 0)) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        if (critter_kill_type(self_obj) == KILL_TYPE_children_kills) then begin
            if (source_obj == dude_obj) then begin
                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                set_global_var(GVAR_CHILDKILLER_REPUTATION, global_var(GVAR_CHILDKILLER_REPUTATION) + 1);
                set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + -15);
                debug_msg("Player gains " + -15 + " Karma Points.");
                set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
                set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
                set_global_var(GVAR_KARMA_DEFENDER, 0);
                set_global_var(GVAR_KARMA_WANDERER, 0);
                set_global_var(GVAR_KARMA_BETRAYER, 0);
                set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
                set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
                set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
                if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
                    set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                            set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                                set_global_var(GVAR_KARMA_DEFENDER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                                    set_global_var(GVAR_KARMA_WANDERER, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                        set_global_var(GVAR_KARMA_BETRAYER, 1);
                                    end
                                    else begin
                                        if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                            set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                        end
                                        else begin
                                            if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                                set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                            end
                                            else begin
                                                set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                set_global_var(GVAR_TOWN_REP_KLAMATH, global_var(GVAR_TOWN_REP_KLAMATH) + -8);
                debug_msg("Added " + -8 + " to Town Rep");
            end
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + -10);
        debug_msg("Player gains " + -10 + " Karma Points.");
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        set_global_var(GVAR_TOWN_REP_KLAMATH, global_var(GVAR_TOWN_REP_KLAMATH) + -5);
        debug_msg("Added " + -5 + " to Town Rep");
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure description_p_proc
begin
    script_overrides;
    if (dude_perception <= 8) then begin
        display_mstr(102);
    end
    else begin
        display_mstr(104);
    end
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(6, 1);
    end
end

procedure map_enter_p_proc
begin
    Only_Once := 0;
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 215);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_TOUGH_CITIZEN);
    if (map_first_run) then begin
        set_local_var(10, tile_num(self_obj));
    end
    if (CUR_MAP_KLATRAP) then begin
        if (global_var(GVAR_RESERVED) == 1) then begin
            set_obj_visibility(self_obj, 0);
        end
        else begin
            set_obj_visibility(self_obj, 1);
        end
    end
    if (global_var(GVAR_RESERVED) == 3) then begin
        set_local_var(6, 1);
    end
    if ((game_time - local_var(9)) >= (24 * (60 * (60 * 10)))) then begin
        set_local_var(9, game_time);
        num_of_bottles := obj_is_carrying_obj_pid(self_obj, 125);
        if (num_of_bottles < 2) then begin
            mybooze := create_object(125, 0, 0);
            add_mult_objs_to_inven(self_obj, mybooze, 2 - num_of_bottles);
        end
    end
end

procedure push_p_proc
begin
    script_overrides;
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        float_msg(self_obj, " ", FLOAT_MSG_YELLOW);
        float_msg(self_obj, mstr(610), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, 5 * 10, 2);
    end
    else begin
        if (fixed_param == 2) then begin
            float_msg(self_obj, " ", FLOAT_MSG_YELLOW);
            float_msg(self_obj, mstr(611), FLOAT_MSG_YELLOW);
            add_timer_event(self_obj, 5 * 10, 3);
        end
        else begin
            if (fixed_param == 3) then begin
                float_msg(self_obj, " ", FLOAT_MSG_YELLOW);
                float_msg(self_obj, mstr(612), FLOAT_MSG_YELLOW);
                add_timer_event(self_obj, 5 * 10, 4);
            end
            else begin
                if (fixed_param == 4) then begin
                    float_msg(self_obj, " ", FLOAT_MSG_YELLOW);
                    float_msg(self_obj, mstr(613), FLOAT_MSG_YELLOW);
                    add_timer_event(self_obj, 5 * 10, 5);
                end
                else begin
                    if (fixed_param == 5) then begin
                        float_msg(self_obj, " ", FLOAT_MSG_YELLOW);
                        float_msg(self_obj, mstr(614), FLOAT_MSG_YELLOW);
                        add_timer_event(self_obj, 5 * 10, 6);
                    end
                    else begin
                        if (fixed_param == 6) then begin
                            reg_anim_func(2, self_obj);
                            reg_anim_func(1, 1);
                            reg_anim_animate(self_obj, 37, -1);
                            reg_anim_func(3, 0);
                            add_timer_event(self_obj, 5 * 10, 7);
                        end
                        else begin
                            if (fixed_param == 7) then begin
                                float_msg(self_obj, " ", FLOAT_MSG_YELLOW);
                                float_msg(self_obj, mstr(615), FLOAT_MSG_YELLOW);
                                drunk := 0;
                            end
                        end
                    end
                end
            end
        end
    end
    if (fixed_param == 100) then begin
        mybooze := create_object(125, 0, 0);
        use_obj_on_obj(mybooze, dude_obj);
        add_timer_event(self_obj, 10, 101);
    end
    else begin
        if (fixed_param == 101) then begin
            drinking := 1;
        end
    end
end

procedure map_update_p_proc
begin
    if ((game_time - local_var(9)) >= (24 * (60 * (60 * 10)))) then begin
        set_local_var(9, game_time);
        num_of_bottles := obj_is_carrying_obj_pid(self_obj, 125);
        if (num_of_bottles < 2) then begin
            mybooze := create_object(125, 0, 0);
            add_mult_objs_to_inven(self_obj, mybooze, 2 - num_of_bottles);
        end
    end
end

procedure bob_is_drunk
begin
    variable LVar0 := 0;
    LVar0 := sfx_build_char_name(self_obj, 20, 1);
    reg_anim_func(2, self_obj);
    reg_anim_func(1, 1);
    reg_anim_animate(self_obj, 20, -1);
    reg_anim_play_sfx(self_obj, LVar0, 0);
    reg_anim_func(3, 0);
    drunk := 1;
    add_timer_event(self_obj, 5 * 10, 1);
end

procedure NodeBarter
begin
    Reply(600);
    giq_option(1, NAME, 601, Node999, NEUTRAL_REACTION);
end

procedure Node990
begin
    if (local_var(7) == 0) then begin
        set_local_var(7, 1);
    end
    gdialog_barter;
    Reply(602);
    giq_option(1, NAME, 603, NodeBarter, NEUTRAL_REACTION);
end

procedure Node998
begin
    set_local_var(4, local_var(4) + 1);
    set_local_var(5, 2);
end

procedure Node999
begin
    set_local_var(4, local_var(4) + 1);
end

procedure Node001
begin
    stored_node := "Node002";
    if (dude_gender == 0) then begin
        Reply(108);
    end
    else begin
        Reply(110);
    end
    if (dude_charisma >= 8) then begin
        giq_option(4, NAME, 112, drink, GOOD_REACTION);
        giq_option(4, NAME, 117, Node011, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 114, drink, GOOD_REACTION);
    giq_option(-3, NAME, 116, drink, GOOD_REACTION);
    giq_option(4, NAME, 118, Node011, NEUTRAL_REACTION);
    giq_option(-3, NAME, 119, Node011, NEUTRAL_REACTION);
end

procedure Node002
begin
    if (dude_endurance > 4) then begin
        Reply(120);
    end
    else begin
        Reply(122);
    end
    if (dude_charisma >= 8) then begin
        giq_option(4, NAME, 124, Node003, NEUTRAL_REACTION);
        giq_option(4, NAME, 128, Node007, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 126, Node003, NEUTRAL_REACTION);
        giq_option(4, NAME, 130, Node007, NEUTRAL_REACTION);
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 132, Node003, NEUTRAL_REACTION);
        giq_option(-3, NAME, 134, Node007, NEUTRAL_REACTION);
        giq_option(-3, NAME, 139, Node019, BAD_REACTION);
        giq_option(-3, NAME, 143, Node999, NEUTRAL_REACTION);
    end
    else begin
        giq_option(-1, NAME, 136, Node999, NEUTRAL_REACTION);
    end
    if (dude_gender == 0) then begin
        giq_option(4, NAME, 138, Node019, BAD_REACTION);
    end
    else begin
        giq_option(4, NAME, 140, Node019, BAD_REACTION);
    end
    giq_option(4, NAME, 142, Node999, NEUTRAL_REACTION);
end

procedure Node003
begin
    if (dude_gender == 0) then begin
        Reply(144);
    end
    else begin
        Reply(146);
    end
    if (dude_charisma >= 8) then begin
        giq_option(4, NAME, 148, Node005, GOOD_REACTION);
        giq_option(4, NAME, 150, Node006, NEUTRAL_REACTION);
        if (dude_gender == 0) then begin
            giq_option(4, NAME, 152, Node004, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, NAME, 154, Node004, NEUTRAL_REACTION);
        end
    end
    else begin
        giq_option(4, NAME, 164, Node005, GOOD_REACTION);
        giq_option(4, NAME, 166, Node006, NEUTRAL_REACTION);
        if (dude_gender == 0) then begin
            giq_option(4, NAME, 168, Node004, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, NAME, 170, Node004, NEUTRAL_REACTION);
        end
    end
    giq_option(-3, NAME, 156, Node005, GOOD_REACTION);
    giq_option(-3, NAME, 158, Node006, NEUTRAL_REACTION);
    giq_option(-3, NAME, 160, Node004, NEUTRAL_REACTION);
    if (dude_gender == 1) then begin
        giq_option(4, NAME, 162, Node004, NEUTRAL_REACTION);
    end
    giq_option(1, NAME, 171, Node999, NEUTRAL_REACTION);
end

procedure Node004
begin
    if (dude_gender == 0) then begin
        Reply(172);
    end
    else begin
        Reply(174);
    end
    giq_option(4, NAME, 175, Node007, NEUTRAL_REACTION);
    giq_option(-3, NAME, 176, Node007, NEUTRAL_REACTION);
    giq_option(1, NAME, 177, Node020, NEUTRAL_REACTION);
    giq_option(4, NAME, 178, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 180, Node999, NEUTRAL_REACTION);
end

procedure Node005
begin
    if (local_var(8) == 0) then begin
        set_local_var(8, 1);
    end
    if (dude_gender == 0) then begin
        Reply(182);
    end
    else begin
        Reply(183);
    end
    giq_option(4, NAME, 184, Node007, NEUTRAL_REACTION);
    giq_option(-3, NAME, 185, Node007, NEUTRAL_REACTION);
    giq_option(1, NAME, 186, Node020, NEUTRAL_REACTION);
    giq_option(4, NAME, 187, Node990, NEUTRAL_REACTION);
    giq_option(-3, NAME, 188, Node990, NEUTRAL_REACTION);
    giq_option(1, NAME, 189, Node999, NEUTRAL_REACTION);
end

procedure Node006
begin
    Reply(190);
    giq_option(4, NAME, 191, Node007, NEUTRAL_REACTION);
    giq_option(-3, NAME, 192, Node007, NEUTRAL_REACTION);
    giq_option(8, NAME, 193, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 194, Node020, NEUTRAL_REACTION);
    giq_option(-3, NAME, 196, Node020, NEUTRAL_REACTION);
    giq_option(1, NAME, 197, Node999, NEUTRAL_REACTION);
end

procedure Node007
begin
    if (local_var(8) == 0) then begin
        set_local_var(8, 1);
    end
    num_of_bottles := obj_is_carrying_obj_pid(dude_obj, 540);
    if (global_var(GVAR_KCROBIN_FARM_DEAD) == 0) then begin
        set_global_var(GVAR_KCROBIN_FARM_DEAD, 1);
        Reply(198);
        giq_option(4, NAME, 212, Node012, NEUTRAL_REACTION);
        giq_option(-3, NAME, 214, Node999, NEUTRAL_REACTION);
        giq_option(4, NAME, 216, Node019, BAD_REACTION);
        giq_option(4, NAME, 217, Node022, NEUTRAL_REACTION);
        giq_option(-3, NAME, 218, Node022, NEUTRAL_REACTION);
        giq_option(-3, NAME, 219, Node019, BAD_REACTION);
    end
    else begin
        Reply(199);
        if (num_of_bottles > 0) then begin
            giq_option(8, NAME, 200, Node009, NEUTRAL_REACTION);
            if (dude_iq < 8) then begin
                giq_option(4, NAME, 202, Node009, NEUTRAL_REACTION);
            end
            giq_option(-3, NAME, 204, Node009, NEUTRAL_REACTION);
            giq_option(8, NAME, 206, Node999, NEUTRAL_REACTION);
            if (dude_iq < 8) then begin
                giq_option(4, NAME, 208, Node999, NEUTRAL_REACTION);
            end
            giq_option(-3, NAME, mstr(210) + dude_name + mstr(211), Node999, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, NAME, 220, Node999, NEUTRAL_REACTION);
            giq_option(-3, NAME, 221, Node999, NEUTRAL_REACTION);
        end
    end
end

procedure Node009
begin
    num_of_bottles := obj_is_carrying_obj_pid(dude_obj, 540);
    if (num_of_bottles <= 5) then begin
        Reply(222);
        giq_option(1, NAME, 224, bob_booze, NEUTRAL_REACTION);
        giq_option(8, NAME, 226, bob_booze, NEUTRAL_REACTION);
    end
    else begin
        Reply(223);
        giq_option(8, NAME, 227, bob_booze, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(4, NAME, 228, bob_booze, NEUTRAL_REACTION);
        end
        giq_option(-3, NAME, 230, bob_booze, NEUTRAL_REACTION);
        giq_option(8, NAME, 232, bob_it_aint_free, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(4, NAME, 234, Node010, NEUTRAL_REACTION);
        end
        giq_option(-3, NAME, 236, Node010, NEUTRAL_REACTION);
    end
end

procedure Node010
begin
    Reply(237);
    giq_option(4, NAME, 238, bob_booze, NEUTRAL_REACTION);
    giq_option(-3, NAME, 239, bob_booze, NEUTRAL_REACTION);
end

procedure Node011
begin
    if (dude_gender == 0) then begin
        Reply(240);
    end
    else begin
        Reply(241);
    end
    if (dude_gender == 0) then begin
        giq_option(4, NAME, 242, Node019, BAD_REACTION);
        giq_option(4, NAME, 244, Node999, NEUTRAL_REACTION);
        giq_option(4, NAME, 246, Node002, GOOD_REACTION);
        giq_option(-3, NAME, 248, Node019, BAD_REACTION);
        giq_option(-3, NAME, 250, Node999, NEUTRAL_REACTION);
        giq_option(-3, NAME, 252, Node002, GOOD_REACTION);
    end
    else begin
        giq_option(4, NAME, mstr(256) + dude_name + mstr(257), Node999, NEUTRAL_REACTION);
        giq_option(4, NAME, 258, Node002, GOOD_REACTION);
        giq_option(-3, NAME, 262, Node999, NEUTRAL_REACTION);
        giq_option(-3, NAME, 264, Node002, GOOD_REACTION);
    end
end

procedure Node012
begin
    stored_node := "Node023";
    Reply(266);
    giq_option(4, NAME, 287, Node003, NEUTRAL_REACTION);
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 288, Node003, NEUTRAL_REACTION);
    end
    if (local_var(8) == 1) then begin
        giq_option(8, NAME, 289, Node990, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(4, NAME, 290, Node990, NEUTRAL_REACTION);
        end
        if ((local_var(5) == 0) and (dude_endurance > 4)) then begin
            giq_option(8, NAME, 291, drink, NEUTRAL_REACTION);
            if (dude_iq < 8) then begin
                giq_option(4, NAME, 292, drink, NEUTRAL_REACTION);
            end
        end
    end
    if ((global_var(GVAR_KCROBIN_FARM_DEAD) == 1) and (obj_is_carrying_obj_pid(dude_obj, 540) > 0)) then begin
        giq_option(8, NAME, 267, Node009, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(4, NAME, 272, Node009, NEUTRAL_REACTION);
        end
        if (dude_iq > 1) then begin
            giq_option(-3, NAME, 277, Node009, NEUTRAL_REACTION);
        end
    end
    if ((obj_is_carrying_obj_pid(dude_obj, 547) > 0) and (obj_is_carrying_obj_pid(dude_obj, 539) > 0) and (global_var(GVAR_RESERVED) < 2)) then begin
        giq_option(8, NAME, 268, Node013, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(4, NAME, 273, Node013, NEUTRAL_REACTION);
        end
        if (dude_iq > 1) then begin
            giq_option(-3, NAME, 278, Node013, NEUTRAL_REACTION);
        end
        giq_option(-1, NAME, 282, Node013, NEUTRAL_REACTION);
    end
    else begin
        if (obj_is_carrying_obj_pid(dude_obj, 539) > 0) then begin
            giq_option(8, NAME, 269, Node014, NEUTRAL_REACTION);
            if (dude_iq < 8) then begin
                giq_option(4, NAME, 274, Node014, NEUTRAL_REACTION);
            end
            if (dude_iq > 1) then begin
                giq_option(-3, NAME, 279, Node014, NEUTRAL_REACTION);
            end
            giq_option(-1, NAME, 283, Node014, NEUTRAL_REACTION);
        end
        else begin
            if ((obj_is_carrying_obj_pid(dude_obj, 547) > 0) and (global_var(GVAR_RESERVED) < 2)) then begin
                giq_option(8, NAME, 270, Node015, NEUTRAL_REACTION);
                if (dude_iq < 8) then begin
                    giq_option(4, NAME, 275, Node015, NEUTRAL_REACTION);
                end
                if (dude_iq > 1) then begin
                    giq_option(-3, NAME, 280, Node015, NEUTRAL_REACTION);
                end
                giq_option(-1, NAME, 284, Node015, NEUTRAL_REACTION);
            end
        end
    end
    giq_option(8, NAME, 271, Node007, NEUTRAL_REACTION);
    if (dude_iq < 8) then begin
        giq_option(4, NAME, 276, Node007, NEUTRAL_REACTION);
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 281, Node007, NEUTRAL_REACTION);
    end
    giq_option(-1, NAME, 285, Node999, NEUTRAL_REACTION);
    giq_option(2, NAME, 286, Node999, NEUTRAL_REACTION);
end

procedure Node013
begin
    Reply(317);
    giq_option(8, NAME, 318, bob_spares, NEUTRAL_REACTION);
    if (dude_iq < 8) then begin
        giq_option(4, NAME, 320, bob_spares, NEUTRAL_REACTION);
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 322, bob_spares, NEUTRAL_REACTION);
    end
    giq_option(-1, NAME, 324, bob_spares, NEUTRAL_REACTION);
    if (dude_skill(SKILL_REPAIR) >= 30) then begin
        giq_option(8, NAME, 326, Node021, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(2, NAME, 328, Node021, NEUTRAL_REACTION);
        end
    end
    giq_option(8, NAME, 330, Node999, NEUTRAL_REACTION);
    if (dude_iq < 8) then begin
        giq_option(4, NAME, 332, Node999, NEUTRAL_REACTION);
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 334, Node999, NEUTRAL_REACTION);
    end
end

procedure Node014
begin
    Reply(336);
    giq_option(8, NAME, 338, bob_coil_pipe, NEUTRAL_REACTION);
    if (dude_iq < 8) then begin
        giq_option(4, NAME, 340, bob_coil_pipe, NEUTRAL_REACTION);
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 342, bob_coil_pipe, NEUTRAL_REACTION);
    end
    giq_option(-1, NAME, 344, bob_coil_pipe, NEUTRAL_REACTION);
    giq_option(8, NAME, 346, Node999, NEUTRAL_REACTION);
    if (dude_iq < 8) then begin
        giq_option(4, NAME, 348, Node999, NEUTRAL_REACTION);
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 350, Node999, NEUTRAL_REACTION);
    end
end

procedure Node015
begin
    Reply(352);
    if (dude_skill(SKILL_REPAIR) >= 30) then begin
        giq_option(8, NAME, 354, Node021, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(2, NAME, 356, Node021, NEUTRAL_REACTION);
        end
    end
    giq_option(8, NAME, 358, bob_valve, NEUTRAL_REACTION);
    if (dude_iq < 8) then begin
        giq_option(4, NAME, 360, bob_valve, NEUTRAL_REACTION);
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 362, bob_valve, NEUTRAL_REACTION);
    end
    giq_option(-1, NAME, 364, bob_valve, NEUTRAL_REACTION);
    giq_option(8, NAME, 366, Node999, NEUTRAL_REACTION);
    if (dude_iq < 8) then begin
        giq_option(4, NAME, 368, Node999, NEUTRAL_REACTION);
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 370, Node999, NEUTRAL_REACTION);
    end
end

procedure Node016
begin
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 547);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 547);
        if (obj_type(dude_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 547);
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
    Reply(372);
    if (dude_skill(SKILL_REPAIR) >= 35) then begin
        giq_option(8, NAME, 374, Node017, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(4, NAME, 376, Node017, NEUTRAL_REACTION);
        end
        giq_option(-3, NAME, 378, Node017, NEUTRAL_REACTION);
    end
    else begin
        giq_option(8, NAME, 380, Node018, NEUTRAL_REACTION);
        if (dude_iq < 8) then begin
            giq_option(4, NAME, 382, Node018, NEUTRAL_REACTION);
        end
        giq_option(-3, NAME, 384, Node018, NEUTRAL_REACTION);
    end
end

procedure Node017
begin
    item_caps_adjust(dude_obj, 100);
    critter_mod_skill(dude_obj, SKILL_REPAIR, 2);
    display_mstr(500);
    Reply(386);
    giq_option(8, NAME, 388, move_to_dwntwn1, NEUTRAL_REACTION);
    if (dude_iq < 8) then begin
        giq_option(4, NAME, 390, move_to_dwntwn1, NEUTRAL_REACTION);
    end
    giq_option(-3, NAME, 392, move_to_dwntwn1, NEUTRAL_REACTION);
end

procedure Node018
begin
    Reply(394);
    giq_option(1, NAME, 396, move_to_dwntwn2, NEUTRAL_REACTION);
end

procedure Node019
begin
    set_local_var(6, 1);
    Reply(400);
    giq_option(4, NAME, 402, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 404, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 406, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 408, Node999, NEUTRAL_REACTION);
end

procedure Node020
begin
    if (dude_gender == 0) then begin
        Reply(410);
    end
    else begin
        Reply(412);
    end
    if (dude_charisma >= 8) then begin
        giq_option(4, NAME, 414, Node005, GOOD_REACTION);
        giq_option(4, NAME, 415, Node006, NEUTRAL_REACTION);
        if (dude_gender == 0) then begin
            giq_option(4, NAME, 416, Node004, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, NAME, 417, Node004, NEUTRAL_REACTION);
        end
    end
    else begin
        giq_option(4, NAME, 422, Node005, GOOD_REACTION);
        giq_option(4, NAME, 423, Node006, NEUTRAL_REACTION);
        giq_option(4, NAME, 424, Node004, NEUTRAL_REACTION);
        if (dude_gender == 1) then begin
            giq_option(4, NAME, 425, Node004, NEUTRAL_REACTION);
        end
    end
    if (dude_iq > 1) then begin
        giq_option(-3, NAME, 418, Node005, GOOD_REACTION);
        giq_option(-3, NAME, 419, Node006, NEUTRAL_REACTION);
        if (dude_gender == 0) then begin
            giq_option(-3, NAME, 420, Node004, NEUTRAL_REACTION);
        end
        else begin
            giq_option(-3, NAME, 421, Node004, NEUTRAL_REACTION);
        end
    end
    giq_option(1, NAME, 426, Node999, NEUTRAL_REACTION);
end

procedure Node021
begin
    Reply(430);
    giq_option(1, NAME, 432, move_to_still, NEUTRAL_REACTION);
end

procedure Node022
begin
    Reply(440);
    giq_option(4, NAME, 441, Node012, NEUTRAL_REACTION);
    giq_option(-3, NAME, 442, Node012, NEUTRAL_REACTION);
    giq_option(4, NAME, 443, Node019, BAD_REACTION);
    giq_option(-3, NAME, 444, Node019, BAD_REACTION);
end

procedure Node023
begin
    stored_node := "Node024";
    if (dude_gender == 0) then begin
        Reply(445);
    end
    else begin
        Reply(446);
    end
    if (dude_endurance > 4) then begin
        giq_option(4, NAME, 447, drink, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 448, Node999, NEUTRAL_REACTION);
    end
end

procedure Node024
begin
    stored_node := "Node025";
    if (dude_gender == 0) then begin
        Reply(450);
    end
    else begin
        Reply(451);
    end
    if (dude_endurance > 6) then begin
        giq_option(4, NAME, 452, drink, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 453, Node999, NEUTRAL_REACTION);
    end
end

procedure Node025
begin
    Reply(460);
    giq_option(4, NAME, 461, bob_is_drunk, NEUTRAL_REACTION);
end

procedure move_to_still
begin
    set_global_var(GVAR_RESERVED, 1);
    load_map("klatrap.map", 1);
end

procedure move_to_dwntwn1
begin
    set_global_var(GVAR_RESERVED, 2);
    load_map("kladwtwn.map", 2);
end

procedure move_to_dwntwn2
begin
    set_global_var(GVAR_RESERVED, 3);
    load_map("kladwtwn.map", 2);
end

procedure bob_booze
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    num_of_bottles := obj_is_carrying_obj_pid(dude_obj, 540);
    if (num_of_bottles <= 5) then begin
        if ((obj_pid(critter_inven_obj(dude_obj, 2)) == 540) or (obj_pid(critter_inven_obj(dude_obj, 1)) == 540)) then begin
            inven_unwield(dude_obj);
        end
        num_of_bottles := obj_is_carrying_obj_pid(dude_obj, 540);
        while (LVar0 < num_of_bottles) do begin
            LVar1 := obj_carrying_pid_obj(dude_obj, 540);
            rm_obj_from_inven(dude_obj, LVar1);
            item_caps_adjust(dude_obj, 2);
            LVar0 := LVar0 + 1;
        end
    end
    else begin
        mybooze := create_object(125, 0, 0);
        add_obj_to_inven(dude_obj, mybooze);
        item_caps_adjust(dude_obj, (num_of_bottles - 5) * 2);
        if ((obj_pid(critter_inven_obj(dude_obj, 2)) == 540) or (obj_pid(critter_inven_obj(dude_obj, 1)) == 540)) then begin
            inven_unwield(dude_obj);
        end
        num_of_bottles := obj_is_carrying_obj_pid(dude_obj, 540);
        while (LVar0 < num_of_bottles) do begin
            LVar1 := obj_carrying_pid_obj(dude_obj, 540);
            rm_obj_from_inven(dude_obj, LVar1);
            LVar0 := LVar0 + 1;
        end
    end
    call Node012();
end

procedure bob_it_aint_free
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    num_of_bottles := obj_is_carrying_obj_pid(dude_obj, 540);
    if ((obj_pid(critter_inven_obj(dude_obj, 2)) == 540) or (obj_pid(critter_inven_obj(dude_obj, 1)) == 540)) then begin
        inven_unwield(dude_obj);
    end
    num_of_bottles := obj_is_carrying_obj_pid(dude_obj, 540);
    while (LVar0 < num_of_bottles) do begin
        LVar1 := obj_carrying_pid_obj(dude_obj, 540);
        rm_obj_from_inven(dude_obj, LVar1);
        item_caps_adjust(dude_obj, 2);
        LVar0 := LVar0 + 1;
    end
    call Node012();
end

procedure bob_spares
begin
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 547);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 547);
        if (obj_type(dude_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 547);
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 539);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 539);
        if (obj_type(dude_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 539);
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
    item_caps_adjust(dude_obj, 100);
    mybooze := create_object(125, 0, 0);
    add_obj_to_inven(dude_obj, mybooze);
    call Node012();
end

procedure bob_coil_pipe
begin
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 539);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 539);
        if (obj_type(dude_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 539);
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
    item_caps_adjust(dude_obj, 100);
    call Node012();
end

procedure bob_valve
begin
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 547);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 547);
        if (obj_type(dude_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 547);
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
    mybooze := create_object(125, 0, 0);
    add_obj_to_inven(dude_obj, mybooze);
    call Node012();
end

procedure drink
begin
    game_ui_disable;
    add_timer_event(self_obj, 10, 100);
    call Node999();
end
