variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable last_timed_obj;
variable last_timed_param;
variable check_still_kill;
variable stored_msg;
variable stored_node;
variable top_msg;
variable var_num;

procedure ChooseFromList;
procedure CLICK_PREV;
procedure CLICK_0;
procedure CLICK_1;
procedure CLICK_2;
procedure CLICK_3;
procedure CLICK_4;
procedure CLICK_MORE;

variable floater_patch_msg;
variable hs_temp;

procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure push_p_proc;
procedure Node001;
procedure use_obj_on_p_proc;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure ChooseFromList
begin
    variable LVar0 := 0;
    Reply(stored_msg);
    if (message_str(SCRIPT_NEWR1, top_msg - 1) != "") then begin
        giq_option(1, NAME, message_str(SCRIPT_NEWR1, 150), CLICK_PREV, NEUTRAL_REACTION);
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 0) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 0), CLICK_0, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 1) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 1), CLICK_1, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 2) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 2), CLICK_2, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 3) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 3), CLICK_3, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 4) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 4), CLICK_4, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 5) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, 151), CLICK_MORE, NEUTRAL_REACTION);
        end
    end
end

procedure CLICK_PREV
begin
    top_msg := top_msg - 5;
    call ChooseFromList();
end

procedure CLICK_0
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + (top_msg % 100));
    call stored_node();
end

procedure CLICK_1
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 1) % 100));
    call stored_node();
end

procedure CLICK_2
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 2) % 100));
    call stored_node();
end

procedure CLICK_3
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 3) % 100));
    call stored_node();
end

procedure CLICK_4
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 4) % 100));
    call stored_node();
end

procedure CLICK_MORE
begin
    top_msg := top_msg + 5;
    call ChooseFromList();
end

procedure start
begin
end

procedure critter_p_proc
begin
end

procedure pickup_p_proc
begin
end

procedure talk_p_proc
begin
    call Node001();
end

procedure destroy_p_proc
begin
end

procedure look_at_p_proc
begin
    if ((local_var(0) < 0) == 0) then begin
        script_overrides;
        display_mstr(100);
    end
end

procedure description_p_proc
begin
    if ((local_var(0) < 0) == 0) then begin
        script_overrides;
        display_mstr(150 + (dude_skill(SKILL_DOCTOR) >= 50));
    end
end

procedure use_skill_on_p_proc
begin
    if (action_being_used == 12) then begin
        script_overrides;
        if (is_success(roll_vs_skill(dude_obj, action_being_used, 0))) then begin
            display_msg(message_str(SCRIPT_ZCBRAHMN, 101));
        end
        else begin
            display_msg(message_str(SCRIPT_ZCBRAHMN, 102));
        end
    end
    else begin
        if (action_being_used == 10) then begin
            script_overrides;
        end
        else begin
            if (action_being_used == 7) then begin
                if ((local_var(0) < 0) == 0) then begin
                    if (is_success(roll_vs_skill(dude_obj, 7, -25))) then begin
                        float_msg(self_obj, mstr(random(198, 199)), FLOAT_MSG_YELLOW);
                        display_mstr(225);
                        give_exp_points(100);
                        display_msg(g_mstr(100) + 100 + g_mstr(101));
                        set_local_var(0, -1);
                        restock_obj := create_object(39, 0, 0);
                        add_mult_objs_to_inven(dude_obj, restock_obj, 1);
                        rm_fixed_timer_event(self_obj, 3);
                        add_timer_event(self_obj, game_ticks(0), 3);
                    end
                    else begin
                        script_overrides;
                        set_local_var(0, local_var(0) + 1);
                        float_msg(self_obj, mstr(random(204, 206)), FLOAT_MSG_YELLOW);
                        if (local_var(0) >= 3) then begin
                            if (critter_is_fleeing(self_obj)) then begin
                                if (anim_busy(self_obj) == 0) then begin
                                    if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                                        if (anim_busy(self_obj) == 0) then begin
                                            global_temp := rotation_to_tile(dude_tile, tile_num(self_obj));
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                            global_temp := (global_temp + 1) % 6;
                                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(dude_tile, tile_num(self_obj)))) do begin
                                                debug_msg("flee loop: rot == " + global_temp);
                                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                                global_temp := (global_temp + 1) % 6;
                                            end
                                        end
                                    end
                                end
                            end
                            else begin
                                attack(dude_obj);
                            end
                        end
                        else begin
                            display_mstr(235);
                        end
                    end
                end
            end
        end
    end
end

procedure damage_p_proc
begin
end

procedure map_enter_p_proc
begin
    if (is_loading_game == 0) then begin
        if (map_first_run) then begin
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 2);
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_BRAHMIN);
        end
        rm_fixed_timer_event(self_obj, 1);
        add_timer_event(self_obj, game_ticks(random(45, 90)), 1);
        rm_fixed_timer_event(self_obj, 2);
        add_timer_event(self_obj, game_ticks(random(30, 45)), 2);
        rm_fixed_timer_event(self_obj, 3);
        add_timer_event(self_obj, game_ticks(random(30, 45)), 3);
    end
end

procedure timed_event_p_proc
begin
    variable LVar0 := 0;
    if (fixed_param == 1) then begin
        if ((critter_state(self_obj) bwand 2) == 0) then begin
            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(1, 3)), 0);
        end
        rm_fixed_timer_event(self_obj, 1);
        add_timer_event(self_obj, game_ticks(random(45, 90)), 1);
    end
    if (fixed_param == 2) then begin
        float_msg(self_obj, message_str(SCRIPT_ZCBRAHMN, random(201, 205)), FLOAT_MSG_YELLOW);
        rm_fixed_timer_event(self_obj, 2);
        add_timer_event(self_obj, game_ticks(random(30, 45)), 2);
    end
    else begin
        if (fixed_param == 3) then begin
            if (local_var(0) < 0) then begin
                if (random(1, 2) == 1) then begin
                    float_msg(self_obj, message_str(SCRIPT_ZCBRAHMN, 206), FLOAT_MSG_YELLOW);
                    LVar0 := create_object_sid(random(33555178, 33555180), 0, 0, SCRIPT_ZIBRAPOO);
                    move_to(LVar0, tile_num_in_direction(tile_num(self_obj), (obj_get_rot(self_obj) + 3) % 6, 1), 0);
                end
                rm_fixed_timer_event(self_obj, 3);
                add_timer_event(self_obj, game_ticks(random(15, 45)), 3);
            end
        end
        else begin
            if (fixed_param == 4) then begin
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                reg_anim_animate(self_obj, 37, -1);
                reg_anim_func(3, 0);
                critter_injure(self_obj, 2 bwor 8388608);
            end
        end
    end
end

procedure push_p_proc
begin
    if (obj_in_party(source_obj)) then begin
        if (is_success(do_check(source_obj, 0, 0))) then begin
            if ((critter_state(self_obj) bwand 2) == 0) then begin
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                reg_anim_animate(self_obj, 14, -1);
                reg_anim_animate(self_obj, 20, 5);
                reg_anim_animate(self_obj, 48, -1);
                reg_anim_func(3, 0);
                critter_injure(self_obj, 2);
                add_timer_event(self_obj, game_ticks(random(10, 30)), 4);
                debug_msg("ZCBRAHMN: ahh Cow TIPPED you get +10 Hick Experience Points.");
            end
        end
    end
end

procedure Node001
begin
    float_msg(self_obj, mstr(random(200 - (2 * (local_var(0) < 0)), 206)), FLOAT_MSG_YELLOW);
end

procedure use_obj_on_p_proc
begin
    variable LVar0 := 0;
    if ((obj_pid(obj_being_used_with) == 124) or (obj_pid(obj_being_used_with) == 125)) then begin
        script_overrides;
        LVar0 := obj_being_used_with;
        rm_obj_from_inven(source_obj, obj_being_used_with);
        destroy_object(LVar0);
        if ((critter_state(self_obj) bwand 2) == 0) then begin
            reg_anim_func(2, self_obj);
            reg_anim_func(1, 1);
            reg_anim_animate(self_obj, 14, -1);
            reg_anim_animate(self_obj, 20, 5);
            reg_anim_animate(self_obj, 48, -1);
            reg_anim_func(3, 0);
            critter_injure(self_obj, 2);
        end
    end
end
