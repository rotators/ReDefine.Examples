variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node015a;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node024a;
procedure Node025;
procedure Node999;
procedure HandleDwarf;
procedure KILL_DWARF_p_proc;


procedure start
begin
end

procedure use_p_proc
begin
    if (not(global_var(GVAR_ESCORT_JIMMY_TO_RENO) >= 2)) then begin
        if (global_var(GVAR_TYPHON_QUEST_STATUS) >= 6) then begin
            script_overrides;
            dialogue_system_enter;
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(101);
end

procedure use_skill_on_p_proc
begin
end

procedure use_obj_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (global_var(GVAR_ESCORT_JIMMY_TO_RENO) == 3) then begin
        if (weapon_dmg_type(target_obj) == 6) then begin
            destroy_object(self_obj);
        end
    end
end

procedure map_enter_p_proc
begin
    if (not(global_var(GVAR_ESCORT_JIMMY_TO_RENO) >= 2)) then begin
        rm_timer_event(self_obj);
        add_timer_event(self_obj, 1, 0);
        if (global_var(GVAR_TYPHON_QUEST_STATUS) == 8) then begin
            add_timer_event(self_obj, game_ticks(random(10, 15)), 1);
        end
    end
end

procedure map_update_p_proc
begin
end

procedure talk_p_proc
begin
    if (global_var(GVAR_TYPHON_QUEST_STATUS) == 6) then begin
        start_gdialog(1190, self_obj, 4, -1, -1);
        gsay_start;
        call Node001();
        gsay_end;
        end_dialogue;
    end
    else begin
        if ((global_var(GVAR_TYPHON_QUEST_STATUS) == 7) and (map_var(30) == 0)) then begin
            if (dude_is_stupid) then begin
                float_msg(dude_obj, mstr(115), FLOAT_MSG_YELLOW);
            end
            else begin
                float_msg(dude_obj, mstr(116), FLOAT_MSG_YELLOW);
            end
        end
        else begin
            if ((global_var(GVAR_TYPHON_QUEST_STATUS) == 7) and (map_var(30) > 0)) then begin
                start_gdialog(1190, self_obj, 4, -1, -1);
                gsay_start;
                call Node006();
                gsay_end;
                end_dialogue;
            end
            else begin
                if (global_var(GVAR_TYPHON_QUEST_STATUS) == 8) then begin
                    if (global_var(GVAR_ESCORT_JIMMY_TO_RENO) == 1) then begin
                        call KILL_DWARF_p_proc();
                    end
                    if ((dude_is_stupid) and (global_var(GVAR_ESCORT_JIMMY_TO_RENO) == 0)) then begin
                        float_msg(dude_obj, mstr(154), FLOAT_MSG_YELLOW);
                    end
                    if (global_var(GVAR_ESCORT_JIMMY_TO_RENO) >= 2) then begin
                        float_msg(dude_obj, mstr(180), FLOAT_MSG_YELLOW);
                    end
                    else begin
                        float_msg(dude_obj, mstr(155), FLOAT_MSG_YELLOW);
                    end
                end
            end
        end
    end
end

procedure timed_event_p_proc
begin
    if (not(global_var(GVAR_ESCORT_JIMMY_TO_RENO) >= 2)) then begin
        if (fixed_param == 0) then begin
            if (map_var(30) == 1) then begin
                set_map_var(30, 2);
                call HandleDwarf();
            end
            else begin
                if (map_var(30) == 0) then begin
                    add_timer_event(self_obj, 1, 0);
                end
            end
        end
        else begin
            if (fixed_param == 1) then begin
                if (global_var(GVAR_TYPHON_QUEST_STATUS) == 8) then begin
                    float_msg(self_obj, mstr(random(156, 165)), FLOAT_MSG_LIGHT_RED);
                    add_timer_event(self_obj, game_ticks(random(10, 15)), 1);
                end
            end
        end
    end
end

procedure Node001
begin
    Reply(102);
    giq_option(-3, NAME, 103, Node002, NEUTRAL_REACTION);
    giq_option(4, NAME, 104, Node002, NEUTRAL_REACTION);
end

procedure Node002
begin
    Reply(105);
    giq_option(-3, NAME, 106, Node003, NEUTRAL_REACTION);
    giq_option(4, NAME, 107, Node003, NEUTRAL_REACTION);
end

procedure Node003
begin
    Reply(108);
    giq_option(-3, NAME, 109, Node004, NEUTRAL_REACTION);
    giq_option(4, NAME, 110, Node004, NEUTRAL_REACTION);
end

procedure Node004
begin
    Reply(111);
    giq_option(-3, NAME, 112, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 113, Node005, NEUTRAL_REACTION);
end

procedure Node005
begin
    set_global_var(GVAR_TYPHON_QUEST_STATUS, 7);
    gsay_message(NAME, 114, NEUTRAL_REACTION);
end

procedure Node006
begin
    Reply(117);
    giq_option(-3, NAME, 118, Node007, BAD_REACTION);
    giq_option(-3, NAME, 119, Node007, NEUTRAL_REACTION);
    giq_option(4, NAME, 120, Node007, BAD_REACTION);
    giq_option(4, NAME, 121, Node007, NEUTRAL_REACTION);
end

procedure Node007
begin
    Reply(122);
    giq_option(-3, NAME, 123, Node008, NEUTRAL_REACTION);
    giq_option(4, NAME, 124, Node008, NEUTRAL_REACTION);
end

procedure Node008
begin
    Reply(125);
    giq_option(-3, NAME, 126, Node009, NEUTRAL_REACTION);
    giq_option(4, NAME, 127, Node009, NEUTRAL_REACTION);
end

procedure Node009
begin
    Reply(128);
    giq_option(-3, NAME, 129, Node010, NEUTRAL_REACTION);
    giq_option(4, NAME, 130, Node010, NEUTRAL_REACTION);
end

procedure Node010
begin
    Reply(131);
    giq_option(-3, NAME, 132, Node011, NEUTRAL_REACTION);
    giq_option(4, NAME, 133, Node011, NEUTRAL_REACTION);
end

procedure Node011
begin
    gsay_message(NAME, 134, NEUTRAL_REACTION);
    call Node012();
end

procedure Node012
begin
    Reply(135);
    giq_option(-3, NAME, 136, Node013, NEUTRAL_REACTION);
    giq_option(4, NAME, 137, Node013, NEUTRAL_REACTION);
end

procedure Node013
begin
    Reply(138);
    giq_option(-3, NAME, 139, Node014, NEUTRAL_REACTION);
    giq_option(4, NAME, 140, Node014, NEUTRAL_REACTION);
end

procedure Node014
begin
    variable LVar0 := 0;
    set_global_var(GVAR_TYPHON_QUEST_STATUS, 8);
    LVar0 := create_object(519, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    Reply(141);
    giq_option(-3, NAME, 142, Node015, NEUTRAL_REACTION);
    giq_option(4, NAME, 143, Node015, NEUTRAL_REACTION);
    return 0;
    LVar0 := 0;
end

procedure Node015
begin
    Reply(144);
    giq_option(-3, NAME, 145, Node015a, NEUTRAL_REACTION);
    giq_option(4, NAME, 146, Node016, NEUTRAL_REACTION);
end

procedure Node015a
begin
    add_timer_event(self_obj, game_ticks(random(10, 15)), 1);
    float_msg(self_obj, mstr(157), FLOAT_MSG_LIGHT_RED);
end

procedure Node016
begin
    Reply(147);
    giq_option(4, NAME, 148, Node017, NEUTRAL_REACTION);
end

procedure Node017
begin
    Reply(149);
    giq_option(4, NAME, 150, Node018, NEUTRAL_REACTION);
end

procedure Node018
begin
    Reply(151);
    giq_option(4, NAME, 152, Node019, NEUTRAL_REACTION);
end

procedure Node019
begin
    gsay_message(NAME, 153, NEUTRAL_REACTION);
    add_timer_event(self_obj, game_ticks(random(10, 15)), 1);
    float_msg(self_obj, mstr(157), FLOAT_MSG_LIGHT_RED);
end

procedure Node020
begin
    Reply(166);
    giq_option(4, NAME, 167, Node021, NEUTRAL_REACTION);
end

procedure Node021
begin
    Reply(168);
    giq_option(4, NAME, 169, Node022, NEUTRAL_REACTION);
end

procedure Node022
begin
    Reply(170);
    if (obj_is_carrying_obj_pid(dude_obj, 25) >= 1) then begin
        giq_option(4, NAME, 171, Node023, NEUTRAL_REACTION);
    end
    if (obj_is_carrying_obj_pid(dude_obj, 7) >= 1) then begin
        giq_option(4, NAME, 178, Node024a, NEUTRAL_REACTION);
    end
    if (obj_is_carrying_obj_pid(dude_obj, 280) >= 1) then begin
        giq_option(4, NAME, 172, Node024, NEUTRAL_REACTION);
    end
    if (obj_is_carrying_obj_pid(dude_obj, 51) >= 1) then begin
        giq_option(4, NAME, 173, Node025, NEUTRAL_REACTION);
    end
    if (not((obj_is_carrying_obj_pid(dude_obj, 51) >= 1) or (obj_is_carrying_obj_pid(dude_obj, 280) >= 1) or (obj_is_carrying_obj_pid(dude_obj, 25) >= 1))) then begin
        giq_option(4, NAME, 174, Node019, NEUTRAL_REACTION);
    end
end

procedure Node023
begin
    set_global_var(GVAR_ESCORT_JIMMY_TO_RENO, 2);
    display_mstr(175);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 25);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 25);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 25);
            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
end

procedure Node024
begin
    set_global_var(GVAR_ESCORT_JIMMY_TO_RENO, 2);
    display_mstr(176);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 280);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 280);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 280);
            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
end

procedure Node024a
begin
    set_global_var(GVAR_ESCORT_JIMMY_TO_RENO, 2);
    display_mstr(176);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 7);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 7);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 7);
            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
end

procedure Node025
begin
    set_global_var(GVAR_ESCORT_JIMMY_TO_RENO, 3);
    display_mstr(177);
    set_global_var(GVAR_ENEMY_BROKEN_HILLS, 1);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 51);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 51);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 51);
            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        destroy_object(restock_obj);
    end
    restock_obj := 0;
    restock_amt := 0;
    explosion(17692, 0, 2);
end

procedure Node999
begin
end

procedure HandleDwarf
begin
    dialogue_system_enter;
end

procedure KILL_DWARF_p_proc
begin
    start_gdialog(1190, self_obj, 4, -1, -1);
    gsay_start;
    call Node020();
    gsay_end;
    end_dialogue;
end
