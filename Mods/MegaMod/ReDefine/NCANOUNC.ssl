variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable last_timed_obj;
variable last_timed_param;
variable check_still_kill;
variable stored_msg;
variable stored_node;
variable top_msg;
variable var_num;

procedure ChooseFromList;
procedure CLICK_PREV;
procedure CLICK_0;
procedure CLICK_1;
procedure CLICK_2;
procedure CLICK_3;
procedure CLICK_4;
procedure CLICK_MORE;

variable floater_patch_msg;
variable hs_temp;

procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure map_update_p_proc;

import variable announcer_obj;
import variable ring_girl_obj;
import variable prize_fighter_obj;
import variable stuart_little_obj;
import variable new_reno_temp_box;

variable allow_anim;

procedure combat_p_proc;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure ChooseFromList
begin
    variable LVar0 := 0;
    Reply(stored_msg);
    if (message_str(SCRIPT_NEWR1, top_msg - 1) != "") then begin
        giq_option(1, NAME, message_str(SCRIPT_NEWR1, 150), CLICK_PREV, NEUTRAL_REACTION);
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 0) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 0), CLICK_0, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 1) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 1), CLICK_1, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 2) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 2), CLICK_2, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 3) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 3), CLICK_3, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 4) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, top_msg + 4), CLICK_4, NEUTRAL_REACTION);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(SCRIPT_NEWR1, top_msg + 5) != "") then begin
            giq_option(1, NAME, message_str(SCRIPT_NEWR1, 151), CLICK_MORE, NEUTRAL_REACTION);
        end
    end
end

procedure CLICK_PREV
begin
    top_msg := top_msg - 5;
    call ChooseFromList();
end

procedure CLICK_0
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + (top_msg % 100));
    call stored_node();
end

procedure CLICK_1
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 1) % 100));
    call stored_node();
end

procedure CLICK_2
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 2) % 100));
    call stored_node();
end

procedure CLICK_3
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 3) % 100));
    call stored_node();
end

procedure CLICK_4
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 4) % 100));
    call stored_node();
end

procedure CLICK_MORE
begin
    top_msg := top_msg + 5;
    call ChooseFromList();
end

procedure start
begin
    announcer_obj := self_obj;
end

procedure critter_p_proc
begin
    if (obj_is_visible_flag(self_obj)) then begin
        if (allow_anim == 0) then begin
            reg_anim_func(2, dude_obj);
        end
        else begin
            if (combat_is_initialized == 0) then begin
                if (CUR_MAP_NEWR2) then begin
                    if (announcer_obj != 0) then begin
                        last_timed_obj := announcer_obj;
                        last_timed_param := last_timed_param;
                        rm_fixed_timer_event(announcer_obj, 48);
                        add_timer_event(announcer_obj, game_ticks(0), 48);
                    end
                end
                set_global_var(GVAR_EMILY_SUBST_TIME, global_var(GVAR_EMILY_SUBST_TIME) bwor 2);
            end
        end
    end
end

procedure destroy_p_proc
begin
    announcer_obj := 0;
end

procedure damage_p_proc
begin
    if (CUR_MAP_NEWR2) then begin
        if (announcer_obj != 0) then begin
            last_timed_obj := announcer_obj;
            last_timed_param := last_timed_param;
            rm_fixed_timer_event(announcer_obj, 48);
            add_timer_event(announcer_obj, game_ticks(0), 48);
        end
    end
    set_global_var(GVAR_EMILY_SUBST_TIME, global_var(GVAR_EMILY_SUBST_TIME) bwor 2);
    if (get_critter_stat(self_obj, STAT_current_hp) < get_critter_stat(self_obj, STAT_max_hp)) then begin
        critter_heal(self_obj, get_critter_stat(self_obj, STAT_max_hp) - get_critter_stat(self_obj, STAT_current_hp));
    end
end

procedure map_enter_p_proc
begin
    announcer_obj := self_obj;
    if (is_loading_game == 0) then begin
        if (map_first_run) then begin
            set_local_var(1, tile_num(self_obj));
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 54);
            critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_LONER_CITIZEN);
        end
        if (obj_is_visible_flag(self_obj) == 1) then begin
            set_obj_visibility(self_obj, 1);
        end
    end
end

procedure timed_event_p_proc
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    if (fixed_param == 48) then begin
        if ((global_var(GVAR_EMILY_SUBST_TIME) bwand 2) != 0) then begin
            if (combat_is_initialized == 0) then begin
                game_ui_disable;
            end
            else begin
                terminate_combat;
                rm_fixed_timer_event(self_obj, 48);
                add_timer_event(self_obj, 3, 48);
            end
        end
        else begin
            game_ui_enable;
        end
    end
    else begin
        if (fixed_param == 110) then begin
            float_msg(self_obj, " ", FLOAT_MSG_YELLOW);
            debug_msg("start boxing round: start");
            gfade_out(10);
            game_time_advance(60 * 10);
            if (obj_is_visible_flag(announcer_obj) == 1) then begin
                set_obj_visibility(announcer_obj, 1);
            end
            if (obj_is_visible_flag(ring_girl_obj) == 1) then begin
                set_obj_visibility(ring_girl_obj, 1);
            end
            float_msg(dude_obj, message_str(SCRIPT_NCRNGGRL, 100) + global_var(GVAR_NEW_RENO_ROUND_NUMBER) + message_str(SCRIPT_NCRNGGRL, 101), FLOAT_MSG_WARNING);
            debug_msg("move_boxers_to_corners: start");
            move_to(dude_obj, 24479, elevation(self_obj));
            critter_injure(dude_obj, 2 bwor 8388608);
            if ((prize_fighter_obj != 0) and (((global_var(GVAR_NEW_RENO_FLAG_3) bwand 8192) != 0) == 0)) then begin
                move_to(prize_fighter_obj, 26471, elevation(self_obj));
                animate_stand_obj(prize_fighter_obj);
                critter_injure(prize_fighter_obj, 2 bwor 8388608);
                anim(dude_obj, 1000, rotation_to_tile(dude_tile, tile_num(prize_fighter_obj)));
                anim(prize_fighter_obj, 1000, rotation_to_tile(tile_num(prize_fighter_obj), dude_tile));
            end
            animate_stand_obj(dude_obj);
            debug_msg("move_boxers_to_corners: end");
            set_global_var(GVAR_NEW_RENO_ROUND_TIME, game_time + (60 * 10));
            gfade_in(10);
            if (CUR_MAP_NEWR2) then begin
                if (announcer_obj != 0) then begin
                    last_timed_obj := announcer_obj;
                    last_timed_param := last_timed_param;
                    rm_fixed_timer_event(announcer_obj, 48);
                    add_timer_event(announcer_obj, game_ticks(0), 48);
                end
            end
            set_global_var(GVAR_EMILY_SUBST_TIME, global_var(GVAR_EMILY_SUBST_TIME) bwand (-1 - 2));
            play_sfx("boxbel1");
            attack_setup(prize_fighter_obj, dude_obj);
            debug_msg("start boxing round: end");
        end
        else begin
            if (obj_is_visible_flag(self_obj)) then begin
                debug_msg("announcer timed event, fixed param == " + fixed_param);
                debug_msg("  fight_status == " + (global_var(GVAR_NEW_RENO_FIGHT_STATUS) + (-2 * global_var(GVAR_NEW_RENO_FIGHT_STATUS) * (global_var(GVAR_NEW_RENO_FIGHT_STATUS) < 0))));
                if ((103 <= fixed_param) and (fixed_param <= 105)) then begin
                    float_msg(self_obj, mstr(fixed_param + (local_var(2) % 4 * 20)), FLOAT_MSG_YELLOW);
                    last_timed_obj := announcer_obj;
                    last_timed_param := last_timed_param;
                    rm_fixed_timer_event(announcer_obj, fixed_param + 1);
                    add_timer_event(announcer_obj, game_ticks(3), fixed_param + 1);
                end
                else begin
                    if (fixed_param == 106) then begin
                        set_local_var(2, local_var(2) + 1);
                        float_msg(self_obj, mstr(106) + (100 + ((dude_gender == 0) * 50) + (dude_strength * 5) - ((get_critter_stat(dude_obj, STAT_ag) + dude_endurance) / 3)) + mstr(1106) + message_str(SCRIPT_NEWR1, 400 + global_var(GVAR_NEW_RENO_PRIZEFIGHTER)) + mstr(2106), FLOAT_MSG_YELLOW);
                        anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
                        last_timed_obj := announcer_obj;
                        last_timed_param := last_timed_param;
                        rm_fixed_timer_event(announcer_obj, fixed_param + 1);
                        add_timer_event(announcer_obj, game_ticks(8), fixed_param + 1);
                    end
                    else begin
                        if (fixed_param == 107) then begin
                            if (prize_fighter_obj != 0) then begin
                                float_msg(self_obj, mstr(107) + (100 + ((get_critter_stat(prize_fighter_obj, STAT_gender) == 0) * 50) + (get_critter_stat(prize_fighter_obj, STAT_st) * 5) - ((get_critter_stat(prize_fighter_obj, STAT_ag) + get_critter_stat(prize_fighter_obj, STAT_en)) / 3)) + mstr(1107) + message_str(SCRIPT_NEWR1, 700 + (50 * ((global_var(GVAR_NEW_RENO_FLAG_3) bwand 4096) != 0)) + global_var(GVAR_NEW_RENO_FIGHT_LEVEL)) + mstr(2107), FLOAT_MSG_YELLOW);
                                anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), tile_num(prize_fighter_obj)));
                            end
                            last_timed_obj := announcer_obj;
                            last_timed_param := last_timed_param;
                            rm_fixed_timer_event(announcer_obj, fixed_param + 1);
                            add_timer_event(announcer_obj, game_ticks(8), fixed_param + 1);
                        end
                        else begin
                            if (fixed_param == 201) then begin
                                if ((global_var(GVAR_NEW_RENO_FIGHT_STATUS) + (-2 * global_var(GVAR_NEW_RENO_FIGHT_STATUS) * (global_var(GVAR_NEW_RENO_FIGHT_STATUS) < 0))) != 4) then begin
                                    float_msg(self_obj, mstr(200 + (global_var(GVAR_NEW_RENO_FIGHT_STATUS) + (-2 * global_var(GVAR_NEW_RENO_FIGHT_STATUS) * (global_var(GVAR_NEW_RENO_FIGHT_STATUS) < 0)))), FLOAT_MSG_YELLOW);
                                end
                                else begin
                                    if (global_var(GVAR_NEW_RENO_FIGHT_STATUS) > 0) then begin
                                        LVar0 := global_var(GVAR_NEW_RENO_DUDE_SCORE);
                                        LVar1 := global_var(GVAR_NEW_RENO_BOXER_SCORE);
                                    end
                                    else begin
                                        LVar0 := global_var(GVAR_NEW_RENO_BOXER_SCORE);
                                        LVar1 := global_var(GVAR_NEW_RENO_DUDE_SCORE);
                                    end
                                    LVar1 := LVar1 - (LVar1 == LVar0);
                                    float_msg(self_obj, mstr(204) + LVar0 + mstr(205) + LVar1 + mstr(206), FLOAT_MSG_YELLOW);
                                end
                                last_timed_obj := announcer_obj;
                                last_timed_param := last_timed_param;
                                rm_fixed_timer_event(announcer_obj, 210);
                                add_timer_event(announcer_obj, game_ticks(4), 210);
                            end
                            else begin
                                if (fixed_param == 210) then begin
                                    if (global_var(GVAR_NEW_RENO_FIGHT_STATUS) > 0) then begin
                                        allow_anim := 1;
                                        float_msg(self_obj, message_str(SCRIPT_NEWR1, 400 + global_var(GVAR_NEW_RENO_PRIZEFIGHTER)) + mstr(210), FLOAT_MSG_YELLOW);
                                        reg_anim_func(2, dude_obj);
                                        reg_anim_func(1, 1);
                                        reg_anim_animate(dude_obj, 16, -1);
                                        reg_anim_animate(dude_obj, 16, 10);
                                        reg_anim_func(3, 0);
                                    end
                                    else begin
                                        float_msg(self_obj, message_str(SCRIPT_NEWR1, 700 + (50 * ((global_var(GVAR_NEW_RENO_FLAG_3) bwand 4096) != 0)) + global_var(GVAR_NEW_RENO_FIGHT_LEVEL)) + mstr(210), FLOAT_MSG_YELLOW);
                                        reg_anim_func(2, prize_fighter_obj);
                                        reg_anim_func(1, 1);
                                        reg_anim_animate(prize_fighter_obj, 16, -1);
                                        reg_anim_animate(prize_fighter_obj, 16, 10);
                                        reg_anim_func(3, 0);
                                    end
                                    last_timed_obj := announcer_obj;
                                    last_timed_param := last_timed_param;
                                    rm_fixed_timer_event(announcer_obj, fixed_param + 1);
                                    add_timer_event(announcer_obj, game_ticks(4), fixed_param + 1);
                                end
                                else begin
                                    if (fixed_param == 211) then begin
                                        debug_msg("cleanup boxing match: start");
                                        gfade_out(10);
                                        if (CUR_MAP_NEWR2) then begin
                                            if (announcer_obj != 0) then begin
                                                last_timed_obj := announcer_obj;
                                                last_timed_param := last_timed_param;
                                                rm_fixed_timer_event(announcer_obj, 48);
                                                add_timer_event(announcer_obj, game_ticks(0), 48);
                                            end
                                        end
                                        set_global_var(GVAR_EMILY_SUBST_TIME, global_var(GVAR_EMILY_SUBST_TIME) bwor 2);
                                        set_global_var(GVAR_NEW_RENO_FLAG_3, global_var(GVAR_NEW_RENO_FLAG_3) bwand (-1 - 536870912));
                                        if (prize_fighter_obj != 0) then begin
                                            destroy_object(prize_fighter_obj);
                                        end
                                        if (obj_is_visible_flag(announcer_obj) == 1) then begin
                                            set_obj_visibility(announcer_obj, 1);
                                        end
                                        removed_qty := obj_is_carrying_obj_pid(dude_obj, 497);
                                        if (1 < removed_qty) then begin
                                            removed_qty := 1;
                                        end
                                        if (removed_qty > 0) then begin
                                            restock_obj := obj_carrying_pid_obj(dude_obj, 497);
                                            if (obj_type(self_obj) == 1) then begin
                                                restock_obj := obj_carrying_pid_obj(dude_obj, 497);
                                                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                                                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                                                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                                                        debug_msg("armour pid == " + obj_pid(restock_obj));
                                                        rm_obj_from_inven(dude_obj, restock_obj);
                                                        add_obj_to_inven(dude_obj, restock_obj);
                                                    end
                                                end
                                                else begin
                                                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                                                        inven_unwield(dude_obj);
                                                    end
                                                end
                                            end
                                            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
                                            destroy_object(restock_obj);
                                        end
                                        restock_obj := 0;
                                        restock_amt := 0;
                                        removed_qty := obj_is_carrying_obj_pid(dude_obj, 496);
                                        if (1 < removed_qty) then begin
                                            removed_qty := 1;
                                        end
                                        if (removed_qty > 0) then begin
                                            restock_obj := obj_carrying_pid_obj(dude_obj, 496);
                                            if (obj_type(self_obj) == 1) then begin
                                                restock_obj := obj_carrying_pid_obj(dude_obj, 496);
                                                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                                                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                                                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                                                        debug_msg("armour pid == " + obj_pid(restock_obj));
                                                        rm_obj_from_inven(dude_obj, restock_obj);
                                                        add_obj_to_inven(dude_obj, restock_obj);
                                                    end
                                                end
                                                else begin
                                                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                                                        inven_unwield(dude_obj);
                                                    end
                                                end
                                            end
                                            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
                                            destroy_object(restock_obj);
                                        end
                                        restock_obj := 0;
                                        restock_amt := 0;
                                        move_obj_inven_to_obj(new_reno_temp_box, dude_obj);
                                        critter_attempt_placement(dude_obj, tile_num_in_direction(tile_num(stuart_little_obj), obj_get_rot(stuart_little_obj), 1), elevation(self_obj));
                                        anim(dude_obj, 1000, rotation_to_tile(dude_tile, tile_num(stuart_little_obj)));
                                        anim(stuart_little_obj, 1000, rotation_to_tile(tile_num(stuart_little_obj), dude_tile));
                                        if (obj_is_visible_flag(ring_girl_obj) == 1) then begin
                                            set_obj_visibility(ring_girl_obj, 1);
                                        end
                                        if (obj_is_visible_flag(announcer_obj) == 1) then begin
                                            set_obj_visibility(announcer_obj, 1);
                                        end
                                        last_timed_obj := stuart_little_obj;
                                        last_timed_param := last_timed_param;
                                        rm_fixed_timer_event(stuart_little_obj, 34);
                                        add_timer_event(stuart_little_obj, game_ticks(2), 34);
                                        game_time_advance(60 * 10);
                                        debug_msg("cleanup boxing match: end");
                                    end
                                    else begin
                                        if (obj_get_rot(self_obj) != 3) then begin
                                            anim(self_obj, 1000, 3);
                                        end
                                        float_msg(self_obj, mstr(fixed_param), FLOAT_MSG_YELLOW);
                                        last_timed_obj := announcer_obj;
                                        last_timed_param := last_timed_param;
                                        rm_fixed_timer_event(announcer_obj, fixed_param + 1);
                                        add_timer_event(announcer_obj, game_ticks(4), fixed_param + 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure map_update_p_proc
begin
    announcer_obj := self_obj;
end

procedure combat_p_proc
begin
    if (obj_is_visible_flag(self_obj)) then begin
        terminate_combat;
    end
end
