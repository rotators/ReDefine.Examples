variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable LVar0;
variable LVar1;
variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;
variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable var_random_herbs;
variable random_ammo;
variable number_of_herbs;
variable case;
variable min;
variable max;
variable herb_one;
variable herb_two;
variable herb_three;
variable herb_four;
variable herb_five;
variable herb_six;
variable herb_seven;
variable herb_eight;
variable herb_nine;
variable herb_ten;
variable current_town := "";
variable town_level;
variable percent;
variable random_book;
variable random_books;
variable book_one;
variable book_two;
variable book_three;
variable book_four;
variable book_five;
variable book_six;
variable book_seven;
variable book_eight;
variable book_nine;
variable book_ten;
variable book_eleven;
variable book_twelve;
variable book_thirteen;
variable book_fourteen;
variable book_fifteen;
variable book_sixteen;
variable book_seventeen;
variable book_eighteen;
variable ammo_one;
variable ammo_two;
variable ammo_three;
variable ammo_four;
variable ammo_five;
variable ammo_six;
variable ammo_seven;
variable ammo_eight;
variable ammo_nine;
variable ammo_ten;
variable ammo_eleven;
variable ammo_twelve;
variable ammo_thirteen;
variable ammo_fourteen;
variable ammo_fifteen;
variable ammo_sixteen;
variable ammo_seventeen;
variable ammo_eighteen;
variable ammo_ninteen;
variable ammo_twenty;
variable ammo_twentyone;
variable ammo_twentytwo;
variable ammo_twentythree;
variable ammo_twentyfour;
variable ammo_twentyfive;
variable ammo_twentysix;
variable ammo_twentyseven;
variable random_numberof_ammo_one;
variable random_ammo_one;
variable random_numberof_ammo_two;
variable random_ammo_two;
variable random_numberof_ammo_three;
variable random_ammo_three;
variable random_numberof_ammo_four;
variable random_ammo_four;
variable random_numberof_ammo_five;
variable random_ammo_five;
variable random_numberof_ammo_six;
variable random_ammo_six;
variable drug_one;
variable drug_two;
variable drug_three;
variable drug_four;
variable drug_five;
variable drug_six;
variable drug_seven;
variable random_drug;
variable random_number_of_drugs;
variable booze_one;
variable booze_two;
variable booze_three;
variable booze_four;
variable booze_five;
variable random_number_of_booze;
variable random_booze;
variable stim_one;
variable stim_two;
variable stim_three;
variable stim_four;
variable stim_five;
variable stim_six;
variable stim_seven;
variable stim_eight;
variable stim_nine;
variable stim_ten;
variable random_numberof_stim_five;
variable random_stim_five;
variable random_numberof_stim_four;
variable random_stim_four;
variable random_numberof_stim_three;
variable random_stim_three;
variable random_numberof_stim_two;
variable random_stim_two;
variable random_numberof_stim_one;
variable random_stim_one;

procedure add_stimpacks;
procedure stim_town_five;
procedure pick_stim_five;
procedure random_stim_town_five;
procedure stim_town_four;
procedure pick_stim_four;
procedure random_stim_town_four;
procedure stim_town_three;
procedure pick_stim_three;
procedure random_stim_town_three;
procedure stim_town_two;
procedure pick_stim_two;
procedure random_stim_town_two;
procedure stim_town_one;
procedure pick_stim_one;
procedure random_stim_town_one;
procedure add_booze;
procedure pick_booze;
procedure pick_random_booze;
procedure number_of_booze;
procedure add_drugs;
procedure pick_drug;
procedure random_drugs;
procedure number_of_drugs;
procedure ammo_town_six;
procedure pick_ammo_six;
procedure random_ammo_town_six;
procedure number_of_random_ammo_six;
procedure ammo_town_five;
procedure pick_ammo_five;
procedure random_ammo_town_five;
procedure number_of_random_ammo_five;
procedure ammo_town_four;
procedure pick_ammo_four;
procedure random_ammo_town_four;
procedure number_of_random_ammo_four;
procedure ammo_town_three;
procedure pick_ammo_three;
procedure random_ammo_town_three;
procedure number_of_random_ammo_three;
procedure ammo_town_two;
procedure pick_ammo_two;
procedure random_ammo_town_two;
procedure number_of_random_ammo_two;
procedure ammo_town_one;
procedure pick_ammo_one;
procedure random_ammo_town_one;
procedure number_of_random_ammo_one;
procedure pick_herb;
procedure add_ammo;
procedure pick_book;
procedure random_skill_book;
procedure add_books;
procedure number_of_random_books;
procedure random_herbs;
procedure add_money;
procedure determine_town_level;
procedure get_current_area;
procedure checkPartyMembersNearDoor;
procedure restock_items(variable arg0, variable arg1, variable arg2, variable arg3);
procedure inventory_keepers;
procedure add_herbs;
procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;

export variable redding_john_box;


procedure add_stimpacks
begin
    call determine_town_level();
    if (town_level <= 2) then begin
        call stim_town_one();
    end
    else begin
        if (town_level == 3) then begin
            call stim_town_one();
            call stim_town_two();
        end
        else begin
            if (town_level == 4) then begin
                call stim_town_one();
                call stim_town_two();
                call stim_town_three();
            end
            else begin
                if (town_level == 5) then begin
                    call stim_town_one();
                    call stim_town_two();
                    call stim_town_three();
                    call stim_town_four();
                end
                else begin
                    if (town_level == 6) then begin
                        call stim_town_one();
                        call stim_town_two();
                        call stim_town_three();
                        call stim_town_four();
                        call stim_town_five();
                    end
                end
            end
        end
    end
end

procedure stim_town_five
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 100;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 100;
            min := 1;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 100;
                min := 1;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 100;
                    min := 1;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 100;
                        min := 1;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 100;
                            min := 1;
                            max := 7;
                        end
                    end
                end
            end
        end
    end
    random_numberof_stim_five := random(1, 2);
    if (random_numberof_stim_five == 2) then begin
        call pick_stim_five();
        call restock_items(case, min, max, percent);
        call pick_stim_five();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_five == 1) then begin
            call pick_stim_five();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    stim_nine := 0;
    stim_ten := 0;
    random_numberof_stim_five := 0;
end

procedure pick_stim_five
begin
    call random_stim_town_five();
    while (case == -1) do begin
        call random_stim_town_five();
    end
end

procedure random_stim_town_five
begin
    random_stim_five := random(1, 2);
    if ((random_stim_five == 1) and (stim_nine == 0)) then begin
        stim_nine := 1;
        case := 40;
    end
    else begin
        if ((random_stim_five == 2) and (stim_ten == 0)) then begin
            stim_ten := 1;
            case := 144;
        end
        else begin
            case := -1;
        end
    end
    random_stim_five := 0;
    return case;
end

procedure stim_town_four
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 100;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 100;
            min := 1;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 100;
                min := 1;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 100;
                    min := 1;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 100;
                        min := 1;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 100;
                            min := 1;
                            max := 7;
                        end
                    end
                end
            end
        end
    end
    random_numberof_stim_four := random(1, 2);
    if (random_numberof_stim_four == 2) then begin
        call pick_stim_four();
        call restock_items(case, min, max, percent);
        call pick_stim_four();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_four == 1) then begin
            call pick_stim_four();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    stim_seven := 0;
    stim_eight := 0;
    random_numberof_stim_four := 0;
end

procedure pick_stim_four
begin
    call random_stim_town_four();
    while (case == -1) do begin
        call random_stim_town_four();
    end
end

procedure random_stim_town_four
begin
    random_stim_four := random(1, 2);
    if ((random_stim_four == 1) and (stim_seven == 0)) then begin
        stim_seven := 1;
        case := 273;
    end
    else begin
        if ((random_stim_four == 2) and (stim_eight == 0)) then begin
            stim_eight := 1;
            case := 802;
        end
        else begin
            case := -1;
        end
    end
    random_stim_four := 0;
    return case;
end

procedure stim_town_three
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 100;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 100;
            min := 1;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 100;
                min := 1;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 100;
                    min := 1;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 100;
                        min := 1;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 100;
                            min := 1;
                            max := 7;
                        end
                    end
                end
            end
        end
    end
    random_numberof_stim_three := random(1, 2);
    if (random_numberof_stim_three == 2) then begin
        call pick_stim_three();
        call restock_items(case, min, max, percent);
        call pick_stim_three();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_three == 1) then begin
            call pick_stim_three();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    stim_five := 0;
    stim_six := 0;
    random_numberof_stim_three := 0;
end

procedure pick_stim_three
begin
    call random_stim_town_three();
    while (case == -1) do begin
        call random_stim_town_three();
    end
end

procedure random_stim_town_three
begin
    random_stim_three := random(1, 2);
    if ((random_stim_three == 1) and (stim_five == 0)) then begin
        stim_five := 1;
        case := 71;
    end
    else begin
        if ((random_stim_three == 2) and (stim_six == 0)) then begin
            stim_six := 1;
            case := 801;
        end
        else begin
            case := -1;
        end
    end
    random_stim_three := 0;
    return case;
end

procedure stim_town_two
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 100;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 100;
            min := 1;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 100;
                min := 1;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 100;
                    min := 1;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 100;
                        min := 1;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 100;
                            min := 1;
                            max := 7;
                        end
                    end
                end
            end
        end
    end
    random_numberof_stim_two := random(1, 2);
    if (random_numberof_stim_two == 2) then begin
        call pick_stim_two();
        call restock_items(case, min, max, percent);
        call pick_stim_two();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_two == 1) then begin
            call pick_stim_two();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    stim_three := 0;
    stim_four := 0;
    random_numberof_stim_two := 0;
end

procedure pick_stim_two
begin
    call random_stim_town_two();
    while (case == -1) do begin
        call random_stim_town_two();
    end
end

procedure random_stim_town_two
begin
    random_stim_two := random(1, 2);
    if ((random_stim_two == 1) and (stim_three == 0)) then begin
        stim_three := 1;
        case := 103;
    end
    else begin
        if ((random_stim_two == 2) and (stim_four == 0)) then begin
            stim_four := 1;
            case := 81;
        end
        else begin
            case := -1;
        end
    end
    random_stim_two := 0;
    return case;
end

procedure stim_town_one
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 100;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 100;
            min := 1;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 100;
                min := 1;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 100;
                    min := 1;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 100;
                        min := 1;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 100;
                            min := 1;
                            max := 7;
                        end
                    end
                end
            end
        end
    end
    random_numberof_stim_one := random(1, 2);
    if (random_numberof_stim_one == 2) then begin
        call pick_stim_one();
        call restock_items(case, min, max, percent);
        call pick_stim_one();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_one == 1) then begin
            call pick_stim_one();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    stim_one := 0;
    stim_two := 0;
    random_numberof_stim_one := 0;
end

procedure pick_stim_one
begin
    call random_stim_town_one();
    while (case == -1) do begin
        call random_stim_town_one();
    end
end

procedure random_stim_town_one
begin
    random_stim_one := random(1, 2);
    if ((random_stim_one == 1) and (stim_one == 0)) then begin
        stim_one := 1;
        case := 318;
    end
    else begin
        if ((random_stim_one == 2) and (stim_two == 0)) then begin
            stim_two := 1;
            case := 805;
        end
        else begin
            case := -1;
        end
    end
    random_stim_one := 0;
    return case;
end

procedure add_booze
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 25;
        min := 0;
        max := 1;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 1;
            max := 2;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 1;
                max := 3;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 1;
                    max := 4;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 2;
                        max := 4;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 3;
                            max := 6;
                        end
                    end
                end
            end
        end
    end
    call number_of_booze();
    if (random_number_of_booze == 5) then begin
        call pick_booze();
        call restock_items(case, min, max, percent);
        call pick_booze();
        call restock_items(case, min, max, percent);
        call pick_booze();
        call restock_items(case, min, max, percent);
        call pick_booze();
        call restock_items(case, min, max, percent);
        call pick_booze();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_number_of_booze == 4) then begin
            call pick_booze();
            call restock_items(case, min, max, percent);
            call pick_booze();
            call restock_items(case, min, max, percent);
            call pick_booze();
            call restock_items(case, min, max, percent);
            call pick_booze();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_number_of_booze == 3) then begin
                call pick_booze();
                call restock_items(case, min, max, percent);
                call pick_booze();
                call restock_items(case, min, max, percent);
                call pick_booze();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_number_of_booze == 2) then begin
                    call pick_booze();
                    call restock_items(case, min, max, percent);
                    call pick_booze();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_number_of_booze == 1) then begin
                        call pick_booze();
                        call restock_items(case, min, max, percent);
                    end
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    booze_one := 0;
    booze_two := 0;
    booze_three := 0;
    booze_four := 0;
    booze_five := 0;
    random_number_of_booze := 0;
end

procedure pick_booze
begin
    call pick_random_booze();
    while (case == -1) do begin
        call pick_random_booze();
    end
end

procedure pick_random_booze
begin
    random_booze := random(1, 5);
    if ((random_booze == 1) and (booze_one == 0)) then begin
        booze_one := 1;
        case := 124;
    end
    else begin
        if ((random_booze == 2) and (booze_two == 0)) then begin
            booze_two := 1;
            case := 125;
        end
        else begin
            if ((random_booze == 3) and (booze_three == 0)) then begin
                booze_three := 1;
                case := 310;
            end
            else begin
                if ((random_booze == 4) and (booze_four == 0)) then begin
                    booze_four := 1;
                    case := 311;
                end
                else begin
                    if ((random_booze == 5) and (booze_five == 0)) then begin
                        booze_five := 1;
                        case := 469;
                    end
                    else begin
                        case := -1;
                    end
                end
            end
        end
    end
    random_booze := 0;
    return case;
end

procedure number_of_booze
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_number_of_booze := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_number_of_booze := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_number_of_booze := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_number_of_booze := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_number_of_booze := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_number_of_booze := random(3, 5);
                        end
                        else begin
                            random_number_of_booze := 0;
                        end
                    end
                end
            end
        end
    end
    return random_number_of_booze;
end

procedure add_drugs
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 25;
        min := 0;
        max := 1;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 1;
            max := 2;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 1;
                max := 3;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 1;
                    max := 4;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 2;
                        max := 4;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 3;
                            max := 6;
                        end
                    end
                end
            end
        end
    end
    call number_of_drugs();
    if (random_number_of_drugs == 4) then begin
        call pick_drug();
        call restock_items(case, min, max, percent);
        call pick_drug();
        call restock_items(case, min, max, percent);
        call pick_drug();
        call restock_items(case, min, max, percent);
        call pick_drug();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_number_of_drugs == 3) then begin
            call pick_drug();
            call restock_items(case, min, max, percent);
            call pick_drug();
            call restock_items(case, min, max, percent);
            call pick_drug();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_number_of_drugs == 2) then begin
                call pick_drug();
                call restock_items(case, min, max, percent);
                call pick_drug();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_number_of_drugs == 1) then begin
                    call pick_drug();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    drug_one := 0;
    drug_two := 0;
    drug_three := 0;
    drug_four := 0;
    drug_five := 0;
    drug_six := 0;
    drug_seven := 0;
    random_number_of_drugs := 0;
end

procedure pick_drug
begin
    call random_drugs();
    while (case == -1) do begin
        call random_drugs();
    end
end

procedure random_drugs
begin
    random_drug := random(1, 7);
    if ((random_drug == 1) and (drug_one == 0)) then begin
        drug_one := 1;
        case := 48;
    end
    else begin
        if ((random_drug == 2) and (drug_two == 0)) then begin
            drug_two := 1;
            case := 49;
        end
        else begin
            if ((random_drug == 3) and (drug_three == 0)) then begin
                drug_three := 1;
                case := 53;
            end
            else begin
                if ((random_drug == 4) and (drug_four == 0)) then begin
                    drug_four := 1;
                    case := 87;
                end
                else begin
                    if ((random_drug == 5) and (drug_five == 0)) then begin
                        drug_five := 1;
                        case := 109;
                    end
                    else begin
                        if ((random_drug == 6) and (drug_six == 0)) then begin
                            drug_six := 1;
                            case := 110;
                        end
                        else begin
                            if ((random_drug == 7) and (drug_seven == 0)) then begin
                                drug_seven := 1;
                                case := 259;
                            end
                            else begin
                                case := -1;
                            end
                        end
                    end
                end
            end
        end
    end
    random_drug := 0;
    return case;
end

procedure number_of_drugs
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_number_of_drugs := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_number_of_drugs := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_number_of_drugs := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_number_of_drugs := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_number_of_drugs := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_number_of_drugs := random(3, 5);
                        end
                        else begin
                            random_number_of_drugs := 0;
                        end
                    end
                end
            end
        end
    end
    return random_number_of_drugs;
end

procedure ammo_town_six
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 25;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 2;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 3;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 4;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 5;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 7;
                            max := 14;
                        end
                    end
                end
            end
        end
    end
    call number_of_random_ammo_six();
    if (random_numberof_ammo_six == 4) then begin
        call pick_ammo_six();
        call restock_items(case, min, max, percent);
        call pick_ammo_six();
        call restock_items(case, min, max, percent);
        call pick_ammo_six();
        call restock_items(case, min, max, percent);
        call pick_ammo_six();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_six == 3) then begin
            call pick_ammo_six();
            call restock_items(case, min, max, percent);
            call pick_ammo_six();
            call restock_items(case, min, max, percent);
            call pick_ammo_six();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_six == 2) then begin
                call pick_ammo_six();
                call restock_items(case, min, max, percent);
                call pick_ammo_six();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_six == 1) then begin
                    call pick_ammo_six();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    ammo_twentyfour := 0;
    ammo_twentyfive := 0;
    ammo_twentysix := 0;
    ammo_twentyseven := 0;
    random_numberof_ammo_six := 0;
end

procedure pick_ammo_six
begin
    call random_ammo_town_six();
    while (case == -1) do begin
        call random_ammo_town_six();
    end
end

procedure random_ammo_town_six
begin
    random_ammo_six := random(1, 4);
    if ((random_ammo_six == 1) and (ammo_twentyfour == 0)) then begin
        ammo_twentyfour := 1;
        case := 358;
    end
    else begin
        if ((random_ammo_six == 2) and (ammo_twentyfive == 0)) then begin
            ammo_twentyfive := 1;
            case := 359;
        end
        else begin
            if ((random_ammo_six == 3) and (ammo_twentysix == 0)) then begin
                ammo_twentysix := 1;
                case := 382;
            end
            else begin
                if ((random_ammo_six == 4) and (ammo_twentyseven == 0)) then begin
                    ammo_twentyseven := 1;
                    case := 578;
                end
                else begin
                    case := -1;
                end
            end
        end
    end
    random_ammo_six := 0;
    return case;
end

procedure number_of_random_ammo_six
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_six := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_six := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_six := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_six := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_six := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_six := random(3, 4);
                        end
                        else begin
                            random_numberof_ammo_six := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_six;
end

procedure ammo_town_five
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 25;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 2;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 3;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 4;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 5;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 7;
                            max := 14;
                        end
                    end
                end
            end
        end
    end
    call number_of_random_ammo_five();
    if (random_numberof_ammo_five == 4) then begin
        call pick_ammo_five();
        call restock_items(case, min, max, percent);
        call pick_ammo_five();
        call restock_items(case, min, max, percent);
        call pick_ammo_five();
        call restock_items(case, min, max, percent);
        call pick_ammo_five();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_five == 3) then begin
            call pick_ammo_five();
            call restock_items(case, min, max, percent);
            call pick_ammo_five();
            call restock_items(case, min, max, percent);
            call pick_ammo_five();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_five == 2) then begin
                call pick_ammo_five();
                call restock_items(case, min, max, percent);
                call pick_ammo_five();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_five == 1) then begin
                    call pick_ammo_five();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    ammo_twenty := 0;
    ammo_twentyone := 0;
    ammo_twentytwo := 0;
    ammo_twentythree := 0;
    random_numberof_ammo_five := 0;
end

procedure pick_ammo_five
begin
    call random_ammo_town_five();
    while (case == -1) do begin
        call random_ammo_town_five();
    end
end

procedure random_ammo_town_five
begin
    random_ammo_five := random(1, 4);
    if ((random_ammo_five == 1) and (ammo_twenty == 0)) then begin
        ammo_twenty := 1;
        case := 361;
    end
    else begin
        if ((random_ammo_five == 2) and (ammo_twentyone == 0)) then begin
            ammo_twentyone := 1;
            case := 362;
        end
        else begin
            if ((random_ammo_five == 3) and (ammo_twentytwo == 0)) then begin
                ammo_twentytwo := 1;
                case := 360;
            end
            else begin
                if ((random_ammo_five == 4) and (ammo_twentythree == 0)) then begin
                    ammo_twentythree := 1;
                    case := 363;
                end
                else begin
                    case := -1;
                end
            end
        end
    end
    random_ammo_five := 0;
    return case;
end

procedure number_of_random_ammo_five
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_five := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_five := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_five := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_five := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_five := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_five := random(3, 4);
                        end
                        else begin
                            random_numberof_ammo_five := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_five;
end

procedure ammo_town_four
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 25;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 2;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 3;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 4;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 5;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 7;
                            max := 14;
                        end
                    end
                end
            end
        end
    end
    call number_of_random_ammo_four();
    if (random_numberof_ammo_four == 4) then begin
        call pick_ammo_four();
        call restock_items(case, min, max, percent);
        call pick_ammo_four();
        call restock_items(case, min, max, percent);
        call pick_ammo_four();
        call restock_items(case, min, max, percent);
        call pick_ammo_four();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_four == 3) then begin
            call pick_ammo_four();
            call restock_items(case, min, max, percent);
            call pick_ammo_four();
            call restock_items(case, min, max, percent);
            call pick_ammo_four();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_four == 2) then begin
                call pick_ammo_four();
                call restock_items(case, min, max, percent);
                call pick_ammo_four();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_four == 1) then begin
                    call pick_ammo_four();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    ammo_sixteen := 0;
    ammo_seventeen := 0;
    ammo_eighteen := 0;
    ammo_ninteen := 0;
    random_numberof_ammo_four := 0;
end

procedure pick_ammo_four
begin
    call random_ammo_town_four();
    while (case == -1) do begin
        call random_ammo_town_four();
    end
end

procedure random_ammo_town_four
begin
    random_ammo_four := random(1, 4);
    if ((random_ammo_four == 1) and (ammo_sixteen == 0)) then begin
        ammo_sixteen := 1;
        case := 363;
    end
    else begin
        if ((random_ammo_four == 2) and (ammo_seventeen == 0)) then begin
            ammo_seventeen := 1;
            case := 14;
        end
        else begin
            if ((random_ammo_four == 3) and (ammo_eighteen == 0)) then begin
                ammo_eighteen := 1;
                case := 32;
            end
            else begin
                if ((random_ammo_four == 4) and (ammo_ninteen == 0)) then begin
                    ammo_ninteen := 1;
                    case := 37;
                end
                else begin
                    case := -1;
                end
            end
        end
    end
    random_ammo_four := 0;
    return case;
end

procedure number_of_random_ammo_four
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_four := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_four := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_four := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_four := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_four := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_four := random(3, 4);
                        end
                        else begin
                            random_numberof_ammo_four := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_four;
end

procedure ammo_town_three
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 25;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 2;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 3;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 4;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 5;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 7;
                            max := 14;
                        end
                    end
                end
            end
        end
    end
    call number_of_random_ammo_three();
    if (random_numberof_ammo_three == 4) then begin
        call pick_ammo_three();
        call restock_items(case, min, max, percent);
        call pick_ammo_three();
        call restock_items(case, min, max, percent);
        call pick_ammo_three();
        call restock_items(case, min, max, percent);
        call pick_ammo_three();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_three == 3) then begin
            call pick_ammo_three();
            call restock_items(case, min, max, percent);
            call pick_ammo_three();
            call restock_items(case, min, max, percent);
            call pick_ammo_three();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_three == 2) then begin
                call pick_ammo_three();
                call restock_items(case, min, max, percent);
                call pick_ammo_three();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_three == 1) then begin
                    call pick_ammo_three();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    ammo_twelve := 0;
    ammo_thirteen := 0;
    ammo_fourteen := 0;
    ammo_fifteen := 0;
    random_numberof_ammo_three := 0;
end

procedure pick_ammo_three
begin
    call random_ammo_town_three();
    while (case == -1) do begin
        call random_ammo_town_three();
    end
end

procedure random_ammo_town_three
begin
    random_ammo_three := random(1, 4);
    if ((random_ammo_three == 1) and (ammo_twelve == 0)) then begin
        ammo_twelve := 1;
        case := 121;
    end
    else begin
        if ((random_ammo_three == 2) and (ammo_thirteen == 0)) then begin
            ammo_thirteen := 1;
            case := 163;
        end
        else begin
            if ((random_ammo_three == 3) and (ammo_fourteen == 0)) then begin
                ammo_fourteen := 1;
                case := 357;
            end
            else begin
                if ((random_ammo_three == 4) and (ammo_fifteen == 0)) then begin
                    ammo_fifteen := 1;
                    case := 360;
                end
                else begin
                    case := -1;
                end
            end
        end
    end
    random_ammo_three := 0;
    return case;
end

procedure number_of_random_ammo_three
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_three := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_three := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_three := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_three := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_three := random(1, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_three := random(3, 4);
                        end
                        else begin
                            random_numberof_ammo_three := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_three;
end

procedure ammo_town_two
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 25;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 2;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 3;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 4;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 5;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 7;
                            max := 14;
                        end
                    end
                end
            end
        end
    end
    call number_of_random_ammo_two();
    if (random_numberof_ammo_two == 5) then begin
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_two == 4) then begin
            call pick_ammo_two();
            call restock_items(case, min, max, percent);
            call pick_ammo_two();
            call restock_items(case, min, max, percent);
            call pick_ammo_two();
            call restock_items(case, min, max, percent);
            call pick_ammo_two();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_two == 3) then begin
                call pick_ammo_two();
                call restock_items(case, min, max, percent);
                call pick_ammo_two();
                call restock_items(case, min, max, percent);
                call pick_ammo_two();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_two == 2) then begin
                    call pick_ammo_two();
                    call restock_items(case, min, max, percent);
                    call pick_ammo_two();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_numberof_ammo_two == 1) then begin
                        call pick_ammo_two();
                        call restock_items(case, min, max, percent);
                    end
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    ammo_seven := 0;
    ammo_eight := 0;
    ammo_nine := 0;
    ammo_ten := 0;
    ammo_eleven := 0;
    random_numberof_ammo_two := 0;
end

procedure pick_ammo_two
begin
    call random_ammo_town_two();
    while (case == -1) do begin
        call random_ammo_town_two();
    end
end

procedure random_ammo_town_two
begin
    random_ammo_two := random(1, 5);
    if ((random_ammo_two == 1) and (ammo_seven == 0)) then begin
        ammo_seven := 1;
        case := 111;
    end
    else begin
        if ((random_ammo_two == 2) and (ammo_eight == 0)) then begin
            ammo_eight := 1;
            case := 31;
        end
        else begin
            if ((random_ammo_two == 3) and (ammo_nine == 0)) then begin
                ammo_nine := 1;
                case := 34;
            end
            else begin
                if ((random_ammo_two == 4) and (ammo_ten == 0)) then begin
                    ammo_ten := 1;
                    case := 33;
                end
                else begin
                    if ((random_ammo_two == 5) and (ammo_eleven == 0)) then begin
                        ammo_eleven := 1;
                        case := 38;
                    end
                    else begin
                        case := -1;
                    end
                end
            end
        end
    end
    random_ammo_two := 0;
    return case;
end

procedure number_of_random_ammo_two
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_two := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_two := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_two := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_two := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_two := random(1, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_two := random(3, 5);
                        end
                        else begin
                            random_numberof_ammo_two := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_two;
end

procedure ammo_town_one
begin
    call determine_town_level();
    if (town_level == 1) then begin
        percent := 25;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 2;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 3;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 4;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 5;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 7;
                            max := 14;
                        end
                    end
                end
            end
        end
    end
    call number_of_random_ammo_one();
    if (random_numberof_ammo_one == 6) then begin
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_one == 5) then begin
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_one == 4) then begin
                call pick_ammo_one();
                call restock_items(case, min, max, percent);
                call pick_ammo_one();
                call restock_items(case, min, max, percent);
                call pick_ammo_one();
                call restock_items(case, min, max, percent);
                call pick_ammo_one();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_one == 3) then begin
                    call pick_ammo_one();
                    call restock_items(case, min, max, percent);
                    call pick_ammo_one();
                    call restock_items(case, min, max, percent);
                    call pick_ammo_one();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_numberof_ammo_one == 2) then begin
                        call pick_ammo_one();
                        call restock_items(case, min, max, percent);
                        call pick_ammo_one();
                        call restock_items(case, min, max, percent);
                    end
                    else begin
                        if (random_numberof_ammo_one == 1) then begin
                            call pick_ammo_one();
                            call restock_items(case, min, max, percent);
                        end
                    end
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    ammo_one := 0;
    ammo_two := 0;
    ammo_three := 0;
    ammo_four := 0;
    ammo_five := 0;
    ammo_six := 0;
    random_numberof_ammo_one := 0;
end

procedure pick_ammo_one
begin
    call random_ammo_town_one();
    while (case == -1) do begin
        call random_ammo_town_one();
    end
end

procedure random_ammo_town_one
begin
    random_ammo_one := random(1, 6);
    if ((random_ammo_one == 1) and (ammo_one == 0)) then begin
        ammo_one := 1;
        case := 29;
    end
    else begin
        if ((random_ammo_one == 2) and (ammo_two == 0)) then begin
            ammo_two := 1;
            case := 30;
        end
        else begin
            if ((random_ammo_one == 3) and (ammo_three == 0)) then begin
                ammo_three := 1;
                case := 95;
            end
            else begin
                if ((random_ammo_one == 4) and (ammo_four == 0)) then begin
                    ammo_four := 1;
                    case := 35;
                end
                else begin
                    if ((random_ammo_one == 5) and (ammo_five == 0)) then begin
                        ammo_five := 1;
                        case := 36;
                    end
                    else begin
                        if ((random_ammo_one == 6) and (ammo_six == 0)) then begin
                            ammo_six := 1;
                            case := 39;
                        end
                        else begin
                            case := -1;
                        end
                    end
                end
            end
        end
    end
    random_ammo_one := 0;
    return case;
end

procedure number_of_random_ammo_one
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_one := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_one := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_one := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_one := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_one := random(1, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_one := random(3, 6);
                        end
                        else begin
                            random_numberof_ammo_one := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_one;
end

procedure pick_herb
begin
    call random_herbs();
    while (case == -1) do begin
        call random_herbs();
    end
end

procedure add_ammo
begin
    call determine_town_level();
    if (town_level == 1) then begin
        call ammo_town_one();
    end
    else begin
        if (town_level == 2) then begin
            call ammo_town_one();
            call ammo_town_two();
        end
        else begin
            if (town_level == 3) then begin
                call ammo_town_one();
                call ammo_town_two();
                call ammo_town_three();
            end
            else begin
                if (town_level == 4) then begin
                    call ammo_town_one();
                    call ammo_town_two();
                    call ammo_town_three();
                    call ammo_town_four();
                end
                else begin
                    if (town_level == 5) then begin
                        call ammo_town_one();
                        call ammo_town_two();
                        call ammo_town_three();
                        call ammo_town_four();
                        call ammo_town_five();
                    end
                    else begin
                        if (town_level == 6) then begin
                            call ammo_town_one();
                            call ammo_town_two();
                            call ammo_town_three();
                            call ammo_town_four();
                            call ammo_town_five();
                            call ammo_town_six();
                        end
                    end
                end
            end
        end
    end
end

procedure pick_book
begin
    call random_skill_book();
    while (case == -1) do begin
        call random_skill_book();
    end
end

procedure random_skill_book
begin
    random_books := random(1, 18);
    if ((random_books == 18) and (book_eighteen == 0)) then begin
        book_eighteen := 1;
        case := 778;
    end
    else begin
        if ((random_books == 17) and (book_seventeen == 0)) then begin
            book_seventeen := 1;
            case := 779;
        end
        else begin
            if ((random_books == 16) and (book_sixteen == 0)) then begin
                book_sixteen := 1;
                case := 780;
            end
            else begin
                if ((random_books == 15) and (book_fifteen == 0)) then begin
                    book_fifteen := 1;
                    case := 781;
                end
                else begin
                    if ((random_books == 14) and (book_fourteen == 0)) then begin
                        book_fourteen := 1;
                        case := 782;
                    end
                    else begin
                        if ((random_books == 13) and (book_thirteen == 0)) then begin
                            book_thirteen := 1;
                            case := 783;
                        end
                        else begin
                            if ((random_books == 12) and (book_twelve == 0)) then begin
                                book_twelve := 1;
                                case := 784;
                            end
                            else begin
                                if ((random_books == 11) and (book_eleven == 0)) then begin
                                    book_eleven := 1;
                                    case := 785;
                                end
                                else begin
                                    if ((random_books == 10) and (book_ten == 0)) then begin
                                        book_ten := 1;
                                        case := 786;
                                    end
                                    else begin
                                        if ((random_books == 9) and (book_nine == 0)) then begin
                                            book_nine := 1;
                                            case := 787;
                                        end
                                        else begin
                                            if ((random_books == 8) and (book_eight == 0)) then begin
                                                book_eight := 1;
                                                case := 788;
                                            end
                                            else begin
                                                if ((random_books == 7) and (book_seven == 0)) then begin
                                                    book_seven := 1;
                                                    case := 789;
                                                end
                                                else begin
                                                    if ((random_books == 6) and (book_six == 0)) then begin
                                                        book_six := 1;
                                                        case := 790;
                                                    end
                                                    else begin
                                                        if ((random_books == 5) and (book_five == 0)) then begin
                                                            book_five := 1;
                                                            case := 791;
                                                        end
                                                        else begin
                                                            if ((random_books == 4) and (book_four == 0)) then begin
                                                                book_four := 1;
                                                                case := 792;
                                                            end
                                                            else begin
                                                                if ((random_books == 3) and (book_three == 0)) then begin
                                                                    book_three := 1;
                                                                    case := 793;
                                                                end
                                                                else begin
                                                                    if ((random_books == 2) and (book_two == 0)) then begin
                                                                        book_two := 1;
                                                                        case := 794;
                                                                    end
                                                                    else begin
                                                                        if ((random_books == 1) and (book_one == 0)) then begin
                                                                            book_one := 1;
                                                                            case := 795;
                                                                        end
                                                                        else begin
                                                                            case := -1;
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return case;
end

procedure add_books
begin
    call number_of_random_books();
    call determine_town_level();
    if (town_level == 1) then begin
        min := 0;
        max := 1;
        percent := 10;
    end
    else begin
        if (town_level == 2) then begin
            min := 0;
            max := 1;
            percent := 20;
        end
        else begin
            if (town_level == 3) then begin
                min := 1;
                max := 1;
                percent := 30;
            end
            else begin
                if (town_level == 4) then begin
                    min := 1;
                    max := 1;
                    percent := 40;
                end
                else begin
                    if (town_level == 5) then begin
                        min := 1;
                        max := 2;
                        percent := 50;
                    end
                    else begin
                        if (town_level == 6) then begin
                            min := 2;
                            max := 3;
                            percent := 60;
                        end
                    end
                end
            end
        end
    end
    if (random_book == 5) then begin
        call pick_book();
        call restock_items(case, min, max, percent);
        call pick_book();
        call restock_items(case, min, max, percent);
        call pick_book();
        call restock_items(case, min, max, percent);
        call pick_book();
        call restock_items(case, min, max, percent);
        call pick_book();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_book == 4) then begin
            call pick_book();
            call restock_items(case, min, max, percent);
            call pick_book();
            call restock_items(case, min, max, percent);
            call pick_book();
            call restock_items(case, min, max, percent);
            call pick_book();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_book == 3) then begin
                call pick_book();
                call restock_items(case, min, max, percent);
                call pick_book();
                call restock_items(case, min, max, percent);
                call pick_book();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_book == 2) then begin
                    call pick_book();
                    call restock_items(case, min, max, percent);
                    call pick_book();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_book == 1) then begin
                        call pick_book();
                        call restock_items(case, min, max, percent);
                    end
                    else begin
                        if (random_book == 0) then begin
                            call pick_book();
                            call restock_items(case, min, max, percent);
                        end
                    end
                end
            end
        end
    end
    book_one := 0;
    book_two := 0;
    book_three := 0;
    book_four := 0;
    book_five := 0;
    book_six := 0;
    book_seven := 0;
    book_eight := 0;
    book_nine := 0;
    book_ten := 0;
    book_eleven := 0;
    book_twelve := 0;
    book_thirteen := 0;
    book_fourteen := 0;
    book_fifteen := 0;
    book_sixteen := 0;
    book_seventeen := 0;
    book_eighteen := 0;
    case := 0;
    min := 0;
    max := 0;
    percent := 0;
end

procedure number_of_random_books
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_book := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_book := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_book := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_book := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_book := random(1, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_book := random(3, 5);
                        end
                        else begin
                            random_book := 0;
                        end
                    end
                end
            end
        end
    end
    return random_book;
end

procedure random_herbs
begin
    var_random_herbs := random(1, 10);
    if ((var_random_herbs == 10) and (herb_ten == 0)) then begin
        herb_ten := 1;
        case := 544;
    end
    else begin
        if ((var_random_herbs == 9) and (herb_nine == 0)) then begin
            herb_nine := 1;
            case := 797;
        end
        else begin
            if ((var_random_herbs == 8) and (herb_eight == 0)) then begin
                herb_eight := 1;
                case := 798;
            end
            else begin
                if ((var_random_herbs == 7) and (herb_seven == 0)) then begin
                    herb_seven := 1;
                    case := 799;
                end
                else begin
                    if ((var_random_herbs == 6) and (herb_six == 0)) then begin
                        herb_six := 1;
                        case := 272;
                    end
                    else begin
                        if ((var_random_herbs == 5) and (herb_five == 0)) then begin
                            herb_five := 1;
                            case := 271;
                        end
                        else begin
                            if ((var_random_herbs == 4) and (herb_four == 0)) then begin
                                herb_four := 1;
                                case := 759;
                            end
                            else begin
                                if ((var_random_herbs == 3) and (herb_three == 0)) then begin
                                    herb_three := 1;
                                    case := 796;
                                end
                                else begin
                                    if ((var_random_herbs == 2) and (herb_two == 0)) then begin
                                        herb_two := 1;
                                        case := 548;
                                    end
                                    else begin
                                        if ((var_random_herbs == 1) and (herb_one == 0)) then begin
                                            herb_one := 1;
                                            case := 755;
                                        end
                                        else begin
                                            case := -1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return case;
end

procedure add_money
begin
    call determine_town_level();
    if (town_level == 1) then begin
        item_caps_adjust(self_obj, -item_caps_total(self_obj));
        item_caps_adjust(self_obj, random(100, 300));
    end
    else begin
        if (town_level == 2) then begin
            item_caps_adjust(self_obj, -item_caps_total(self_obj));
            item_caps_adjust(self_obj, random(200, 600));
        end
        else begin
            if (town_level == 3) then begin
                item_caps_adjust(self_obj, -item_caps_total(self_obj));
                item_caps_adjust(self_obj, random(300, 900));
            end
            else begin
                if (town_level == 1) then begin
                    item_caps_adjust(self_obj, -item_caps_total(self_obj));
                    item_caps_adjust(self_obj, random(400, 1200));
                end
                else begin
                    if (town_level == 4) then begin
                        item_caps_adjust(self_obj, -item_caps_total(self_obj));
                        item_caps_adjust(self_obj, random(500, 1500));
                    end
                    else begin
                        if (town_level == 5) then begin
                            item_caps_adjust(self_obj, -item_caps_total(self_obj));
                            item_caps_adjust(self_obj, random(600, 1800));
                        end
                        else begin
                            if (town_level == 6) then begin
                                item_caps_adjust(self_obj, -item_caps_total(self_obj));
                                item_caps_adjust(self_obj, random(2500, 5000));
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure determine_town_level
begin
    call get_current_area();
    if ((current_town == "Arroyo") or (current_town == "Klamath") or (current_town == "Klamath Toxic Caves") or (current_town == "Mad Dog Area")) then begin
        town_level := 1;
    end
    if ((current_town == "Den") or (current_town == "Den Slave Run") or (current_town == "Modoc") or (current_town == "Vault 23") or (current_town == "Jennings Farm Area") or (current_town == "Truck") or (current_town == "Scraptown") or (current_town == "Modoc Thieves Guild") or (current_town == "Salvatore's Gun Stash") or (current_town == "Special Salvatore") or (current_town == "Salvatore Meeting") or (current_town == "Collyweb") or (current_town == "Primitive Tribe") or (current_town == "Ghost Farm")) then begin
        town_level := 2;
    end
    if ((current_town == "Gecko") or (current_town == "Vault City") or (current_town == "Raiders") or (current_town == "Special Whale") or (current_town == "Special Woodsman") or (current_town == "Special Head") or (current_town == "Special Shuttle") or (current_town == "Special Unwashed") or (current_town == "Special Bridge") or (current_town == "Special Cafe") or (current_town == "Special Holy 1") or (current_town == "Special Holy 2") or (current_town == "Special Guardian") or (current_town == "Special Toxic") or (current_town == "Special Pariah") or (current_town == "Special Brahmin") or (current_town == "Special Postman") or (current_town == "Special Salvator") or (current_town == "Dead Soldiers of Master Army") or (current_town == "Caravan Encounters") or (current_town == "DeathClaw Encounters") or (current_town == "Random Encounter Desert") or (current_town == "Random Encounter Mountain") or (current_town == "Random Encounter City") or (current_town == "Random Encounter Coast") or (current_town == "Random Encounter Cavern") or (current_town == "Bess Dead") or (current_town == "In Game Movie")) then begin
        town_level := 3;
    end
    if ((current_town == "Broken Hills") or (current_town == "New Reno") or (current_town == "Salvatore's Gun Stash") or (current_town == "Special Salvatore") or (current_town == "Salvatore Meeting") or (current_town == "Golgotha") or (current_town == "Reno Stables") or (current_town == "Redding") or (current_town == "Abbey") or (current_town == "Lars-City Carson") or (current_town == "Lars-City") or (current_town == "EPA") or (current_town == "Sierra Army Base")) then begin
        town_level := 4;
    end
    if ((current_town == "NCR") or (current_town == "Vault 15") or (current_town == "B21") or (current_town == "Vault 13")) then begin
        town_level := 5;
    end
    if ((current_town == "Military Base") or (current_town == "Navarro") or (current_town == "San Francisco") or (current_town == "Vault 14") or (current_town == "Brohdent") or (current_town == "BOS Facility") or (current_town == "BoS Help") or (current_town == "BoS Bunker") or (current_town == "Enclave")) then begin
        town_level := 6;
    end
    if (current_town == "") then begin
        town_level := 4;
    end
    return town_level;
end

procedure get_current_area
begin
    if ((CUR_MAP_ARCAVES) or (CUR_MAP_ARVILLAG) or (CUR_MAP_ARCAVES5) or (CUR_MAP_ARBRIDGE)) then begin
        current_town := "Arroyo";
    end
    if ((CUR_MAP_KLADWTWN) or (CUR_MAP_KLAMALL) or (CUR_MAP_KLARATCV) or (CUR_MAP_KLATRAP) or (CUR_MAP_KLAGRAZ) or (CUR_MAP_KLACANYN) or (CUR_MAP_KLACVENT)) then begin
        current_town := "Klamath";
    end
    if (CUR_MAP_KLATOXCV) then begin
        current_town := "Klamath Toxic Caves";
    end
    if (CUR_MAP_RNDMDDG) then begin
        current_town := "Mad Dog Area";
    end
    if ((CUR_MAP_DENBUS1) or (CUR_MAP_DENBUS2) or (CUR_MAP_DENRES1)) then begin
        current_town := "Den";
    end
    if ((CUR_MAP_PRIMIT) or (CUR_MAP_TRIBE02) or (CUR_MAP_SLVCAMP) or (CUR_MAP_TRIBE2)) then begin
        current_town := "Primitive Tribes";
    end
    if (CUR_MAP_TRIBE01) then begin
        current_town := "Primitive Tribe";
    end
    if (CUR_MAP_DNSLVRUN) then begin
        current_town := "Den Slave Run";
    end
    if (CUR_MAP_JENFARM7) then begin
        current_town := "Jennings Farm Area";
    end
    if (CUR_MAP_TRUCK) then begin
        current_town := "Truck";
    end
    if (CUR_MAP_SCRAPT) then begin
        current_town := "Scraptown";
    end
    if ((CUR_MAP_MODMAIN) or (CUR_MAP_MODINN) or (CUR_MAP_MODBRAH) or (CUR_MAP_MODGARD) or (CUR_MAP_MODSHIT) or (CUR_MAP_MODWELL)) then begin
        current_town := "Modoc";
    end
    if (CUR_MAP_CRISIENT) then begin
        current_town := "Vault 23";
    end
    if ((CUR_MAP_GSTFARM) or (CUR_MAP_GSTCAV1) or (CUR_MAP_GSTCAV2)) then begin
        current_town := "Ghost Farm";
    end
    if (CUR_MAP_MODOCT) then begin
        current_town := "Modoc Thieves Guild";
    end
    if (CUR_MAP_MODOCT2) then begin
        current_town := "Salvatore's Gun Stash";
    end
    if (CUR_MAP_MODOCT3) then begin
        current_town := "Special Salvatore";
    end
    if (CUR_MAP_MODOCT4) then begin
        current_town := "Salvatore Meeting";
    end
    if ((CUR_MAP_GECKSETL) or (CUR_MAP_GECKPWPL) or (CUR_MAP_GECKJUNK) or (CUR_MAP_GECKTUNL)) then begin
        current_town := "Gecko";
    end
    if ((CUR_MAP_VCTYCTYD) or (CUR_MAP_VCTYDWTN) or (CUR_MAP_VCTYCOCL) or (CUR_MAP_VCTYVLT)) then begin
        current_town := "Vault City";
    end
    if ((CUR_MAP_RAIDERS1) or (CUR_MAP_RAIDERS2)) then begin
        current_town := "Raiders";
    end
    if ((CUR_MAP_BROKEN1) or (CUR_MAP_BROKEN2)) then begin
        current_town := "Broken Hills";
    end
    if ((CUR_MAP_REDDOWN) or (CUR_MAP_REDWAME) or (CUR_MAP_REDWAN1) or (CUR_MAP_REDMENT) or (CUR_MAP_REDDTUN) or (CUR_MAP_REDMTUN)) then begin
        current_town := "Redding";
    end
    if ((CUR_MAP_NEWR1) or (CUR_MAP_NEWR2) or (CUR_MAP_NEWR3) or (CUR_MAP_NEWR4) or (CUR_MAP_NEWRCS) or (CUR_MAP_NEWRBA) or (CUR_MAP_NEWRVB)) then begin
        current_town := "New Reno";
    end
    if ((CUR_MAP_LARS1) or (CUR_MAP_LARS3) or (CUR_MAP_LARSSCRP) or (CUR_MAP_LARS2)) then begin
        current_town := "Lars-City";
    end
    if (CUR_MAP_CRSNMAIN) then begin
        current_town := "Lars-City Carson";
    end
    if (CUR_MAP_ABBEY) then begin
        current_town := "Abbey";
    end
    if ((CUR_MAP_EPAMAIN) or (CUR_MAP_EPAWRHSE)) then begin
        current_town := "EPA";
    end
    if ((CUR_MAP_COLLY) or (CUR_MAP_COLLY1)) then begin
        current_town := "Collyweb";
    end
    if (CUR_MAP_NEWRGO) then begin
        current_town := "Golgotha";
    end
    if (CUR_MAP_NEWRST) then begin
        current_town := "Reno Stables";
    end
    if ((CUR_MAP_DEPOLV1) or (CUR_MAP_DEPOLVA) or (CUR_MAP_DEPOLVB)) then begin
        current_town := "Sierra Army Base";
    end
    if ((CUR_MAP_NCRENT) or (CUR_MAP_NCR2) or (CUR_MAP_NCR1) or (CUR_MAP_NCR3) or (CUR_MAP_NCR4)) then begin
        current_town := "NCR";
    end
    if (CUR_MAP_B21) then begin
        current_town := "B21";
    end
    if ((CUR_MAP_V15ENT) or (CUR_MAP_V15ENTB) or (CUR_MAP_VAULT15) or (CUR_MAP_V15SENT)) then begin
        current_town := "Vault 15";
    end
    if ((CUR_MAP_VAULT13) or (CUR_MAP_V13ENT)) then begin
        current_town := "Vault 13";
    end
    if ((CUR_MAP_MBASE12) or (CUR_MAP_MBASE34) or (CUR_MAP_MBCLOSE)) then begin
        current_town := "Military Base";
    end
    if ((CUR_MAP_SFCHINA) or (CUR_MAP_SFDOCK) or (CUR_MAP_SFTANKER) or (CUR_MAP_SFSHUTL1) or (CUR_MAP_SFSHUTL2) or (CUR_MAP_SFELRONB) or (CUR_MAP_SFCHINA2)) then begin
        current_town := "San Francisco";
    end
    if ((CUR_MAP_BROHDENT1) or (CUR_MAP_BROHD121) or (CUR_MAP_BROHD341) or (CUR_MAP_BROHD1K)) then begin
        current_town := "Brohdent";
    end
    if ((CUR_MAP_V14ENT) or (CUR_MAP_VAULT14) or (CUR_MAP_VAULT14B)) then begin
        current_town := "Vault 14";
    end
    if (CUR_MAP_NAVARRO) then begin
        current_town := "Navarro";
    end
    if ((CUR_MAP_ENCDOCK) or (CUR_MAP_ENCDET) or (CUR_MAP_ENCFITE) or (CUR_MAP_ENCGD) or (CUR_MAP_ENCPRES) or (CUR_MAP_ENCRCTR) or (CUR_MAP_ENCTRP) or (CUR_MAP_ENCVERT) or (CUR_MAP_ENCFT2)) then begin
        current_town := "Enclave";
    end
    if ((CUR_MAP_BROHDENT) or (CUR_MAP_CITYCH3) or (CUR_MAP_BROHD34)) then begin
        current_town := "BoS Bunker";
    end
    if (CUR_MAP_BRHDHLP) then begin
        current_town := "BoS Help";
    end
    if ((CUR_MAP_EPAENT) or (CUR_MAP_EPAX)) then begin
        current_town := "BOS Facility";
    end
    if (CUR_MAP_RNDWHALE) then begin
        current_town := "Special Whale";
    end
    if (CUR_MAP_RNDTINWD) then begin
        current_town := "Special Woodsman";
    end
    if (CUR_MAP_RNDBHEAD) then begin
        current_town := "Special Head";
    end
    if (CUR_MAP_RNDSHUTL) then begin
        current_town := "Special Shuttle";
    end
    if (CUR_MAP_RNDUVILG) then begin
        current_town := "Special Unwashed";
    end
    if (CUR_MAP_RNDBRIDG) then begin
        current_town := "Special Bridge";
    end
    if (CUR_MAP_RNDCAFE) then begin
        current_town := "Special Cafe";
    end
    if (CUR_MAP_RNDHOLY1) then begin
        current_town := "Special Holy 1";
    end
    if (CUR_MAP_RNDHOLY2) then begin
        current_town := "Special Holy 2";
    end
    if (CUR_MAP_RNDFORVR) then begin
        current_town := "Special Guardian";
    end
    if (CUR_MAP_RNDTOXIC) then begin
        current_town := "Special Toxic";
    end
    if (CUR_MAP_RNDPARIH) then begin
        current_town := "Special Pariah";
    end
    if (CUR_MAP_RNDEXCOW) then begin
        current_town := "Special Brahmin";
    end
    if (CUR_MAP_RNDPOSTM) then begin
        current_town := "Special Postman";
    end
    if (CUR_MAP_MODOCT3) then begin
        current_town := "Special Salvator";
    end
    if (CUR_MAP_RNDMSTR) then begin
        current_town := "Dead Soldiers of Master Army";
    end
    if ((CUR_MAP_BHRNDMNT) or (CUR_MAP_BHRNDDST)) then begin
        current_town := "Caravan Encounters";
    end
    if (CUR_MAP_GAMMOVIE) then begin
        current_town := "In Game Movie";
    end
    if (CUR_MAP_RNDBESS) then begin
        current_town := "Bess Dead";
    end
    if ((CUR_MAP_RNDBD) or (CUR_MAP_RNDBD)) then begin
        current_town := "DeathClaw Encounters";
    end
    if ((CUR_MAP_DESERT1) or (CUR_MAP_DESERT2) or (CUR_MAP_DESERT3) or (CUR_MAP_DESERT4) or (CUR_MAP_DESERT5) or (CUR_MAP_DESERT6) or (CUR_MAP_DESERT7) or (CUR_MAP_DESERT213) or (CUR_MAP_DESERT214) or (CUR_MAP_DESERT215) or (CUR_MAP_DESERT216) or (CUR_MAP_DESERT217)) then begin
        current_town := "Random Encounter Desert";
    end
    if ((CUR_MAP_MOUNTN1) or (CUR_MAP_MOUNTN2) or (CUR_MAP_MOUNTN3) or (CUR_MAP_MOUNTN4) or (CUR_MAP_MOUNTN5) or (CUR_MAP_MOUNTN6)) then begin
        current_town := "Random Encounter Mountain";
    end
    if ((CUR_MAP_CITY1) or (CUR_MAP_CITY2) or (CUR_MAP_CITY3) or (CUR_MAP_CITY4) or (CUR_MAP_CITY5) or (CUR_MAP_CITY6) or (CUR_MAP_CITY7) or (CUR_MAP_CITY8)) then begin
        current_town := "Random Encounter City";
    end
    if ((CUR_MAP_COAST1) or (CUR_MAP_COAST2) or (CUR_MAP_COAST3) or (CUR_MAP_COAST4) or (CUR_MAP_COAST5) or (CUR_MAP_COAST6) or (CUR_MAP_COAST7) or (CUR_MAP_COAST8) or (CUR_MAP_COAST9) or (CUR_MAP_COAST10) or (CUR_MAP_COAST11) or (CUR_MAP_07DESERT)) then begin
        current_town := "Random Encounter Coast";
    end
    if ((CUR_MAP_CAVE0) or (CUR_MAP_CAVE1) or (CUR_MAP_CAVE2) or (CUR_MAP_CAVE3) or (CUR_MAP_CAVE4) or (CUR_MAP_CAVE5) or (CUR_MAP_CAVE6) or (CUR_MAP_CAVE7)) then begin
        current_town := "Random Encounter Cavern";
    end
    return current_town;
end

procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure restock_items(variable arg0, variable arg1, variable arg2, variable arg3)
begin
    restock_amt := random(arg1, arg2);
    if (obj_is_carrying_obj_pid(self_obj, arg0) < restock_amt) then begin
        if (arg3 >= random(1, 100)) then begin
            if (obj_is_carrying_obj_pid(self_obj, arg0) < restock_amt) then begin
                restock_obj := create_object(arg0, 0, 0);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, arg0));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, arg0) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, arg0);
                    if ((obj_is_carrying_obj_pid(self_obj, arg0) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, arg0) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, arg0);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, arg0);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, arg0) < restock_amt) then begin
            restock_obj := create_object(arg0, 0, 0);
            add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, arg0));
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, arg0) > restock_amt) then begin
                removed_qty := obj_is_carrying_obj_pid(self_obj, arg0);
                if ((obj_is_carrying_obj_pid(self_obj, arg0) - restock_amt) < removed_qty) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, arg0) - restock_amt;
                end
                if (removed_qty > 0) then begin
                    restock_obj := obj_carrying_pid_obj(self_obj, arg0);
                    if (obj_type(self_obj) == 1) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, arg0);
                        if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                            if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                restock_obj := critter_inven_obj(self_obj, 0);
                                debug_msg("armour pid == " + obj_pid(restock_obj));
                                rm_obj_from_inven(self_obj, restock_obj);
                                add_obj_to_inven(self_obj, restock_obj);
                            end
                        end
                        else begin
                            if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                inven_unwield(self_obj);
                            end
                        end
                    end
                    restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                    destroy_object(restock_obj);
                end
                restock_obj := 0;
                restock_amt := 0;
            end
            else begin
                restock_obj := 0;
            end
        end
    end
end

procedure inventory_keepers
begin
    LVar0 := create_object(128, 5, 0);
    if (obj_is_carrying_obj_pid(self_obj, 479) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 479);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 356) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 356);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 377) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 377);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 366) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 366);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 446) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 446);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 492) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 492);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 288) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 288);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 253) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 253);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 254) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 254);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 266) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 266);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 267) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 267);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 258) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 258);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 255) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 255);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 256) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 256);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 257) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 257);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 96) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 96);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 97) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 97);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 99) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 99);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 223) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 223);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 252) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 252);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 298) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 298);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 302) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 302);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 303) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 303);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 305) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 305);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 306) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 306);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 307) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 307);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 335) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 335);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 336) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 336);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 337) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 337);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 338) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 338);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 339) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 339);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 340) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 340);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 341) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 341);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 414) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 414);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 422) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 422);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 431);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 431);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 432) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 432);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 431);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 447) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 447);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 448) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 448);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 449) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 449);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 456) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 456);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 468) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 468);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 471) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 471);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 476) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 476);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 488) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 488);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 495) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 495);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    return LVar0;
end

procedure add_herbs
begin
    call determine_town_level();
    if (town_level == 1) then begin
        min := 2;
        max := 4;
        percent := 15;
    end
    else begin
        if (town_level == 2) then begin
            min := 3;
            max := 6;
            percent := 25;
        end
        else begin
            if (town_level == 3) then begin
                min := 4;
                max := 7;
                percent := 35;
            end
            else begin
                if (town_level == 4) then begin
                    min := 5;
                    max := 9;
                    percent := 45;
                end
                else begin
                    if (town_level == 5) then begin
                        min := 6;
                        max := 10;
                        percent := 55;
                    end
                    else begin
                        if (town_level == 6) then begin
                            min := 7;
                            max := 12;
                            percent := 65;
                        end
                    end
                end
            end
        end
    end
    number_of_herbs := random(1, 5);
    if (number_of_herbs == 5) then begin
        case := 807;
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (number_of_herbs == 4) then begin
            case := 807;
            call restock_items(case, min, max, percent);
            call pick_herb();
            call restock_items(case, min, max, percent);
            call pick_herb();
            call restock_items(case, min, max, percent);
            call pick_herb();
            call restock_items(case, min, max, percent);
            call pick_herb();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (number_of_herbs == 3) then begin
                case := 807;
                call restock_items(case, min, max, percent);
                call pick_herb();
                call restock_items(case, min, max, percent);
                call pick_herb();
                call restock_items(case, min, max, percent);
                call pick_herb();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (number_of_herbs == 2) then begin
                    case := 807;
                    call restock_items(case, min, max, percent);
                    call pick_herb();
                    call restock_items(case, min, max, percent);
                    call pick_herb();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (number_of_herbs == 1) then begin
                        case := 807;
                        call restock_items(case, min, max, percent);
                        call pick_herb();
                        call restock_items(case, min, max, percent);
                    end
                end
            end
        end
    end
    herb_one := 0;
    herb_two := 0;
    herb_three := 0;
    herb_four := 0;
    herb_five := 0;
    herb_six := 0;
    herb_seven := 0;
    herb_eight := 0;
    herb_nine := 0;
    herb_ten := 0;
    case := 0;
    min := 0;
    max := 0;
    percent := 0;
end

procedure start
begin
    redding_john_box := self_obj;
end

procedure map_enter_p_proc
begin
    redding_john_box := self_obj;
    if (is_loading_game == 0) then begin
        if ((((7 * (24 * (60 * (60 * 10)))) + local_var(0)) <= game_time) or (map_first_run and (local_var(0) == 0))) then begin
            call add_stimpacks();
            call add_herbs();
            call add_money();
            call add_books();
            call add_drugs();
            set_local_var(0, game_time);
        end
    end
end

procedure map_update_p_proc
begin
    redding_john_box := self_obj;
end
