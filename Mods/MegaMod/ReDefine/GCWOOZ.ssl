variable tmp_gen_rep;
variable global_temp;
variable restock_amt;
variable restock_obj;
variable removed_qty;
variable Static_Reaction;
variable Evil_Critter;
variable Slavery_Tolerant := 2;
variable Karma_Perception;
variable reaction_bonus_town_rep;
variable reaction_bonus_karma;

procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure combat;
procedure timed_event_p_proc;
procedure wooz_barter;
procedure Node910;
procedure Node920;
procedure Node922;
procedure Node924;
procedure Node930;
procedure Node995;
procedure Node996;
procedure Node997;
procedure Node998;
procedure Node999;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node029;
procedure Node030;
procedure Node031;
procedure Node032;
procedure Node033;
procedure Node034;
procedure Node035;
procedure Node036;
procedure Node037;
procedure Node038;
procedure Node039;
procedure Node040;
procedure Node041;
procedure Node042;
procedure Node043;
procedure Node044;
procedure Node045;
procedure Node046;
procedure Node047;
procedure Node050;
procedure Node051;
procedure Node052;
procedure Node053;
procedure Node054;
procedure TeamX001;
procedure TeamX002;
procedure TeamX003;
procedure TeamX004;
procedure TeamX005;
procedure TeamX006;
procedure TeamX007;
procedure TeamX008;
procedure TeamX009;
procedure TeamX010;
procedure TeamX011;
procedure TeamX012;
procedure TeamX013;
procedure TeamX014;
procedure TeamX015;
procedure TeamX016;
procedure TeamX017;
procedure TeamX018;
procedure TeamX019;

variable Only_Once;
variable k;
variable item;
variable In_Timed_Event;
variable four_before;
variable seven_before;
variable tragic_addiction;


procedure start
begin
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (global_var(GVAR_GECKO_MELTDOWN) == 1) then begin
            set_local_var(5, 1);
            attack(dude_obj);
        end
        else begin
            if (local_var(5) == 2) then begin
                set_local_var(5, 1);
                attack(dude_obj);
            end
        end
    end
    else begin
        if ((random(0, 100) == 1) and (In_Timed_Event == 0)) then begin
            In_Timed_Event := 1;
            if (map_var(1) == 0) then begin
                add_timer_event(self_obj, game_ticks(random(20, 40)), 1);
            end
            else begin
                if (map_var(1) == 1) then begin
                    add_timer_event(self_obj, game_ticks(random(18, 36)), 1);
                end
                else begin
                    if (map_var(1) == 2) then begin
                        add_timer_event(self_obj, game_ticks(random(15, 30)), 1);
                    end
                    else begin
                        if (map_var(1) > 2) then begin
                            add_timer_event(self_obj, game_ticks(random(10, 20)), 1);
                        end
                    end
                end
            end
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(5, 2);
    end
end

procedure talk_p_proc
begin
    set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
    set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
    set_global_var(GVAR_KARMA_DEFENDER, 0);
    set_global_var(GVAR_KARMA_WANDERER, 0);
    set_global_var(GVAR_KARMA_BETRAYER, 0);
    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
    set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
    set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
    tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION);
    if (has_trait(TRAIT_PERK, dude_obj, PERK_karma_beacon_perk)) then begin
        tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION) * 2;
    end
    if (tmp_gen_rep >= 1000) then begin
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
    end
    else begin
        if (tmp_gen_rep >= 750) then begin
            set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
        end
        else begin
            if (tmp_gen_rep >= 500) then begin
                set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
            end
            else begin
                if (tmp_gen_rep >= 250) then begin
                    set_global_var(GVAR_KARMA_DEFENDER, 1);
                end
                else begin
                    if (tmp_gen_rep > -250) then begin
                        set_global_var(GVAR_KARMA_WANDERER, 1);
                    end
                    else begin
                        if (tmp_gen_rep > -500) then begin
                            set_global_var(GVAR_KARMA_BETRAYER, 1);
                        end
                        else begin
                            if (tmp_gen_rep > -750) then begin
                                set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                            end
                            else begin
                                if (tmp_gen_rep > -1000) then begin
                                    set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                end
                                else begin
                                    set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    if (local_var(2) == 0) then begin
        set_local_var(2, 1);
        set_local_var(3, (dude_charisma - self_charisma) * 5);
        debug_msg("Base Reaction == " + local_var(3));
    end
    Static_Reaction := 0;
    set_local_var(0, 0);
    debug_msg("Start Reaction == " + local_var(0));
    if (reaction_bonus_karma >= 0) then begin
        reaction_bonus_karma := reaction_bonus_karma / 1000;
    end
    else begin
        reaction_bonus_karma := -1 * (-1 * reaction_bonus_karma / 1000);
    end
    if (global_var(GVAR_TOWN_REP_GECKO) >= 0) then begin
        reaction_bonus_town_rep := global_var(GVAR_TOWN_REP_GECKO) / 2;
    end
    else begin
        reaction_bonus_town_rep := -1 * (-1 * global_var(GVAR_TOWN_REP_GECKO) / 2);
    end
    if (has_trait(TRAIT_TRAIT, dude_obj, TRAIT_sex_appeal)) then begin
        if (dude_gender == self_gender) then begin
            Static_Reaction := Static_Reaction + -20;
        end
        else begin
            Static_Reaction := Static_Reaction + 20;
        end
        debug_msg("Sex Appeal Bonus == " + Static_Reaction);
    end
    else begin
        debug_msg("Sex Appeal Bonus == 0");
    end
    if (Evil_Critter == 1) then begin
        if (reaction_bonus_karma >= 0) then begin
            Static_Reaction := Static_Reaction - reaction_bonus_karma;
        end
        else begin
            Static_Reaction := Static_Reaction + reaction_bonus_karma;
        end
        debug_msg("Karma Reaction Bonus == " + Static_Reaction);
        if (reaction_bonus_town_rep >= 0) then begin
            Static_Reaction := Static_Reaction - reaction_bonus_town_rep;
        end
        else begin
            Static_Reaction := Static_Reaction + reaction_bonus_town_rep;
        end
        debug_msg("Town Rep Bonus == " + Static_Reaction);
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION);
        if (has_trait(TRAIT_PERK, dude_obj, PERK_karma_beacon_perk)) then begin
            tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION) * 2;
        end
        if (tmp_gen_rep >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (tmp_gen_rep >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (tmp_gen_rep >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (tmp_gen_rep >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (tmp_gen_rep > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (tmp_gen_rep > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (tmp_gen_rep > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (tmp_gen_rep > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        if (global_var(GVAR_KARMA_HOLY_WARRIOR) == 1) then begin
            Static_Reaction := Static_Reaction - 20;
        end
        else begin
            if (global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES) == 1) then begin
                Static_Reaction := Static_Reaction - 15;
            end
            else begin
                if (global_var(GVAR_KARMA_SHIELD_OF_HOPE) == 1) then begin
                    Static_Reaction := Static_Reaction - 10;
                end
                else begin
                    if (global_var(GVAR_KARMA_DEFENDER) == 1) then begin
                        Static_Reaction := Static_Reaction - 5;
                    end
                    else begin
                        if (global_var(GVAR_KARMA_WANDERER) == 1) then begin
                            Static_Reaction := Static_Reaction - 0;
                        end
                        else begin
                            if (global_var(GVAR_KARMA_BETRAYER) == 1) then begin
                                Static_Reaction := Static_Reaction + -5;
                            end
                            else begin
                                if (global_var(GVAR_KARMA_SWORD_OF_DESPAIR) == 1) then begin
                                    Static_Reaction := Static_Reaction + -10;
                                end
                                else begin
                                    if (global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE) == 1) then begin
                                        Static_Reaction := Static_Reaction + -15;
                                    end
                                    else begin
                                        Static_Reaction := Static_Reaction + -20;
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        debug_msg("Bad Person Reaction Bonus == " + Static_Reaction);
    end
    else begin
        Static_Reaction := Static_Reaction + reaction_bonus_karma;
        debug_msg("Karma Reaction Bonus == " + Static_Reaction);
        Static_Reaction := Static_Reaction + reaction_bonus_town_rep;
        debug_msg("Town Rep Bonus == " + Static_Reaction);
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION);
        if (has_trait(TRAIT_PERK, dude_obj, PERK_karma_beacon_perk)) then begin
            tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION) * 2;
        end
        if (tmp_gen_rep >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (tmp_gen_rep >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (tmp_gen_rep >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (tmp_gen_rep >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (tmp_gen_rep > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (tmp_gen_rep > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (tmp_gen_rep > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (tmp_gen_rep > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        if (global_var(GVAR_KARMA_HOLY_WARRIOR) == 1) then begin
            Static_Reaction := Static_Reaction + 20;
        end
        else begin
            if (global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES) == 1) then begin
                Static_Reaction := Static_Reaction + 15;
            end
            else begin
                if (global_var(GVAR_KARMA_SHIELD_OF_HOPE) == 1) then begin
                    Static_Reaction := Static_Reaction + 10;
                end
                else begin
                    if (global_var(GVAR_KARMA_DEFENDER) == 1) then begin
                        Static_Reaction := Static_Reaction + 5;
                    end
                    else begin
                        if (global_var(GVAR_KARMA_WANDERER) == 1) then begin
                            Static_Reaction := Static_Reaction + 0;
                        end
                        else begin
                            if (global_var(GVAR_KARMA_BETRAYER) == 1) then begin
                                Static_Reaction := Static_Reaction + -5;
                            end
                            else begin
                                if (global_var(GVAR_KARMA_SWORD_OF_DESPAIR) == 1) then begin
                                    Static_Reaction := Static_Reaction + -10;
                                end
                                else begin
                                    if (global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE) == 1) then begin
                                        Static_Reaction := Static_Reaction + -15;
                                    end
                                    else begin
                                        Static_Reaction := Static_Reaction + -20;
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        debug_msg("Good Person Reaction Bonus == " + Static_Reaction);
    end
    if (Slavery_Tolerant == 0) then begin
        if (global_var(GVAR_REPUTATION_SLAVER) == 1) then begin
            Static_Reaction := Static_Reaction + (2 * -25);
        end
    end
    else begin
        if (Slavery_Tolerant == 1) then begin
            if (global_var(GVAR_REPUTATION_SLAVER) == 1) then begin
                Static_Reaction := Static_Reaction + -25;
            end
        end
        else begin
            if (Slavery_Tolerant == 3) then begin
                if (global_var(GVAR_REPUTATION_SLAVER) == 1) then begin
                    Static_Reaction := Static_Reaction - -25;
                end
            end
        end
    end
    debug_msg("Slaver + Aligned Reaction == " + Static_Reaction);
    Static_Reaction := Static_Reaction + (10 * has_trait(TRAIT_PERK, dude_obj, PERK_presence));
    debug_msg("Presence Reaction == " + Static_Reaction);
    if (global_var(GVAR_CHILDKILLER_REPUTATION) >= 2) then begin
        Static_Reaction := Static_Reaction + -30;
    end
    debug_msg("Childkiller Reaction == " + Static_Reaction);
    if (has_trait(TRAIT_PERK, dude_obj, PERK_cult_of_personality)) then begin
        if (Evil_Critter == 1) then begin
            if (Static_Reaction > 0) then begin
                Static_Reaction := Static_Reaction * -1;
            end
        end
        else begin
            if (Static_Reaction < 0) then begin
                Static_Reaction := Static_Reaction * -1;
            end
        end
    end
    set_local_var(0, local_var(3) + Static_Reaction);
    debug_msg("Initial Reaction == " + local_var(0));
    if (local_var(0) <= -75) then begin
        set_local_var(1, -4);
    end
    else begin
        if (local_var(0) <= -50) then begin
            set_local_var(1, -3);
        end
        else begin
            if (local_var(0) <= -25) then begin
                set_local_var(1, -2);
            end
            else begin
                if (local_var(0) <= -10) then begin
                    set_local_var(1, -1);
                end
                else begin
                    if (local_var(0) <= 10) then begin
                        set_local_var(1, 0);
                    end
                    else begin
                        if (local_var(0) <= 25) then begin
                            set_local_var(1, 1);
                        end
                        else begin
                            if (local_var(0) <= 50) then begin
                                set_local_var(1, 2);
                            end
                            else begin
                                if (local_var(0) <= 75) then begin
                                    set_local_var(1, 3);
                                end
                                else begin
                                    set_local_var(1, 4);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    if (local_var(13) < 1) then begin
        if (((game_time / (10 * 60 * 60 * 24)) - local_var(14)) > 7) then begin
            set_local_var(13, 7);
            set_local_var(14, game_time / (10 * 60 * 60 * 24));
        end
    end
    if (local_var(6) == 1) then begin
        call Node998();
    end
    else begin
        if ((global_var(GVAR_MCGREW_TEACH) == 0) and obj_is_carrying_obj_pid(dude_obj, 760)) then begin
            start_gdialog(138, self_obj, 4, -1, -1);
            gsay_start;
            call TeamX001();
            gsay_end;
            end_dialogue;
        end
        else begin
            if (obj_is_carrying_obj_pid(dude_obj, 304)) then begin
                if (local_var(13) > 0) then begin
                    start_gdialog(138, self_obj, 4, -1, -1);
                    gsay_start;
                    call Node027();
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    float_msg(self_obj, mstr(random(375, 377)), FLOAT_MSG_RED);
                end
            end
            else begin
                if (local_var(1) < -2) then begin
                    start_gdialog(138, self_obj, 4, -1, -1);
                    gsay_start;
                    call Node020();
                    gsay_end;
                    end_dialogue;
                end
                else begin
                    start_gdialog(138, self_obj, 4, -1, -1);
                    gsay_start;
                    call Node001();
                    gsay_end;
                    end_dialogue;
                end
            end
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(4) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1)) and (global_var(GVAR_CHILDKILLER_REPUTATION) == 0)) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + -10);
        debug_msg("Player gains " + -10 + " Karma Points.");
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION);
        if (has_trait(TRAIT_PERK, dude_obj, PERK_karma_beacon_perk)) then begin
            tmp_gen_rep := global_var(GVAR_PLAYER_REPUTATION) * 2;
        end
        if (tmp_gen_rep >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (tmp_gen_rep >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (tmp_gen_rep >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (tmp_gen_rep >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (tmp_gen_rep > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (tmp_gen_rep > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (tmp_gen_rep > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (tmp_gen_rep > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        set_global_var(GVAR_TOWN_REP_GECKO, global_var(GVAR_TOWN_REP_GECKO) + -5);
        debug_msg("Added " + -5 + " to Town Rep");
    end
    set_global_var(GVAR_WESTIN_HEART_TROUBLE, global_var(GVAR_WESTIN_HEART_TROUBLE) bwor 2);
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(101);
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(6, 1);
        set_global_var(GVAR_ENEMY_GECKO, 1);
    end
end

procedure map_enter_p_proc
begin
    if ((game_time < 0) and (local_var(17) == 0)) then begin
        set_local_var(16, game_time - 1);
        set_local_var(17, 1);
    end
    if (local_var(16) < game_time) then begin
        debug_msg("Should have restocked");
        restock_amt := random(5, 10);
        if (obj_is_carrying_obj_pid(self_obj, 310) < restock_amt) then begin
            if (100 >= random(1, 100)) then begin
                if (obj_is_carrying_obj_pid(self_obj, 310) < restock_amt) then begin
                    restock_obj := create_object(310, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 310));
                end
                else begin
                    if (obj_is_carrying_obj_pid(self_obj, 310) > restock_amt) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 310);
                        if ((obj_is_carrying_obj_pid(self_obj, 310) - restock_amt) < removed_qty) then begin
                            removed_qty := obj_is_carrying_obj_pid(self_obj, 310) - restock_amt;
                        end
                        if (removed_qty > 0) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 310);
                            if (obj_type(self_obj) == 1) then begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 310);
                                if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                    if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                        restock_obj := critter_inven_obj(self_obj, 0);
                                        debug_msg("armour pid == " + obj_pid(restock_obj));
                                        rm_obj_from_inven(self_obj, restock_obj);
                                        add_obj_to_inven(self_obj, restock_obj);
                                    end
                                end
                                else begin
                                    if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                        inven_unwield(self_obj);
                                    end
                                end
                            end
                            restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                            destroy_object(restock_obj);
                        end
                        restock_obj := 0;
                        restock_amt := 0;
                    end
                    else begin
                        restock_obj := 0;
                    end
                end
            end
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 310) < restock_amt) then begin
                restock_obj := create_object(310, 0, 0);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 310));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 310) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 310);
                    if ((obj_is_carrying_obj_pid(self_obj, 310) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 310) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 310);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 310);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
        restock_amt := random(5, 10);
        if (obj_is_carrying_obj_pid(self_obj, 469) < restock_amt) then begin
            if (100 >= random(1, 100)) then begin
                if (obj_is_carrying_obj_pid(self_obj, 469) < restock_amt) then begin
                    restock_obj := create_object(469, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 469));
                end
                else begin
                    if (obj_is_carrying_obj_pid(self_obj, 469) > restock_amt) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 469);
                        if ((obj_is_carrying_obj_pid(self_obj, 469) - restock_amt) < removed_qty) then begin
                            removed_qty := obj_is_carrying_obj_pid(self_obj, 469) - restock_amt;
                        end
                        if (removed_qty > 0) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 469);
                            if (obj_type(self_obj) == 1) then begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 469);
                                if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                    if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                        restock_obj := critter_inven_obj(self_obj, 0);
                                        debug_msg("armour pid == " + obj_pid(restock_obj));
                                        rm_obj_from_inven(self_obj, restock_obj);
                                        add_obj_to_inven(self_obj, restock_obj);
                                    end
                                end
                                else begin
                                    if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                        inven_unwield(self_obj);
                                    end
                                end
                            end
                            restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                            destroy_object(restock_obj);
                        end
                        restock_obj := 0;
                        restock_amt := 0;
                    end
                    else begin
                        restock_obj := 0;
                    end
                end
            end
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 469) < restock_amt) then begin
                restock_obj := create_object(469, 0, 0);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 469));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 469) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 469);
                    if ((obj_is_carrying_obj_pid(self_obj, 469) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 469) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 469);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 469);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
        restock_amt := random(30, 60);
        if (obj_is_carrying_obj_pid(self_obj, 41) < restock_amt) then begin
            if (100 >= random(1, 100)) then begin
                if (obj_is_carrying_obj_pid(self_obj, 41) < restock_amt) then begin
                    restock_obj := create_object(41, 0, 0);
                    add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 41));
                end
                else begin
                    if (obj_is_carrying_obj_pid(self_obj, 41) > restock_amt) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 41);
                        if ((obj_is_carrying_obj_pid(self_obj, 41) - restock_amt) < removed_qty) then begin
                            removed_qty := obj_is_carrying_obj_pid(self_obj, 41) - restock_amt;
                        end
                        if (removed_qty > 0) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 41);
                            if (obj_type(self_obj) == 1) then begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 41);
                                if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                    if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                        restock_obj := critter_inven_obj(self_obj, 0);
                                        debug_msg("armour pid == " + obj_pid(restock_obj));
                                        rm_obj_from_inven(self_obj, restock_obj);
                                        add_obj_to_inven(self_obj, restock_obj);
                                    end
                                end
                                else begin
                                    if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                        inven_unwield(self_obj);
                                    end
                                end
                            end
                            restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                            destroy_object(restock_obj);
                        end
                        restock_obj := 0;
                        restock_amt := 0;
                    end
                    else begin
                        restock_obj := 0;
                    end
                end
            end
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 41) < restock_amt) then begin
                restock_obj := create_object(41, 0, 0);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 41));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 41) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 41);
                    if ((obj_is_carrying_obj_pid(self_obj, 41) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 41) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 41);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 41);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    inven_unwield(self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
        set_local_var(16, (random(1, 4) * (24 * (60 * (60 * 10)))) + game_time);
    end
    if (local_var(12) == 0) then begin
        set_local_var(12, 1);
        set_local_var(13, 14);
        set_local_var(14, game_time / (10 * 60 * 60 * 24));
    end
    Only_Once := 0;
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 49);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_TOUGH_CITIZEN);
end

procedure combat
begin
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        float_msg(self_obj, mstr(random(700, 714)), FLOAT_MSG_RED);
        In_Timed_Event := 0;
    end
end

procedure wooz_barter
begin
    gdialog_barter;
    call Node015();
end

procedure Node910
begin
    if (global_var(GVAR_VAULT_PLANT_STATUS) == 9) then begin
        call Node008();
    end
    else begin
        call Node007();
    end
end

procedure Node920
begin
    if (item_caps_total(dude_obj) >= 5) then begin
        item_caps_adjust(dude_obj, -5);
        item := create_object(310, 0, 0);
        add_obj_to_inven(dude_obj, item);
        Reply(723);
        giq_option(4, NAME, 311, Node004, NEUTRAL_REACTION);
        giq_option(4, NAME, 726, Node007, NEUTRAL_REACTION);
        giq_option(4, NAME, 725, Node999, NEUTRAL_REACTION);
    end
    else begin
        call Node008();
    end
end

procedure Node922
begin
    if (item_caps_total(dude_obj) >= 12) then begin
        item_caps_adjust(dude_obj, -12);
        item := create_object(311, 0, 0);
        add_obj_to_inven(dude_obj, item);
        Reply(723);
        giq_option(4, NAME, 311, Node004, NEUTRAL_REACTION);
        giq_option(4, NAME, 726, Node007, NEUTRAL_REACTION);
        giq_option(4, NAME, 725, Node999, NEUTRAL_REACTION);
    end
    else begin
        call Node008();
    end
end

procedure Node924
begin
    if (item_caps_total(dude_obj) >= 35) then begin
        item_caps_adjust(dude_obj, -35);
        item := create_object(310, 0, 0);
        add_obj_to_inven(dude_obj, item);
        set_local_var(11, local_var(11) + 1);
        if (local_var(11) == 1) then begin
            set_map_var(1, 1);
            set_global_var(GVAR_TOWN_REP_GECKO, global_var(GVAR_TOWN_REP_GECKO) + 2);
        end
        else begin
            if (local_var(11) == 2) then begin
                set_map_var(1, 2);
                set_global_var(GVAR_TOWN_REP_GECKO, global_var(GVAR_TOWN_REP_GECKO) + 4);
            end
            else begin
                if (local_var(11) == 3) then begin
                    set_map_var(1, 3);
                    set_global_var(GVAR_TOWN_REP_GECKO, global_var(GVAR_TOWN_REP_GECKO) + 11);
                    set_local_var(10, 2);
                end
                else begin
                    set_local_var(11, 4);
                end
            end
        end
        Reply(731);
        giq_option(4, NAME, 311, Node004, NEUTRAL_REACTION);
        giq_option(4, NAME, 732, Node007, NEUTRAL_REACTION);
        giq_option(4, NAME, 725, Node999, NEUTRAL_REACTION);
    end
    else begin
        call Node008();
    end
end

procedure Node930
begin
    k := random(1, 5);
    gfade_out(600);
    game_time_advance(game_ticks(k * 3600));
    gfade_in(600);
    if (local_var(15) <= 5) then begin
        set_local_var(15, local_var(15) + 1);
        if (local_var(15) == 5) then begin
            set_global_var(GVAR_ADDICT_TRAGIC, 1);
            if (not(is_iface_tag_active(4))) then begin
                show_iface_tag(4);
            end
            add_timer_event(dude_obj, (7 * (24 * (60 * (60 * 10)))) - 10, 5);
            display_mstr(730);
        end
    end
    if (obj_is_carrying_obj_pid(dude_obj, 304)) then begin
        if (is_success(roll_vs_skill(dude_obj, 16, 0))) then begin
            call Node030();
        end
        else begin
            call Node031();
        end
    end
    else begin
        call Node031();
    end
end

procedure Node995
begin
    if (dude_charisma >= 7) then begin
        set_local_var(3, 100);
        set_local_var(1, 4);
    end
    else begin
        set_local_var(1, -4);
        set_local_var(3, -100);
    end
end

procedure Node996
begin
    set_local_var(1, -4);
    set_local_var(3, -100);
end

procedure Node997
begin
    if (dude_charisma >= 8) then begin
        call Node004();
    end
    else begin
        call Node005();
    end
end

procedure Node998
begin
    set_local_var(5, 2);
end

procedure Node999
begin
end

procedure Node001
begin
    if (local_var(10) == 0) then begin
        set_local_var(10, 1);
        Reply(110);
    end
    else begin
        if (local_var(10) == 1) then begin
            Reply(111);
        end
        else begin
            if (local_var(10) == 2) then begin
                Reply(112);
            end
        end
    end
    Reply(110);
    giq_option(1, NAME, 113, Node007, NEUTRAL_REACTION);
    giq_option(4, NAME, 114, Node004, NEUTRAL_REACTION);
    giq_option(4, NAME, 115, Node006, NEUTRAL_REACTION);
    giq_option(4, NAME, 116, Node003, NEUTRAL_REACTION);
    giq_option(4, NAME, 117, Node999, NEUTRAL_REACTION);
end

procedure Node002
begin
    Reply(120);
    giq_option(4, NAME, 121, Node017, NEUTRAL_REACTION);
    giq_option(4, NAME, 122, Node016, BAD_REACTION);
    giq_option(4, NAME, 123, Node999, NEUTRAL_REACTION);
end

procedure Node003
begin
    Reply(130);
    giq_option(4, NAME, 131, Node002, NEUTRAL_REACTION);
    giq_option(4, NAME, 132, Node012, NEUTRAL_REACTION);
end

procedure Node004
begin
    set_global_var(GVAR_WESTIN_HEART_TROUBLE, global_var(GVAR_WESTIN_HEART_TROUBLE) bwor 1);
    if (four_before == 0) then begin
        four_before := 1;
        Reply(140);
    end
    else begin
        Reply(141);
    end
    giq_option(4, NAME, 142, Node007, NEUTRAL_REACTION);
    giq_option(4, NAME, 143, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 144, Node010, NEUTRAL_REACTION);
    giq_option(4, NAME, 145, Node011, NEUTRAL_REACTION);
    giq_option(4, NAME, 146, Node999, NEUTRAL_REACTION);
end

procedure Node005
begin
    Reply(150);
    giq_option(4, NAME, 152, Node011, NEUTRAL_REACTION);
    giq_option(4, NAME, 153, wooz_barter, NEUTRAL_REACTION);
    giq_option(4, NAME, 154, wooz_barter, NEUTRAL_REACTION);
    giq_option(4, NAME, 155, Node004, NEUTRAL_REACTION);
    giq_option(4, NAME, 156, Node999, NEUTRAL_REACTION);
end

procedure Node006
begin
    Reply(160);
    giq_option(4, NAME, 161, Node034, NEUTRAL_REACTION);
    giq_option(4, NAME, 162, Node035, NEUTRAL_REACTION);
end

procedure Node007
begin
    if (seven_before == 0) then begin
        seven_before := 1;
        Reply(170);
    end
    else begin
        Reply(171);
    end
    giq_option(4, NAME, 172, Node051, NEUTRAL_REACTION);
    giq_option(4, NAME, 173, Node052, NEUTRAL_REACTION);
    giq_option(4, NAME, 174, Node053, NEUTRAL_REACTION);
    giq_option(4, NAME, 175, Node009, NEUTRAL_REACTION);
    giq_option(4, NAME, 176, Node999, NEUTRAL_REACTION);
end

procedure Node008
begin
    Reply(180);
    giq_option(-3, NAME, 181, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 182, Node007, NEUTRAL_REACTION);
    giq_option(4, NAME, 183, Node001, NEUTRAL_REACTION);
    giq_option(4, NAME, 184, Node001, GOOD_REACTION);
    giq_option(4, NAME, 185, Node999, BAD_REACTION);
    giq_option(4, NAME, 186, Node999, NEUTRAL_REACTION);
end

procedure Node009
begin
    Reply(190);
    if (local_var(11) == 0) then begin
        giq_option(1, NAME, 191, Node924, NEUTRAL_REACTION);
    end
    if (local_var(11) == 1) then begin
        giq_option(4, NAME, 192, Node924, NEUTRAL_REACTION);
    end
    if (local_var(11) == 2) then begin
        giq_option(4, NAME, 193, Node924, NEUTRAL_REACTION);
    end
    if (local_var(11) > 2) then begin
        giq_option(4, NAME, 194, Node924, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 195, Node022, BAD_REACTION);
    giq_option(4, NAME, 196, Node007, NEUTRAL_REACTION);
end

procedure Node010
begin
    Reply(200);
    giq_option(4, NAME, 201, Node043, NEUTRAL_REACTION);
    giq_option(4, NAME, 202, Node999, NEUTRAL_REACTION);
end

procedure Node011
begin
    if (local_var(7) == 0) then begin
        set_local_var(7, 1);
        Reply(210);
        if (local_var(9) == 0) then begin
            giq_option(4, NAME, 213, Node025, NEUTRAL_REACTION);
        end
    end
    else begin
        Reply(211);
    end
    if (local_var(8) == 0) then begin
        giq_option(4, NAME, 212, Node024, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 214, Node999, NEUTRAL_REACTION);
end

procedure Node012
begin
    Reply(220);
    giq_option(4, NAME, 221, Node013, NEUTRAL_REACTION);
    giq_option(4, NAME, 222, Node999, NEUTRAL_REACTION);
end

procedure Node013
begin
    Reply(230);
    giq_option(4, NAME, 231, Node004, NEUTRAL_REACTION);
    giq_option(4, NAME, 232, Node014, BAD_REACTION);
end

procedure Node014
begin
    Reply(240);
    giq_option(4, NAME, 241, Node004, BAD_REACTION);
    giq_option(4, NAME, 242, Node999, GOOD_REACTION);
end

procedure Node015
begin
    Reply(250);
    giq_option(4, NAME, 251, wooz_barter, NEUTRAL_REACTION);
    giq_option(4, NAME, 252, Node004, NEUTRAL_REACTION);
    giq_option(4, NAME, 253, Node999, NEUTRAL_REACTION);
end

procedure Node016
begin
    Reply(260);
    giq_option(4, NAME, 261, Node018, BAD_REACTION);
    giq_option(4, NAME, 262, Node999, BAD_REACTION);
end

procedure Node017
begin
    Reply(270);
    giq_option(1, NAME, 271, Node004, GOOD_REACTION);
    giq_option(4, NAME, 272, Node999, NEUTRAL_REACTION);
end

procedure Node018
begin
    Reply(280);
    giq_option(4, NAME, 281, Node019, GOOD_REACTION);
    giq_option(4, NAME, 282, Node999, NEUTRAL_REACTION);
end

procedure Node019
begin
    Reply(290);
    giq_option(4, NAME, 291, Node999, GOOD_REACTION);
    giq_option(4, NAME, 292, combat, NEUTRAL_REACTION);
end

procedure Node020
begin
    Reply(300);
    giq_option(4, NAME, 301, Node004, GOOD_REACTION);
    giq_option(4, NAME, 302, Node999, BAD_REACTION);
    giq_option(4, NAME, 303, Node999, GOOD_REACTION);
    giq_option(4, NAME, 304, Node021, GOOD_REACTION);
end

procedure Node021
begin
    Reply(310);
    giq_option(4, NAME, 311, Node004, NEUTRAL_REACTION);
end

procedure Node022
begin
    Reply(320);
    giq_option(4, NAME, 321, Node023, NEUTRAL_REACTION);
end

procedure Node023
begin
    Reply(330);
    giq_option(4, NAME, 331, Node999, NEUTRAL_REACTION);
end

procedure Node024
begin
    set_local_var(8, 1);
    Reply(340);
    giq_option(4, NAME, 341, Node026, NEUTRAL_REACTION);
end

procedure Node025
begin
    set_local_var(9, 1);
    Reply(350);
    giq_option(4, NAME, 351, Node011, NEUTRAL_REACTION);
end

procedure Node026
begin
    Reply(360);
    giq_option(4, NAME, 361, Node028, GOOD_REACTION);
    giq_option(4, NAME, 362, Node999, BAD_REACTION);
end

procedure Node027
begin
    set_global_var(GVAR_WESTIN_HEART_TROUBLE, global_var(GVAR_WESTIN_HEART_TROUBLE) bwor 1);
    if ((tragic_addiction > 5) and (global_var(GVAR_ADDICT_TRAGIC) == 0)) then begin
        tragic_addiction := 0;
        set_local_var(15, 0);
    end
    if ((tragic_addiction >= 10) and (global_var(GVAR_ADDICT_TRAGIC) == 1)) then begin
        Reply(716);
        giq_option(4, NAME, 717, Node930, NEUTRAL_REACTION);
    end
    else begin
        Reply(370);
        if ((global_var(GVAR_ADDICT_TRAGIC) == 1) and (tragic_addiction <= 10)) then begin
            giq_option(4, NAME, 372, Node033, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, NAME, 371, Node032, GOOD_REACTION);
            giq_option(4, NAME, 715, Node004, NEUTRAL_REACTION);
        end
    end
    tragic_addiction := tragic_addiction + 1;
end

procedure Node028
begin
    item := create_object(304, 0, 0);
    add_obj_to_inven(dude_obj, item);
    Reply(380);
    giq_option(4, NAME, 381, Node029, GOOD_REACTION);
    giq_option(4, NAME, 382, Node004, BAD_REACTION);
    giq_option(4, NAME, 383, Node999, BAD_REACTION);
end

procedure Node029
begin
    Reply(390);
    giq_option(4, NAME, 391, Node930, GOOD_REACTION);
    giq_option(4, NAME, 392, Node999, NEUTRAL_REACTION);
end

procedure Node030
begin
    item := create_object(304, 0, 0);
    add_obj_to_inven(dude_obj, item);
    set_local_var(13, local_var(13) - 1);
    Reply(400);
    if (tragic_addiction > 10) then begin
        giq_option(4, NAME, 718, Node999, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 401, Node999, BAD_REACTION);
        giq_option(4, NAME, 402, Node999, NEUTRAL_REACTION);
    end
end

procedure Node031
begin
    if (obj_is_carrying_obj_pid(dude_obj, 304)) then begin
        item := obj_carrying_pid_obj(dude_obj, 304);
        rm_obj_from_inven(dude_obj, item);
        add_obj_to_inven(self_obj, item);
        set_local_var(13, local_var(13) + 1);
    end
    Reply(410);
    if (tragic_addiction > 10) then begin
        giq_option(4, NAME, 719, Node999, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 411, Node999, NEUTRAL_REACTION);
        giq_option(4, NAME, 412, Node999, BAD_REACTION);
    end
end

procedure Node032
begin
    Reply(420);
    giq_option(4, NAME, 421, Node930, NEUTRAL_REACTION);
    if (tragic_addiction > 5) then begin
        giq_option(4, NAME, 422, Node004, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 715, Node004, NEUTRAL_REACTION);
    end
end

procedure Node033
begin
    Reply(430);
    if ((global_var(GVAR_ADDICT_TRAGIC) == 1) and (tragic_addiction <= 10)) then begin
        giq_option(4, NAME, 720, Node930, NEUTRAL_REACTION);
        giq_option(4, NAME, 422, Node004, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 431, Node004, NEUTRAL_REACTION);
        giq_option(4, NAME, 432, Node999, NEUTRAL_REACTION);
    end
end

procedure Node034
begin
    Reply(440);
    giq_option(4, NAME, 441, Node036, NEUTRAL_REACTION);
    giq_option(4, NAME, 442, Node038, NEUTRAL_REACTION);
end

procedure Node035
begin
    Reply(450);
    giq_option(4, NAME, 451, Node037, NEUTRAL_REACTION);
end

procedure Node036
begin
    Reply(460);
    giq_option(4, NAME, 461, Node039, NEUTRAL_REACTION);
    giq_option(4, NAME, 462, Node999, BAD_REACTION);
end

procedure Node037
begin
    Reply(470);
    if ((town_known(49) == 2) and ((global_var(GVAR_VAULT_SERVANT) < 2) and ((global_var(GVAR_QUEST_VAULT_VILLAGE) >= 1) and (global_var(GVAR_QUEST_VAULT_VILLAGE) < 4))) or ((global_var(GVAR_VAULT_SERVANT) < 2) and ((global_var(GVAR_QUEST_VAULT_VILLAGE) >= 5) and (global_var(GVAR_QUEST_VAULT_VILLAGE) < 6)))) then begin
        giq_option(4, NAME, 473, Node054, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 471, Node004, NEUTRAL_REACTION);
    giq_option(4, NAME, 472, Node999, BAD_REACTION);
end

procedure Node038
begin
    Reply(480);
    giq_option(4, NAME, 481, Node041, NEUTRAL_REACTION);
    giq_option(4, NAME, 482, Node004, GOOD_REACTION);
end

procedure Node039
begin
    Reply(490);
    giq_option(4, NAME, 491, Node040, NEUTRAL_REACTION);
end

procedure Node040
begin
    Reply(500);
    giq_option(4, NAME, 501, Node004, NEUTRAL_REACTION);
    giq_option(4, NAME, 502, Node999, GOOD_REACTION);
end

procedure Node041
begin
    Reply(510);
    giq_option(4, NAME, 511, Node042, NEUTRAL_REACTION);
end

procedure Node042
begin
    Reply(520);
    giq_option(4, NAME, 521, Node004, NEUTRAL_REACTION);
end

procedure Node043
begin
    Reply(530);
    giq_option(4, NAME, 531, Node044, NEUTRAL_REACTION);
end

procedure Node044
begin
    Reply(540);
    giq_option(4, NAME, 541, Node045, NEUTRAL_REACTION);
end

procedure Node045
begin
    Reply(550);
    giq_option(4, NAME, 551, Node046, NEUTRAL_REACTION);
end

procedure Node046
begin
    Reply(560);
    giq_option(4, NAME, 561, Node047, NEUTRAL_REACTION);
    giq_option(4, NAME, 562, Node050, GOOD_REACTION);
end

procedure Node047
begin
    Reply(570);
    giq_option(4, NAME, 571, Node004, NEUTRAL_REACTION);
    giq_option(4, NAME, 572, Node999, NEUTRAL_REACTION);
end

procedure Node050
begin
    set_local_var(10, 2);
    Reply(601);
    giq_option(4, NAME, 142, Node007, NEUTRAL_REACTION);
    giq_option(4, NAME, 143, Node005, NEUTRAL_REACTION);
    giq_option(4, NAME, 145, Node011, NEUTRAL_REACTION);
    giq_option(4, NAME, 146, Node999, NEUTRAL_REACTION);
end

procedure Node051
begin
    Reply(721);
    giq_option(4, NAME, 727, Node920, NEUTRAL_REACTION);
    giq_option(4, NAME, 728, Node007, NEUTRAL_REACTION);
    giq_option(4, NAME, 729, Node999, NEUTRAL_REACTION);
end

procedure Node052
begin
    Reply(722);
    giq_option(4, NAME, g_mstr(352), Node920, NEUTRAL_REACTION);
end

procedure Node053
begin
    Reply(724);
    giq_option(4, NAME, g_mstr(352), Node922, NEUTRAL_REACTION);
end

procedure Node054
begin
    Reply(740);
    giq_option(4, NAME, 741, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 742, Node004, NEUTRAL_REACTION);
end

procedure TeamX001
begin
    Reply(800);
    giq_option(4, NAME, 801, TeamX002, NEUTRAL_REACTION);
end

procedure TeamX002
begin
    Reply(802);
    giq_option(4, NAME, 803, TeamX003, NEUTRAL_REACTION);
end

procedure TeamX003
begin
    Reply(804);
    giq_option(4, NAME, 805, TeamX004, NEUTRAL_REACTION);
    giq_option(4, NAME, 806, Node998, BAD_REACTION);
end

procedure TeamX004
begin
    Reply(807);
    giq_option(4, NAME, 808, TeamX016, NEUTRAL_REACTION);
    giq_option(4, NAME, 809, TeamX005, NEUTRAL_REACTION);
end

procedure TeamX005
begin
    Reply(810);
    giq_option(4, NAME, 811, TeamX017, NEUTRAL_REACTION);
    giq_option(4, NAME, 812, TeamX006, NEUTRAL_REACTION);
end

procedure TeamX006
begin
    Reply(813);
    giq_option(4, NAME, 814, TeamX018, NEUTRAL_REACTION);
    giq_option(4, NAME, 815, TeamX019, NEUTRAL_REACTION);
    giq_option(4, NAME, 816, TeamX008, NEUTRAL_REACTION);
end

procedure TeamX007
begin
    Reply(817);
    giq_option(4, NAME, 818, Node999, NEUTRAL_REACTION);
end

procedure TeamX008
begin
    Reply(819);
    giq_option(4, NAME, 820, TeamX009, NEUTRAL_REACTION);
    giq_option(4, NAME, 821, TeamX019, NEUTRAL_REACTION);
end

procedure TeamX009
begin
    Reply(822);
    giq_option(4, NAME, 823, TeamX010, NEUTRAL_REACTION);
    giq_option(4, NAME, 824, TeamX019, NEUTRAL_REACTION);
end

procedure TeamX010
begin
    Reply(825);
    giq_option(4, NAME, 826, TeamX019, NEUTRAL_REACTION);
    giq_option(4, NAME, 827, TeamX011, NEUTRAL_REACTION);
end

procedure TeamX011
begin
    Reply(828);
    giq_option(4, NAME, 829, TeamX019, NEUTRAL_REACTION);
    giq_option(4, NAME, 830, TeamX012, NEUTRAL_REACTION);
end

procedure TeamX012
begin
    Reply(831);
    giq_option(4, NAME, 832, TeamX013, NEUTRAL_REACTION);
    giq_option(4, NAME, 833, Node999, NEUTRAL_REACTION);
end

procedure TeamX013
begin
    Reply(834);
    giq_option(4, NAME, 835, TeamX014, NEUTRAL_REACTION);
end

procedure TeamX014
begin
    variable LVar0 := 0;
    LVar0 := create_object(304, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 760);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    while (removed_qty) do begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 760);
        if (obj_type(dude_obj) == 1) then begin
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, 1);
        destroy_object(restock_obj);
        removed_qty := removed_qty - restock_amt;
        restock_obj := 0;
        restock_amt := 0;
    end
    game_time_advance(3 * (60 * (60 * 10)));
    set_global_var(GVAR_MCGREW_TEACH, 1);
    Reply(836);
    giq_option(4, NAME, 837, TeamX015, NEUTRAL_REACTION);
end

procedure TeamX015
begin
    Reply(838);
    giq_option(4, NAME, 839, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 840, Node999, NEUTRAL_REACTION);
end

procedure TeamX016
begin
    variable LVar0 := 0;
    LVar0 := create_object(304, 0, 0);
    add_mult_objs_to_inven(dude_obj, LVar0, 1 + 1);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 760);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    while (removed_qty) do begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 760);
        if (obj_type(dude_obj) == 1) then begin
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, 1);
        destroy_object(restock_obj);
        removed_qty := removed_qty - restock_amt;
        restock_obj := 0;
        restock_amt := 0;
    end
    call TeamX007();
end

procedure TeamX017
begin
    variable LVar0 := 0;
    LVar0 := create_object(304, 0, 0);
    add_mult_objs_to_inven(dude_obj, LVar0, 4 + 1);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 760);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    while (removed_qty) do begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 760);
        if (obj_type(dude_obj) == 1) then begin
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, 1);
        destroy_object(restock_obj);
        removed_qty := removed_qty - restock_amt;
        restock_obj := 0;
        restock_amt := 0;
    end
    call TeamX007();
end

procedure TeamX018
begin
    variable LVar0 := 0;
    LVar0 := create_object(304, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 760);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    while (removed_qty) do begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 760);
        if (obj_type(dude_obj) == 1) then begin
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, 1);
        destroy_object(restock_obj);
        removed_qty := removed_qty - restock_amt;
        restock_obj := 0;
        restock_amt := 0;
    end
    item_caps_adjust(dude_obj, 50);
    call TeamX007();
end

procedure TeamX019
begin
    variable LVar0 := 0;
    LVar0 := create_object(304, 0, 0);
    add_obj_to_inven(dude_obj, LVar0);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 760);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    while (removed_qty) do begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 760);
        if (obj_type(dude_obj) == 1) then begin
            if (critter_inven_obj(dude_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, 2) == restock_obj) or (critter_inven_obj(dude_obj, 1) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, 1);
        destroy_object(restock_obj);
        removed_qty := removed_qty - restock_amt;
        restock_obj := 0;
        restock_amt := 0;
    end
    item_caps_adjust(dude_obj, 100);
    call TeamX007();
end
