variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure map_update_p_proc;

export variable dog_object;
export variable brahmin_object;

variable last_update;
variable temp_dog;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure map_enter_p_proc
begin
    last_update := game_time;
    override_map_start(19524 % 200, 19524 / 200, 0, 5);
    set_global_var(GVAR_MAP_EXIT_TILE, 29736);
    set_global_var(GVAR_MAP_NEXT_TILE, 0);
    if ((get_month >= 3) and (get_month < 5)) then begin
        if ((game_time_hour >= 600) and (game_time_hour < (600 + 100))) then begin
            set_light_level(game_time_hour - 600 + 40);
        end
        else begin
            if ((game_time_hour >= (600 + 100)) and (game_time_hour < 1800)) then begin
                set_light_level(100);
            end
            else begin
                if ((game_time_hour >= 1800) and (game_time_hour < (1800 + 100))) then begin
                    set_light_level(100 - (game_time_hour - 1800));
                end
                else begin
                    set_light_level(40);
                end
            end
        end
    end
    else begin
        if ((get_month >= 5) and (get_month < 9)) then begin
            if ((game_time_hour >= 500) and (game_time_hour < (500 + 100))) then begin
                set_light_level(game_time_hour - 500 + 40);
            end
            else begin
                if ((game_time_hour >= (500 + 100)) and (game_time_hour < 1900)) then begin
                    set_light_level(100);
                end
                else begin
                    if ((game_time_hour >= 1900) and (game_time_hour < (1900 + 100))) then begin
                        set_light_level(100 - (game_time_hour - 1900));
                    end
                    else begin
                        set_light_level(40);
                    end
                end
            end
        end
        else begin
            if ((get_month >= 9) and (get_month < 11)) then begin
                if ((game_time_hour >= 600) and (game_time_hour < (600 + 100))) then begin
                    set_light_level(game_time_hour - 600 + 40);
                end
                else begin
                    if ((game_time_hour >= (600 + 100)) and (game_time_hour < 1800)) then begin
                        set_light_level(100);
                    end
                    else begin
                        if ((game_time_hour >= 1800) and (game_time_hour < (1800 + 100))) then begin
                            set_light_level(100 - (game_time_hour - 1800));
                        end
                        else begin
                            set_light_level(40);
                        end
                    end
                end
            end
            else begin
                if ((game_time_hour >= 700) and (game_time_hour < (700 + 100))) then begin
                    set_light_level(game_time_hour - 700 + 40);
                end
                else begin
                    if ((game_time_hour >= (700 + 100)) and (game_time_hour < 1700)) then begin
                        set_light_level(100);
                    end
                    else begin
                        if ((game_time_hour >= 1700) and (game_time_hour < (1700 + 100))) then begin
                            set_light_level(100 - (game_time_hour - 1700));
                        end
                        else begin
                            set_light_level(40);
                        end
                    end
                end
            end
        end
    end
    if (is_loading_game == 0) then begin
        if (global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME) == 0) then begin
            set_global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME, game_time + ((24 * (60 * (60 * 10)) * (game_time_hour > 2259)) + (((2259 / 100) - (game_time_hour / 100)) * (60 * (60 * 10))) + (((2259 % 100) - (game_time_hour % 100)) * (60 * 10))));
            if (global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME) == 0) then begin
                set_global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME, game_time + (60 * 10));
            end
        end
        else begin
            if ((global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME) - game_time) < 0) then begin
                if (((global_var(GVAR_MODOC_BRAHMIN_ALIVE) < 0) == 0) and (global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME) != 0)) then begin
                    if ((global_var(GVAR_JONNY_TILE) < 0) == 0) then begin
                        set_global_var(GVAR_JONNY_TILE, -1);
                    end
                    if (CUR_MAP_MODBRAH) then begin
                        kill_critter_type(16777226, random(61, 62));
                        if (map_var(0) == 0) then begin
                            if (global_var(GVAR_JONNY_TILE) < 0) then begin
                                set_map_var(0, random(0, global_var(GVAR_MODOC_BRAHMIN_ALIVE) / 2));
                                while (map_var(0) > 0) do begin
                                    temp_dog := create_object_sid(16777225, 0, 0, SCRIPT_MCATKDOG);
                                    critter_attempt_placement(temp_dog, tile_num_in_direction(16915, random(0, 5), random(2, 10)), 0);
                                    set_map_var(0, map_var(0) - 1);
                                end
                                kill_critter_type(16777225, random(61, 62));
                                set_map_var(0, 1);
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure map_exit_p_proc
begin
    if ((((global_var(GVAR_MODOC_GENERIC_FLAG_2) bwand 4) != 0) or (global_var(GVAR_MODOC_ENDINGS) == 4)) == 0) then begin
        if (((global_var(GVAR_MODOC_GENERIC_FLAG_2) bwand 1024) != 0) and (global_var(GVAR_SLAG_CNT) <= 0) or ((global_var(GVAR_MODOC_GHOST_FARM_SEED) == 2) or (((global_var(GVAR_SLAUGHTER_SLAG_TIME) - (game_time / (10 * 60 * 60 * 24))) <= 0) or ((global_var(GVAR_SLAUGHTER_SLAG_TIME) - (game_time / (10 * 60 * 60 * 24))) > 31) and (global_var(GVAR_SLAUGHTER_SLAG_TIME) > 0)))) then begin
            set_global_var(GVAR_MODOC_GENERIC_FLAG_2, global_var(GVAR_MODOC_GENERIC_FLAG_2) bwor 4);
        end
    end
    if (((global_var(GVAR_MODOC_BRAHMIN_ALIVE) < 0) == 0) and (global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME) != 0)) then begin
        if ((global_var(GVAR_JONNY_TILE) < 0) == 0) then begin
            set_global_var(GVAR_JONNY_TILE, -1);
        end
        if (CUR_MAP_MODBRAH) then begin
            kill_critter_type(16777226, random(61, 62));
            if (map_var(0) == 0) then begin
                if (global_var(GVAR_JONNY_TILE) < 0) then begin
                    set_map_var(0, random(0, global_var(GVAR_MODOC_BRAHMIN_ALIVE) / 2));
                    while (map_var(0) > 0) do begin
                        temp_dog := create_object_sid(16777225, 0, 0, SCRIPT_MCATKDOG);
                        critter_attempt_placement(temp_dog, tile_num_in_direction(16915, random(0, 5), random(2, 10)), 0);
                        set_map_var(0, map_var(0) - 1);
                    end
                    kill_critter_type(16777225, random(61, 62));
                    set_map_var(0, 1);
                end
            end
        end
    end
end

procedure map_update_p_proc
begin
    if ((get_month >= 3) and (get_month < 5)) then begin
        if ((game_time_hour >= 600) and (game_time_hour < (600 + 100))) then begin
            set_light_level(game_time_hour - 600 + 40);
        end
        else begin
            if ((game_time_hour >= (600 + 100)) and (game_time_hour < 1800)) then begin
                set_light_level(100);
            end
            else begin
                if ((game_time_hour >= 1800) and (game_time_hour < (1800 + 100))) then begin
                    set_light_level(100 - (game_time_hour - 1800));
                end
                else begin
                    set_light_level(40);
                end
            end
        end
    end
    else begin
        if ((get_month >= 5) and (get_month < 9)) then begin
            if ((game_time_hour >= 500) and (game_time_hour < (500 + 100))) then begin
                set_light_level(game_time_hour - 500 + 40);
            end
            else begin
                if ((game_time_hour >= (500 + 100)) and (game_time_hour < 1900)) then begin
                    set_light_level(100);
                end
                else begin
                    if ((game_time_hour >= 1900) and (game_time_hour < (1900 + 100))) then begin
                        set_light_level(100 - (game_time_hour - 1900));
                    end
                    else begin
                        set_light_level(40);
                    end
                end
            end
        end
        else begin
            if ((get_month >= 9) and (get_month < 11)) then begin
                if ((game_time_hour >= 600) and (game_time_hour < (600 + 100))) then begin
                    set_light_level(game_time_hour - 600 + 40);
                end
                else begin
                    if ((game_time_hour >= (600 + 100)) and (game_time_hour < 1800)) then begin
                        set_light_level(100);
                    end
                    else begin
                        if ((game_time_hour >= 1800) and (game_time_hour < (1800 + 100))) then begin
                            set_light_level(100 - (game_time_hour - 1800));
                        end
                        else begin
                            set_light_level(40);
                        end
                    end
                end
            end
            else begin
                if ((game_time_hour >= 700) and (game_time_hour < (700 + 100))) then begin
                    set_light_level(game_time_hour - 700 + 40);
                end
                else begin
                    if ((game_time_hour >= (700 + 100)) and (game_time_hour < 1700)) then begin
                        set_light_level(100);
                    end
                    else begin
                        if ((game_time_hour >= 1700) and (game_time_hour < (1700 + 100))) then begin
                            set_light_level(100 - (game_time_hour - 1700));
                        end
                        else begin
                            set_light_level(40);
                        end
                    end
                end
            end
        end
    end
    if (((game_time - last_update) > (15 * (60 * 10))) and (last_update != 0)) then begin
        if ((global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME) - game_time) < 0) then begin
            if (((global_var(GVAR_MODOC_BRAHMIN_ALIVE) < 0) == 0) and (global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME) != 0)) then begin
                if ((global_var(GVAR_JONNY_TILE) < 0) == 0) then begin
                    set_global_var(GVAR_JONNY_TILE, -1);
                end
                if (CUR_MAP_MODBRAH) then begin
                    kill_critter_type(16777226, random(61, 62));
                    if (map_var(0) == 0) then begin
                        if (global_var(GVAR_JONNY_TILE) < 0) then begin
                            set_map_var(0, random(0, global_var(GVAR_MODOC_BRAHMIN_ALIVE) / 2));
                            while (map_var(0) > 0) do begin
                                temp_dog := create_object_sid(16777225, 0, 0, SCRIPT_MCATKDOG);
                                critter_attempt_placement(temp_dog, tile_num_in_direction(16915, random(0, 5), random(2, 10)), 0);
                                set_map_var(0, map_var(0) - 1);
                            end
                            kill_critter_type(16777225, random(61, 62));
                            set_map_var(0, 1);
                        end
                    end
                end
            end
        end
    end
    last_update := game_time;
    debug_msg("  game_time_hour == " + game_time_hour);
    debug_msg("  countdown in ticks == " + (global_var(GVAR_MODOC_KILL_ALL_BRAHMIN_TIME) - game_time));
end
