procedure pickup_p_proc;

variable tmp_gen_rep;
variable global_temp;

procedure getTimeBit;

variable numTvars;
variable cbFunc;
variable target_tile;
variable tt_num;
variable tt_time;
variable tt_go;
variable tile0;
variable lTime0;
variable tile1;
variable lTime1;
variable tile2;
variable lTime2;
variable tile3;
variable lTime3;
variable tile4;
variable lTime4;
variable tile5;
variable lTime5;
variable tile6;
variable lTime6;
variable tile7;
variable lTime7;
variable tile8;
variable lTime8;
variable tile9;
variable lTime9;
variable tile10;
variable lTime10;
variable tile11;
variable lTime11;
variable tile12;
variable lTime12;
variable tile13;
variable lTime13;
variable tile14;
variable lTime14;
variable tile15;
variable lTime15;
variable tile16;
variable lTime16;
variable tile17;
variable lTime17;
variable tile18;
variable lTime18;
variable tile19;
variable lTime19;
variable tile20;
variable lTime20;
variable tile21;
variable lTime21;
variable tile22;
variable lTime22;
variable tile23;
variable lTime23;
variable tile24;
variable lTime24;
variable tile25;
variable lTime25;

procedure getTile(variable arg0);
procedure getTileTime(variable arg0);
procedure curTimeIsGreater(variable arg0);
procedure check_tile_events(variable arg0);
procedure tvar_Warp_To_Pos(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure push_p_proc;
procedure timed_event_p_proc;
procedure Node998;
procedure Node999;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure check_load_pos;
procedure tile_cb_func;

import variable i_ariel_obj;

variable Node5Rep;
variable q1;
variable q2;
variable q3;
variable q4;
variable q5;
variable story;

procedure Node010story;


procedure pickup_p_proc
begin
    if (party_member_obj(obj_pid(source_obj)) != 0) then begin
        set_local_var(5, 2);
        set_map_var(5, 1);
    end
end

procedure getTimeBit
begin
    variable LVar0 := 0;
    LVar0 := game_time_hour;
    if ((LVar0 >= 100) and (LVar0 <= 159)) then begin
        return 1;
    end
    if ((LVar0 >= 200) and (LVar0 <= 259)) then begin
        return 2;
    end
    if ((LVar0 >= 300) and (LVar0 <= 359)) then begin
        return 4;
    end
    if ((LVar0 >= 400) and (LVar0 <= 459)) then begin
        return 8;
    end
    if ((LVar0 >= 500) and (LVar0 <= 559)) then begin
        return 16;
    end
    if ((LVar0 >= 600) and (LVar0 <= 659)) then begin
        return 32;
    end
    if ((LVar0 >= 700) and (LVar0 <= 759)) then begin
        return 64;
    end
    if ((LVar0 >= 800) and (LVar0 <= 859)) then begin
        return 128;
    end
    if ((LVar0 >= 900) and (LVar0 <= 959)) then begin
        return 256;
    end
    if ((LVar0 >= 1000) and (LVar0 <= 1059)) then begin
        return 512;
    end
    if ((LVar0 >= 1100) and (LVar0 <= 1159)) then begin
        return 1024;
    end
    if ((LVar0 >= 1200) and (LVar0 <= 1259)) then begin
        return 2048;
    end
    if ((LVar0 >= 1300) and (LVar0 <= 1359)) then begin
        return 4096;
    end
    if ((LVar0 >= 1400) and (LVar0 <= 1459)) then begin
        return 8192;
    end
    if ((LVar0 >= 1500) and (LVar0 <= 1559)) then begin
        return 16384;
    end
    if ((LVar0 >= 1600) and (LVar0 <= 1659)) then begin
        return 32768;
    end
    if ((LVar0 >= 1700) and (LVar0 <= 1759)) then begin
        return 65536;
    end
    if ((LVar0 >= 1800) and (LVar0 <= 1859)) then begin
        return 131072;
    end
    if ((LVar0 >= 1900) and (LVar0 <= 1959)) then begin
        return 262144;
    end
    if ((LVar0 >= 2000) and (LVar0 <= 2059)) then begin
        return 524288;
    end
    if ((LVar0 >= 2100) and (LVar0 <= 2159)) then begin
        return 1048576;
    end
    if ((LVar0 >= 2200) and (LVar0 <= 2259)) then begin
        return 2097152;
    end
    if ((LVar0 >= 2300) and (LVar0 <= 2359)) then begin
        return 4194304;
    end
    if ((LVar0 >= 0) and (LVar0 <= 100)) then begin
        return 8388608;
    end
end

procedure getTile(variable arg0)
begin
    if (arg0 == 0) then begin
        return tile0;
    end
    if (arg0 == 1) then begin
        return tile1;
    end
    if (arg0 == 2) then begin
        return tile2;
    end
    if (arg0 == 3) then begin
        return tile3;
    end
    if (arg0 == 4) then begin
        return tile4;
    end
    if (arg0 == 5) then begin
        return tile5;
    end
    if (arg0 == 6) then begin
        return tile6;
    end
    if (arg0 == 7) then begin
        return tile7;
    end
    if (arg0 == 8) then begin
        return tile8;
    end
    if (arg0 == 9) then begin
        return tile9;
    end
    if (arg0 == 10) then begin
        return tile10;
    end
    if (arg0 == 11) then begin
        return tile11;
    end
    if (arg0 == 12) then begin
        return tile12;
    end
    if (arg0 == 13) then begin
        return tile13;
    end
    if (arg0 == 14) then begin
        return tile14;
    end
    if (arg0 == 15) then begin
        return tile15;
    end
    if (arg0 == 16) then begin
        return tile16;
    end
    if (arg0 == 17) then begin
        return tile17;
    end
    if (arg0 == 18) then begin
        return tile18;
    end
    if (arg0 == 19) then begin
        return tile19;
    end
    if (arg0 == 20) then begin
        return tile20;
    end
    if (arg0 == 21) then begin
        return tile21;
    end
    if (arg0 == 22) then begin
        return tile22;
    end
    if (arg0 == 23) then begin
        return tile23;
    end
    if (arg0 == 24) then begin
        return tile24;
    end
    if (arg0 == 25) then begin
        return tile25;
    end
end

procedure getTileTime(variable arg0)
begin
    if (arg0 == 0) then begin
        return lTime0;
    end
    if (arg0 == 1) then begin
        return lTime1;
    end
    if (arg0 == 2) then begin
        return lTime2;
    end
    if (arg0 == 3) then begin
        return lTime3;
    end
    if (arg0 == 4) then begin
        return lTime4;
    end
    if (arg0 == 5) then begin
        return lTime5;
    end
    if (arg0 == 6) then begin
        return lTime6;
    end
    if (arg0 == 7) then begin
        return lTime7;
    end
    if (arg0 == 8) then begin
        return lTime8;
    end
    if (arg0 == 9) then begin
        return lTime9;
    end
    if (arg0 == 10) then begin
        return lTime10;
    end
    if (arg0 == 11) then begin
        return lTime11;
    end
    if (arg0 == 12) then begin
        return lTime12;
    end
    if (arg0 == 13) then begin
        return lTime13;
    end
    if (arg0 == 14) then begin
        return lTime14;
    end
    if (arg0 == 15) then begin
        return lTime15;
    end
    if (arg0 == 16) then begin
        return lTime16;
    end
    if (arg0 == 17) then begin
        return lTime17;
    end
    if (arg0 == 18) then begin
        return lTime18;
    end
    if (arg0 == 19) then begin
        return lTime19;
    end
    if (arg0 == 20) then begin
        return lTime20;
    end
    if (arg0 == 21) then begin
        return lTime21;
    end
    if (arg0 == 22) then begin
        return lTime22;
    end
    if (arg0 == 23) then begin
        return lTime23;
    end
    if (arg0 == 24) then begin
        return lTime24;
    end
    if (arg0 == 25) then begin
        return lTime25;
    end
end

procedure curTimeIsGreater(variable arg0)
begin
    if (game_time > arg0) then begin
        return 1;
    end
    return 0;
end

procedure check_tile_events(variable arg0)
begin
    variable LVar1 := 0;
    if (arg0 == -1) then begin
        if (tt_go) then begin
            if (tile_num(self_obj) == target_tile) then begin
                call cbFunc(target_tile);
                tt_go := 0;
                tt_num := tt_num + 1;
                if (tt_num >= numTvars) then begin
                    tt_num := 0;
                end
                target_tile := getTile(tt_num);
                tt_time := game_time + getTileTime(tt_num);
            end
        end
        else begin
            if (curTimeIsGreater(tt_time)) then begin
                debug_msg("should be going to tile: " + target_tile);
                tt_go := 1;
                if (not(combat_is_initialized)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    animate_move_obj_to_tile(self_obj, target_tile, 0);
                    reg_anim_func(3, 0);
                end
            end
        end
        return 1;
    end
    else begin
        return 0;
    end
end

procedure tvar_Warp_To_Pos(variable arg0, variable arg1)
begin
    move_to(self_obj, getTile(arg0), elevation(self_obj));
    arg0 := arg0 + 1;
    if (arg0 >= numTvars) then begin
        arg0 := 0;
    end
    target_tile := getTile(arg0);
    tt_go := 0;
    tt_time := arg1;
end

procedure start
begin
    if ((global_var(582) bwand 1) != 0) then begin
        global_temp := create_object_sid(128, 0, 0, -1);
        move_obj_inven_to_obj(self_obj, global_temp);
        destroy_object(global_temp);
        kill_critter(self_obj, 63);
    end
    else begin
        i_ariel_obj := self_obj;
    end
end

procedure critter_p_proc
begin
    if ((local_var(5) == 2) or map_var(5) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        set_map_var(5, 1);
        if (critter_is_fleeing(self_obj)) then begin
            if (anim_busy(self_obj) == 0) then begin
                if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                    if (anim_busy(self_obj) == 0) then begin
                        global_temp := rotation_to_tile(tile_num(dude_obj), tile_num(self_obj));
                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                        global_temp := (global_temp + 1) % 6;
                        while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)))) do begin
                            debug_msg("flee loop: rot == " + global_temp);
                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                            global_temp := (global_temp + 1) % 6;
                        end
                    end
                end
            end
        end
        else begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure talk_p_proc
begin
    if (local_var(5) > 0) then begin
        call Node012();
    end
    else begin
        if (local_var(4) == 0) then begin
            start_gdialog(522, self_obj, 4, -1, -1);
            gsay_start;
            call Node001();
            gsay_end;
            end_dialogue;
        end
        else begin
            call Node011();
        end
    end
    set_local_var(4, 1);
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(5, global_var(5) + 1);
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(4) > (3 * global_var(5))) or (global_var(2) == 1)) and (global_var(1) == 0)) then begin
            set_global_var(2, 1);
            set_global_var(3, 0);
        end
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(5) > (2 * global_var(4))) or (global_var(3) == 1))) then begin
            set_global_var(3, 1);
            set_global_var(2, 0);
        end
        set_global_var(0, global_var(0) + -10);
        debug_msg("Player gains " + -10 + " Karma Points.");
        set_global_var(37, 0);
        set_global_var(38, 0);
        set_global_var(39, 0);
        set_global_var(40, 0);
        set_global_var(41, 0);
        set_global_var(42, 0);
        set_global_var(43, 0);
        set_global_var(44, 0);
        set_global_var(45, 0);
        tmp_gen_rep := global_var(0);
        if (has_trait(0, dude_obj, 95)) then begin
            tmp_gen_rep := global_var(0) * 2;
        end
        if (tmp_gen_rep >= 1000) then begin
            set_global_var(37, 1);
        end
        else begin
            if (tmp_gen_rep >= 750) then begin
                set_global_var(38, 1);
            end
            else begin
                if (tmp_gen_rep >= 500) then begin
                    set_global_var(39, 1);
                end
                else begin
                    if (tmp_gen_rep >= 250) then begin
                        set_global_var(40, 1);
                    end
                    else begin
                        if (tmp_gen_rep > -250) then begin
                            set_global_var(41, 1);
                        end
                        else begin
                            if (tmp_gen_rep > -500) then begin
                                set_global_var(42, 1);
                            end
                            else begin
                                if (tmp_gen_rep > -750) then begin
                                    set_global_var(43, 1);
                                end
                                else begin
                                    if (tmp_gen_rep > -1000) then begin
                                        set_global_var(44, 1);
                                    end
                                    else begin
                                        set_global_var(45, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        set_global_var(59, global_var(59) + -5);
        debug_msg("Added " + -5 + " to Town Rep");
    end
    i_ariel_obj := -1;
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 0) then begin
        display_msg(message_str(522, 100));
    end
    else begin
        display_msg(message_str(522, 101));
    end
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(522, 102));
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (party_member_obj(obj_pid(source_obj)) != 0) then begin
        set_local_var(5, 2);
        set_map_var(5, 1);
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, 1, 6, 114);
    critter_add_trait(self_obj, 1, 5, 14);
    numTvars := 2;
    cbFunc := "tile_cb_func";
    tile0 := 18299;
    tile1 := 18536;
    lTime0 := 60 * (60 * 10) * 12;
    lTime1 := 60 * (60 * 10) * 12;
    if (not(metarule(22, 0))) then begin
        call check_load_pos();
    end
end

procedure push_p_proc
begin
end

procedure timed_event_p_proc
begin
    if (check_tile_events(fixed_param) == 0) then begin
        if (fixed_param == 3) then begin
            if (not(combat_is_initialized)) then begin
                set_local_var(5, 2);
            end
        end
    end
end

procedure Node998
begin
    set_local_var(5, 2);
end

procedure Node999
begin
end

procedure Node001
begin
    gsay_reply(522, 103);
    giq_option(-3, 522, message_str(522, 104) + " " + obj_name(dude_obj) + message_str(522, 178), Node002, 50);
    giq_option(-3, 522, 105, Node003, 50);
    giq_option(-3, 522, 106, Node999, 50);
    giq_option(4, 522, message_str(522, 107) + " " + obj_name(dude_obj) + message_str(522, 179), Node002, 49);
    giq_option(4, 522, 108, Node003, 50);
    giq_option(4, 522, 109, Node004, 51);
    giq_option(4, 522, 110, Node999, 50);
end

procedure Node002
begin
    gsay_reply(522, 111);
    giq_option(-3, 522, 112, Node005, 50);
    giq_option(-3, 522, 113, Node999, 50);
    giq_option(4, 522, 114, Node999, 51);
    giq_option(4, 522, 115, Node005, 50);
    giq_option(4, 522, 116, Node005, 49);
end

procedure Node003
begin
    gsay_reply(522, 117);
    giq_option(-3, 522, 118, Node009, 49);
    giq_option(-3, 522, 119, Node005, 50);
    giq_option(4, 522, 120, Node009, 49);
    giq_option(4, 522, 121, Node005, 50);
    giq_option(4, 522, 122, Node004, 51);
end

procedure Node004
begin
    gsay_reply(522, 123);
    giq_option(0, 522, message_str(14, 350), Node999, 50);
end

procedure Node005
begin
    Node5Rep := Node5Rep + 1;
    if (Node5Rep == 1) then begin
        gsay_reply(522, 126);
    end
    else begin
        gsay_reply(522, 127);
    end
    if (q1 == 0) then begin
        giq_option(-3, 522, 128, Node006, 50);
        giq_option(4, 522, 134, Node006, 50);
    end
    if (q2 == 0) then begin
        giq_option(-3, 522, 129, Node007, 50);
        giq_option(4, 522, 135, Node007, 50);
    end
    if (q3 == 0) then begin
        giq_option(-3, 522, 130, Node008, 50);
        giq_option(4, 522, 136, Node008, 50);
    end
    if (q4 == 0) then begin
        giq_option(-3, 522, 131, Node009, 50);
        giq_option(4, 522, 137, Node009, 50);
    end
    if (q5 == 0) then begin
        giq_option(-3, 522, 132, Node010, 50);
        giq_option(4, 522, 138, Node010, 50);
    end
    giq_option(-3, 522, 133, Node999, 50);
    giq_option(4, 522, 139, Node999, 50);
end

procedure Node006
begin
    q1 := 1;
    gsay_reply(522, 140);
    giq_option(-3, 522, 141, Node005, 50);
    giq_option(-3, 522, 142, Node999, 50);
    giq_option(4, 522, 143, Node005, 50);
    giq_option(4, 522, 144, Node004, 51);
    giq_option(4, 522, 145, Node005, 49);
end

procedure Node007
begin
    q2 := 1;
    gsay_reply(522, 146);
    giq_option(-3, 522, 147, Node999, 50);
    giq_option(-3, 522, 148, Node005, 50);
    giq_option(4, 522, 149, Node005, 49);
    giq_option(4, 522, 150, Node005, 50);
    giq_option(4, 522, 151, Node004, 51);
end

procedure Node008
begin
    q3 := 1;
    gsay_reply(522, 152);
    giq_option(-3, 522, 153, Node999, 50);
    giq_option(-3, 522, 154, Node005, 50);
    giq_option(4, 522, 155, Node004, 51);
    giq_option(4, 522, 156, Node999, 50);
    giq_option(4, 522, 157, Node005, 49);
end

procedure Node009
begin
    q4 := 1;
    gsay_reply(522, 158);
    giq_option(-3, 522, 159, Node010, 49);
    giq_option(-3, 522, 160, Node999, 50);
    giq_option(4, 522, 161, Node010, 49);
    giq_option(4, 522, 162, Node999, 50);
    giq_option(4, 522, 163, Node004, 51);
end

procedure Node010
begin
    q5 := 1;
    if (local_var(7)) then begin
        gsay_reply(522, 164);
        giq_option(-3, 522, 166, Node005, 50);
        giq_option(-3, 522, 167, Node005, 49);
        giq_option(-3, 522, 168, Node999, 50);
        giq_option(4, 522, 169, Node005, 50);
        giq_option(4, 522, 170, Node999, 51);
        giq_option(4, 522, 171, Node005, 49);
    end
    else begin
        call Node010story();
    end
end

procedure Node011
begin
    float_msg(self_obj, message_str(522, 172), 0);
end

procedure Node012
begin
    if (get_critter_stat(dude_obj, 34) == 0) then begin
        float_msg(self_obj, message_str(522, 175), 0);
    end
    else begin
        float_msg(self_obj, message_str(522, 176), 0);
    end
end

procedure check_load_pos
begin
    if (getTimeBit() >= 2048) then begin
        call tvar_Warp_To_Pos(1, 60 * (60 * 10) * 12);
    end
    else begin
        call tvar_Warp_To_Pos(0, 60 * (60 * 10) * 12);
    end
    add_timer_event(self_obj, 60 * (60 * 10) * 12, -1);
end

procedure tile_cb_func
begin
    add_timer_event(self_obj, 60 * (60 * 10) * 12, -1);
end

procedure Node010story
begin
    set_local_var(7, 1);
    story := story + 1;
    if (story == 1) then begin
        gsay_reply(522, 165);
        giq_option(0, 522, message_str(14, 352), Node010story, 50);
    end
    else begin
        if (story == 2) then begin
            gsay_reply(522, 180);
            giq_option(-3, 522, 166, Node005, 50);
            giq_option(-3, 522, 167, Node005, 49);
            giq_option(-3, 522, 168, Node999, 50);
            giq_option(4, 522, 169, Node005, 50);
            giq_option(4, 522, 170, Node999, 51);
            giq_option(4, 522, 171, Node005, 49);
        end
    end
end

