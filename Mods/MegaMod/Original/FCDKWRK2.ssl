variable global_temp;
variable dest_tile;
variable step_tile;

procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure Node999;
procedure Node998;
procedure Node900;
procedure Node901;
procedure Node902;
procedure Node903;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;

variable kill_self;

procedure timed_event_p_proc;
procedure pickup_p_proc;
procedure critter_p_proc;


procedure start
begin
end

procedure use_p_proc
begin
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(2476, 100));
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(2476, 101));
end

procedure use_skill_on_p_proc
begin
end

procedure use_obj_on_p_proc
begin
end

procedure damage_p_proc
begin
end

procedure map_enter_p_proc
begin
    if (local_var(7) == 1) then begin
        destroy_object(self_obj);
    end
end

procedure map_update_p_proc
begin
end

procedure talk_p_proc
begin
    if (local_var(8)) then begin
        float_msg(self_obj, message_str(2476, 350), 8);
    end
    else begin
        if (local_var(7)) then begin
            float_msg(self_obj, message_str(2476, 330), 8);
        end
        else begin
            start_gdialog(2476, self_obj, 4, -1, -1);
            gsay_start;
            call Node001();
            gsay_end;
            end_dialogue;
        end
    end
    if (kill_self) then begin
        critter_dmg(self_obj, 1000, 0);
    end
end

procedure Node999
begin
end

procedure Node998
begin
    set_local_var(5, 2);
end

procedure Node900
begin
    variable LVar0 := 0;
    LVar0 := create_object_sid(4, 0, 0, -1);
    add_obj_to_inven(self_obj, LVar0);
    kill_self := 1;
    return 0;
    LVar0 := 0;
end

procedure Node901
begin
    if (global_var(362) == 0) then begin
        set_global_var(362, 1);
    end
    call Node902();
end

procedure Node902
begin
    set_local_var(7, 1);
    display_msg(message_str(2476, 400));
    give_exp_points(500);
    display_msg(message_str(14, 100) + 500 + message_str(14, 101));
    add_timer_event(self_obj, 10, 1);
end

procedure Node903
begin
    set_local_var(8, 1);
end

procedure Node001
begin
    gsay_reply(2476, 200 + local_var(4));
    giq_option(4, 2476, 202, Node999, 50);
    giq_option(4, 2476, 203, Node002, 50);
    giq_option(4, 2476, 204, Node002, 50);
    set_local_var(4, 1);
end

procedure Node002
begin
    gsay_reply(2476, 210);
    giq_option(4, 2476, 211, Node003, 50);
    giq_option(4, 2476, 212, Node003, 50);
    giq_option(4, 2476, 213, Node003, 50);
    giq_option(4, 2476, 214, Node999, 50);
end

procedure Node003
begin
    gsay_reply(2476, 220);
    giq_option(4, 2476, 221, Node004, 50);
end

procedure Node004
begin
    gsay_reply(2476, 230);
    giq_option(4, 2476, 231, Node005, 50);
    giq_option(4, 2476, 232, Node006, 50);
    if (has_skill(dude_obj, 14) > 80) then begin
        giq_option(4, 2476, 233, Node007, 50);
    end
end

procedure Node005
begin
    gsay_reply(2476, 240);
    giq_option(4, 2476, 241, Node900, 50);
end

procedure Node006
begin
    gsay_reply(2476, 250);
    giq_option(4, 2476, 251, Node903, 50);
end

procedure Node007
begin
    gsay_reply(2476, 260);
    giq_option(4, 2476, 261, Node902, 50);
    giq_option(4, 2476, 262, Node008, 50);
end

procedure Node008
begin
    gsay_reply(2476, 270);
    giq_option(4, 2476, 271, Node009, 50);
    giq_option(4, 2476, 272, Node902, 50);
end

procedure Node009
begin
    gsay_reply(2476, 280);
    giq_option(4, 2476, 281, Node010, 50);
end

procedure Node010
begin
    gsay_reply(2476, 290);
    giq_option(4, 2476, 291, Node011, 50);
end

procedure Node011
begin
    gsay_reply(2476, 300);
    giq_option(4, 2476, 301, Node012, 50);
end

procedure Node012
begin
    gsay_reply(2476, 310);
    giq_option(4, 2476, 311, Node013, 50);
end

procedure Node013
begin
    gsay_reply(2476, 320);
    giq_option(4, 2476, 321, Node901, 50);
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        if (tile_num(self_obj) == 31914) then begin
            destroy_object(self_obj);
        end
        else begin
            if (tile_num(self_obj) != 31914) then begin
                if (tile_num(self_obj) < 23306) then begin
                    if ((tile_num(self_obj) != 23306) and (23306 != 0)) then begin
                        if ((dest_tile == 23306) and (step_tile < 0)) then begin
                            step_tile := step_tile + 1;
                            debug_msg("step_tile: " + step_tile);
                        end
                        else begin
                            if (anim_busy(self_obj) == 0) then begin
                                dest_tile := 23306;
                                step_tile := 23306;
                                animate_move_obj_to_tile(self_obj, step_tile, 0);
                                while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), 23306) >= tile_distance(step_tile, 23306))) do begin
                                    debug_msg("rot: " + rotation_to_tile(step_tile, tile_num(self_obj)));
                                    step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), 1 % tile_distance(step_tile, tile_num(self_obj)));
                                    debug_msg("step_var: " + step_tile);
                                    animate_move_obj_to_tile(self_obj, step_tile, 0);
                                end
                                if (anim_busy(self_obj) == 0) then begin
                                    if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                        if (anim_busy(self_obj) == 0) then begin
                                            global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                                debug_msg("flee loop: rot == " + global_temp);
                                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                                global_temp := (global_temp + 1) % 6;
                                            end
                                        end
                                    end
                                    else begin
                                        step_tile := -10;
                                    end
                                end
                            end
                            else begin
                                if (tile_distance(tile_num(self_obj), 23306) < tile_distance(dest_tile, 23306)) then begin
                                    reg_anim_func(2, self_obj);
                                end
                            end
                        end
                    end
                end
                else begin
                    if ((tile_num(self_obj) != 31914) and (31914 != 0)) then begin
                        if ((dest_tile == 31914) and (step_tile < 0)) then begin
                            step_tile := step_tile + 1;
                            debug_msg("step_tile: " + step_tile);
                        end
                        else begin
                            if (anim_busy(self_obj) == 0) then begin
                                dest_tile := 31914;
                                step_tile := 31914;
                                animate_move_obj_to_tile(self_obj, step_tile, 0);
                                while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), 31914) >= tile_distance(step_tile, 31914))) do begin
                                    debug_msg("rot: " + rotation_to_tile(step_tile, tile_num(self_obj)));
                                    step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), 1 % tile_distance(step_tile, tile_num(self_obj)));
                                    debug_msg("step_var: " + step_tile);
                                    animate_move_obj_to_tile(self_obj, step_tile, 0);
                                end
                                if (anim_busy(self_obj) == 0) then begin
                                    if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                        if (anim_busy(self_obj) == 0) then begin
                                            global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                                debug_msg("flee loop: rot == " + global_temp);
                                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                                global_temp := (global_temp + 1) % 6;
                                            end
                                        end
                                    end
                                    else begin
                                        step_tile := -10;
                                    end
                                end
                            end
                            else begin
                                if (tile_distance(tile_num(self_obj), 31914) < tile_distance(dest_tile, 31914)) then begin
                                    reg_anim_func(2, self_obj);
                                end
                            end
                        end
                    end
                end
            end
        end
        add_timer_event(self_obj, 10, 1);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(5, 2);
    end
end

procedure critter_p_proc
begin
    if ((local_var(5) == 2) or ((global_var(361) bwand 1) != 0) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
    end
end

