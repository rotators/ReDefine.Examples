procedure start;
procedure Replace_Ammo;
procedure map_enter_ammo;
procedure Replace_Book;
procedure map_enter_book;
procedure Replace_Weap;
procedure map_enter_weapon;
procedure critter_weapons(variable arg0);
procedure container_weapons(variable arg0);
procedure critter_ammo(variable arg0);
procedure container_ammo(variable arg0);
procedure critter_books(variable arg0);
procedure container_books(variable arg0);
procedure remove_inventory(variable arg0, variable arg1, variable arg2);
procedure remove_from_tile(variable arg0, variable arg1, variable arg2);
procedure Item_Is_Not_Trunk_Item(variable arg0);

variable remove_item;
variable replace_item;
variable delete_item;
variable item_list;
variable item;
variable critter;
variable critter_list;
variable number_items_remove;


procedure start
begin
    if (game_loaded) then begin
        set_global_script_repeat(60);
    end
    else begin
        call map_enter_ammo();
    end
end

procedure Replace_Ammo
begin
    item_list := list_begin(1);
    while (item_list != 0) do begin
        item := list_next(item_list);
        if (item) then begin
            if (Item_Is_Not_Trunk_Item(item)) then begin
                call container_ammo(item);
            end
        end
        else begin
            list_end(item_list);
            item_list := 0;
        end
    end
    critter_list := list_begin(0);
    while (critter_list != 0) do begin
        critter := list_next(critter_list);
        if (critter) then begin
            if (((party_member_obj(obj_pid(critter)) != 0) == 0) and (critter != dude_obj)) then begin
                call critter_ammo(critter);
            end
        end
        else begin
            list_end(critter_list);
            critter_list := 0;
        end
    end
end

procedure map_enter_ammo
begin
    if (get_sfall_global_int(cur_map_index + 10000) == 0) then begin
        set_sfall_global(cur_map_index + 10000, 1);
        call Replace_Ammo();
    end
end

procedure Replace_Book
begin
    item_list := list_begin(1);
    while (item_list != 0) do begin
        item := list_next(item_list);
        if (item) then begin
            call container_books(item);
        end
        else begin
            list_end(item_list);
            item_list := 0;
        end
    end
    critter_list := list_begin(0);
    while (critter_list != 0) do begin
        critter := list_next(critter_list);
        if (critter) then begin
            if (((party_member_obj(obj_pid(critter)) != 0) == 0) and (critter != dude_obj)) then begin
                call critter_books(critter);
            end
        end
        else begin
            list_end(critter_list);
            critter_list := 0;
        end
    end
end

procedure map_enter_book
begin
    if (get_sfall_global_int(cur_map_index + 10500) == 0) then begin
        set_sfall_global(cur_map_index + 10500, 1);
        call Replace_Book();
    end
end

procedure Replace_Weap
begin
    item_list := list_begin(1);
    while (item_list != 0) do begin
        item := list_next(item_list);
        if (item) then begin
            if (Item_Is_Not_Trunk_Item(item)) then begin
                call container_weapons(item);
            end
        end
        else begin
            list_end(item_list);
            item_list := 0;
        end
    end
    critter_list := list_begin(0);
    while (critter_list != 0) do begin
        critter := list_next(critter_list);
        if (critter) then begin
            if (((party_member_obj(obj_pid(critter)) != 0) == 0) and (critter != dude_obj)) then begin
                call critter_weapons(critter);
            end
        end
        else begin
            list_end(critter_list);
            critter_list := 0;
        end
    end
end

procedure map_enter_weapon
begin
    if (get_sfall_global_int(cur_map_index + 11000) == 0) then begin
        set_sfall_global(cur_map_index + 11000, 1);
        call Replace_Weap();
    end
end

procedure critter_weapons(variable arg0)
begin
    call remove_inventory(arg0, 8, 8);
    call remove_inventory(arg0, 9, 9);
    call remove_inventory(arg0, 10, 10);
    call remove_inventory(arg0, 11, 11);
    call remove_inventory(arg0, 12, 12);
    call remove_inventory(arg0, 13, 13);
    call remove_inventory(arg0, 15, 15);
    call remove_inventory(arg0, 16, 16);
    call remove_inventory(arg0, 18, 18);
    call remove_inventory(arg0, 22, 22);
    call remove_inventory(arg0, 23, 23);
    call remove_inventory(arg0, 24, 24);
    call remove_inventory(arg0, 28, 28);
    call remove_inventory(arg0, 94, 94);
    call remove_inventory(arg0, 116, 116);
    call remove_inventory(arg0, 118, 118);
    call remove_inventory(arg0, 120, 120);
    call remove_inventory(arg0, 122, 122);
    call remove_inventory(arg0, 143, 143);
    call remove_inventory(arg0, 160, 160);
    call remove_inventory(arg0, 161, 161);
    call remove_inventory(arg0, 162, 162);
    call remove_inventory(arg0, 233, 233);
    call remove_inventory(arg0, 235, 235);
    call remove_inventory(arg0, 242, 242);
    call remove_inventory(arg0, 261, 261);
    call remove_inventory(arg0, 268, 268);
    call remove_inventory(arg0, 270, 270);
    call remove_inventory(arg0, 287, 287);
    call remove_inventory(arg0, 296, 296);
    call remove_inventory(arg0, 299, 299);
    call remove_inventory(arg0, 300, 300);
    call remove_inventory(arg0, 313, 313);
    call remove_inventory(arg0, 283, 283);
    call remove_inventory(arg0, 332, 332);
    call remove_inventory(arg0, 350, 350);
    call remove_inventory(arg0, 355, 355);
    call remove_inventory(arg0, 351, 351);
    call remove_inventory(arg0, 352, 352);
    call remove_inventory(arg0, 353, 353);
    call remove_inventory(arg0, 354, 354);
    call remove_inventory(arg0, 390, 390);
    call remove_inventory(arg0, 385, 385);
    call remove_inventory(arg0, 387, 387);
    call remove_inventory(arg0, 388, 388);
    call remove_inventory(arg0, 389, 389);
    call remove_inventory(arg0, 391, 391);
    call remove_inventory(arg0, 392, 392);
    call remove_inventory(arg0, 393, 393);
    call remove_inventory(arg0, 394, 394);
    call remove_inventory(arg0, 395, 395);
    call remove_inventory(arg0, 396, 396);
    call remove_inventory(arg0, 397, 397);
    call remove_inventory(arg0, 398, 398);
    call remove_inventory(arg0, 399, 399);
    call remove_inventory(arg0, 400, 400);
    call remove_inventory(arg0, 401, 401);
    call remove_inventory(arg0, 402, 402);
    call remove_inventory(arg0, 403, 403);
    call remove_inventory(arg0, 404, 404);
    call remove_inventory(arg0, 405, 405);
    call remove_inventory(arg0, 406, 406);
    call remove_inventory(arg0, 407, 407);
    call remove_inventory(arg0, 500, 500);
    call remove_inventory(arg0, 535, 535);
    call remove_inventory(arg0, 536, 536);
    call remove_inventory(arg0, 537, 537);
    call remove_inventory(arg0, 577, 577);
    call remove_inventory(arg0, 626, 626);
end

procedure container_weapons(variable arg0)
begin
    call remove_inventory(arg0, 8, 8);
    call remove_inventory(arg0, 9, 9);
    call remove_inventory(arg0, 10, 10);
    call remove_inventory(arg0, 11, 11);
    call remove_inventory(arg0, 12, 12);
    call remove_inventory(arg0, 13, 13);
    call remove_inventory(arg0, 15, 15);
    call remove_inventory(arg0, 16, 16);
    call remove_inventory(arg0, 18, 18);
    call remove_inventory(arg0, 22, 22);
    call remove_inventory(arg0, 23, 23);
    call remove_inventory(arg0, 24, 24);
    call remove_inventory(arg0, 28, 28);
    call remove_inventory(arg0, 94, 94);
    call remove_inventory(arg0, 116, 116);
    call remove_inventory(arg0, 118, 118);
    call remove_inventory(arg0, 120, 120);
    call remove_inventory(arg0, 122, 122);
    call remove_inventory(arg0, 143, 143);
    call remove_inventory(arg0, 160, 160);
    call remove_inventory(arg0, 161, 161);
    call remove_inventory(arg0, 162, 162);
    call remove_inventory(arg0, 233, 233);
    call remove_inventory(arg0, 235, 235);
    call remove_inventory(arg0, 242, 242);
    call remove_inventory(arg0, 261, 261);
    call remove_inventory(arg0, 268, 268);
    call remove_inventory(arg0, 270, 270);
    call remove_inventory(arg0, 287, 287);
    call remove_inventory(arg0, 296, 296);
    call remove_inventory(arg0, 299, 299);
    call remove_inventory(arg0, 300, 300);
    call remove_inventory(arg0, 313, 313);
    call remove_inventory(arg0, 283, 283);
    call remove_inventory(arg0, 332, 332);
    call remove_inventory(arg0, 350, 350);
    call remove_inventory(arg0, 355, 355);
    call remove_inventory(arg0, 351, 351);
    call remove_inventory(arg0, 352, 352);
    call remove_inventory(arg0, 353, 353);
    call remove_inventory(arg0, 354, 354);
    call remove_inventory(arg0, 390, 390);
    call remove_inventory(arg0, 385, 385);
    call remove_inventory(arg0, 387, 387);
    call remove_inventory(arg0, 388, 388);
    call remove_inventory(arg0, 389, 389);
    call remove_inventory(arg0, 391, 391);
    call remove_inventory(arg0, 392, 392);
    call remove_inventory(arg0, 393, 393);
    call remove_inventory(arg0, 394, 394);
    call remove_inventory(arg0, 395, 395);
    call remove_inventory(arg0, 396, 396);
    call remove_inventory(arg0, 397, 397);
    call remove_inventory(arg0, 398, 398);
    call remove_inventory(arg0, 399, 399);
    call remove_inventory(arg0, 400, 400);
    call remove_inventory(arg0, 401, 401);
    call remove_inventory(arg0, 402, 402);
    call remove_inventory(arg0, 403, 403);
    call remove_inventory(arg0, 404, 404);
    call remove_inventory(arg0, 405, 405);
    call remove_inventory(arg0, 406, 406);
    call remove_inventory(arg0, 407, 407);
    call remove_inventory(arg0, 500, 500);
    call remove_inventory(arg0, 535, 535);
    call remove_inventory(arg0, 536, 536);
    call remove_inventory(arg0, 537, 537);
    call remove_inventory(arg0, 577, 577);
    call remove_inventory(arg0, 626, 626);
    call remove_from_tile(arg0, 8, 8);
    call remove_from_tile(arg0, 9, 9);
    call remove_from_tile(arg0, 10, 10);
    call remove_from_tile(arg0, 11, 11);
    call remove_from_tile(arg0, 12, 12);
    call remove_from_tile(arg0, 13, 13);
    call remove_from_tile(arg0, 15, 15);
    call remove_from_tile(arg0, 16, 16);
    call remove_from_tile(arg0, 18, 18);
    call remove_from_tile(arg0, 22, 22);
    call remove_from_tile(arg0, 23, 23);
    call remove_from_tile(arg0, 24, 24);
    call remove_from_tile(arg0, 28, 28);
    call remove_from_tile(arg0, 94, 94);
    call remove_from_tile(arg0, 116, 116);
    call remove_from_tile(arg0, 118, 118);
    call remove_from_tile(arg0, 120, 120);
    call remove_from_tile(arg0, 122, 122);
    call remove_from_tile(arg0, 143, 143);
    call remove_from_tile(arg0, 160, 160);
    call remove_from_tile(arg0, 161, 161);
    call remove_from_tile(arg0, 162, 162);
    call remove_from_tile(arg0, 233, 233);
    call remove_from_tile(arg0, 235, 235);
    call remove_from_tile(arg0, 242, 242);
    call remove_from_tile(arg0, 261, 261);
    call remove_from_tile(arg0, 268, 268);
    call remove_from_tile(arg0, 270, 270);
    call remove_from_tile(arg0, 287, 287);
    call remove_from_tile(arg0, 296, 296);
    call remove_from_tile(arg0, 299, 299);
    call remove_from_tile(arg0, 300, 300);
    call remove_from_tile(arg0, 313, 313);
    call remove_from_tile(arg0, 283, 283);
    call remove_from_tile(arg0, 332, 332);
    call remove_from_tile(arg0, 350, 350);
    call remove_from_tile(arg0, 355, 355);
    call remove_from_tile(arg0, 351, 351);
    call remove_from_tile(arg0, 352, 352);
    call remove_from_tile(arg0, 353, 353);
    call remove_from_tile(arg0, 354, 354);
    call remove_from_tile(arg0, 390, 390);
    call remove_from_tile(arg0, 385, 385);
    call remove_from_tile(arg0, 387, 387);
    call remove_from_tile(arg0, 388, 388);
    call remove_from_tile(arg0, 389, 389);
    call remove_from_tile(arg0, 391, 391);
    call remove_from_tile(arg0, 392, 392);
    call remove_from_tile(arg0, 393, 393);
    call remove_from_tile(arg0, 394, 394);
    call remove_from_tile(arg0, 395, 395);
    call remove_from_tile(arg0, 396, 396);
    call remove_from_tile(arg0, 397, 397);
    call remove_from_tile(arg0, 398, 398);
    call remove_from_tile(arg0, 399, 399);
    call remove_from_tile(arg0, 400, 400);
    call remove_from_tile(arg0, 401, 401);
    call remove_from_tile(arg0, 402, 402);
    call remove_from_tile(arg0, 403, 403);
    call remove_from_tile(arg0, 404, 404);
    call remove_from_tile(arg0, 405, 405);
    call remove_from_tile(arg0, 406, 406);
    call remove_from_tile(arg0, 407, 407);
    call remove_from_tile(arg0, 500, 500);
    call remove_from_tile(arg0, 535, 535);
    call remove_from_tile(arg0, 536, 536);
    call remove_from_tile(arg0, 537, 537);
    call remove_from_tile(arg0, 577, 577);
    call remove_from_tile(arg0, 626, 626);
end

procedure critter_ammo(variable arg0)
begin
    call remove_inventory(arg0, 29, 29);
    call remove_inventory(arg0, 30, 30);
    call remove_inventory(arg0, 14, 14);
    call remove_inventory(arg0, 31, 31);
    call remove_inventory(arg0, 32, 32);
    call remove_inventory(arg0, 33, 33);
    call remove_inventory(arg0, 34, 34);
    call remove_inventory(arg0, 35, 35);
    call remove_inventory(arg0, 37, 37);
    call remove_inventory(arg0, 38, 38);
    call remove_inventory(arg0, 39, 39);
    call remove_inventory(arg0, 95, 95);
    call remove_inventory(arg0, 111, 111);
    call remove_inventory(arg0, 121, 121);
    call remove_inventory(arg0, 163, 163);
    call remove_inventory(arg0, 274, 274);
    call remove_inventory(arg0, 357, 357);
    call remove_inventory(arg0, 358, 358);
    call remove_inventory(arg0, 359, 359);
    call remove_inventory(arg0, 360, 360);
    call remove_inventory(arg0, 361, 361);
    call remove_inventory(arg0, 362, 362);
    call remove_inventory(arg0, 363, 363);
    call remove_inventory(arg0, 382, 382);
    call remove_inventory(arg0, 578, 578);
    call remove_inventory(arg0, 767, 767);
    call remove_inventory(arg0, 768, 768);
    call remove_inventory(arg0, 769, 769);
    call remove_inventory(arg0, 770, 770);
    call remove_inventory(arg0, 771, 771);
    call remove_inventory(arg0, 772, 772);
    call remove_inventory(arg0, 773, 773);
    call remove_inventory(arg0, 774, 774);
    call remove_inventory(arg0, 775, 775);
    call remove_inventory(arg0, 776, 776);
    call remove_inventory(arg0, 777, 777);
end

procedure container_ammo(variable arg0)
begin
    call remove_inventory(arg0, 29, 29);
    call remove_inventory(arg0, 30, 30);
    call remove_inventory(arg0, 14, 14);
    call remove_inventory(arg0, 31, 31);
    call remove_inventory(arg0, 32, 32);
    call remove_inventory(arg0, 33, 33);
    call remove_inventory(arg0, 34, 34);
    call remove_inventory(arg0, 35, 35);
    call remove_inventory(arg0, 37, 37);
    call remove_inventory(arg0, 38, 38);
    call remove_inventory(arg0, 39, 39);
    call remove_inventory(arg0, 95, 95);
    call remove_inventory(arg0, 111, 111);
    call remove_inventory(arg0, 121, 121);
    call remove_inventory(arg0, 163, 163);
    call remove_inventory(arg0, 274, 274);
    call remove_inventory(arg0, 357, 357);
    call remove_inventory(arg0, 358, 358);
    call remove_inventory(arg0, 359, 359);
    call remove_inventory(arg0, 360, 360);
    call remove_inventory(arg0, 361, 361);
    call remove_inventory(arg0, 362, 362);
    call remove_inventory(arg0, 363, 363);
    call remove_inventory(arg0, 382, 382);
    call remove_inventory(arg0, 578, 578);
    call remove_from_tile(arg0, 29, 29);
    call remove_from_tile(arg0, 30, 30);
    call remove_from_tile(arg0, 14, 14);
    call remove_from_tile(arg0, 31, 31);
    call remove_from_tile(arg0, 32, 32);
    call remove_from_tile(arg0, 33, 33);
    call remove_from_tile(arg0, 34, 34);
    call remove_from_tile(arg0, 35, 35);
    call remove_from_tile(arg0, 37, 37);
    call remove_from_tile(arg0, 38, 38);
    call remove_from_tile(arg0, 39, 39);
    call remove_from_tile(arg0, 95, 95);
    call remove_from_tile(arg0, 111, 111);
    call remove_from_tile(arg0, 121, 121);
    call remove_from_tile(arg0, 163, 163);
    call remove_from_tile(arg0, 274, 274);
    call remove_from_tile(arg0, 357, 357);
    call remove_from_tile(arg0, 358, 358);
    call remove_from_tile(arg0, 359, 359);
    call remove_from_tile(arg0, 360, 360);
    call remove_from_tile(arg0, 361, 361);
    call remove_from_tile(arg0, 362, 362);
    call remove_from_tile(arg0, 363, 363);
    call remove_from_tile(arg0, 382, 382);
    call remove_from_tile(arg0, 578, 578);
    call remove_inventory(arg0, 767, 767);
    call remove_inventory(arg0, 768, 768);
    call remove_inventory(arg0, 769, 769);
    call remove_inventory(arg0, 770, 770);
    call remove_inventory(arg0, 771, 771);
    call remove_inventory(arg0, 772, 772);
    call remove_inventory(arg0, 773, 773);
    call remove_inventory(arg0, 774, 774);
    call remove_inventory(arg0, 775, 775);
    call remove_inventory(arg0, 776, 776);
    call remove_inventory(arg0, 777, 777);
    call remove_from_tile(arg0, 767, 767);
    call remove_from_tile(arg0, 768, 768);
    call remove_from_tile(arg0, 769, 769);
    call remove_from_tile(arg0, 770, 770);
    call remove_from_tile(arg0, 771, 771);
    call remove_from_tile(arg0, 772, 772);
    call remove_from_tile(arg0, 773, 773);
    call remove_from_tile(arg0, 774, 774);
    call remove_from_tile(arg0, 775, 775);
    call remove_from_tile(arg0, 776, 776);
    call remove_from_tile(arg0, 777, 777);
end

procedure critter_books(variable arg0)
begin
    call remove_inventory(arg0, 102, 778);
    call remove_inventory(arg0, 80, 784);
    call remove_inventory(arg0, 73, 790);
    call remove_inventory(arg0, 76, 791);
    call remove_inventory(arg0, 86, 795);
end

procedure container_books(variable arg0)
begin
    call remove_from_tile(arg0, 102, 778);
    call remove_from_tile(arg0, 80, 784);
    call remove_from_tile(arg0, 73, 790);
    call remove_from_tile(arg0, 76, 791);
    call remove_from_tile(arg0, 86, 795);
    call remove_inventory(arg0, 102, 778);
    call remove_inventory(arg0, 80, 784);
    call remove_inventory(arg0, 73, 790);
    call remove_inventory(arg0, 76, 791);
    call remove_inventory(arg0, 86, 795);
end

procedure remove_inventory(variable arg0, variable arg1, variable arg2)
begin
    if (obj_is_carrying_obj_pid(arg0, arg1) > 0) then begin
        while (obj_is_carrying_obj_pid(arg0, arg1) > 0) do begin
            delete_item := obj_carrying_pid_obj(arg0, arg1);
            rm_obj_from_inven(arg0, delete_item);
            if (tile_contains_obj_pid(1, 0, arg1)) then begin
                delete_item := tile_contains_pid_obj(1, 0, arg1);
                destroy_object(delete_item);
            end
            number_items_remove := number_items_remove + 1;
        end
        add_mult_objs_to_inven(arg0, create_object_sid(arg2, 0, 0, -1), number_items_remove);
        number_items_remove := 0;
    end
end

procedure remove_from_tile(variable arg0, variable arg1, variable arg2)
begin
    variable LVar3 := 0;
    variable LVar4 := 0;
    if (obj_pid(arg0) == arg1) then begin
        LVar3 := tile_num(arg0);
        LVar4 := elevation(arg0);
        delete_item := tile_contains_pid_obj(tile_num(arg0), elevation(arg0), arg1);
        destroy_object(delete_item);
        create_object_sid(arg2, LVar3, LVar4, -1);
    end
end

procedure Item_Is_Not_Trunk_Item(variable arg0)
begin
    if ((obj_pid(arg0) != 455) and (obj_pid(arg0) != 549) and (obj_pid(arg0) != 831) and (obj_pid(arg0) != 832) and (obj_pid(arg0) != 833) and (obj_pid(arg0) != 834) and (obj_pid(arg0) != 835) and (obj_pid(arg0) != 836)) then begin
        return 1;
    end
    return 0;
end

