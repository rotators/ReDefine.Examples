variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure look_at_p_proc;
procedure description_p_proc;
procedure talk_p_proc;
procedure pickup_p_proc;
procedure timed_event_p_proc;
procedure Node000;
procedure Node001;
procedure Node002;
procedure Node005;
procedure Node006;

variable player_hand_total;
variable player_1_card;
variable player_2_card;
variable player_3_card;
variable dealer_hand_total;
variable dealer_1_card;
variable dealer_2_card;
variable dealer_3_card;

procedure DrawCard(variable arg0);
procedure GetCardValue(variable arg0);
procedure TotalCards(variable arg0, variable arg1, variable arg2);
procedure GiveCards(variable arg0);
procedure Node999;
procedure Node998;
procedure PrintDrawCardMessages(variable arg0, variable arg1, variable arg2, variable arg3, variable arg4);


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure look_at_p_proc
begin
    script_overrides;
    if (obj_type(self_obj) == 1) then begin
        display_msg(message_str(70, 101));
    end
    else begin
        display_msg(message_str(70, 100));
    end
end

procedure description_p_proc
begin
    script_overrides;
    if (obj_type(self_obj) == 1) then begin
        display_msg(message_str(70, 101));
    end
    else begin
        display_msg(message_str(70, 110) + 20 + message_str(70, 111));
    end
end

procedure talk_p_proc
begin
    call Node000();
end

procedure pickup_p_proc
begin
    if (obj_type(self_obj) == 1) then begin
        if (critter_is_fleeing(self_obj)) then begin
            if (anim_busy(self_obj) == 0) then begin
                if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                    if (anim_busy(self_obj) == 0) then begin
                        global_temp := rotation_to_tile(tile_num(dude_obj), tile_num(self_obj));
                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                        global_temp := (global_temp + 1) % 6;
                        while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)))) do begin
                            debug_msg("flee loop: rot == " + global_temp);
                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                            global_temp := (global_temp + 1) % 6;
                        end
                    end
                end
            end
        end
        else begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
end

procedure timed_event_p_proc
begin
    if (obj_type(self_obj) == 1) then begin
        if (tile_distance_objs(self_obj, dude_obj) <= 4) then begin
            if (random(0, 4) != 3) then begin
                play_sfx("shuffle");
            end
        end
    end
end

procedure Node000
begin
    if (local_var(0) == 0) then begin
        start_gdialog(70, self_obj, 4, -1, -1);
        gsay_start;
        if (((local_var(1) > 0) or (0 == 0)) == 0) then begin
            gsay_reply(70, message_str(70, 102) + 20 + message_str(70, 103));
            giq_option(4, 70, 104, Node001, 50);
            giq_option(4, 70, 105, Node999, 50);
            giq_option(-3, 70, 106, Node999, 50);
        end
        else begin
            gsay_reply(70, 129);
            giq_option(1, 70, 127, Node999, 50);
            if ((local_var(1) > 0) or (0 == 0)) then begin
                giq_option(1, 70, 128, Node998, 50);
            end
        end
        gsay_end;
        end_dialogue;
    end
    else begin
        if (obj_type(self_obj) == 1) then begin
            float_msg(self_obj, message_str(70, 129), 8);
        end
    end
end

procedure Node001
begin
    if (item_caps_total(dude_obj) >= 20) then begin
        player_1_card := 0;
        player_2_card := 0;
        player_3_card := 0;
        player_hand_total := TotalCards(0, 0, 0);
        dealer_1_card := 0;
        dealer_2_card := 0;
        dealer_3_card := 0;
        dealer_hand_total := TotalCards(0, 0, 0);
        call Node002();
    end
    else begin
        gsay_reply(70, 107);
    end
end

procedure Node002
begin
    call GiveCards(0);
    call GiveCards(1);
    call Node005();
end

procedure Node005
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := PrintDrawCardMessages(0, player_1_card, player_2_card, player_3_card, player_hand_total) + "  " + PrintDrawCardMessages(1, dealer_1_card, dealer_2_card, dealer_3_card, dealer_hand_total) + "  ";
    if ((player_hand_total == dealer_hand_total) or ((player_hand_total > 21) and (dealer_hand_total > 21))) then begin
        gsay_reply(70, LVar0 + message_str(70, 126));
    end
    else begin
        if ((player_hand_total > dealer_hand_total) or (dealer_hand_total > 21) and (player_hand_total <= 21)) then begin
            if ((player_hand_total == 21) and (player_3_card == 0)) then begin
                LVar1 := 3 * 20 / 2;
            end
            else begin
                LVar1 := 20;
            end
            set_local_var(1, local_var(1) + LVar1);
            item_caps_adjust(dude_obj, LVar1);
            gsay_reply(70, LVar0 + message_str(70, 131) + LVar1 + message_str(70, 132));
        end
        else begin
            set_local_var(1, local_var(1) + -20);
            item_caps_adjust(dude_obj, -20);
            gsay_reply(70, LVar0 + message_str(70, 125));
        end
    end
    giq_option(1, 70, 121, Node006, 50);
end

procedure Node006
begin
    if ((local_var(1) > 0) or (0 == 0)) then begin
        play_sfx("shuffle");
        gsay_reply(70, 122);
        giq_option(1, 70, 104, Node001, 50);
        giq_option(1, 70, 105, Node999, 50);
    end
    else begin
        gsay_reply(70, 123);
        giq_option(1, 70, 127, Node999, 50);
        giq_option(1, 70, 128, Node998, 50);
    end
end

procedure DrawCard(variable arg0)
begin
    variable LVar1 := 0;
    variable LVar2 := 0;
    if (arg0 > 0) then begin
        if (arg0 == 11) then begin
            LVar1 := 1;
        end
        else begin
            if (arg0 >= 10) then begin
                LVar1 := random(10, 13);
            end
            else begin
                LVar1 := arg0;
            end
        end
        while ((player_1_card == (LVar1 + ((1 - 1) * 13))) or (player_2_card == (LVar1 + ((1 - 1) * 13))) or (player_3_card == (LVar1 + ((1 - 1) * 13))) or ((dealer_1_card == (LVar1 + ((1 - 1) * 13))) or (dealer_2_card == (LVar1 + ((1 - 1) * 13))) or (dealer_3_card == (LVar1 + ((1 - 1) * 13)))) or ((player_1_card == (LVar1 + ((2 - 1) * 13))) or (player_2_card == (LVar1 + ((2 - 1) * 13))) or (player_3_card == (LVar1 + ((2 - 1) * 13))) or ((dealer_1_card == (LVar1 + ((2 - 1) * 13))) or (dealer_2_card == (LVar1 + ((2 - 1) * 13))) or (dealer_3_card == (LVar1 + ((2 - 1) * 13))))) or ((player_1_card == (LVar1 + ((3 - 1) * 13))) or (player_2_card == (LVar1 + ((3 - 1) * 13))) or (player_3_card == (LVar1 + ((3 - 1) * 13))) or ((dealer_1_card == (LVar1 + ((3 - 1) * 13))) or (dealer_2_card == (LVar1 + ((3 - 1) * 13))) or (dealer_3_card == (LVar1 + ((3 - 1) * 13))))) or ((player_1_card == (LVar1 + ((4 - 1) * 13))) or (player_2_card == (LVar1 + ((4 - 1) * 13))) or (player_3_card == (LVar1 + ((4 - 1) * 13))) or ((dealer_1_card == (LVar1 + ((4 - 1) * 13))) or (dealer_2_card == (LVar1 + ((4 - 1) * 13))) or (dealer_3_card == (LVar1 + ((4 - 1) * 13)))))) do begin
            if (LVar1 == 1) then begin
                LVar1 := 13;
            end
            else begin
                LVar1 := LVar1 - 1;
            end
        end
        LVar2 := random(1, 4);
        while ((player_1_card == (LVar1 + ((LVar2 - 1) * 13))) or (player_2_card == (LVar1 + ((LVar2 - 1) * 13))) or (player_3_card == (LVar1 + ((LVar2 - 1) * 13))) or ((dealer_1_card == (LVar1 + ((LVar2 - 1) * 13))) or (dealer_2_card == (LVar1 + ((LVar2 - 1) * 13))) or (dealer_3_card == (LVar1 + ((LVar2 - 1) * 13))))) do begin
            LVar2 := LVar2 + 1;
            if (LVar2 > 4) then begin
                LVar2 := 1;
            end
        end
        return LVar1 + ((LVar2 - 1) * 13);
    end
    else begin
        return 0;
    end
end

procedure GetCardValue(variable arg0)
begin
    variable LVar1 := 0;
    LVar1 := arg0 - (((((arg0 > ((13 * 1) - 13)) and (arg0 <= (13 * 1))) * 1) + (((arg0 > ((13 * 2) - 13)) and (arg0 <= (13 * 2))) * 2) + (((arg0 > ((13 * 3) - 13)) and (arg0 <= (13 * 3))) * 3) + (((arg0 > ((13 * 4) - 13)) and (arg0 <= (13 * 4))) * 4) - 1) * 13);
    if (LVar1 > 10) then begin
        return 10;
    end
    else begin
        return LVar1;
    end
end

procedure TotalCards(variable arg0, variable arg1, variable arg2)
begin
    variable LVar3 := 0;
    LVar3 := GetCardValue(arg0) + GetCardValue(arg1) + GetCardValue(arg2);
    if ((arg0 == (1 + ((1 - 1) * 13))) or (arg0 == (1 + ((2 - 1) * 13))) or (arg0 == (1 + ((3 - 1) * 13))) or (arg0 == (1 + ((4 - 1) * 13))) or ((arg1 == (1 + ((1 - 1) * 13))) or (arg1 == (1 + ((2 - 1) * 13))) or (arg1 == (1 + ((3 - 1) * 13))) or (arg1 == (1 + ((4 - 1) * 13)))) or ((arg2 == (1 + ((1 - 1) * 13))) or (arg2 == (1 + ((2 - 1) * 13))) or (arg2 == (1 + ((3 - 1) * 13))) or (arg2 == (1 + ((4 - 1) * 13)))) and (LVar3 <= 11)) then begin
        LVar3 := LVar3 + 10;
    end
    return LVar3;
end

procedure GiveCards(variable arg0)
begin
    variable LVar1 := 0;
    variable LVar2 := 0;
    variable LVar3 := 0;
    variable LVar4 := 0;
    variable LVar5 := 0;
    variable LVar6 := 0;
    LVar6 := roll_vs_skill(dude_obj, 16, 0);
    if (is_critical(LVar6)) then begin
        if (is_success(LVar6) and (arg0 == 0) or ((is_success(LVar6) == 0) and (arg0 == 1))) then begin
            LVar1 := DrawCard(11);
            LVar2 := DrawCard(10);
        end
        else begin
            LVar1 := DrawCard(random(9, 10));
            LVar2 := DrawCard(random(4, 8));
            LVar3 := DrawCard(random(9, 10));
        end
    end
    else begin
        if (is_success(LVar6) and (arg0 == 0) or ((is_success(LVar6) == 0) and (arg0 == 1))) then begin
            LVar4 := random(18, 21);
        end
        else begin
            LVar4 := random(15, 17);
        end
        LVar1 := DrawCard(random(1, 13));
        if ((GetCardValue(LVar1) + 10) <= LVar4) then begin
            LVar2 := DrawCard(10);
        end
        LVar2 := DrawCard(random(1, LVar4 - GetCardValue(LVar1)));
        LVar5 := TotalCards(LVar1, LVar2, 0);
        if (LVar4 > LVar5) then begin
            LVar3 := DrawCard(LVar4 - LVar5);
        end
    end
    if (arg0 == 0) then begin
        player_1_card := LVar1;
        player_2_card := LVar2;
        player_3_card := LVar3;
        player_hand_total := TotalCards(LVar1, LVar2, LVar3);
    end
    else begin
        dealer_1_card := LVar1;
        dealer_2_card := LVar2;
        dealer_3_card := LVar3;
        dealer_hand_total := TotalCards(LVar1, LVar2, LVar3);
    end
end

procedure Node999
begin
end

procedure Node998
begin
    set_local_var(0, 1);
end

procedure PrintDrawCardMessages(variable arg0, variable arg1, variable arg2, variable arg3, variable arg4)
begin
    variable LVar5 := 0;
    variable LVar6 := 0;
    LVar5 := message_str(70, 200 + (arg1 - (((((arg1 > ((13 * 1) - 13)) and (arg1 <= (13 * 1))) * 1) + (((arg1 > ((13 * 2) - 13)) and (arg1 <= (13 * 2))) * 2) + (((arg1 > ((13 * 3) - 13)) and (arg1 <= (13 * 3))) * 3) + (((arg1 > ((13 * 4) - 13)) and (arg1 <= (13 * 4))) * 4) - 1) * 13))) + message_str(70, 113) + message_str(70, 250 + ((((arg1 > ((13 * 1) - 13)) and (arg1 <= (13 * 1))) * 1) + (((arg1 > ((13 * 2) - 13)) and (arg1 <= (13 * 2))) * 2) + (((arg1 > ((13 * 3) - 13)) and (arg1 <= (13 * 3))) * 3) + (((arg1 > ((13 * 4) - 13)) and (arg1 <= (13 * 4))) * 4)));
    if (arg3 == 0) then begin
        LVar6 := arg2;
    end
    else begin
        LVar5 := LVar5 + (message_str(70, 114) + message_str(70, 200 + (arg2 - (((((arg2 > ((13 * 1) - 13)) and (arg2 <= (13 * 1))) * 1) + (((arg2 > ((13 * 2) - 13)) and (arg2 <= (13 * 2))) * 2) + (((arg2 > ((13 * 3) - 13)) and (arg2 <= (13 * 3))) * 3) + (((arg2 > ((13 * 4) - 13)) and (arg2 <= (13 * 4))) * 4) - 1) * 13))) + message_str(70, 113) + message_str(70, 250 + ((((arg2 > ((13 * 1) - 13)) and (arg2 <= (13 * 1))) * 1) + (((arg2 > ((13 * 2) - 13)) and (arg2 <= (13 * 2))) * 2) + (((arg2 > ((13 * 3) - 13)) and (arg2 <= (13 * 3))) * 3) + (((arg2 > ((13 * 4) - 13)) and (arg2 <= (13 * 4))) * 4))));
        LVar6 := arg3;
    end
    LVar5 := LVar5 + (message_str(70, 115) + message_str(70, 200 + (LVar6 - (((((LVar6 > ((13 * 1) - 13)) and (LVar6 <= (13 * 1))) * 1) + (((LVar6 > ((13 * 2) - 13)) and (LVar6 <= (13 * 2))) * 2) + (((LVar6 > ((13 * 3) - 13)) and (LVar6 <= (13 * 3))) * 3) + (((LVar6 > ((13 * 4) - 13)) and (LVar6 <= (13 * 4))) * 4) - 1) * 13))) + message_str(70, 113) + message_str(70, 250 + ((((LVar6 > ((13 * 1) - 13)) and (LVar6 <= (13 * 1))) * 1) + (((LVar6 > ((13 * 2) - 13)) and (LVar6 <= (13 * 2))) * 2) + (((LVar6 > ((13 * 3) - 13)) and (LVar6 <= (13 * 3))) * 3) + (((LVar6 > ((13 * 4) - 13)) and (LVar6 <= (13 * 4))) * 4))) + message_str(70, 116) + arg4);
    if ((arg4 == 21) and (arg3 == 0)) then begin
        LVar5 := LVar5 + message_str(70, 117);
    end
    else begin
        if (arg4 > 21) then begin
            LVar5 := LVar5 + message_str(70, 118);
        end
    end
    LVar5 := LVar5 + message_str(70, 119);
    if (arg0 == 0) then begin
        LVar5 := message_str(70, 112) + LVar5;
    end
    else begin
        LVar5 := message_str(70, 120) + LVar5;
    end
    return LVar5;
end

