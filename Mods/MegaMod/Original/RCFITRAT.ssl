variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure map_enter_p_proc;
procedure critter_p_proc;
procedure look_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure destroy_p_proc;
procedure map_update_p_proc;
procedure Find_Rat_Num;
procedure Find_Ptr;
procedure Setup_Fighting;
procedure Start_Fighting;
procedure Attack_Round;
procedure End_Fight(variable arg0);
procedure Fighter_Sequence(variable arg0, variable arg1);

import variable Molerat_Ptr1;
import variable Molerat_Ptr2;
import variable Molerat_Ptr3;
import variable Molerat_Ptr4;
import variable Molerat_Ptr5;
import variable Molerat_Ptr6;

variable Fighter1;
variable Fighter2;
variable Closing_Tile;
variable RoundNumber;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, 1, 6, 154);
    critter_add_trait(self_obj, 1, 5, 7);
    if (local_var(0) == 0) then begin
        set_local_var(0, 1);
        call Find_Rat_Num();
    end
    call Find_Ptr();
end

procedure critter_p_proc
begin
    if ((map_var(3) == 0) and (map_var(4) == 0)) then begin
        set_local_var(2, 0);
    end
    if ((map_var(3) != 0) and (map_var(4) != 0) and (local_var(2) == 0)) then begin
        debug_msg("ECKAGA1: tile_set_center(21336): " + metarule3(108, 21336, 0, 0));
        if (map_var(3) == local_var(1)) then begin
            set_local_var(2, 1);
            call Setup_Fighting();
        end
        else begin
            if (map_var(4) == local_var(1)) then begin
                set_local_var(2, 1);
                call Setup_Fighting();
            end
        end
    end
end

procedure look_p_proc
begin
end

procedure description_p_proc
begin
end

procedure timed_event_p_proc
begin
    if (fixed_param == 0) then begin
        Closing_Tile := tile_num_in_direction(tile_num(Fighter1), rotation_to_tile(tile_num(Fighter1), tile_num(Fighter2)), (tile_distance_objs(Fighter1, Fighter2) / 2) - 1);
        animate_move_obj_to_tile(Fighter1, Closing_Tile, 1);
        Closing_Tile := tile_num_in_direction(tile_num(Fighter2), rotation_to_tile(tile_num(Fighter2), tile_num(Fighter1)), (tile_distance_objs(Fighter2, Fighter1) / 2) - 1);
        animate_move_obj_to_tile(Fighter2, Closing_Tile, 1);
        add_timer_event(self_obj, game_ticks(1), 1);
        debug_msg("Adding Timer event");
    end
    else begin
        if (fixed_param == 1) then begin
            if ((tile_distance_objs(Fighter1, Fighter2) / 2) > 1) then begin
                add_timer_event(self_obj, 1, 0);
            end
            else begin
                if ((Fighter1 != 0) or (Fighter2 != 0) or (local_var(7) > 0) or (local_var(6) > 0)) then begin
                    call Attack_Round();
                end
            end
        end
        else begin
            if (fixed_param == 2) then begin
                if ((Fighter1 == 0) or (Fighter2 == 0) or (local_var(7) <= 0) or (local_var(6) <= 0)) then begin
                    set_local_var(2, 2);
                    if (Fighter1 == 0) then begin
                        set_map_var(3, 0);
                    end
                    else begin
                        set_map_var(4, 0);
                    end
                end
                else begin
                    RoundNumber := RoundNumber + 1;
                    debug_msg("Going to Next Round. Round " + RoundNumber);
                    call Attack_Round();
                end
            end
            else begin
                if (fixed_param == 4) then begin
                    call Fighter_Sequence(Fighter2, Fighter1);
                    add_timer_event(self_obj, game_ticks(4), 2);
                end
                else begin
                    if (fixed_param == 3) then begin
                        call Fighter_Sequence(Fighter1, Fighter2);
                        add_timer_event(self_obj, game_ticks(4), 2);
                    end
                end
            end
        end
    end
end

procedure destroy_p_proc
begin
    variable LVar0 := 0;
    if ((obj_pid(self_obj) == 16777326) or (obj_pid(self_obj) == 16777327) or (obj_pid(self_obj) == 16777333) or ((obj_pid(self_obj) >= 16777369) and (obj_pid(self_obj) <= 16777374))) then begin
        if ((source_obj == dude_obj) and (global_var(686) == 1)) then begin
            LVar0 := create_object_sid(546, 0, 0, -1);
            add_obj_to_inven(self_obj, LVar0);
        end
    end
    debug_msg("Someone just died");
    call End_Fight(self_obj);
end

procedure map_update_p_proc
begin
    if (local_var(0) == 0) then begin
        set_local_var(0, 1);
        call Find_Rat_Num();
    end
    call Find_Ptr();
end

procedure Find_Rat_Num
begin
    if (obj_pid(self_obj) == 16777369) then begin
        set_local_var(1, 1);
    end
    else begin
        if (obj_pid(self_obj) == 16777370) then begin
            set_local_var(1, 2);
        end
        else begin
            if (obj_pid(self_obj) == 16777371) then begin
                set_local_var(1, 3);
            end
            else begin
                if (obj_pid(self_obj) == 16777372) then begin
                    set_local_var(1, 4);
                end
                else begin
                    if (obj_pid(self_obj) == 16777373) then begin
                        set_local_var(1, 5);
                    end
                    else begin
                        if (obj_pid(self_obj) == 16777374) then begin
                            set_local_var(1, 6);
                        end
                        else begin
                            debug_msg("Prototype " + obj_pid(self_obj) + " is trying to use RCFitRat script.");
                        end
                    end
                end
            end
        end
    end
end

procedure Find_Ptr
begin
    if (local_var(1) == 1) then begin
        Molerat_Ptr1 := self_obj;
    end
    else begin
        if (local_var(1) == 2) then begin
            Molerat_Ptr2 := self_obj;
        end
        else begin
            if (local_var(1) == 3) then begin
                Molerat_Ptr3 := self_obj;
            end
            else begin
                if (local_var(1) == 4) then begin
                    Molerat_Ptr4 := self_obj;
                end
                else begin
                    if (local_var(1) == 5) then begin
                        Molerat_Ptr5 := self_obj;
                    end
                    else begin
                        if (local_var(1) == 6) then begin
                            Molerat_Ptr6 := self_obj;
                        end
                        else begin
                            debug_msg("ERROR: Local_var(LVAR_Rat_Number) has an invalid value.");
                        end
                    end
                end
            end
        end
    end
end

procedure Setup_Fighting
begin
    game_ui_disable;
    if (map_var(3) == 1) then begin
        Fighter1 := Molerat_Ptr1;
    end
    else begin
        if (map_var(3) == 2) then begin
            Fighter1 := Molerat_Ptr2;
        end
        else begin
            if (map_var(3) == 3) then begin
                Fighter1 := Molerat_Ptr3;
            end
            else begin
                if (map_var(3) == 4) then begin
                    Fighter1 := Molerat_Ptr4;
                end
                else begin
                    if (map_var(3) == 5) then begin
                        Fighter1 := Molerat_Ptr5;
                    end
                    else begin
                        if (map_var(3) == 6) then begin
                            Fighter1 := Molerat_Ptr6;
                        end
                        else begin
                            debug_msg("ERROR: Tried getting pointer to Fighter 1 Failed.");
                        end
                    end
                end
            end
        end
    end
    if (map_var(4) == 1) then begin
        Fighter2 := Molerat_Ptr1;
    end
    else begin
        if (map_var(4) == 2) then begin
            Fighter2 := Molerat_Ptr2;
        end
        else begin
            if (map_var(4) == 3) then begin
                Fighter2 := Molerat_Ptr3;
            end
            else begin
                if (map_var(4) == 4) then begin
                    Fighter2 := Molerat_Ptr4;
                end
                else begin
                    if (map_var(4) == 5) then begin
                        Fighter2 := Molerat_Ptr5;
                    end
                    else begin
                        if (map_var(4) == 6) then begin
                            Fighter2 := Molerat_Ptr6;
                        end
                        else begin
                            debug_msg("ERROR: Tried getting pointer to Fighter 2 Failed.");
                        end
                    end
                end
            end
        end
    end
    if ((Fighter1 == 0) or (Fighter2 == 0)) then begin
        debug_msg("ERROR: A fighter is missing a pointer. Aborting Fight.");
    end
    else begin
        call Start_Fighting();
    end
end

procedure Start_Fighting
begin
    if (Fighter1 == self_obj) then begin
        set_local_var(6, get_critter_stat(Fighter1, 7));
        set_local_var(7, get_critter_stat(Fighter2, 7));
        debug_msg("map_var(MVAR_Rat_Fighter1) == " + map_var(3) + ". map_var(MVAR_Rat_Fighter2) == " + map_var(4));
        add_timer_event(self_obj, game_ticks(1), 0);
    end
    else begin
        if (Fighter2 == self_obj) then begin
            debug_msg("I am taking instructions from Fighter1");
        end
        else begin
            debug_msg("ERROR: I am fighting when I should not be.");
        end
    end
end

procedure Attack_Round
begin
    set_local_var(3, get_critter_stat(Fighter1, 8));
    set_local_var(4, get_critter_stat(Fighter2, 8));
    if ((critter_state(Fighter1) == (0 bwor 4)) or (critter_state(Fighter1) == (0 bwor 8))) then begin
        set_local_var(3, local_var(3) / 2);
    end
    if ((critter_state(Fighter2) == (0 bwor 4)) or (critter_state(Fighter2) == (0 bwor 8))) then begin
        set_local_var(4, local_var(4) / 2);
    end
    if (get_critter_stat(Fighter1, 13) > get_critter_stat(Fighter2, 13)) then begin
        debug_msg("[SEQUENCE] Fighter 1 goes first.");
        call Fighter_Sequence(Fighter1, Fighter2);
        if ((Fighter2 != 0) and (map_var(4) != 0)) then begin
            add_timer_event(self_obj, game_ticks(2), 4);
        end
    end
    else begin
        if (get_critter_stat(Fighter2, 13) > get_critter_stat(Fighter1, 13)) then begin
            debug_msg("[SEQUENCE] Fighter 2 goes first.");
            call Fighter_Sequence(Fighter2, Fighter1);
            if (Fighter1 != 0) then begin
                if ((Fighter1 != 0) and (map_var(3) != 0)) then begin
                    add_timer_event(self_obj, game_ticks(2), 3);
                end
            end
        end
        else begin
            if (random(0, 99) < 50) then begin
                debug_msg("[RANDOM] Fighter 1 goes first.");
                call Fighter_Sequence(Fighter1, Fighter2);
                if (Fighter2 != 0) then begin
                    if ((Fighter2 != 0) and (map_var(4) != 0)) then begin
                        add_timer_event(self_obj, game_ticks(2), 4);
                    end
                end
            end
            else begin
                debug_msg("[RANDOM] Fighter 2 goes first.");
                call Fighter_Sequence(Fighter2, Fighter1);
                if ((Fighter1 != 0) and (map_var(3) != 0)) then begin
                    add_timer_event(self_obj, game_ticks(2), 3);
                end
            end
        end
    end
end

procedure End_Fight(variable arg0)
begin
    game_ui_enable;
    debug_msg("map_var(MVAR_Rat_Fighter1) == " + map_var(3) + ". map_var(MVAR_Rat_Fighter2) == " + map_var(4) + ". local_var(LVAR_Rat_Number) == " + local_var(1));
    set_local_var(2, 0);
    rm_timer_event(Fighter1);
    rm_timer_event(Fighter2);
    if (arg0 == Fighter1) then begin
        Fighter1 := 0;
    end
    else begin
        Fighter2 := 0;
    end
    if (arg0 == self_obj) then begin
        if (map_var(3) == local_var(1)) then begin
            if (obj_pid(self_obj) == 16777369) then begin
                Molerat_Ptr1 := 0;
                set_map_var(3, 0);
            end
            else begin
                if (obj_pid(self_obj) == 16777370) then begin
                    Molerat_Ptr2 := 0;
                    set_map_var(3, 0);
                end
                else begin
                    if (obj_pid(self_obj) == 16777371) then begin
                        Molerat_Ptr3 := 0;
                        set_map_var(3, 0);
                    end
                    else begin
                        if (obj_pid(self_obj) == 16777372) then begin
                            Molerat_Ptr4 := 0;
                            set_map_var(3, 0);
                        end
                        else begin
                            if (obj_pid(self_obj) == 16777373) then begin
                                Molerat_Ptr5 := 0;
                                set_map_var(3, 0);
                            end
                            else begin
                                if (obj_pid(self_obj) == 16777374) then begin
                                    Molerat_Ptr6 := 0;
                                    set_map_var(3, 0);
                                end
                            end
                        end
                    end
                end
            end
        end
        else begin
            if (obj_pid(self_obj) == 16777369) then begin
                Molerat_Ptr1 := 0;
                set_map_var(4, 0);
            end
            else begin
                if (obj_pid(self_obj) == 16777370) then begin
                    Molerat_Ptr2 := 0;
                    set_map_var(4, 0);
                end
                else begin
                    if (obj_pid(self_obj) == 16777371) then begin
                        Molerat_Ptr3 := 0;
                        set_map_var(4, 0);
                    end
                    else begin
                        if (obj_pid(self_obj) == 16777372) then begin
                            Molerat_Ptr4 := 0;
                            set_map_var(4, 0);
                        end
                        else begin
                            if (obj_pid(self_obj) == 16777373) then begin
                                Molerat_Ptr5 := 0;
                                set_map_var(4, 0);
                            end
                            else begin
                                if (obj_pid(self_obj) == 16777374) then begin
                                    Molerat_Ptr6 := 0;
                                    set_map_var(4, 0);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    debug_msg("map_var(MVAR_Rat_Fighter1) == " + map_var(3) + ". map_var(MVAR_Rat_Fighter2) == " + map_var(4) + ". local_var(LVAR_Rat_Number) == " + local_var(1));
end

procedure Fighter_Sequence(variable arg0, variable arg1)
begin
    variable LVar2 := 0;
    variable LVar3 := 0;
    variable LVar4 := 0;
    variable LVar5 := 0;
    variable LVar6 := 0;
    variable LVar7 := 0;
    variable LVar8 := 0;
    variable LVar9 := 0;
    debug_msg("Starting Fighter Sequence");
    if ((arg0 != 0) and (arg1 != 0) and (local_var(6) > 0) and (local_var(7) > 0)) then begin
        if (arg0 == Fighter1) then begin
            LVar3 := 3;
            LVar4 := 6;
            LVar5 := 4;
            LVar6 := 7;
        end
        else begin
            LVar3 := 4;
            LVar4 := 7;
            LVar5 := 3;
            LVar6 := 6;
        end
        reg_anim_func(2, Fighter1);
        reg_anim_func(2, Fighter2);
        reg_anim_func(1, 1);
        while ((local_var(LVar3) > 0) and (Fighter1 != 0) and (Fighter2 != 0)) do begin
            debug_msg("Fighter " + LVar3 + " has " + local_var(LVar3) + " AP Left. And has " + local_var(LVar4) + " Hp left.");
            LVar2 := tile_distance_objs(arg0, arg1);
            if ((LVar2 > 2) and (local_var(LVar3) >= LVar2)) then begin
                Closing_Tile := tile_num_in_direction(tile_num(arg0), rotation_to_tile(tile_num(arg0), tile_num(arg1)), (tile_distance_objs(arg0, arg1) / 2) - 1);
                animate_move_obj_to_tile(arg0, Closing_Tile, 1);
                set_local_var(LVar3, local_var(LVar3) - LVar2);
                debug_msg("Moving to opponent. " + LVar3);
            end
            else begin
                if (LVar2 > 2) then begin
                    LVar7 := tile_num_in_direction(tile_num(arg0), rotation_to_tile(tile_num(arg0), tile_num(arg1)), local_var(LVar3));
                    animate_move_obj_to_tile(arg0, LVar7, -1);
                    set_local_var(LVar3, 0);
                    debug_msg("Moving In closer. " + LVar3);
                end
                else begin
                    if (local_var(LVar3) >= 3) then begin
                        debug_msg("Attempting to Hit. " + LVar3);
                        LVar8 := roll_vs_skill(arg0, 3, -get_critter_stat(arg1, 9));
                        anim(arg0, 1000, rotation_to_tile(tile_num(arg0), tile_num(arg1)));
                        reg_anim_animate(arg0, 16, -1);
                        set_local_var(LVar3, local_var(LVar3) - 3);
                        if (is_success(LVar8)) then begin
                            LVar9 := random(1, get_critter_stat(arg0, 11));
                            if (is_success(roll_vs_skill(dude_obj, 16, -30))) then begin
                                LVar9 := LVar9 + 4;
                            end
                            if (is_critical(LVar8)) then begin
                                debug_msg("Damage == " + (LVar9 * 2));
                                reg_anim_animate(arg1, 14, 1);
                                set_local_var(LVar6, local_var(LVar6) - (LVar9 * 2));
                                debug_msg("Critical Hit. " + LVar3);
                            end
                            else begin
                                debug_msg("Damage == " + LVar9);
                                reg_anim_animate(arg1, 14, 1);
                                set_local_var(LVar6, local_var(LVar6) - LVar9);
                                debug_msg("Hit. " + LVar3);
                            end
                        end
                        else begin
                            if (is_critical(LVar8)) then begin
                                set_local_var(LVar3, 0);
                                reg_anim_animate(arg1, 13, 1);
                                debug_msg("Critical Miss. " + LVar3);
                            end
                            else begin
                                reg_anim_animate(arg1, 13, 1);
                                debug_msg("Miss. " + LVar3);
                            end
                        end
                    end
                    else begin
                        debug_msg("Moving Around. " + LVar3);
                        LVar7 := tile_num_in_direction(tile_num(arg0), random(0, 5), local_var(LVar3));
                        animate_move_obj_to_tile(arg0, LVar7, 0);
                        set_local_var(LVar3, 0);
                    end
                end
            end
        end
        if (local_var(LVar6) <= 0) then begin
            call End_Fight(arg1);
            display_msg(message_str(14, 951));
            reg_anim_animate(arg0, 16, -1);
            critter_dmg(arg1, get_critter_stat(arg1, 7) * 2, 0);
            display_msg(message_str(14, 952));
        end
        reg_anim_func(3, 0);
    end
end

