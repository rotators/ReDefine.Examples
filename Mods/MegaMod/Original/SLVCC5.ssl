variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;

procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node999;
procedure Node998;
procedure Node092;

import variable GUARD_obj;

procedure timed_event_p_proc;
procedure destroy_p_proc;
procedure critter_p_proc;


procedure start
begin
    GUARD_obj := self_obj;
end

procedure use_p_proc
begin
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(964, 6100));
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(964, 6101));
end

procedure use_skill_on_p_proc
begin
end

procedure use_obj_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(4, local_var(4) bwor 8);
        set_local_var(4, local_var(4) bwor 2);
        set_map_var(1, 1);
    end
end

procedure map_enter_p_proc
begin
    GUARD_obj := self_obj;
    if (metarule(14, 0)) then begin
        set_local_var(9, tile_num(self_obj));
    end
    add_timer_event(self_obj, 15, 1);
end

procedure map_update_p_proc
begin
    GUARD_obj := self_obj;
end

procedure talk_p_proc
begin
    if (((local_var(4) bwand 2) != 0) or (map_var(1) == 1)) then begin
        call Node001();
        if (critter_is_fleeing(self_obj)) then begin
            if (anim_busy(self_obj) == 0) then begin
                if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                    if (anim_busy(self_obj) == 0) then begin
                        global_temp := rotation_to_tile(tile_num(dude_obj), tile_num(self_obj));
                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                        global_temp := (global_temp + 1) % 6;
                        while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)))) do begin
                            debug_msg("flee loop: rot == " + global_temp);
                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                            global_temp := (global_temp + 1) % 6;
                        end
                    end
                end
            end
        end
        else begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
    else begin
        call Node002();
    end
end

procedure Node001
begin
    if (global_var(241)) then begin
        float_msg(self_obj, message_str(964, 6202), 8);
    end
    else begin
        float_msg(self_obj, message_str(964, random(6200, 6201)), 8);
    end
end

procedure Node002
begin
    if (global_var(11) == 1) then begin
        float_msg(self_obj, message_str(964, random(6304 - (get_critter_stat(dude_obj, 34) == 1), 6312 + (get_critter_stat(dude_obj, 34) == 0))), 8);
    end
    else begin
        float_msg(self_obj, message_str(964, random(6300, 6302)), 8);
    end
end

procedure Node003
begin
    gsay_reply(964, 6500);
    if (map_var(3) == 1) then begin
        giq_option(4, 964, 6506, Node004, 50);
    end
    else begin
        if (has_skill(dude_obj, 14) > 100) then begin
            giq_option(4, 964, 6501, Node004, 50);
        end
        else begin
            if (has_skill(dude_obj, 14) > 50) then begin
                giq_option(4, 964, 6501, Node005, 50);
            end
            else begin
                giq_option(4, 964, 6505, Node998, 50);
            end
        end
    end
end

procedure Node004
begin
    gsay_reply(964, 6502);
    giq_option(4, 964, 6503, Node092, 50);
end

procedure Node005
begin
    gsay_reply(964, 6506);
    giq_option(4, 964, 6507, Node007, 50);
    giq_option(4, 964, 6508, Node006, 50);
end

procedure Node006
begin
    gsay_reply(964, 6509);
    giq_option(4, 964, 6503, Node092, 50);
end

procedure Node007
begin
    gsay_reply(964, 6510);
    giq_option(4, 964, 6800, Node998, 50);
end

procedure Node999
begin
end

procedure Node998
begin
    set_local_var(4, local_var(4) bwor 2);
    set_map_var(1, 1);
end

procedure Node092
begin
    set_map_var(4, 1);
end

procedure timed_event_p_proc
begin
    if (not(combat_is_initialized)) then begin
        if (fixed_param == 1) then begin
            if (random(1, 3) == 1) then begin
                if ((tile_num(self_obj) != 13857) and (13857 != 0)) then begin
                    if ((dest_tile == 13857) and (step_tile < 0)) then begin
                        step_tile := step_tile + 1;
                        debug_msg("step_tile: " + step_tile);
                    end
                    else begin
                        if (anim_busy(self_obj) == 0) then begin
                            dest_tile := 13857;
                            step_tile := 13857;
                            animate_move_obj_to_tile(self_obj, step_tile, 0);
                            while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), 13857) >= tile_distance(step_tile, 13857))) do begin
                                debug_msg("rot: " + rotation_to_tile(step_tile, tile_num(self_obj)));
                                step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), 2 % tile_distance(step_tile, tile_num(self_obj)));
                                debug_msg("step_var: " + step_tile);
                                animate_move_obj_to_tile(self_obj, step_tile, 0);
                            end
                            if (anim_busy(self_obj) == 0) then begin
                                if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                    if (anim_busy(self_obj) == 0) then begin
                                        global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                        global_temp := (global_temp + 1) % 6;
                                        while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                            debug_msg("flee loop: rot == " + global_temp);
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                        end
                                    end
                                end
                                else begin
                                    step_tile := -10;
                                end
                            end
                        end
                        else begin
                            if (tile_distance(tile_num(self_obj), 13857) < tile_distance(dest_tile, 13857)) then begin
                                reg_anim_func(2, self_obj);
                            end
                        end
                    end
                end
            end
            else begin
                if (random(1, 3) == 2) then begin
                    if ((tile_num(self_obj) != 12268) and (12268 != 0)) then begin
                        if ((dest_tile == 12268) and (step_tile < 0)) then begin
                            step_tile := step_tile + 1;
                            debug_msg("step_tile: " + step_tile);
                        end
                        else begin
                            if (anim_busy(self_obj) == 0) then begin
                                dest_tile := 12268;
                                step_tile := 12268;
                                animate_move_obj_to_tile(self_obj, step_tile, 0);
                                while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), 12268) >= tile_distance(step_tile, 12268))) do begin
                                    debug_msg("rot: " + rotation_to_tile(step_tile, tile_num(self_obj)));
                                    step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), 2 % tile_distance(step_tile, tile_num(self_obj)));
                                    debug_msg("step_var: " + step_tile);
                                    animate_move_obj_to_tile(self_obj, step_tile, 0);
                                end
                                if (anim_busy(self_obj) == 0) then begin
                                    if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                        if (anim_busy(self_obj) == 0) then begin
                                            global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                                debug_msg("flee loop: rot == " + global_temp);
                                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                                global_temp := (global_temp + 1) % 6;
                                            end
                                        end
                                    end
                                    else begin
                                        step_tile := -10;
                                    end
                                end
                            end
                            else begin
                                if (tile_distance(tile_num(self_obj), 12268) < tile_distance(dest_tile, 12268)) then begin
                                    reg_anim_func(2, self_obj);
                                end
                            end
                        end
                    end
                end
                else begin
                    if ((tile_num(self_obj) != 14672) and (14672 != 0)) then begin
                        if ((dest_tile == 14672) and (step_tile < 0)) then begin
                            step_tile := step_tile + 1;
                            debug_msg("step_tile: " + step_tile);
                        end
                        else begin
                            if (anim_busy(self_obj) == 0) then begin
                                dest_tile := 14672;
                                step_tile := 14672;
                                animate_move_obj_to_tile(self_obj, step_tile, 0);
                                while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), 14672) >= tile_distance(step_tile, 14672))) do begin
                                    debug_msg("rot: " + rotation_to_tile(step_tile, tile_num(self_obj)));
                                    step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), 2 % tile_distance(step_tile, tile_num(self_obj)));
                                    debug_msg("step_var: " + step_tile);
                                    animate_move_obj_to_tile(self_obj, step_tile, 0);
                                end
                                if (anim_busy(self_obj) == 0) then begin
                                    if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                        if (anim_busy(self_obj) == 0) then begin
                                            global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                                debug_msg("flee loop: rot == " + global_temp);
                                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                                global_temp := (global_temp + 1) % 6;
                                            end
                                        end
                                    end
                                    else begin
                                        step_tile := -10;
                                    end
                                end
                            end
                            else begin
                                if (tile_distance(tile_num(self_obj), 14672) < tile_distance(dest_tile, 14672)) then begin
                                    reg_anim_func(2, self_obj);
                                end
                            end
                        end
                    end
                end
            end
        end
        add_timer_event(self_obj, random(100, 200), 1);
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(4, global_var(4) + 1);
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(5) > (2 * global_var(4))) or (global_var(3) == 1))) then begin
            set_global_var(3, 1);
            set_global_var(2, 0);
        end
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(4) > (3 * global_var(5))) or (global_var(2) == 1)) and (global_var(1) == 0)) then begin
            set_global_var(2, 1);
            set_global_var(3, 0);
        end
        set_global_var(0, global_var(0) + 5);
        debug_msg("Player gains " + 5 + " Karma Points.");
        set_global_var(37, 0);
        set_global_var(38, 0);
        set_global_var(39, 0);
        set_global_var(40, 0);
        set_global_var(41, 0);
        set_global_var(42, 0);
        set_global_var(43, 0);
        set_global_var(44, 0);
        set_global_var(45, 0);
        if (global_var(0) >= 1000) then begin
            set_global_var(37, 1);
        end
        else begin
            if (global_var(0) >= 750) then begin
                set_global_var(38, 1);
            end
            else begin
                if (global_var(0) >= 500) then begin
                    set_global_var(39, 1);
                end
                else begin
                    if (global_var(0) >= 250) then begin
                        set_global_var(40, 1);
                    end
                    else begin
                        if (global_var(0) > -250) then begin
                            set_global_var(41, 1);
                        end
                        else begin
                            if (global_var(0) > -500) then begin
                                set_global_var(42, 1);
                            end
                            else begin
                                if (global_var(0) > -750) then begin
                                    set_global_var(43, 1);
                                end
                                else begin
                                    if (global_var(0) > -1000) then begin
                                        set_global_var(44, 1);
                                    end
                                    else begin
                                        set_global_var(45, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    set_map_var(0, map_var(0) - 1);
    if (map_var(0) == 0) then begin
        set_global_var(1128, 1);
        display_msg(message_str(964, 3200));
    end
    GUARD_obj := 0;
end

procedure critter_p_proc
begin
    if (obj_can_see_obj(self_obj, dude_obj) and (tile_distance_objs(self_obj, dude_obj) < 8)) then begin
        if (local_var(8) == 0) then begin
            set_local_var(8, 1);
            if (in_dialog == 0) then begin
                in_dialog := 1;
                start_gdialog(964, self_obj, 4, -1, -1);
                gsay_start;
                call Node003();
                gsay_end;
                end_dialogue;
                in_dialog := 0;
            end
            else begin
                call Node003();
            end
        end
        if (((local_var(4) bwand 2) != 0) or (local_var(5) == 2) or (map_var(1) == 1) or global_var(241)) then begin
            set_local_var(5, 1);
            call Node001();
            if (critter_is_fleeing(self_obj)) then begin
                if (anim_busy(self_obj) == 0) then begin
                    if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                        if (anim_busy(self_obj) == 0) then begin
                            global_temp := rotation_to_tile(tile_num(dude_obj), tile_num(self_obj));
                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                            global_temp := (global_temp + 1) % 6;
                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)))) do begin
                                debug_msg("flee loop: rot == " + global_temp);
                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                global_temp := (global_temp + 1) % 6;
                            end
                        end
                    end
                end
            end
            else begin
                attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
            end
        end
    end
end

