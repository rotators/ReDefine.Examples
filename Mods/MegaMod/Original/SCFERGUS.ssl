variable tmp_gen_rep;
variable global_temp;

procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure Node998;
procedure Node999;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure checkFergusState;
procedure leaveMap;
procedure anim_end_call;
procedure doWalk;

import variable i_fergus_obj;

variable Node1Count;
variable anim_flag;


procedure start
begin
end

procedure critter_p_proc
begin
    if (map_var(8) == 1) then begin
        i_fergus_obj := -1;
        set_map_var(10, 1);
        call leaveMap();
    end
    if ((local_var(5) != 0) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        if (critter_is_fleeing(self_obj)) then begin
            if (anim_busy(self_obj) == 0) then begin
                if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                    if (anim_busy(self_obj) == 0) then begin
                        global_temp := rotation_to_tile(tile_num(dude_obj), tile_num(self_obj));
                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                        global_temp := (global_temp + 1) % 6;
                        while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)))) do begin
                            debug_msg("flee loop: rot == " + global_temp);
                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                            global_temp := (global_temp + 1) % 6;
                        end
                    end
                end
            end
        end
        else begin
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
    end
    if (anim_busy(self_obj)) then begin
        anim_flag := 1;
    end
    else begin
        if (anim_flag == 1) then begin
            anim_flag := 0;
            call anim_end_call();
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(5, 2);
    end
end

procedure talk_p_proc
begin
    if (map_var(8) == 1) then begin
        float_msg(self_obj, message_str(521, 141), 8);
    end
    else begin
        start_gdialog(521, self_obj, 4, -1, -1);
        gsay_start;
        call Node001();
        gsay_end;
        end_dialogue;
    end
    if (map_var(8) == 1) then begin
        i_fergus_obj := -1;
        set_map_var(10, 1);
        call leaveMap();
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(4, global_var(4) + 1);
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(5) > (2 * global_var(4))) or (global_var(3) == 1))) then begin
            set_global_var(3, 1);
            set_global_var(2, 0);
        end
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(4) > (3 * global_var(5))) or (global_var(2) == 1)) and (global_var(1) == 0)) then begin
            set_global_var(2, 1);
            set_global_var(3, 0);
        end
        set_global_var(0, global_var(0) + 2);
        debug_msg("Player gains " + 2 + " Karma Points.");
        set_global_var(37, 0);
        set_global_var(38, 0);
        set_global_var(39, 0);
        set_global_var(40, 0);
        set_global_var(41, 0);
        set_global_var(42, 0);
        set_global_var(43, 0);
        set_global_var(44, 0);
        set_global_var(45, 0);
        tmp_gen_rep := global_var(0);
        if (has_trait(0, dude_obj, 95)) then begin
            tmp_gen_rep := global_var(0) * 2;
        end
        if (tmp_gen_rep >= 1000) then begin
            set_global_var(37, 1);
        end
        else begin
            if (tmp_gen_rep >= 750) then begin
                set_global_var(38, 1);
            end
            else begin
                if (tmp_gen_rep >= 500) then begin
                    set_global_var(39, 1);
                end
                else begin
                    if (tmp_gen_rep >= 250) then begin
                        set_global_var(40, 1);
                    end
                    else begin
                        if (tmp_gen_rep > -250) then begin
                            set_global_var(41, 1);
                        end
                        else begin
                            if (tmp_gen_rep > -500) then begin
                                set_global_var(42, 1);
                            end
                            else begin
                                if (tmp_gen_rep > -750) then begin
                                    set_global_var(43, 1);
                                end
                                else begin
                                    if (tmp_gen_rep > -1000) then begin
                                        set_global_var(44, 1);
                                    end
                                    else begin
                                        set_global_var(45, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        set_global_var(57, global_var(57) + -5);
        debug_msg("Added " + -5 + " to Town Rep");
    end
    i_fergus_obj := -1;
    set_map_var(10, 1);
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 0) then begin
        display_msg(message_str(521, 100));
    end
    else begin
        display_msg(message_str(521, 101));
    end
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(521, 102));
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(5, 2);
        set_global_var(438, global_var(438) bwor 1);
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, 1, 6, 113);
    critter_add_trait(self_obj, 1, 5, 24);
    i_fergus_obj := self_obj;
    if (not(metarule(22, 0))) then begin
        if (not(map_var(8))) then begin
            set_map_var(10, 0);
        end
        set_local_var(8, 0);
        call checkFergusState();
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == (-16777216 + 1)) then begin
        if (map_var(8) == 0) then begin
            if (local_var(8) < 3) then begin
                float_msg(self_obj, message_str(521, 500 + local_var(8)), 2);
                set_local_var(8, local_var(8) + 1);
            end
            else begin
                float_msg(self_obj, message_str(521, 503), 0);
                set_global_var(438, global_var(438) bwor 1);
            end
        end
    end
end

procedure Node998
begin
    set_local_var(5, 2);
end

procedure Node999
begin
end

procedure Node001
begin
    Node1Count := Node1Count + 1;
    if (Node1Count == 1) then begin
        if (local_var(4) == 0) then begin
            gsay_reply(521, 103);
        end
        else begin
            gsay_reply(521, 104);
        end
    end
    else begin
        gsay_reply(521, 105);
    end
    giq_option(-3, 521, 106, Node002, 50);
    if (global_var(168) or (global_var(173) == 1) and (global_var(169) != 3)) then begin
        giq_option(-3, 521, 107, Node003, 50);
        giq_option(4, 521, 109, Node003, 50);
    end
    if (not(metarule(17, 11))) then begin
        giq_option(4, 521, 110, Node007, 50);
    end
    if (global_var(233) == 0) then begin
        giq_option(4, 521, 111, Node008, 50);
    end
    if (global_var(177) or obj_carrying_pid_obj(dude_obj, 339)) then begin
        giq_option(4, 521, 112, Node004, 50);
    end
    giq_option(4, 521, 115, Node005, 50);
    giq_option(4, 521, 116, Node006, 50);
    giq_option(4, 521, 117, Node999, 50);
    giq_option(-3, 521, 118, Node999, 50);
    if (global_var(172) and (global_var(169) == 1)) then begin
        giq_option(-3, 521, 149, Node016, 50);
        giq_option(4, 521, 150, Node017, 50);
    end
end

procedure Node002
begin
    gsay_reply(521, 119);
    giq_option(0, 521, message_str(14, 350), Node999, 50);
end

procedure Node003
begin
    if (get_critter_stat(dude_obj, 4) >= 4) then begin
        gsay_reply(521, 120);
    end
    else begin
        gsay_reply(521, 121);
    end
    if (global_var(168) and (global_var(173) != 1)) then begin
        giq_option(-3, 521, 122, Node009, 50);
    end
    if (global_var(173) == 1) then begin
        giq_option(-3, 521, 123, Node010, 50);
    end
    if (global_var(168) and (global_var(173) != 1)) then begin
        giq_option(4, 521, 124, Node009, 50);
    end
    if (global_var(173) == 1) then begin
        giq_option(4, 521, 125, Node010, 50);
    end
end

procedure Node004
begin
    gsay_reply(521, 127);
    giq_option(4, 521, 128, Node012, 50);
    giq_option(4, 521, 129, Node013, 50);
end

procedure Node005
begin
    gsay_reply(521, 130);
    giq_option(0, 521, message_str(14, 350), Node999, 50);
end

procedure Node006
begin
    gsay_reply(521, 131);
    giq_option(0, 521, message_str(14, 352), Node001, 50);
end

procedure Node007
begin
    gsay_reply(521, 133);
    giq_option(4, 521, 134, Node014, 50);
    giq_option(4, 521, 135, Node015, 50);
end

procedure Node008
begin
    gsay_reply(521, 136);
    giq_option(0, 521, message_str(14, 352), Node001, 50);
end

procedure Node009
begin
    set_map_var(10, 1);
    gsay_reply(521, 138);
    giq_option(0, 521, message_str(14, 350), Node999, 50);
end

procedure Node010
begin
    set_map_var(10, 1);
    gsay_reply(521, 139);
    giq_option(0, 521, message_str(14, 350), Node999, 50);
end

procedure Node011
begin
    set_map_var(10, 1);
    gsay_reply(521, 140);
    giq_option(0, 521, message_str(14, 350), Node999, 50);
end

procedure Node012
begin
    gsay_reply(521, 141);
    set_map_var(8, 1);
    giq_option(0, 521, message_str(14, 350), Node999, 50);
end

procedure Node013
begin
    gsay_reply(521, 142);
    giq_option(4, 521, 143, Node012, 51);
    giq_option(4, 521, 144, Node011, 50);
end

procedure Node014
begin
    gsay_reply(521, 145);
    giq_option(0, 521, message_str(14, 352), Node001, 50);
end

procedure Node015
begin
    gsay_reply(521, 147);
    giq_option(0, 521, message_str(14, 352), Node001, 50);
end

procedure Node016
begin
    set_map_var(8, 1);
    gsay_reply(521, 151);
    giq_option(0, 521, message_str(14, 350), Node999, 50);
end

procedure Node017
begin
    gsay_reply(521, 152);
    giq_option(4, 521, 153, Node018, 50);
    if (obj_carrying_pid_obj(dude_obj, 339)) then begin
        giq_option(4, 521, 154, Node012, 50);
    end
end

procedure Node018
begin
    gsay_reply(521, 155);
    giq_option(0, 521, message_str(14, 350), Node999, 50);
end

procedure checkFergusState
begin
    if (map_var(8)) then begin
        destroy_object(self_obj);
    end
end

procedure leaveMap
begin
    if (not(anim_busy(self_obj))) then begin
        if (local_var(7) == 0) then begin
            set_local_var(7, 19490);
            call doWalk();
        end
        else begin
            if (local_var(7) == 19490) then begin
                set_local_var(7, 13895);
                call doWalk();
            end
            else begin
                if (local_var(7) == 13895) then begin
                    destroy_object(self_obj);
                    i_fergus_obj := -1;
                end
            end
        end
    end
end

procedure anim_end_call
begin
    if (map_var(8) == 1) then begin
        call leaveMap();
    end
end

procedure doWalk
begin
    reg_anim_func(2, self_obj);
    reg_anim_func(1, 1);
    animate_move_obj_to_tile(self_obj, local_var(7), 0);
    reg_anim_func(3, 0);
end

