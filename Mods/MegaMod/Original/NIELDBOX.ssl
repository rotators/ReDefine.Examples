procedure get_current_area;
procedure determine_town_level;

variable town_level;
variable current_town := "";
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable LVar0;
variable LVar1;
variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;
variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable var_random_herbs;
variable random_ammo;
variable number_of_herbs;
variable case;
variable min;
variable max;
variable herb_one;
variable herb_two;
variable herb_three;
variable herb_four;
variable herb_five;
variable herb_six;
variable herb_seven;
variable herb_eight;
variable herb_nine;
variable herb_ten;
variable percent;
variable random_book;
variable random_books;
variable book_one;
variable book_two;
variable book_three;
variable book_four;
variable book_five;
variable book_six;
variable book_seven;
variable book_eight;
variable book_nine;
variable book_ten;
variable book_eleven;
variable book_twelve;
variable book_thirteen;
variable book_fourteen;
variable book_fifteen;
variable book_sixteen;
variable book_seventeen;
variable book_eighteen;
variable ammo_one;
variable ammo_two;
variable ammo_three;
variable ammo_four;
variable ammo_five;
variable ammo_six;
variable ammo_seven;
variable ammo_eight;
variable ammo_nine;
variable ammo_ten;
variable ammo_eleven;
variable ammo_twelve;
variable ammo_thirteen;
variable ammo_fourteen;
variable ammo_fifteen;
variable ammo_sixteen;
variable ammo_seventeen;
variable ammo_eighteen;
variable ammo_ninteen;
variable ammo_twenty;
variable ammo_twentyone;
variable ammo_twentytwo;
variable ammo_twentythree;
variable ammo_twentyfour;
variable ammo_twentyfive;
variable ammo_twentysix;
variable ammo_twentyseven;
variable random_numberof_ammo_one;
variable random_ammo_one;
variable random_numberof_ammo_two;
variable random_ammo_two;
variable random_numberof_ammo_three;
variable random_ammo_three;
variable random_numberof_ammo_four;
variable random_ammo_four;
variable random_numberof_ammo_five;
variable random_ammo_five;
variable random_numberof_ammo_six;
variable random_ammo_six;
variable drug_one;
variable drug_two;
variable drug_three;
variable drug_four;
variable drug_five;
variable drug_six;
variable drug_seven;
variable random_drug;
variable random_number_of_drugs;
variable booze_one;
variable booze_two;
variable booze_three;
variable booze_four;
variable booze_five;
variable random_number_of_booze;
variable random_booze;
variable stim_one;
variable stim_two;
variable stim_three;
variable stim_four;
variable stim_five;
variable stim_six;
variable stim_seven;
variable stim_eight;
variable stim_nine;
variable stim_ten;
variable random_numberof_stim_five;
variable random_stim_five;
variable random_numberof_stim_four;
variable random_stim_four;
variable random_numberof_stim_three;
variable random_stim_three;
variable random_numberof_stim_two;
variable random_stim_two;
variable random_numberof_stim_one;
variable random_stim_one;
variable upgrade_part_one;
variable upgrade_part_two;
variable upgrade_part_three;
variable upgrade_part_four;
variable upgrade_part_five;
variable upgrade_part_six;
variable upgrade_part_seven;
variable upgrade_part_eight;
variable upgrade_part_nine;
variable upgrade_part_ten;
variable upgrade_part_eleven;
variable random_number_of_upgrade_parts;
variable random_upgrade_part;

procedure upgrade_parts_town_level;
procedure add_upgrade_parts;
procedure pick_upgrade_part;
procedure random_upgrade_parts;
procedure number_of_upgrade_parts;
procedure stimpacks_town_level;
procedure add_stimpacks;
procedure stim_town_five;
procedure pick_stim_five;
procedure random_stim_town_five;
procedure stim_town_four;
procedure pick_stim_four;
procedure random_stim_town_four;
procedure stim_town_three;
procedure pick_stim_three;
procedure random_stim_town_three;
procedure stim_town_two;
procedure pick_stim_two;
procedure random_stim_town_two;
procedure stim_town_one;
procedure pick_stim_one;
procedure random_stim_town_one;
procedure booze_town_level;
procedure add_booze;
procedure pick_booze;
procedure pick_random_booze;
procedure number_of_booze;
procedure drugs_town_level;
procedure add_drugs;
procedure pick_drug;
procedure random_drugs;
procedure number_of_drugs;
procedure ammo_town_level;
procedure ammo_town_six;
procedure pick_ammo_six;
procedure random_ammo_town_six;
procedure number_of_random_ammo_six;
procedure ammo_town_five;
procedure pick_ammo_five;
procedure random_ammo_town_five;
procedure number_of_random_ammo_five;
procedure ammo_town_four;
procedure pick_ammo_four;
procedure random_ammo_town_four;
procedure number_of_random_ammo_four;
procedure ammo_town_three;
procedure pick_ammo_three;
procedure random_ammo_town_three;
procedure number_of_random_ammo_three;
procedure ammo_town_two;
procedure pick_ammo_two;
procedure random_ammo_town_two;
procedure number_of_random_ammo_two;
procedure ammo_town_one;
procedure pick_ammo_one;
procedure random_ammo_town_one;
procedure number_of_random_ammo_one;
procedure herbs_town_level;
procedure pick_herb;
procedure add_ammo;
procedure books_town_level;
procedure pick_book;
procedure random_skill_book;
procedure add_books;
procedure number_of_random_books;
procedure random_herbs;
procedure add_money;
procedure checkPartyMembersNearDoor;
procedure restock_items(variable arg0, variable arg1, variable arg2, variable arg3);
procedure inventory_keepers;
procedure add_herbs;

variable last_timed_obj;
variable last_timed_param;
variable check_still_kill;
variable stored_msg;
variable stored_node;
variable top_msg;
variable var_num;

procedure ChooseFromList;
procedure CLICK_PREV;
procedure CLICK_0;
procedure CLICK_1;
procedure CLICK_2;
procedure CLICK_3;
procedure CLICK_4;
procedure CLICK_MORE;

variable floater_patch_msg;
variable hs_temp;

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;

import variable new_reno_eldridge_box;


procedure get_current_area
begin
    if ((cur_map_index == 3) or (cur_map_index == 4) or (cur_map_index == 35) or (cur_map_index == 5)) then begin
        current_town := "Arroyo";
    end
    if ((cur_map_index == 9) or (cur_map_index == 10) or (cur_map_index == 11) or (cur_map_index == 13) or (cur_map_index == 14) or (cur_map_index == 48) or (cur_map_index == 161)) then begin
        current_town := "Klamath";
    end
    if (cur_map_index == 12) then begin
        current_town := "Klamath Toxic Caves";
    end
    if (cur_map_index == 158) then begin
        current_town := "Mad Dog Area";
    end
    if ((cur_map_index == 6) or (cur_map_index == 7) or (cur_map_index == 8)) then begin
        current_town := "Den";
    end
    if ((cur_map_index == 231) or (cur_map_index == 253) or (cur_map_index == 254) or (cur_map_index == 255)) then begin
        current_town := "Primitive Tribes";
    end
    if (cur_map_index == 163) then begin
        current_town := "Primitive Tribe";
    end
    if (cur_map_index == 52) then begin
        current_town := "Den Slave Run";
    end
    if (cur_map_index == 160) then begin
        current_town := "Jennings Farm Area";
    end
    if (cur_map_index == 156) then begin
        current_town := "Truck";
    end
    if (cur_map_index == 162) then begin
        current_town := "Scraptown";
    end
    if ((cur_map_index == 18) or (cur_map_index == 19) or (cur_map_index == 20) or (cur_map_index == 21) or (cur_map_index == 22) or (cur_map_index == 23)) then begin
        current_town := "Modoc";
    end
    if (cur_map_index == 202) then begin
        current_town := "Vault 23";
    end
    if ((cur_map_index == 24) or (cur_map_index == 25) or (cur_map_index == 26)) then begin
        current_town := "Ghost Farm";
    end
    if (cur_map_index == 223) then begin
        current_town := "Modoc Thieves Guild";
    end
    if (cur_map_index == 224) then begin
        current_town := "Salvatore's Gun Stash";
    end
    if (cur_map_index == 225) then begin
        current_town := "Special Salvatore";
    end
    if (cur_map_index == 226) then begin
        current_town := "Salvatore Meeting";
    end
    if ((cur_map_index == 31) or (cur_map_index == 32) or (cur_map_index == 33) or (cur_map_index == 34)) then begin
        current_town := "Gecko";
    end
    if ((cur_map_index == 15) or (cur_map_index == 16) or (cur_map_index == 17) or (cur_map_index == 30)) then begin
        current_town := "Vault City";
    end
    if ((cur_map_index == 92) or (cur_map_index == 93)) then begin
        current_town := "Raiders";
    end
    if ((cur_map_index == 78) or (cur_map_index == 79)) then begin
        current_town := "Broken Hills";
    end
    if ((cur_map_index == 64) or (cur_map_index == 62) or (cur_map_index == 63) or (cur_map_index == 65) or (cur_map_index == 66) or (cur_map_index == 67)) then begin
        current_town := "Redding";
    end
    if ((cur_map_index == 54) or (cur_map_index == 55) or (cur_map_index == 56) or (cur_map_index == 57) or (cur_map_index == 58) or (cur_map_index == 61) or (cur_map_index == 147)) then begin
        current_town := "New Reno";
    end
    if ((cur_map_index == 195) or (cur_map_index == 197) or (cur_map_index == 235) or (cur_map_index == 196)) then begin
        current_town := "Lars-City";
    end
    if (cur_map_index == 232) then begin
        current_town := "Lars-City Carson";
    end
    if (cur_map_index == 155) then begin
        current_town := "Abbey";
    end
    if ((cur_map_index == 153) or (cur_map_index == 154)) then begin
        current_town := "EPA";
    end
    if ((cur_map_index == 220) or (cur_map_index == 221)) then begin
        current_town := "Collyweb";
    end
    if (cur_map_index == 59) then begin
        current_town := "Golgotha";
    end
    if (cur_map_index == 60) then begin
        current_town := "Reno Stables";
    end
    if ((cur_map_index == 27) or (cur_map_index == 28) or (cur_map_index == 29)) then begin
        current_town := "Sierra Army Base";
    end
    if ((cur_map_index == 46) or (cur_map_index == 43) or (cur_map_index == 42) or (cur_map_index == 44) or (cur_map_index == 45)) then begin
        current_town := "NCR";
    end
    if (cur_map_index == 157) then begin
        current_town := "B21";
    end
    if ((cur_map_index == 37) or (cur_map_index == 38) or (cur_map_index == 36) or (cur_map_index == 39)) then begin
        current_town := "Vault 15";
    end
    if ((cur_map_index == 40) or (cur_map_index == 41)) then begin
        current_town := "Vault 13";
    end
    if ((cur_map_index == 49) or (cur_map_index == 50) or (cur_map_index == 51)) then begin
        current_town := "Military Base";
    end
    if ((cur_map_index == 137) or (cur_map_index == 136) or (cur_map_index == 135) or (cur_map_index == 138) or (cur_map_index == 139) or (cur_map_index == 140) or (cur_map_index == 148)) then begin
        current_town := "San Francisco";
    end
    if ((cur_map_index == 213) or (cur_map_index == 214) or (cur_map_index == 215) or (cur_map_index == 188)) then begin
        current_town := "Brohdent";
    end
    if ((cur_map_index == 218) or (cur_map_index == 217) or (cur_map_index == 219)) then begin
        current_town := "Vault 14";
    end
    if (cur_map_index == 109) then begin
        current_town := "Navarro";
    end
    if ((cur_map_index == 129) or (cur_map_index == 128) or (cur_map_index == 130) or (cur_map_index == 131) or (cur_map_index == 132) or (cur_map_index == 133) or (cur_map_index == 134) or (cur_map_index == 243) or (cur_map_index == 244)) then begin
        current_town := "Enclave";
    end
    if ((cur_map_index == 238) or (cur_map_index == 229) or (cur_map_index == 240)) then begin
        current_town := "BoS Bunker";
    end
    if (cur_map_index == 241) then begin
        current_town := "BoS Help";
    end
    if ((cur_map_index == 242) or (cur_map_index == 151)) then begin
        current_town := "BOS Facility";
    end
    if (cur_map_index == 96) then begin
        current_town := "Special Whale";
    end
    if (cur_map_index == 97) then begin
        current_town := "Special Woodsman";
    end
    if (cur_map_index == 98) then begin
        current_town := "Special Head";
    end
    if (cur_map_index == 99) then begin
        current_town := "Special Shuttle";
    end
    if (cur_map_index == 100) then begin
        current_town := "Special Unwashed";
    end
    if (cur_map_index == 101) then begin
        current_town := "Special Bridge";
    end
    if (cur_map_index == 102) then begin
        current_town := "Special Cafe";
    end
    if (cur_map_index == 103) then begin
        current_town := "Special Holy 1";
    end
    if (cur_map_index == 104) then begin
        current_town := "Special Holy 2";
    end
    if (cur_map_index == 105) then begin
        current_town := "Special Guardian";
    end
    if (cur_map_index == 106) then begin
        current_town := "Special Toxic";
    end
    if (cur_map_index == 107) then begin
        current_town := "Special Pariah";
    end
    if (cur_map_index == 108) then begin
        current_town := "Special Brahmin";
    end
    if (cur_map_index == 164) then begin
        current_town := "Special Postman";
    end
    if (cur_map_index == 225) then begin
        current_town := "Special Salvator";
    end
    if (cur_map_index == 216) then begin
        current_town := "Dead Soldiers of Master Army";
    end
    if ((cur_map_index == 95) or (cur_map_index == 94)) then begin
        current_town := "Caravan Encounters";
    end
    if (cur_map_index == 149) then begin
        current_town := "In Game Movie";
    end
    if (cur_map_index == 150) then begin
        current_town := "Bess Dead";
    end
    if ((cur_map_index == 152) or (cur_map_index == 159)) then begin
        current_town := "DeathClaw Encounters";
    end
    if ((cur_map_index == 0) or (cur_map_index == 1) or (cur_map_index == 2) or (cur_map_index == 81) or (cur_map_index == 82) or (cur_map_index == 83) or (cur_map_index == 84) or (cur_map_index == 113) or (cur_map_index == 114) or (cur_map_index == 115) or (cur_map_index == 116) or (cur_map_index == 117)) then begin
        current_town := "Random Encounter Desert";
    end
    if ((cur_map_index == 74) or (cur_map_index == 75) or (cur_map_index == 121) or (cur_map_index == 122) or (cur_map_index == 123) or (cur_map_index == 124)) then begin
        current_town := "Random Encounter Mountain";
    end
    if ((cur_map_index == 68) or (cur_map_index == 125) or (cur_map_index == 141) or (cur_map_index == 142) or (cur_map_index == 143) or (cur_map_index == 144) or (cur_map_index == 145) or (cur_map_index == 146)) then begin
        current_town := "Random Encounter City";
    end
    if ((cur_map_index == 76) or (cur_map_index == 77) or (cur_map_index == 85) or (cur_map_index == 86) or (cur_map_index == 87) or (cur_map_index == 88) or (cur_map_index == 89) or (cur_map_index == 90) or (cur_map_index == 91) or (cur_map_index == 110) or (cur_map_index == 111) or (cur_map_index == 112)) then begin
        current_town := "Random Encounter Coast";
    end
    if ((cur_map_index == 69) or (cur_map_index == 70) or (cur_map_index == 71) or (cur_map_index == 72) or (cur_map_index == 73) or (cur_map_index == 80) or (cur_map_index == 119) or (cur_map_index == 120)) then begin
        current_town := "Random Encounter Cavern";
    end
    if ((cur_map_index == 252) or (cur_map_index == 251) or (cur_map_index == 250)) then begin
        current_town := "Abandoned Mine";
    end
    return current_town;
end

procedure determine_town_level
begin
    call get_current_area();
    if ((current_town == "Arroyo") or (current_town == "Klamath") or (current_town == "Klamath Toxic Caves") or (current_town == "Mad Dog Area")) then begin
        town_level := 1;
    end
    if ((current_town == "Den") or (current_town == "Den Slave Run") or (current_town == "Modoc") or (current_town == "Jennings Farm Area") or (current_town == "Truck") or (current_town == "Scraptown") or (current_town == "Modoc Thieves Guild") or (current_town == "Salvatore's Gun Stash") or (current_town == "Special Salvatore") or (current_town == "Salvatore Meeting") or (current_town == "Collyweb") or (current_town == "Primitive Tribe") or (current_town == "Ghost Farm")) then begin
        town_level := 2;
    end
    if ((current_town == "Gecko") or (current_town == "Vault City") or (current_town == "Raiders") or (current_town == "Special Whale") or (current_town == "Special Woodsman") or (current_town == "Special Head") or (current_town == "Special Shuttle") or (current_town == "Special Unwashed") or (current_town == "Special Bridge") or (current_town == "Special Cafe") or (current_town == "Special Holy 1") or (current_town == "Special Holy 2") or (current_town == "Special Guardian") or (current_town == "Special Toxic") or (current_town == "Special Pariah") or (current_town == "Special Brahmin") or (current_town == "Special Postman") or (current_town == "Special Salvator") or (current_town == "Dead Soldiers of Master Army") or (current_town == "Caravan Encounters") or (current_town == "DeathClaw Encounters") or (current_town == "Random Encounter Desert") or (current_town == "Random Encounter Mountain") or (current_town == "Random Encounter City") or (current_town == "Random Encounter Coast") or (current_town == "Random Encounter Cavern") or (current_town == "Bess Dead") or (current_town == "In Game Movie")) then begin
        town_level := 3;
    end
    if ((current_town == "Broken Hills") or (current_town == "New Reno") or (current_town == "Salvatore's Gun Stash") or (current_town == "Special Salvatore") or (current_town == "Salvatore Meeting") or (current_town == "Golgotha") or (current_town == "Reno Stables") or (current_town == "Redding") or (current_town == "Abbey") or (current_town == "Lars-City Carson") or (current_town == "Lars-City") or (current_town == "EPA") or (current_town == "Sierra Army Base")) then begin
        town_level := 4;
    end
    if ((current_town == "NCR") or (current_town == "Vault 15") or (current_town == "B21") or (current_town == "Vault 13")) then begin
        town_level := 5;
    end
    if ((current_town == "Military Base") or (current_town == "Navarro") or (current_town == "San Francisco") or (current_town == "Vault 23") or (current_town == "Vault 14") or (current_town == "Brohdent") or (current_town == "BOS Facility") or (current_town == "BoS Help") or (current_town == "BoS Bunker") or (current_town == "Abandoned Mine") or (current_town == "Enclave")) then begin
        town_level := 6;
    end
    if (current_town == "") then begin
        town_level := 4;
    end
    return town_level;
end

procedure upgrade_parts_town_level
begin
    if (town_level == 1) then begin
        percent := 25;
        min := 0;
        max := 1;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 1;
            max := 2;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 1;
                max := 3;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 1;
                    max := 4;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 2;
                        max := 4;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 3;
                            max := 6;
                        end
                    end
                end
            end
        end
    end
end

procedure add_upgrade_parts
begin
    call determine_town_level();
    call upgrade_parts_town_level();
    call number_of_upgrade_parts();
    if (random_number_of_upgrade_parts == 7) then begin
        call pick_upgrade_part();
        call restock_items(case, min, max, percent);
        call pick_upgrade_part();
        call restock_items(case, min, max, percent);
        call pick_upgrade_part();
        call restock_items(case, min, max, percent);
        call pick_upgrade_part();
        call restock_items(case, min, max, percent);
        call pick_upgrade_part();
        call restock_items(case, min, max, percent);
        call pick_upgrade_part();
        call restock_items(case, min, max, percent);
        call pick_upgrade_part();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_number_of_upgrade_parts == 6) then begin
            call pick_upgrade_part();
            call restock_items(case, min, max, percent);
            call pick_upgrade_part();
            call restock_items(case, min, max, percent);
            call pick_upgrade_part();
            call restock_items(case, min, max, percent);
            call pick_upgrade_part();
            call restock_items(case, min, max, percent);
            call pick_upgrade_part();
            call restock_items(case, min, max, percent);
            call pick_upgrade_part();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_number_of_upgrade_parts == 5) then begin
                call pick_upgrade_part();
                call restock_items(case, min, max, percent);
                call pick_upgrade_part();
                call restock_items(case, min, max, percent);
                call pick_upgrade_part();
                call restock_items(case, min, max, percent);
                call pick_upgrade_part();
                call restock_items(case, min, max, percent);
                call pick_upgrade_part();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_number_of_upgrade_parts == 4) then begin
                    call pick_upgrade_part();
                    call restock_items(case, min, max, percent);
                    call pick_upgrade_part();
                    call restock_items(case, min, max, percent);
                    call pick_upgrade_part();
                    call restock_items(case, min, max, percent);
                    call pick_upgrade_part();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_number_of_upgrade_parts == 3) then begin
                        call pick_upgrade_part();
                        call restock_items(case, min, max, percent);
                        call pick_upgrade_part();
                        call restock_items(case, min, max, percent);
                        call pick_upgrade_part();
                        call restock_items(case, min, max, percent);
                    end
                    else begin
                        if (random_number_of_upgrade_parts == 2) then begin
                            call pick_upgrade_part();
                            call restock_items(case, min, max, percent);
                            call pick_upgrade_part();
                            call restock_items(case, min, max, percent);
                        end
                        else begin
                            if (random_number_of_upgrade_parts == 1) then begin
                                call pick_upgrade_part();
                                call restock_items(case, min, max, percent);
                            end
                        end
                    end
                end
            end
        end
    end
    min := 0;
    max := 0;
    percent := 0;
    case := 0;
    upgrade_part_one := 0;
    upgrade_part_two := 0;
    upgrade_part_three := 0;
    upgrade_part_four := 0;
    upgrade_part_five := 0;
    upgrade_part_six := 0;
    upgrade_part_seven := 0;
    upgrade_part_eight := 0;
    upgrade_part_nine := 0;
    upgrade_part_ten := 0;
    upgrade_part_eleven := 0;
    random_number_of_upgrade_parts := 0;
end

procedure pick_upgrade_part
begin
    call random_upgrade_parts();
    while (case == -1) do begin
        call random_upgrade_parts();
    end
end

procedure random_upgrade_parts
begin
    random_upgrade_part := random(1, 7);
    if ((random_upgrade_part == 1) and (upgrade_part_one == 0)) then begin
        upgrade_part_one := 1;
        case := 767;
    end
    else begin
        if ((random_upgrade_part == 2) and (upgrade_part_two == 0)) then begin
            upgrade_part_two := 1;
            case := 768;
        end
        else begin
            if ((random_upgrade_part == 3) and (upgrade_part_three == 0)) then begin
                upgrade_part_three := 1;
                case := 769;
            end
            else begin
                if ((random_upgrade_part == 4) and (upgrade_part_four == 0)) then begin
                    upgrade_part_four := 1;
                    case := 770;
                end
                else begin
                    if ((random_upgrade_part == 6) and (upgrade_part_six == 0)) then begin
                        upgrade_part_six := 1;
                        case := 772;
                    end
                    else begin
                        if ((random_upgrade_part == 7) and (upgrade_part_seven == 0)) then begin
                            upgrade_part_seven := 1;
                            case := 773;
                        end
                        else begin
                            if ((random_upgrade_part == 8) and (upgrade_part_eight == 0)) then begin
                                upgrade_part_eight := 1;
                                case := 774;
                            end
                            else begin
                                if ((random_upgrade_part == 9) and (upgrade_part_nine == 0)) then begin
                                    upgrade_part_nine := 1;
                                    case := 775;
                                end
                                else begin
                                    if ((random_upgrade_part == 10) and (upgrade_part_ten == 0)) then begin
                                        upgrade_part_ten := 1;
                                        case := 776;
                                    end
                                    else begin
                                        if ((random_upgrade_part == 11) and (upgrade_part_eleven == 0)) then begin
                                            upgrade_part_eleven := 1;
                                            case := 777;
                                        end
                                        else begin
                                            if ((random_upgrade_part == 5) and (upgrade_part_five == 0)) then begin
                                                upgrade_part_five := 1;
                                                case := 771;
                                            end
                                            else begin
                                                case := -1;
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    random_upgrade_part := 0;
    return case;
end

procedure number_of_upgrade_parts
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_number_of_upgrade_parts := random(0, 2);
    end
    else begin
        if (town_level == 2) then begin
            random_number_of_upgrade_parts := random(0, 3);
        end
        else begin
            if (town_level == 3) then begin
                random_number_of_upgrade_parts := random(0, 4);
            end
            else begin
                if (town_level == 4) then begin
                    random_number_of_upgrade_parts := random(1, 5);
                end
                else begin
                    if (town_level == 5) then begin
                        random_number_of_upgrade_parts := random(2, 6);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_number_of_upgrade_parts := random(3, 7);
                        end
                        else begin
                            random_number_of_upgrade_parts := 0;
                        end
                    end
                end
            end
        end
    end
    return random_number_of_upgrade_parts;
end

procedure stimpacks_town_level
begin
    if (town_level == 1) then begin
        percent := 100;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 100;
            min := 1;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 100;
                min := 1;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 100;
                    min := 1;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 100;
                        min := 1;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 100;
                            min := 1;
                            max := 7;
                        end
                    end
                end
            end
        end
    end
end

procedure add_stimpacks
begin
    call determine_town_level();
    if (town_level <= 2) then begin
        call stim_town_one();
    end
    else begin
        if (town_level == 3) then begin
            call stim_town_one();
            call stim_town_two();
        end
        else begin
            if (town_level == 4) then begin
                call stim_town_one();
                call stim_town_two();
                call stim_town_three();
            end
            else begin
                if (town_level == 5) then begin
                    call stim_town_one();
                    call stim_town_two();
                    call stim_town_three();
                    call stim_town_four();
                end
                else begin
                    if (town_level == 6) then begin
                        call stim_town_one();
                        call stim_town_two();
                        call stim_town_three();
                        call stim_town_four();
                        call stim_town_five();
                    end
                end
            end
        end
    end
end

procedure stim_town_five
begin
    call determine_town_level();
    call stimpacks_town_level();
    random_numberof_stim_five := random(1, 2);
    if (random_numberof_stim_five == 2) then begin
        call pick_stim_five();
        call restock_items(case, min, max, percent);
        call pick_stim_five();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_five == 1) then begin
            call pick_stim_five();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    stim_nine := 0;
    stim_ten := 0;
    random_numberof_stim_five := 0;
end

procedure pick_stim_five
begin
    call random_stim_town_five();
    while (case == -1) do begin
        call random_stim_town_five();
    end
end

procedure random_stim_town_five
begin
    random_stim_five := random(1, 2);
    if ((random_stim_five == 1) and (stim_nine == 0)) then begin
        stim_nine := 1;
        case := 40;
    end
    else begin
        if ((random_stim_five == 2) and (stim_ten == 0)) then begin
            stim_ten := 1;
            case := 144;
        end
        else begin
            case := -1;
        end
    end
    random_stim_five := 0;
    return case;
end

procedure stim_town_four
begin
    call determine_town_level();
    call stimpacks_town_level();
    random_numberof_stim_four := random(1, 2);
    if (random_numberof_stim_four == 2) then begin
        call pick_stim_four();
        call restock_items(case, min, max, percent);
        call pick_stim_four();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_four == 1) then begin
            call pick_stim_four();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    stim_seven := 0;
    stim_eight := 0;
    random_numberof_stim_four := 0;
end

procedure pick_stim_four
begin
    call random_stim_town_four();
    while (case == -1) do begin
        call random_stim_town_four();
    end
end

procedure random_stim_town_four
begin
    random_stim_four := random(1, 2);
    if ((random_stim_four == 1) and (stim_seven == 0)) then begin
        stim_seven := 1;
        case := 273;
    end
    else begin
        if ((random_stim_four == 2) and (stim_eight == 0)) then begin
            stim_eight := 1;
            case := 802;
        end
        else begin
            case := -1;
        end
    end
    random_stim_four := 0;
    return case;
end

procedure stim_town_three
begin
    call determine_town_level();
    call stimpacks_town_level();
    random_numberof_stim_three := random(1, 2);
    if (random_numberof_stim_three == 2) then begin
        call pick_stim_three();
        call restock_items(case, min, max, percent);
        call pick_stim_three();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_three == 1) then begin
            call pick_stim_three();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    stim_five := 0;
    stim_six := 0;
    random_numberof_stim_three := 0;
end

procedure pick_stim_three
begin
    call random_stim_town_three();
    while (case == -1) do begin
        call random_stim_town_three();
    end
end

procedure random_stim_town_three
begin
    random_stim_three := random(1, 2);
    if ((random_stim_three == 1) and (stim_five == 0)) then begin
        stim_five := 1;
        case := 71;
    end
    else begin
        if ((random_stim_three == 2) and (stim_six == 0)) then begin
            stim_six := 1;
            case := 801;
        end
        else begin
            case := -1;
        end
    end
    random_stim_three := 0;
    return case;
end

procedure stim_town_two
begin
    call determine_town_level();
    call stimpacks_town_level();
    random_numberof_stim_two := random(1, 2);
    if (random_numberof_stim_two == 2) then begin
        call pick_stim_two();
        call restock_items(case, min, max, percent);
        call pick_stim_two();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_two == 1) then begin
            call pick_stim_two();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    stim_three := 0;
    stim_four := 0;
    random_numberof_stim_two := 0;
end

procedure pick_stim_two
begin
    call random_stim_town_two();
    while (case == -1) do begin
        call random_stim_town_two();
    end
end

procedure random_stim_town_two
begin
    random_stim_two := random(1, 2);
    if ((random_stim_two == 1) and (stim_three == 0)) then begin
        stim_three := 1;
        case := 103;
    end
    else begin
        if ((random_stim_two == 2) and (stim_four == 0)) then begin
            stim_four := 1;
            case := 81;
        end
        else begin
            case := -1;
        end
    end
    random_stim_two := 0;
    return case;
end

procedure stim_town_one
begin
    call determine_town_level();
    call stimpacks_town_level();
    random_numberof_stim_one := random(1, 2);
    if (random_numberof_stim_one == 2) then begin
        call pick_stim_one();
        call restock_items(case, min, max, percent);
        call pick_stim_one();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_stim_one == 1) then begin
            call pick_stim_one();
            call restock_items(case, min, max, percent);
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    stim_one := 0;
    stim_two := 0;
    random_numberof_stim_one := 0;
end

procedure pick_stim_one
begin
    call random_stim_town_one();
    while (case == -1) do begin
        call random_stim_town_one();
    end
end

procedure random_stim_town_one
begin
    random_stim_one := random(1, 2);
    if ((random_stim_one == 1) and (stim_one == 0)) then begin
        stim_one := 1;
        case := 318;
    end
    else begin
        if ((random_stim_one == 2) and (stim_two == 0)) then begin
            stim_two := 1;
            case := 805;
        end
        else begin
            case := -1;
        end
    end
    random_stim_one := 0;
    return case;
end

procedure booze_town_level
begin
    if (town_level == 1) then begin
        percent := 25;
        min := 0;
        max := 1;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 1;
            max := 2;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 1;
                max := 3;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 1;
                    max := 4;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 2;
                        max := 4;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 3;
                            max := 6;
                        end
                    end
                end
            end
        end
    end
end

procedure add_booze
begin
    call determine_town_level();
    call booze_town_level();
    call number_of_booze();
    if (random_number_of_booze == 5) then begin
        call pick_booze();
        call restock_items(case, min, max, percent);
        call pick_booze();
        call restock_items(case, min, max, percent);
        call pick_booze();
        call restock_items(case, min, max, percent);
        call pick_booze();
        call restock_items(case, min, max, percent);
        call pick_booze();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_number_of_booze == 4) then begin
            call pick_booze();
            call restock_items(case, min, max, percent);
            call pick_booze();
            call restock_items(case, min, max, percent);
            call pick_booze();
            call restock_items(case, min, max, percent);
            call pick_booze();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_number_of_booze == 3) then begin
                call pick_booze();
                call restock_items(case, min, max, percent);
                call pick_booze();
                call restock_items(case, min, max, percent);
                call pick_booze();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_number_of_booze == 2) then begin
                    call pick_booze();
                    call restock_items(case, min, max, percent);
                    call pick_booze();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_number_of_booze == 1) then begin
                        call pick_booze();
                        call restock_items(case, min, max, percent);
                    end
                end
            end
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    booze_one := 0;
    booze_two := 0;
    booze_three := 0;
    booze_four := 0;
    booze_five := 0;
    random_number_of_booze := 0;
end

procedure pick_booze
begin
    call pick_random_booze();
    while (case == -1) do begin
        call pick_random_booze();
    end
end

procedure pick_random_booze
begin
    random_booze := random(1, 5);
    if ((random_booze == 1) and (booze_one == 0)) then begin
        booze_one := 1;
        case := 124;
    end
    else begin
        if ((random_booze == 2) and (booze_two == 0)) then begin
            booze_two := 1;
            case := 125;
        end
        else begin
            if ((random_booze == 3) and (booze_three == 0)) then begin
                booze_three := 1;
                case := 310;
            end
            else begin
                if ((random_booze == 4) and (booze_four == 0)) then begin
                    booze_four := 1;
                    case := 311;
                end
                else begin
                    if ((random_booze == 5) and (booze_five == 0)) then begin
                        booze_five := 1;
                        case := 469;
                    end
                    else begin
                        case := -1;
                    end
                end
            end
        end
    end
    random_booze := 0;
    return case;
end

procedure number_of_booze
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_number_of_booze := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_number_of_booze := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_number_of_booze := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_number_of_booze := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_number_of_booze := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_number_of_booze := random(3, 5);
                        end
                        else begin
                            random_number_of_booze := 0;
                        end
                    end
                end
            end
        end
    end
    return random_number_of_booze;
end

procedure drugs_town_level
begin
    if (town_level == 1) then begin
        percent := 25;
        min := 0;
        max := 1;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 1;
            max := 2;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 1;
                max := 3;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 1;
                    max := 4;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 2;
                        max := 4;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 3;
                            max := 6;
                        end
                    end
                end
            end
        end
    end
end

procedure add_drugs
begin
    call determine_town_level();
    call drugs_town_level();
    call number_of_drugs();
    if (random_number_of_drugs == 4) then begin
        call pick_drug();
        call restock_items(case, min, max, percent);
        call pick_drug();
        call restock_items(case, min, max, percent);
        call pick_drug();
        call restock_items(case, min, max, percent);
        call pick_drug();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_number_of_drugs == 3) then begin
            call pick_drug();
            call restock_items(case, min, max, percent);
            call pick_drug();
            call restock_items(case, min, max, percent);
            call pick_drug();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_number_of_drugs == 2) then begin
                call pick_drug();
                call restock_items(case, min, max, percent);
                call pick_drug();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_number_of_drugs == 1) then begin
                    call pick_drug();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    drug_one := 0;
    drug_two := 0;
    drug_three := 0;
    drug_four := 0;
    drug_five := 0;
    drug_six := 0;
    drug_seven := 0;
    random_number_of_drugs := 0;
end

procedure pick_drug
begin
    call random_drugs();
    while (case == -1) do begin
        call random_drugs();
    end
end

procedure random_drugs
begin
    call determine_town_level();
    random_drug := random(1, 7);
    if ((random_drug == 1) and (drug_one == 0)) then begin
        drug_one := 1;
        case := 48;
    end
    else begin
        if ((random_drug == 2) and (drug_two == 0)) then begin
            drug_two := 1;
            case := 49;
        end
        else begin
            if ((random_drug == 3) and (drug_three == 0)) then begin
                drug_three := 1;
                case := 53;
            end
            else begin
                if ((random_drug == 4) and (drug_four == 0)) then begin
                    drug_four := 1;
                    case := 87;
                end
                else begin
                    if ((random_drug == 5) and (drug_five == 0)) then begin
                        drug_five := 1;
                        case := 109;
                    end
                    else begin
                        if ((random_drug == 6) and (drug_six == 0) and (town_level != 1)) then begin
                            drug_six := 1;
                            case := 110;
                        end
                        else begin
                            if ((random_drug == 7) and (drug_seven == 0)) then begin
                                drug_seven := 1;
                                case := 259;
                            end
                            else begin
                                case := -1;
                            end
                        end
                    end
                end
            end
        end
    end
    random_drug := 0;
    return case;
end

procedure number_of_drugs
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_number_of_drugs := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_number_of_drugs := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_number_of_drugs := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_number_of_drugs := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_number_of_drugs := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_number_of_drugs := random(3, 5);
                        end
                        else begin
                            random_number_of_drugs := 0;
                        end
                    end
                end
            end
        end
    end
    return random_number_of_drugs;
end

procedure ammo_town_level
begin
    if (town_level == 1) then begin
        percent := 25;
        min := 1;
        max := 2;
    end
    else begin
        if (town_level == 2) then begin
            percent := 35;
            min := 2;
            max := 3;
        end
        else begin
            if (town_level == 3) then begin
                percent := 45;
                min := 3;
                max := 4;
            end
            else begin
                if (town_level == 4) then begin
                    percent := 55;
                    min := 4;
                    max := 5;
                end
                else begin
                    if (town_level == 5) then begin
                        percent := 65;
                        min := 5;
                        max := 6;
                    end
                    else begin
                        if (town_level == 6) then begin
                            percent := 75;
                            min := 7;
                            max := 14;
                        end
                    end
                end
            end
        end
    end
    if (get_sfall_global_int("nirran_1") == 1) then begin
        call restock_items(38, min, max, 100);
        call restock_items(36, min, max, 100);
        call restock_items(95, min, max, 100);
        call restock_items(30, min, max, 100);
    end
end

procedure ammo_town_six
begin
    call determine_town_level();
    call ammo_town_level();
    call number_of_random_ammo_six();
    if (random_numberof_ammo_six == 4) then begin
        call pick_ammo_six();
        call restock_items(case, min, max, percent);
        call pick_ammo_six();
        call restock_items(case, min, max, percent);
        call pick_ammo_six();
        call restock_items(case, min, max, percent);
        call pick_ammo_six();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_six == 3) then begin
            call pick_ammo_six();
            call restock_items(case, min, max, percent);
            call pick_ammo_six();
            call restock_items(case, min, max, percent);
            call pick_ammo_six();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_six == 2) then begin
                call pick_ammo_six();
                call restock_items(case, min, max, percent);
                call pick_ammo_six();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_six == 1) then begin
                    call pick_ammo_six();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    ammo_twentyfour := 0;
    ammo_twentyfive := 0;
    ammo_twentysix := 0;
    ammo_twentyseven := 0;
    random_numberof_ammo_six := 0;
end

procedure pick_ammo_six
begin
    call random_ammo_town_six();
    while (case == -1) do begin
        call random_ammo_town_six();
    end
end

procedure random_ammo_town_six
begin
    random_ammo_six := random(1, 4);
    if ((random_ammo_six == 1) and (ammo_twentyfour == 0)) then begin
        ammo_twentyfour := 1;
        case := 358;
    end
    else begin
        if ((random_ammo_six == 2) and (ammo_twentyfive == 0)) then begin
            ammo_twentyfive := 1;
            case := 359;
        end
        else begin
            if ((random_ammo_six == 3) and (ammo_twentysix == 0)) then begin
                ammo_twentysix := 1;
                case := 382;
            end
            else begin
                if ((random_ammo_six == 4) and (ammo_twentyseven == 0)) then begin
                    ammo_twentyseven := 1;
                    case := 578;
                end
                else begin
                    case := -1;
                end
            end
        end
    end
    random_ammo_six := 0;
    return case;
end

procedure number_of_random_ammo_six
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_six := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_six := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_six := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_six := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_six := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_six := random(3, 4);
                        end
                        else begin
                            random_numberof_ammo_six := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_six;
end

procedure ammo_town_five
begin
    call determine_town_level();
    call ammo_town_level();
    call number_of_random_ammo_five();
    if (random_numberof_ammo_five == 4) then begin
        call pick_ammo_five();
        call restock_items(case, min, max, percent);
        call pick_ammo_five();
        call restock_items(case, min, max, percent);
        call pick_ammo_five();
        call restock_items(case, min, max, percent);
        call pick_ammo_five();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_five == 3) then begin
            call pick_ammo_five();
            call restock_items(case, min, max, percent);
            call pick_ammo_five();
            call restock_items(case, min, max, percent);
            call pick_ammo_five();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_five == 2) then begin
                call pick_ammo_five();
                call restock_items(case, min, max, percent);
                call pick_ammo_five();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_five == 1) then begin
                    call pick_ammo_five();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    ammo_twenty := 0;
    ammo_twentyone := 0;
    ammo_twentytwo := 0;
    ammo_twentythree := 0;
    random_numberof_ammo_five := 0;
end

procedure pick_ammo_five
begin
    call random_ammo_town_five();
    while (case == -1) do begin
        call random_ammo_town_five();
    end
end

procedure random_ammo_town_five
begin
    random_ammo_five := random(1, 4);
    if ((random_ammo_five == 1) and (ammo_twenty == 0)) then begin
        ammo_twenty := 1;
        case := 361;
    end
    else begin
        if ((random_ammo_five == 2) and (ammo_twentyone == 0)) then begin
            ammo_twentyone := 1;
            case := 362;
        end
        else begin
            if ((random_ammo_five == 3) and (ammo_twentytwo == 0)) then begin
                ammo_twentytwo := 1;
                case := 360;
            end
            else begin
                if ((random_ammo_five == 4) and (ammo_twentythree == 0)) then begin
                    ammo_twentythree := 1;
                    case := 363;
                end
                else begin
                    case := -1;
                end
            end
        end
    end
    random_ammo_five := 0;
    return case;
end

procedure number_of_random_ammo_five
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_five := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_five := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_five := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_five := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_five := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_five := random(3, 4);
                        end
                        else begin
                            random_numberof_ammo_five := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_five;
end

procedure ammo_town_four
begin
    call determine_town_level();
    call ammo_town_level();
    call number_of_random_ammo_four();
    if (random_numberof_ammo_four == 4) then begin
        call pick_ammo_four();
        call restock_items(case, min, max, percent);
        call pick_ammo_four();
        call restock_items(case, min, max, percent);
        call pick_ammo_four();
        call restock_items(case, min, max, percent);
        call pick_ammo_four();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_four == 3) then begin
            call pick_ammo_four();
            call restock_items(case, min, max, percent);
            call pick_ammo_four();
            call restock_items(case, min, max, percent);
            call pick_ammo_four();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_four == 2) then begin
                call pick_ammo_four();
                call restock_items(case, min, max, percent);
                call pick_ammo_four();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_four == 1) then begin
                    call pick_ammo_four();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    ammo_sixteen := 0;
    ammo_seventeen := 0;
    ammo_eighteen := 0;
    ammo_ninteen := 0;
    random_numberof_ammo_four := 0;
end

procedure pick_ammo_four
begin
    call random_ammo_town_four();
    while (case == -1) do begin
        call random_ammo_town_four();
    end
end

procedure random_ammo_town_four
begin
    random_ammo_four := random(1, 4);
    if ((random_ammo_four == 1) and (ammo_sixteen == 0)) then begin
        ammo_sixteen := 1;
        case := 363;
    end
    else begin
        if ((random_ammo_four == 2) and (ammo_seventeen == 0)) then begin
            ammo_seventeen := 1;
            case := 14;
        end
        else begin
            if ((random_ammo_four == 3) and (ammo_eighteen == 0)) then begin
                ammo_eighteen := 1;
                case := 32;
            end
            else begin
                if ((random_ammo_four == 4) and (ammo_ninteen == 0)) then begin
                    ammo_ninteen := 1;
                    case := 37;
                end
                else begin
                    case := -1;
                end
            end
        end
    end
    random_ammo_four := 0;
    return case;
end

procedure number_of_random_ammo_four
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_four := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_four := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_four := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_four := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_four := random(2, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_four := random(3, 4);
                        end
                        else begin
                            random_numberof_ammo_four := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_four;
end

procedure ammo_town_three
begin
    call determine_town_level();
    call ammo_town_level();
    call number_of_random_ammo_three();
    if (random_numberof_ammo_three == 4) then begin
        call pick_ammo_three();
        call restock_items(case, min, max, percent);
        call pick_ammo_three();
        call restock_items(case, min, max, percent);
        call pick_ammo_three();
        call restock_items(case, min, max, percent);
        call pick_ammo_three();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_three == 3) then begin
            call pick_ammo_three();
            call restock_items(case, min, max, percent);
            call pick_ammo_three();
            call restock_items(case, min, max, percent);
            call pick_ammo_three();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_three == 2) then begin
                call pick_ammo_three();
                call restock_items(case, min, max, percent);
                call pick_ammo_three();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_three == 1) then begin
                    call pick_ammo_three();
                    call restock_items(case, min, max, percent);
                end
            end
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    ammo_twelve := 0;
    ammo_thirteen := 0;
    ammo_fourteen := 0;
    ammo_fifteen := 0;
    random_numberof_ammo_three := 0;
end

procedure pick_ammo_three
begin
    call random_ammo_town_three();
    while (case == -1) do begin
        call random_ammo_town_three();
    end
end

procedure random_ammo_town_three
begin
    random_ammo_three := random(1, 4);
    if ((random_ammo_three == 1) and (ammo_twelve == 0)) then begin
        ammo_twelve := 1;
        case := 121;
    end
    else begin
        if ((random_ammo_three == 2) and (ammo_thirteen == 0)) then begin
            ammo_thirteen := 1;
            case := 163;
        end
        else begin
            if ((random_ammo_three == 3) and (ammo_fourteen == 0)) then begin
                ammo_fourteen := 1;
                case := 357;
            end
            else begin
                if ((random_ammo_three == 4) and (ammo_fifteen == 0)) then begin
                    ammo_fifteen := 1;
                    case := 360;
                end
                else begin
                    case := -1;
                end
            end
        end
    end
    random_ammo_three := 0;
    return case;
end

procedure number_of_random_ammo_three
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_three := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_three := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_three := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_three := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_three := random(1, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_three := random(3, 4);
                        end
                        else begin
                            random_numberof_ammo_three := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_three;
end

procedure ammo_town_two
begin
    call determine_town_level();
    call ammo_town_level();
    call number_of_random_ammo_two();
    if (random_numberof_ammo_two == 5) then begin
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
        call pick_ammo_two();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_two == 4) then begin
            call pick_ammo_two();
            call restock_items(case, min, max, percent);
            call pick_ammo_two();
            call restock_items(case, min, max, percent);
            call pick_ammo_two();
            call restock_items(case, min, max, percent);
            call pick_ammo_two();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_two == 3) then begin
                call pick_ammo_two();
                call restock_items(case, min, max, percent);
                call pick_ammo_two();
                call restock_items(case, min, max, percent);
                call pick_ammo_two();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_two == 2) then begin
                    call pick_ammo_two();
                    call restock_items(case, min, max, percent);
                    call pick_ammo_two();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_numberof_ammo_two == 1) then begin
                        call pick_ammo_two();
                        call restock_items(case, min, max, percent);
                    end
                end
            end
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    ammo_seven := 0;
    ammo_eight := 0;
    ammo_nine := 0;
    ammo_ten := 0;
    ammo_eleven := 0;
    random_numberof_ammo_two := 0;
end

procedure pick_ammo_two
begin
    call random_ammo_town_two();
    while (case == -1) do begin
        call random_ammo_town_two();
    end
end

procedure random_ammo_town_two
begin
    random_ammo_two := random(1, 5);
    if ((random_ammo_two == 1) and (ammo_seven == 0)) then begin
        ammo_seven := 1;
        case := 111;
    end
    else begin
        if ((random_ammo_two == 2) and (ammo_eight == 0)) then begin
            ammo_eight := 1;
            case := 31;
        end
        else begin
            if ((random_ammo_two == 3) and (ammo_nine == 0)) then begin
                ammo_nine := 1;
                case := 34;
            end
            else begin
                if ((random_ammo_two == 4) and (ammo_ten == 0)) then begin
                    ammo_ten := 1;
                    case := 33;
                end
                else begin
                    if ((random_ammo_two == 5) and (ammo_eleven == 0)) then begin
                        ammo_eleven := 1;
                        case := 38;
                    end
                    else begin
                        case := -1;
                    end
                end
            end
        end
    end
    random_ammo_two := 0;
    return case;
end

procedure number_of_random_ammo_two
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_two := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_two := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_two := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_two := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_two := random(1, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_two := random(3, 5);
                        end
                        else begin
                            random_numberof_ammo_two := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_two;
end

procedure ammo_town_one
begin
    call determine_town_level();
    call ammo_town_level();
    call number_of_random_ammo_one();
    if (random_numberof_ammo_one == 6) then begin
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
        call pick_ammo_one();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_numberof_ammo_one == 5) then begin
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
            call pick_ammo_one();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_numberof_ammo_one == 4) then begin
                call pick_ammo_one();
                call restock_items(case, min, max, percent);
                call pick_ammo_one();
                call restock_items(case, min, max, percent);
                call pick_ammo_one();
                call restock_items(case, min, max, percent);
                call pick_ammo_one();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_numberof_ammo_one == 3) then begin
                    call pick_ammo_one();
                    call restock_items(case, min, max, percent);
                    call pick_ammo_one();
                    call restock_items(case, min, max, percent);
                    call pick_ammo_one();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_numberof_ammo_one == 2) then begin
                        call pick_ammo_one();
                        call restock_items(case, min, max, percent);
                        call pick_ammo_one();
                        call restock_items(case, min, max, percent);
                    end
                    else begin
                        if (random_numberof_ammo_one == 1) then begin
                            call pick_ammo_one();
                            call restock_items(case, min, max, percent);
                        end
                    end
                end
            end
        end
    end
    min := 0;
    max := 0;
    case := 0;
    percent := 0;
    ammo_one := 0;
    ammo_two := 0;
    ammo_three := 0;
    ammo_four := 0;
    ammo_five := 0;
    ammo_six := 0;
    random_numberof_ammo_one := 0;
end

procedure pick_ammo_one
begin
    call random_ammo_town_one();
    while (case == -1) do begin
        call random_ammo_town_one();
    end
end

procedure random_ammo_town_one
begin
    random_ammo_one := random(1, 6);
    if ((random_ammo_one == 1) and (ammo_one == 0)) then begin
        ammo_one := 1;
        case := 29;
    end
    else begin
        if ((random_ammo_one == 2) and (ammo_two == 0)) then begin
            ammo_two := 1;
            case := 30;
        end
        else begin
            if ((random_ammo_one == 3) and (ammo_three == 0)) then begin
                ammo_three := 1;
                case := 95;
            end
            else begin
                if ((random_ammo_one == 4) and (ammo_four == 0)) then begin
                    ammo_four := 1;
                    case := 35;
                end
                else begin
                    if ((random_ammo_one == 5) and (ammo_five == 0)) then begin
                        ammo_five := 1;
                        case := 36;
                    end
                    else begin
                        if ((random_ammo_one == 6) and (ammo_six == 0)) then begin
                            ammo_six := 1;
                            case := 39;
                        end
                        else begin
                            case := -1;
                        end
                    end
                end
            end
        end
    end
    random_ammo_one := 0;
    return case;
end

procedure number_of_random_ammo_one
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_numberof_ammo_one := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_numberof_ammo_one := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_numberof_ammo_one := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_numberof_ammo_one := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_numberof_ammo_one := random(1, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_numberof_ammo_one := random(3, 6);
                        end
                        else begin
                            random_numberof_ammo_one := 0;
                        end
                    end
                end
            end
        end
    end
    return random_numberof_ammo_one;
end

procedure herbs_town_level
begin
    if (town_level == 1) then begin
        min := 2;
        max := 4;
        percent := 15;
    end
    else begin
        if (town_level == 2) then begin
            min := 3;
            max := 6;
            percent := 25;
        end
        else begin
            if (town_level == 3) then begin
                min := 4;
                max := 7;
                percent := 35;
            end
            else begin
                if (town_level == 4) then begin
                    min := 5;
                    max := 9;
                    percent := 45;
                end
                else begin
                    if (town_level == 5) then begin
                        min := 6;
                        max := 10;
                        percent := 55;
                    end
                    else begin
                        if (town_level == 6) then begin
                            min := 7;
                            max := 12;
                            percent := 65;
                        end
                    end
                end
            end
        end
    end
end

procedure pick_herb
begin
    call random_herbs();
    while (case == -1) do begin
        call random_herbs();
    end
end

procedure add_ammo
begin
    call determine_town_level();
    if (town_level == 1) then begin
        call ammo_town_one();
    end
    else begin
        if (town_level == 2) then begin
            call ammo_town_one();
            call ammo_town_two();
        end
        else begin
            if (town_level == 3) then begin
                call ammo_town_one();
                call ammo_town_two();
                call ammo_town_three();
            end
            else begin
                if (town_level == 4) then begin
                    call ammo_town_one();
                    call ammo_town_two();
                    call ammo_town_three();
                    call ammo_town_four();
                end
                else begin
                    if (town_level == 5) then begin
                        call ammo_town_one();
                        call ammo_town_two();
                        call ammo_town_three();
                        call ammo_town_four();
                        call ammo_town_five();
                    end
                    else begin
                        if (town_level == 6) then begin
                            call ammo_town_one();
                            call ammo_town_two();
                            call ammo_town_three();
                            call ammo_town_four();
                            call ammo_town_five();
                            call ammo_town_six();
                        end
                    end
                end
            end
        end
    end
end

procedure books_town_level
begin
    if (town_level == 1) then begin
        min := 0;
        max := 1;
        percent := 10;
    end
    else begin
        if (town_level == 2) then begin
            min := 0;
            max := 1;
            percent := 20;
        end
        else begin
            if (town_level == 3) then begin
                min := 1;
                max := 1;
                percent := 30;
            end
            else begin
                if (town_level == 4) then begin
                    min := 1;
                    max := 1;
                    percent := 40;
                end
                else begin
                    if (town_level == 5) then begin
                        min := 1;
                        max := 2;
                        percent := 50;
                    end
                    else begin
                        if (town_level == 6) then begin
                            min := 2;
                            max := 3;
                            percent := 60;
                        end
                    end
                end
            end
        end
    end
end

procedure pick_book
begin
    call random_skill_book();
    while (case == -1) do begin
        call random_skill_book();
    end
end

procedure random_skill_book
begin
    random_books := random(1, 18);
    if ((random_books == 18) and (book_eighteen == 0)) then begin
        book_eighteen := 1;
        case := 778;
    end
    else begin
        if ((random_books == 17) and (book_seventeen == 0)) then begin
            book_seventeen := 1;
            case := 779;
        end
        else begin
            if ((random_books == 16) and (book_sixteen == 0)) then begin
                book_sixteen := 1;
                case := 780;
            end
            else begin
                if ((random_books == 15) and (book_fifteen == 0)) then begin
                    book_fifteen := 1;
                    case := 781;
                end
                else begin
                    if ((random_books == 14) and (book_fourteen == 0)) then begin
                        book_fourteen := 1;
                        case := 782;
                    end
                    else begin
                        if ((random_books == 13) and (book_thirteen == 0)) then begin
                            book_thirteen := 1;
                            case := 783;
                        end
                        else begin
                            if ((random_books == 12) and (book_twelve == 0)) then begin
                                book_twelve := 1;
                                case := 784;
                            end
                            else begin
                                if ((random_books == 11) and (book_eleven == 0)) then begin
                                    book_eleven := 1;
                                    case := 785;
                                end
                                else begin
                                    if ((random_books == 10) and (book_ten == 0)) then begin
                                        book_ten := 1;
                                        case := 786;
                                    end
                                    else begin
                                        if ((random_books == 9) and (book_nine == 0)) then begin
                                            book_nine := 1;
                                            case := 787;
                                        end
                                        else begin
                                            if ((random_books == 8) and (book_eight == 0)) then begin
                                                book_eight := 1;
                                                case := 788;
                                            end
                                            else begin
                                                if ((random_books == 7) and (book_seven == 0)) then begin
                                                    book_seven := 1;
                                                    case := 789;
                                                end
                                                else begin
                                                    if ((random_books == 6) and (book_six == 0)) then begin
                                                        book_six := 1;
                                                        case := 790;
                                                    end
                                                    else begin
                                                        if ((random_books == 5) and (book_five == 0)) then begin
                                                            book_five := 1;
                                                            case := 791;
                                                        end
                                                        else begin
                                                            if ((random_books == 4) and (book_four == 0)) then begin
                                                                book_four := 1;
                                                                case := 792;
                                                            end
                                                            else begin
                                                                if ((random_books == 3) and (book_three == 0)) then begin
                                                                    book_three := 1;
                                                                    case := 793;
                                                                end
                                                                else begin
                                                                    if ((random_books == 2) and (book_two == 0)) then begin
                                                                        book_two := 1;
                                                                        case := 794;
                                                                    end
                                                                    else begin
                                                                        if ((random_books == 1) and (book_one == 0)) then begin
                                                                            book_one := 1;
                                                                            case := 795;
                                                                        end
                                                                        else begin
                                                                            case := -1;
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return case;
end

procedure add_books
begin
    call number_of_random_books();
    call determine_town_level();
    call books_town_level();
    if (random_book == 5) then begin
        call pick_book();
        call restock_items(case, min, max, percent);
        call pick_book();
        call restock_items(case, min, max, percent);
        call pick_book();
        call restock_items(case, min, max, percent);
        call pick_book();
        call restock_items(case, min, max, percent);
        call pick_book();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (random_book == 4) then begin
            call pick_book();
            call restock_items(case, min, max, percent);
            call pick_book();
            call restock_items(case, min, max, percent);
            call pick_book();
            call restock_items(case, min, max, percent);
            call pick_book();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (random_book == 3) then begin
                call pick_book();
                call restock_items(case, min, max, percent);
                call pick_book();
                call restock_items(case, min, max, percent);
                call pick_book();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (random_book == 2) then begin
                    call pick_book();
                    call restock_items(case, min, max, percent);
                    call pick_book();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (random_book == 1) then begin
                        call pick_book();
                        call restock_items(case, min, max, percent);
                    end
                    else begin
                        if (random_book == 0) then begin
                            call pick_book();
                            call restock_items(case, min, max, percent);
                        end
                    end
                end
            end
        end
    end
    book_one := 0;
    book_two := 0;
    book_three := 0;
    book_four := 0;
    book_five := 0;
    book_six := 0;
    book_seven := 0;
    book_eight := 0;
    book_nine := 0;
    book_ten := 0;
    book_eleven := 0;
    book_twelve := 0;
    book_thirteen := 0;
    book_fourteen := 0;
    book_fifteen := 0;
    book_sixteen := 0;
    book_seventeen := 0;
    book_eighteen := 0;
    case := 0;
    min := 0;
    max := 0;
    percent := 0;
end

procedure number_of_random_books
begin
    call determine_town_level();
    if (town_level == 1) then begin
        random_book := random(0, 1);
    end
    else begin
        if (town_level == 2) then begin
            random_book := random(0, 2);
        end
        else begin
            if (town_level == 3) then begin
                random_book := random(0, 3);
            end
            else begin
                if (town_level == 4) then begin
                    random_book := random(1, 3);
                end
                else begin
                    if (town_level == 5) then begin
                        random_book := random(1, 4);
                    end
                    else begin
                        if (town_level == 6) then begin
                            random_book := random(3, 5);
                        end
                        else begin
                            random_book := 0;
                        end
                    end
                end
            end
        end
    end
    return random_book;
end

procedure random_herbs
begin
    var_random_herbs := random(1, 10);
    if ((var_random_herbs == 10) and (herb_ten == 0)) then begin
        herb_ten := 1;
        case := 544;
    end
    else begin
        if ((var_random_herbs == 9) and (herb_nine == 0)) then begin
            herb_nine := 1;
            case := 797;
        end
        else begin
            if ((var_random_herbs == 8) and (herb_eight == 0)) then begin
                herb_eight := 1;
                case := 798;
            end
            else begin
                if ((var_random_herbs == 7) and (herb_seven == 0)) then begin
                    herb_seven := 1;
                    case := 799;
                end
                else begin
                    if ((var_random_herbs == 6) and (herb_six == 0)) then begin
                        herb_six := 1;
                        case := 272;
                    end
                    else begin
                        if ((var_random_herbs == 5) and (herb_five == 0)) then begin
                            herb_five := 1;
                            case := 271;
                        end
                        else begin
                            if ((var_random_herbs == 4) and (herb_four == 0)) then begin
                                herb_four := 1;
                                case := 759;
                            end
                            else begin
                                if ((var_random_herbs == 3) and (herb_three == 0)) then begin
                                    herb_three := 1;
                                    case := 796;
                                end
                                else begin
                                    if ((var_random_herbs == 2) and (herb_two == 0)) then begin
                                        herb_two := 1;
                                        case := 548;
                                    end
                                    else begin
                                        if ((var_random_herbs == 1) and (herb_one == 0)) then begin
                                            herb_one := 1;
                                            case := 755;
                                        end
                                        else begin
                                            case := -1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return case;
end

procedure add_money
begin
    call determine_town_level();
    if (town_level == 1) then begin
        item_caps_adjust(self_obj, -item_caps_total(self_obj));
        item_caps_adjust(self_obj, random(100, 300));
    end
    else begin
        if (town_level == 2) then begin
            item_caps_adjust(self_obj, -item_caps_total(self_obj));
            item_caps_adjust(self_obj, random(200, 600));
        end
        else begin
            if (town_level == 3) then begin
                item_caps_adjust(self_obj, -item_caps_total(self_obj));
                item_caps_adjust(self_obj, random(300, 900));
            end
            else begin
                if (town_level == 4) then begin
                    item_caps_adjust(self_obj, -item_caps_total(self_obj));
                    item_caps_adjust(self_obj, random(400, 1200));
                end
                else begin
                    if (town_level == 5) then begin
                        item_caps_adjust(self_obj, -item_caps_total(self_obj));
                        item_caps_adjust(self_obj, random(500, 1500));
                    end
                    else begin
                        if (town_level == 6) then begin
                            item_caps_adjust(self_obj, -item_caps_total(self_obj));
                            item_caps_adjust(self_obj, random(2000, 4500));
                        end
                    end
                end
            end
        end
    end
end

procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777278) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777278)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777305) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777305)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure restock_items(variable arg0, variable arg1, variable arg2, variable arg3)
begin
    restock_amt := random(arg1, arg2);
    if (obj_is_carrying_obj_pid(self_obj, arg0) < restock_amt) then begin
        if (arg3 >= random(1, 100)) then begin
            if (obj_is_carrying_obj_pid(self_obj, arg0) < restock_amt) then begin
                restock_obj := create_object_sid(arg0, 0, 0, -1);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, arg0));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, arg0) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, arg0);
                    if ((obj_is_carrying_obj_pid(self_obj, arg0) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, arg0) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, arg0);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, arg0);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    metarule(43, self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        destroy_object(restock_obj);
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, arg0) < restock_amt) then begin
            restock_obj := create_object_sid(arg0, 0, 0, -1);
            add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, arg0));
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, arg0) > restock_amt) then begin
                removed_qty := obj_is_carrying_obj_pid(self_obj, arg0);
                if ((obj_is_carrying_obj_pid(self_obj, arg0) - restock_amt) < removed_qty) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, arg0) - restock_amt;
                end
                if (removed_qty > 0) then begin
                    restock_obj := obj_carrying_pid_obj(self_obj, arg0);
                    if (obj_type(self_obj) == 1) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, arg0);
                        if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                            if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                restock_obj := critter_inven_obj(self_obj, 0);
                                debug_msg("armour pid == " + obj_pid(restock_obj));
                                rm_obj_from_inven(self_obj, restock_obj);
                                add_obj_to_inven(self_obj, restock_obj);
                            end
                        end
                        else begin
                            if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                metarule(43, self_obj);
                            end
                        end
                    end
                    restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                    destroy_object(restock_obj);
                end
                restock_obj := 0;
                restock_amt := 0;
            end
            else begin
                restock_obj := 0;
            end
        end
    end
end

procedure inventory_keepers
begin
    LVar0 := create_object_sid(128, 5, 0, -1);
    if (obj_is_carrying_obj_pid(self_obj, 479) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 479);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 356) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 356);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 377) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 377);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 366) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 366);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 446) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 446);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 492) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 492);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 288) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 288);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 253) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 253);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 254) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 254);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 266) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 266);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 267) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 267);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 258) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 258);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 255) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 255);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 256) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 256);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 257) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 257);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 96) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 96);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 97) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 97);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 99) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 99);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 223) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 223);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 252) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 252);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 298) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 298);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 302) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 302);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 303) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 303);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 305) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 305);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 306) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 306);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 307) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 307);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 335) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 335);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 336) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 336);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 337) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 337);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 338) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 338);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 339) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 339);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 340) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 340);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 341) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 341);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 414) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 414);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 422) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 422);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 431);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 431);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 432) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 432);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 431) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 431);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 447) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 447);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 448) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 448);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 449) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 449);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 456) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 456);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 468) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 468);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 471) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 471);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 476) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 476);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 488) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 488);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (obj_is_carrying_obj_pid(self_obj, 495) > 0) then begin
        LVar1 := obj_carrying_pid_obj(self_obj, 495);
        rm_obj_from_inven(self_obj, LVar1);
        add_obj_to_inven(LVar0, LVar1);
    end
    if (get_sfall_global_int("nirran_1") == 0) then begin
        global_temp := create_object_sid(128, 0, 0, -1);
        move_obj_inven_to_obj(self_obj, global_temp);
        destroy_object(global_temp);
    end
    move_obj_inven_to_obj(LVar0, self_obj);
end

procedure add_herbs
begin
    call determine_town_level();
    call herbs_town_level();
    number_of_herbs := random(1, 5);
    if (number_of_herbs == 5) then begin
        case := 807;
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
        call pick_herb();
        call restock_items(case, min, max, percent);
    end
    else begin
        if (number_of_herbs == 4) then begin
            case := 807;
            call restock_items(case, min, max, percent);
            call pick_herb();
            call restock_items(case, min, max, percent);
            call pick_herb();
            call restock_items(case, min, max, percent);
            call pick_herb();
            call restock_items(case, min, max, percent);
            call pick_herb();
            call restock_items(case, min, max, percent);
        end
        else begin
            if (number_of_herbs == 3) then begin
                case := 807;
                call restock_items(case, min, max, percent);
                call pick_herb();
                call restock_items(case, min, max, percent);
                call pick_herb();
                call restock_items(case, min, max, percent);
                call pick_herb();
                call restock_items(case, min, max, percent);
            end
            else begin
                if (number_of_herbs == 2) then begin
                    case := 807;
                    call restock_items(case, min, max, percent);
                    call pick_herb();
                    call restock_items(case, min, max, percent);
                    call pick_herb();
                    call restock_items(case, min, max, percent);
                end
                else begin
                    if (number_of_herbs == 1) then begin
                        case := 807;
                        call restock_items(case, min, max, percent);
                        call pick_herb();
                        call restock_items(case, min, max, percent);
                    end
                end
            end
        end
    end
    herb_one := 0;
    herb_two := 0;
    herb_three := 0;
    herb_four := 0;
    herb_five := 0;
    herb_six := 0;
    herb_seven := 0;
    herb_eight := 0;
    herb_nine := 0;
    herb_ten := 0;
    case := 0;
    min := 0;
    max := 0;
    percent := 0;
end

procedure ChooseFromList
begin
    variable LVar0 := 0;
    gsay_reply(713, stored_msg);
    if (message_str(353, top_msg - 1) != "") then begin
        giq_option(1, 713, message_str(353, 150), CLICK_PREV, 50);
    end
    if (LVar0 == 0) then begin
        if (message_str(353, top_msg + 0) != "") then begin
            giq_option(1, 713, message_str(353, top_msg + 0), CLICK_0, 50);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(353, top_msg + 1) != "") then begin
            giq_option(1, 713, message_str(353, top_msg + 1), CLICK_1, 50);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(353, top_msg + 2) != "") then begin
            giq_option(1, 713, message_str(353, top_msg + 2), CLICK_2, 50);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(353, top_msg + 3) != "") then begin
            giq_option(1, 713, message_str(353, top_msg + 3), CLICK_3, 50);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(353, top_msg + 4) != "") then begin
            giq_option(1, 713, message_str(353, top_msg + 4), CLICK_4, 50);
        end
        else begin
            LVar0 := 1;
        end
    end
    if (LVar0 == 0) then begin
        if (message_str(353, top_msg + 5) != "") then begin
            giq_option(1, 713, message_str(353, 151), CLICK_MORE, 50);
        end
    end
    return 0;
    LVar0 := 0;
end

procedure CLICK_PREV
begin
    top_msg := top_msg - 5;
    call ChooseFromList();
end

procedure CLICK_0
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + (top_msg % 100));
    call stored_node();
end

procedure CLICK_1
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 1) % 100));
    call stored_node();
end

procedure CLICK_2
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 2) % 100));
    call stored_node();
end

procedure CLICK_3
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 3) % 100));
    call stored_node();
end

procedure CLICK_4
begin
    set_global_var(var_num, (global_var(var_num) / 100 * 100) + ((top_msg + 4) % 100));
    call stored_node();
end

procedure CLICK_MORE
begin
    top_msg := top_msg + 5;
    call ChooseFromList();
end

procedure start
begin
    new_reno_eldridge_box := self_obj;
end

procedure map_enter_p_proc
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    new_reno_eldridge_box := self_obj;
    if (metarule(22, 0) == 0) then begin
        if ((((7 * (24 * (60 * (60 * 10)))) + local_var(0)) <= game_time) or (metarule(14, 0) and (local_var(0) == 0))) then begin
            call inventory_keepers();
            call add_stimpacks();
            call add_money();
            call add_books();
            call add_ammo();
            call add_upgrade_parts();
            call restock_items(299, 1, 2, 100);
            call restock_items(313, 1, 1, 100);
            call restock_items(8, 1, 2, 100);
            call restock_items(9, 1, 2, 80);
            call restock_items(18, 1, 2, 80);
            call restock_items(351, 1, 2, 80);
            call restock_items(10, 1, 2, 80);
            call restock_items(94, 1, 2, 25);
            call restock_items(332, 1, 1, 25);
            call restock_items(22, 1, 2, 25);
            call restock_items(159, 1, 3, 50);
            call restock_items(25, 1, 3, 75);
            call restock_items(51, 1, 1, 50);
            call restock_items(85, 1, 1, 50);
            call restock_items(74, 1, 3, 100);
            call restock_items(1, 1, 2, 75);
            call restock_items(2, 1, 1, 50);
            call restock_items(283, 2, 2, 100);
            call restock_items(379, 1, 2, 75);
            call restock_items(380, 1, 1, 50);
            call restock_items(98, 1, 3, 100);
            set_local_var(0, game_time);
        end
    end
end

procedure map_update_p_proc
begin
    new_reno_eldridge_box := self_obj;
end

