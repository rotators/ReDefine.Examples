procedure start;
procedure description_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;


procedure start
begin
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(1743, 21));
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(1743, 20));
end

procedure damage_p_proc
begin
    if (metarule(49, target_obj) == 6) then begin
        if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
            display_msg(message_str(1743, 22));
            critter_dmg(dude_obj, 7589, 6);
            destroy_object(self_obj);
        end
        else begin
            display_msg(message_str(1743, 23));
            destroy_object(self_obj);
        end
        if (metarule(49, target_obj) != 6) then begin
            display_msg(message_str(1743, 24));
        end
    end
end

procedure use_p_proc
begin
    script_overrides;
    if (map_var(0) == 0) then begin
        display_msg(message_str(1743, 10));
    end
    else begin
        obj_open(self_obj);
    end
end

procedure use_obj_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(obj_being_used_with);
    if (LVar0 == 674) then begin
        script_overrides;
        display_msg(message_str(1743, 11));
        destroy_object(self_obj);
    end
    else begin
        display_msg(message_str(1743, 10));
    end
    return 0;
    LVar0 := 0;
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := action_being_used;
    LVar1 := random(1, 10);
    if (LVar0 == 9) then begin
        if (LVar1 == 7) then begin
            obj_unlock(self_obj);
            set_map_var(0, 1);
            display_msg(message_str(1743, 11));
        end
        if ((LVar1 < 7) or (LVar1 > 7)) then begin
            display_msg(message_str(1743, 12));
        end
    end
    return 0;
    LVar0 := 0;
    LVar1 := 0;
end

procedure map_enter_p_proc
begin
    obj_close(self_obj);
    obj_lock(self_obj);
end

procedure map_update_p_proc
begin
    if (map_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

