variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable lPartyWornArmor;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure map_enter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure Node998;
procedure Node999;
procedure Node999swap;
procedure Node500;
procedure Node550;
procedure Node600;
procedure Node650;
procedure Node700;
procedure Node750;
procedure Node800;
procedure Node850;
procedure Node900;
procedure Node950;
procedure Node1000;
procedure Node1050;
procedure Node1100;
procedure Node1150;
procedure Node1200;
procedure Node1250;
procedure Node1300;
procedure Node1350;
procedure Node1400;
procedure Node1410;
procedure Node1420;
procedure Node1430;
procedure Node1450;
procedure Node1500;
procedure Node1550;
procedure Node1600;
procedure Node1650;
procedure Node1700;
procedure Node1750;
procedure Barter;
procedure Open_hours;
procedure Choose_upgrade_weapon;
procedure UpgradeDoubleShotgun;
procedure UpgradeSniper;
procedure UpgradeCombatShotgun;
procedure UpgradeHunter;
procedure UpgradeDesert;
procedure UpgradeAssault;

variable weapon;
variable table_swap;

import variable Sabrina_table;
import variable Sabrina;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777294) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777294)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778049) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778049)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778050) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778050)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778051) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778051)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
    Sabrina := self_obj;
end

procedure critter_p_proc
begin
    if ((local_var(5) == 2) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        Sabrina := -1;
        attack(dude_obj);
    end
    if (dude_tile == 17274) then begin
        set_local_var(5, 1);
        Sabrina := -1;
        attack(dude_obj);
    end
    if (global_var(GVAR_ENEMY_SEDIT) == 1) then begin
        if (obj_can_see_obj(self_obj, dude_obj) or obj_can_hear_obj(self_obj, dude_obj)) then begin
            attack(dude_obj);
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(5, 2);
    end
end

procedure talk_p_proc
begin
    weapon := 0;
    if (local_var(4) != 1) then begin
        anim(dude_obj, 1000, rotation_to_tile(dude_tile, tile_num(self_obj)));
        anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
        if (Open_hours() == 1) then begin
            start_gdialog(1370, self_obj, 4, -1, -1);
            gsay_start;
            call Node500();
            gsay_end;
            end_dialogue;
            set_local_var(4, 1);
        end
        else begin
            start_gdialog(1370, self_obj, 4, -1, -1);
            gsay_start;
            call Node1050();
            gsay_end;
            end_dialogue;
        end
    end
    else begin
        anim(dude_obj, 1000, rotation_to_tile(dude_tile, tile_num(self_obj)));
        anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
        start_gdialog(1370, self_obj, 4, -1, -1);
        gsay_start;
        if (Open_hours() == 1) then begin
            if (local_var(10) == 0) then begin
                call Node1000();
            end
            else begin
                if (local_var(9) <= game_time) then begin
                    call Node1750();
                end
                else begin
                    call Node1700();
                end
            end
        end
        else begin
            call Node1050();
        end
        gsay_end;
        end_dialogue;
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 1) then begin
        display_mstr(150);
    end
    else begin
        display_mstr(100);
    end
end

procedure description_p_proc
begin
    script_overrides;
    set_local_var(11, 1);
    if (local_var(4) == 1) then begin
        display_mstr(250);
    end
    else begin
        display_mstr(200);
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 10) then begin
        set_local_var(5, 1);
        Sabrina := -1;
        attack(dude_obj);
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 212);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_TOUGH_CITIZEN_NO_TALKING);
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        call Node998();
        set_global_var(GVAR_ENEMY_SEDIT, 1);
    end
end

procedure destroy_p_proc
begin
    Sabrina := -1;
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(4) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1)) and (global_var(GVAR_CHILDKILLER_REPUTATION) == 0)) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        if (critter_kill_type(self_obj) == KILL_TYPE_children_kills) then begin
            if (source_obj == dude_obj) then begin
                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                set_global_var(GVAR_CHILDKILLER_REPUTATION, global_var(GVAR_CHILDKILLER_REPUTATION) + 1);
                set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + -15);
                debug_msg("Player gains " + -15 + " Karma Points.");
                set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
                set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
                set_global_var(GVAR_KARMA_DEFENDER, 0);
                set_global_var(GVAR_KARMA_WANDERER, 0);
                set_global_var(GVAR_KARMA_BETRAYER, 0);
                set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
                set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
                set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
                if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
                    set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                            set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                                set_global_var(GVAR_KARMA_DEFENDER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                                    set_global_var(GVAR_KARMA_WANDERER, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                        set_global_var(GVAR_KARMA_BETRAYER, 1);
                                    end
                                    else begin
                                        if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                            set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                        end
                                        else begin
                                            if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                                set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                            end
                                            else begin
                                                set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                set_global_var(GVAR_TOWN_REP_SEDIT, global_var(GVAR_TOWN_REP_SEDIT) + -8);
                debug_msg("Added " + -8 + " to Town Rep");
            end
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + -10);
        debug_msg("Player gains " + -10 + " Karma Points.");
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        set_global_var(GVAR_TOWN_REP_SEDIT, global_var(GVAR_TOWN_REP_SEDIT) + -5);
        debug_msg("Added " + -5 + " to Town Rep");
    end
end

procedure Node998
begin
    set_local_var(5, 2);
end

procedure Node999
begin
    anim(self_obj, 1000, 2);
end

procedure Node999swap
begin
    removed_qty := obj_is_carrying_obj_pid(self_obj, 4);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(self_obj, 4);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(self_obj, 4);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(self_obj, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(self_obj, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(self_obj, restock_obj);
                    add_obj_to_inven(self_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(self_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(self_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(self_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 4)) do begin
                restock_obj := obj_carrying_pid_obj(self_obj, 4);
                rm_obj_from_inven(self_obj, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    move_obj_inven_to_obj(Sabrina, Sabrina_table);
    move_obj_inven_to_obj(table_swap, Sabrina);
    anim(self_obj, 1000, 2);
end

procedure Node500
begin
    Reply(500);
    if (local_var(7) != 1) then begin
        giq_option(4, NAME, mstr(501) + dude_name, Node700, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 502, Node550, NEUTRAL_REACTION);
    if ((global_var(GVAR_QUEST_S_NICOL_NECKLACE) == 3) and (local_var(8) != 1)) then begin
        if (dude_iq > 5) then begin
            giq_option(4, NAME, 503, Node850, NEUTRAL_REACTION);
        end
        else begin
            if (global_var(GVAR_QUEST_S_TYLER_NICOL) >= 2) then begin
                giq_option(4, NAME, 507, Node900, NEUTRAL_REACTION);
            end
            else begin
                giq_option(4, NAME, 504, Node900, NEUTRAL_REACTION);
            end
        end
    end
    giq_option(-3, NAME, 505, Node950, NEUTRAL_REACTION);
    giq_option(4, NAME, 506, Node999, NEUTRAL_REACTION);
end

procedure Node550
begin
    Reply(550);
    giq_option(4, NAME, 551, Barter, NEUTRAL_REACTION);
    giq_option(4, NAME, 552, Choose_upgrade_weapon, NEUTRAL_REACTION);
    giq_option(6, NAME, 553, Node600, NEUTRAL_REACTION);
    giq_option(4, NAME, 554, Node999, NEUTRAL_REACTION);
end

procedure Node600
begin
    Reply(600);
    giq_option(4, NAME, 601, Barter, NEUTRAL_REACTION);
    giq_option(4, NAME, 602, Choose_upgrade_weapon, NEUTRAL_REACTION);
    if (local_var(6) != 1) then begin
        giq_option(6, NAME, 603, Node650, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 604, Node999, NEUTRAL_REACTION);
end

procedure Node650
begin
    Reply(650);
    set_local_var(6, 1);
    giq_option(4, NAME, 651, Barter, NEUTRAL_REACTION);
    giq_option(4, NAME, 652, Choose_upgrade_weapon, NEUTRAL_REACTION);
    giq_option(4, NAME, 653, Node999, NEUTRAL_REACTION);
end

procedure Node700
begin
    Reply(700);
    set_local_var(7, 1);
    if (local_var(11) == 1) then begin
        giq_option(4, NAME, 701, Node750, NEUTRAL_REACTION);
    end
    if (dude_gender == 0) then begin
        giq_option(4, NAME, 702, Node800, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 703, Node550, NEUTRAL_REACTION);
end

procedure Node750
begin
    Reply(750);
    if (dude_gender == 0) then begin
        giq_option(4, NAME, 751, Node550, NEUTRAL_REACTION);
        giq_option(4, NAME, 753, Node800, NEUTRAL_REACTION);
    end
    if (dude_gender == 1) then begin
        giq_option(4, NAME, 752, Node550, NEUTRAL_REACTION);
    end
end

procedure Node800
begin
    Reply(800);
    giq_option(4, NAME, 801, Node550, NEUTRAL_REACTION);
    giq_option(4, NAME, 802, Node998, NEUTRAL_REACTION);
end

procedure Node850
begin
    Reply(850);
    if (global_var(GVAR_QUEST_S_TYLER_NICOL) >= 2) then begin
        giq_option(4, NAME, 853 + (dude_gender == 1), Node900, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 851 + (dude_gender == 1), Node900, NEUTRAL_REACTION);
    end
end

procedure Node900
begin
    Reply(900);
    set_local_var(8, 1);
    giq_option(4, NAME, 901, Barter, NEUTRAL_REACTION);
    giq_option(4, NAME, 902, Choose_upgrade_weapon, NEUTRAL_REACTION);
    giq_option(4, NAME, 903, Node999, NEUTRAL_REACTION);
end

procedure Node950
begin
    Reply(950);
    giq_option(-3, NAME, 951, Barter, NEUTRAL_REACTION);
    giq_option(-3, NAME, 952, Node999, NEUTRAL_REACTION);
end

procedure Node1000
begin
    Reply(1000);
    if (local_var(7) != 1) then begin
        giq_option(4, NAME, mstr(1001) + dude_name, Node700, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1002, Node550, NEUTRAL_REACTION);
    if ((global_var(GVAR_QUEST_S_NICOL_NECKLACE) == 3) and (local_var(8) != 1)) then begin
        if (dude_iq > 5) then begin
            giq_option(4, NAME, 1003, Node850, NEUTRAL_REACTION);
        end
        else begin
            if (global_var(GVAR_QUEST_S_TYLER_NICOL) >= 2) then begin
                giq_option(4, NAME, 1007, Node900, NEUTRAL_REACTION);
            end
            else begin
                giq_option(4, NAME, 1004, Node900, NEUTRAL_REACTION);
            end
        end
    end
    giq_option(-3, NAME, 1005, Node950, NEUTRAL_REACTION);
    giq_option(4, NAME, 1006, Node999, NEUTRAL_REACTION);
end

procedure Node1050
begin
    Reply(1050);
    giq_option(4, NAME, 1051, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 1052, Node999, NEUTRAL_REACTION);
end

procedure Node1100
begin
    Reply(1100);
    giq_option(4, NAME, 1101, Node999swap, NEUTRAL_REACTION);
end

procedure Node1150
begin
    Reply(1150);
    giq_option(-3, NAME, 1151, Node999swap, NEUTRAL_REACTION);
end

procedure Node1200
begin
    Reply(1200);
    giq_option(4, NAME, 1201, Node999, NEUTRAL_REACTION);
end

procedure Node1250
begin
    Reply(1250);
    weapon := 1;
    if (item_caps_total(dude_obj) >= 2000) then begin
        giq_option(4, NAME, 1251, Node1600, NEUTRAL_REACTION);
        giq_option(4, NAME, 1253, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1252, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1254, Node999, NEUTRAL_REACTION);
end

procedure Node1300
begin
    Reply(1300);
    weapon := 2;
    if (item_caps_total(dude_obj) >= 2000) then begin
        giq_option(4, NAME, 1301, Node1500, NEUTRAL_REACTION);
        giq_option(4, NAME, 1303, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1302, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1304, Node999, NEUTRAL_REACTION);
end

procedure Node1350
begin
    Reply(1350);
    weapon := 3;
    if (item_caps_total(dude_obj) >= 1500) then begin
        giq_option(4, NAME, 1351, Node1500, NEUTRAL_REACTION);
        giq_option(4, NAME, 1353, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1352, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1354, Node999, NEUTRAL_REACTION);
end

procedure Node1400
begin
    Reply(1400);
    weapon := 4;
    if (item_caps_total(dude_obj) >= 4000) then begin
        giq_option(4, NAME, 1401, Node1650, NEUTRAL_REACTION);
        giq_option(4, NAME, 1403, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1402, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1404, Node999, NEUTRAL_REACTION);
end

procedure Node1410
begin
    Reply(1410);
    weapon := 5;
    if (item_caps_total(dude_obj) >= 3000) then begin
        giq_option(4, NAME, 1411, Node1600, NEUTRAL_REACTION);
        giq_option(4, NAME, 1413, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1412, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1414, Node999, NEUTRAL_REACTION);
end

procedure Node1420
begin
    Reply(1420);
    weapon := 6;
    if (item_caps_total(dude_obj) >= 2000) then begin
        giq_option(4, NAME, 1421, Node1550, NEUTRAL_REACTION);
        giq_option(4, NAME, 1423, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1422, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1424, Node999, NEUTRAL_REACTION);
end

procedure Node1430
begin
    Reply(1430);
    weapon := 7;
    if (item_caps_total(dude_obj) >= 4000) then begin
        giq_option(4, NAME, 1431, Node1650, NEUTRAL_REACTION);
        giq_option(4, NAME, 1433, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1432, Choose_upgrade_weapon, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1434, Node999, NEUTRAL_REACTION);
end

procedure Node1450
begin
    Reply(1450);
    if (obj_carrying_pid_obj(dude_obj, 18) and (item_caps_total(dude_obj) >= 2000)) then begin
        giq_option(4, NAME, 1451, UpgradeDesert, NEUTRAL_REACTION);
    end
    if (obj_carrying_pid_obj(dude_obj, 10) and (item_caps_total(dude_obj) >= 2000)) then begin
        giq_option(4, NAME, 1452, UpgradeHunter, NEUTRAL_REACTION);
    end
    if (obj_carrying_pid_obj(dude_obj, 94) and (item_caps_total(dude_obj) >= 1500)) then begin
        giq_option(4, NAME, 1453, UpgradeDoubleShotgun, NEUTRAL_REACTION);
    end
    if (obj_carrying_pid_obj(dude_obj, 23) and (item_caps_total(dude_obj) >= 4000)) then begin
        giq_option(4, NAME, 1454, UpgradeAssault, NEUTRAL_REACTION);
    end
    if (obj_carrying_pid_obj(dude_obj, 143) and (item_caps_total(dude_obj) >= 3000)) then begin
        giq_option(4, NAME, 1455, UpgradeSniper, NEUTRAL_REACTION);
    end
    if (obj_carrying_pid_obj(dude_obj, 313) and (item_caps_total(dude_obj) >= 2000)) then begin
        giq_option(4, NAME, 1456, Node1550, NEUTRAL_REACTION);
    end
    if (obj_carrying_pid_obj(dude_obj, 242) and (item_caps_total(dude_obj) >= 4000)) then begin
        giq_option(4, NAME, 1457, UpgradeCombatShotgun, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1458, Node999, NEUTRAL_REACTION);
end

procedure Node1500
begin
    Reply(1500);
    if (weapon == 3) then begin
        item_caps_adjust(dude_obj, -1500);
        removed_qty := obj_is_carrying_obj_pid(dude_obj, 94);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 94);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 94);
                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(dude_obj, restock_obj);
                        add_obj_to_inven(dude_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                        inven_unwield(dude_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
            if (restock_amt == 0) then begin
                toRemove_qty := 1;
                while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 94)) do begin
                    restock_obj := obj_carrying_pid_obj(dude_obj, 94);
                    rm_obj_from_inven(dude_obj, restock_obj);
                    destroy_object(restock_obj);
                    toRemove_qty := toRemove_qty - 1;
                end
            end
            else begin
                destroy_object(restock_obj);
            end
        end
        restock_obj := 0;
        restock_amt := 0;
        set_local_var(10, 385);
    end
    else begin
        item_caps_adjust(dude_obj, -2000);
        removed_qty := obj_is_carrying_obj_pid(dude_obj, 10);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 10);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 10);
                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(dude_obj, restock_obj);
                        add_obj_to_inven(dude_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                        inven_unwield(dude_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
            if (restock_amt == 0) then begin
                toRemove_qty := 1;
                while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 10)) do begin
                    restock_obj := obj_carrying_pid_obj(dude_obj, 10);
                    rm_obj_from_inven(dude_obj, restock_obj);
                    destroy_object(restock_obj);
                    toRemove_qty := toRemove_qty - 1;
                end
            end
            else begin
                destroy_object(restock_obj);
            end
        end
        restock_obj := 0;
        restock_amt := 0;
        set_local_var(10, 287);
    end
    set_local_var(9, game_time + (24 * (60 * (60 * 10))));
    giq_option(4, NAME, 1501, Node999, NEUTRAL_REACTION);
end

procedure Node1550
begin
    Reply(1550);
    item_caps_adjust(dude_obj, -2000);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 313);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 313);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 313);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 313)) do begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 313);
                rm_obj_from_inven(dude_obj, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    set_local_var(10, 398);
    set_local_var(9, game_time + (2 * (24 * (60 * (60 * 10)))));
    giq_option(4, NAME, 1551, Node999, NEUTRAL_REACTION);
end

procedure Node1600
begin
    Reply(1600);
    if (weapon == 5) then begin
        item_caps_adjust(dude_obj, -3000);
        removed_qty := obj_is_carrying_obj_pid(dude_obj, 143);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 143);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 143);
                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(dude_obj, restock_obj);
                        add_obj_to_inven(dude_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                        inven_unwield(dude_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
            if (restock_amt == 0) then begin
                toRemove_qty := 1;
                while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 143)) do begin
                    restock_obj := obj_carrying_pid_obj(dude_obj, 143);
                    rm_obj_from_inven(dude_obj, restock_obj);
                    destroy_object(restock_obj);
                    toRemove_qty := toRemove_qty - 1;
                end
            end
            else begin
                destroy_object(restock_obj);
            end
        end
        restock_obj := 0;
        restock_amt := 0;
        set_local_var(10, 593);
    end
    else begin
        item_caps_adjust(dude_obj, -2000);
        removed_qty := obj_is_carrying_obj_pid(dude_obj, 18);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 18);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 18);
                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(dude_obj, restock_obj);
                        add_obj_to_inven(dude_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                        inven_unwield(dude_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
            if (restock_amt == 0) then begin
                toRemove_qty := 1;
                while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 18)) do begin
                    restock_obj := obj_carrying_pid_obj(dude_obj, 18);
                    rm_obj_from_inven(dude_obj, restock_obj);
                    destroy_object(restock_obj);
                    toRemove_qty := toRemove_qty - 1;
                end
            end
            else begin
                destroy_object(restock_obj);
            end
        end
        restock_obj := 0;
        restock_amt := 0;
        set_local_var(10, 404);
    end
    set_local_var(9, game_time + (3 * (24 * (60 * (60 * 10)))));
    giq_option(4, NAME, 1601, Node999, NEUTRAL_REACTION);
end

procedure Node1650
begin
    Reply(1650);
    if (weapon == 7) then begin
        item_caps_adjust(dude_obj, -4000);
        removed_qty := obj_is_carrying_obj_pid(dude_obj, 242);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 242);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 242);
                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(dude_obj, restock_obj);
                        add_obj_to_inven(dude_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                        inven_unwield(dude_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
            if (restock_amt == 0) then begin
                toRemove_qty := 1;
                while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 242)) do begin
                    restock_obj := obj_carrying_pid_obj(dude_obj, 242);
                    rm_obj_from_inven(dude_obj, restock_obj);
                    destroy_object(restock_obj);
                    toRemove_qty := toRemove_qty - 1;
                end
            end
            else begin
                destroy_object(restock_obj);
            end
        end
        restock_obj := 0;
        restock_amt := 0;
        set_local_var(10, 598);
    end
    else begin
        item_caps_adjust(dude_obj, -4000);
        removed_qty := obj_is_carrying_obj_pid(dude_obj, 23);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 23);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 23);
                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(dude_obj, restock_obj);
                        add_obj_to_inven(dude_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                        inven_unwield(dude_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
            if (restock_amt == 0) then begin
                toRemove_qty := 1;
                while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 23)) do begin
                    restock_obj := obj_carrying_pid_obj(dude_obj, 23);
                    rm_obj_from_inven(dude_obj, restock_obj);
                    destroy_object(restock_obj);
                    toRemove_qty := toRemove_qty - 1;
                end
            end
            else begin
                destroy_object(restock_obj);
            end
        end
        restock_obj := 0;
        restock_amt := 0;
        set_local_var(10, 405);
    end
    set_local_var(9, game_time + (4 * (24 * (60 * (60 * 10)))));
    giq_option(4, NAME, 1651, Node999, NEUTRAL_REACTION);
end

procedure Node1700
begin
    Reply(1700);
    giq_option(4, NAME, 1701, Barter, NEUTRAL_REACTION);
    giq_option(4, NAME, 1702, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 1703, Barter, NEUTRAL_REACTION);
    giq_option(-3, NAME, 1704, Node999, NEUTRAL_REACTION);
end

procedure Node1750
begin
    Reply(1750);
    restock_obj := create_object(local_var(10), 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    set_local_var(10, 0);
    giq_option(4, NAME, 1751, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 1752, Node999, NEUTRAL_REACTION);
end

procedure Barter
begin
    table_swap := tile_contains_pid_obj(16473, 0, 168);
    move_obj_inven_to_obj(Sabrina, table_swap);
    restock_obj := create_object(4, 0, 0);
    add_mult_objs_to_inven(self_obj, restock_obj, 1);
    move_obj_inven_to_obj(Sabrina_table, Sabrina);
    if (local_var(8) == 1) then begin
        if ((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) then begin
            gdialog_mod_barter(50 - 15);
        end
        else begin
            gdialog_mod_barter(50);
        end
    end
    else begin
        if ((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) then begin
            gdialog_mod_barter(75 - 15);
        end
        else begin
            gdialog_mod_barter(75);
        end
    end
    if ((dude_iq + has_trait(TRAIT_PERK, dude_obj, PERK_smooth_talker)) <= 3) then begin
        call Node1150();
    end
    else begin
        call Node1100();
    end
end

procedure Open_hours
begin
    if ((game_time_hour < 600) or (2000 < game_time_hour)) then begin
        return 0;
    end
    else begin
        return 1;
    end
end

procedure Choose_upgrade_weapon
begin
    if ((weapon < 1) and obj_carrying_pid_obj(dude_obj, 18)) then begin
        call Node1250();
    end
    else begin
        if ((weapon < 2) and obj_carrying_pid_obj(dude_obj, 10)) then begin
            call Node1300();
        end
        else begin
            if ((weapon < 3) and obj_carrying_pid_obj(dude_obj, 94)) then begin
                call Node1350();
            end
            else begin
                if ((weapon < 4) and obj_carrying_pid_obj(dude_obj, 23)) then begin
                    call Node1400();
                end
                else begin
                    if ((weapon < 5) and obj_carrying_pid_obj(dude_obj, 143)) then begin
                        call Node1410();
                    end
                    else begin
                        if ((weapon < 6) and obj_carrying_pid_obj(dude_obj, 313)) then begin
                            call Node1420();
                        end
                        else begin
                            if ((weapon < 7) and obj_carrying_pid_obj(dude_obj, 242)) then begin
                                call Node1430();
                            end
                            else begin
                                if (weapon == 0) then begin
                                    call Node1200();
                                end
                                else begin
                                    call Node1450();
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure UpgradeDoubleShotgun
begin
    weapon := 3;
    call Node1500();
end

procedure UpgradeSniper
begin
    weapon := 5;
    call Node1600();
end

procedure UpgradeCombatShotgun
begin
    weapon := 7;
    call Node1650();
end

procedure UpgradeHunter
begin
    weapon := 2;
    call Node1500();
end

procedure UpgradeDesert
begin
    weapon := 1;
    call Node1600();
end

procedure UpgradeAssault
begin
    weapon := 4;
    call Node1650();
end
