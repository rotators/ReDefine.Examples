variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable lPartyWornArmor;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure map_enter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure Node998;
procedure Node999;
procedure Node500;
procedure Node550;
procedure Node600;
procedure Node600_second_page;
procedure Node650;
procedure Node700;
procedure Node700_second_page;
procedure Node750;
procedure Node800;
procedure Node800_second_page;
procedure Node900;
procedure Node950;
procedure Node950_second_page;
procedure Node1000;
procedure Node1050;
procedure Node1100;
procedure Node1100_second_page;
procedure Node1150;
procedure Node1200;
procedure Node1250;
procedure Node1300;
procedure Node1350;
procedure Node1400;
procedure Node1450;
procedure Node1500;
procedure Node1550;
procedure Node1600;
procedure Node1650;
procedure Node1700;
procedure Node1750;
procedure Node1800;
procedure Node1850;
procedure Node1900;
procedure Node1950;
procedure Node2000;
procedure Node2050;
procedure Node2100;
procedure Node2150;
procedure Node2200;
procedure Node2250;
procedure Node2300;
procedure Node2350;
procedure Node2400;
procedure Node2450;
procedure Node2500;
procedure Node2550;
procedure Node2600;
procedure Node2650;
procedure Node2700;
procedure Answers_first_page;
procedure Answers_second_page;
procedure Persuasion;
procedure Equipment;
procedure Im_James;
procedure Im_Jess;
procedure Im_Erick;
procedure Im_Darrell;
procedure Im_Max;
procedure Im_nobody;
procedure Bridge_Leonard;
procedure Bridge_Tramell;
procedure Bridge_Cecilia;
procedure Bridge_Robert;
procedure Bridge_Chris;
procedure Bridge_Feargus;
procedure Give_flamethrower;
procedure Give_rocketlauncher;
procedure Give_minigun;
procedure Give_supersledge;
procedure Node_bridge_for_Max;

import variable Dave;
import variable Crate_1;
import variable Crate_2;
import variable Crate_3;

variable answer;
variable ans_state;
variable chosen_name;
variable ChLeonard;
variable ChTramell;
variable ChCecilia;
variable ChRobert;
variable ChChris;
variable ChFeargus;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777294) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777294)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778049) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778049)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778050) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778050)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778051) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778051)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
    Dave := self_obj;
end

procedure critter_p_proc
begin
    if ((((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 3) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 113) and (not((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) or (obj_pid(critter_inven_obj(party_member_obj(16777779), INVEN_TYPE_WORN)) == 3) or (obj_pid(critter_inven_obj(party_member_obj(16777779), INVEN_TYPE_WORN)) == 113)) and (not((party_member_obj(16777811) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 64) == 0)) or (obj_pid(critter_inven_obj(party_member_obj(16777811), INVEN_TYPE_WORN)) == 3) or (obj_pid(critter_inven_obj(party_member_obj(16777811), INVEN_TYPE_WORN)) == 113)) and (not((party_member_obj(16777814) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 128) == 0)) or (obj_pid(critter_inven_obj(party_member_obj(16777814), INVEN_TYPE_WORN)) == 3) or (obj_pid(critter_inven_obj(party_member_obj(16777814), INVEN_TYPE_WORN)) == 113)) and (global_var(GVAR_G_HUNTERS_COUNTER) == 0)) == 0) and not(game_ui_is_disabled) and obj_can_see_obj(self_obj, dude_obj)) then begin
        attack(dude_obj);
    end
    if ((global_var(GVAR_ENEMY_OBRODA) == 1) and obj_can_see_obj(self_obj, dude_obj)) then begin
        attack(dude_obj);
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_ENEMY_OBRODA, 1);
    end
end

procedure talk_p_proc
begin
    anim(dude_obj, 1000, rotation_to_tile(dude_tile, tile_num(self_obj)));
    anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
    start_gdialog(408, self_obj, 4, -1, -1);
    gsay_start;
    if ((global_var(GVAR_G_GAUSS_RIFLE) == 5) and (((2 * (60 * (60 * 10))) + map_var(5)) <= game_time)) then begin
        call Node1150();
    end
    else begin
        if ((dude_iq + has_trait(TRAIT_PERK, dude_obj, PERK_smooth_talker)) <= 3) then begin
            call Node1300();
        end
        else begin
            if (local_var(4) == 1) then begin
                call Node800();
            end
            else begin
                if (dude_perception > 5) then begin
                    call Node550();
                end
                else begin
                    call Node500();
                end
            end
        end
    end
    gsay_end;
    end_dialogue;
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 1) then begin
        display_mstr(150);
    end
    else begin
        display_mstr(100);
    end
end

procedure description_p_proc
begin
    script_overrides;
    if (local_var(4) == 1) then begin
        if (combat_is_initialized) then begin
            display_mstr(251);
        end
        else begin
            display_mstr(250);
        end
    end
    else begin
        if (not(combat_is_initialized)) then begin
            display_mstr(200);
        end
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 10) then begin
        float_msg(self_obj, mstr(random(300, 302)), FLOAT_MSG_YELLOW);
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 271);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_PEASANTS_NO_TALKING);
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_ENEMY_OBRODA, 1);
    end
end

procedure destroy_p_proc
begin
end

procedure Node998
begin
    set_global_var(GVAR_ENEMY_OBRODA, 1);
end

procedure Node999
begin
    anim(self_obj, 1000, 2);
    chosen_name := 0;
end

procedure Node500
begin
    Reply(500);
    giq_option(4, NAME, 501, Node600, NEUTRAL_REACTION);
end

procedure Node550
begin
    Reply(550);
    giq_option(4, NAME, 551, Node600, NEUTRAL_REACTION);
end

procedure Node600
begin
    Reply(600);
    set_local_var(4, 1);
    call Answers_first_page();
    if (answer >= 8) then begin
        giq_option(4, NAME, 616, Node600_second_page, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 615, Node999, NEUTRAL_REACTION);
    end
end

procedure Node600_second_page
begin
    Reply(600);
    giq_option(4, NAME, 617, Node600, NEUTRAL_REACTION);
    call Answers_second_page();
    giq_option(4, NAME, 615, Node999, NEUTRAL_REACTION);
end

procedure Node650
begin
    Reply(650);
    set_local_var(5, local_var(5) bwor 1);
    giq_option(4, NAME, 651, Node750, NEUTRAL_REACTION);
    giq_option(4, NAME, 652, Node700, NEUTRAL_REACTION);
end

procedure Node700
begin
    Reply(700);
    call Answers_first_page();
    if (answer >= 8) then begin
        giq_option(4, NAME, 616, Node700_second_page, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 701, Node999, NEUTRAL_REACTION);
    end
end

procedure Node700_second_page
begin
    Reply(700);
    giq_option(4, NAME, 617, Node700, NEUTRAL_REACTION);
    call Answers_second_page();
    giq_option(4, NAME, 701, Node999, NEUTRAL_REACTION);
end

procedure Node750
begin
    Reply(750);
    giq_option(4, NAME, 751, Node998, NEUTRAL_REACTION);
end

procedure Node800
begin
    if (dude_perception > 5) then begin
        Reply(801);
    end
    else begin
        Reply(800);
    end
    call Answers_first_page();
    if (answer >= 8) then begin
        giq_option(4, NAME, 616, Node800_second_page, NEUTRAL_REACTION);
    end
    else begin
        if ((dude_perception > 5) and ((local_var(5) bwand 2) == 0)) then begin
            giq_option(4, NAME, 802, Node900, NEUTRAL_REACTION);
        end
        giq_option(4, NAME, 803, Node999, NEUTRAL_REACTION);
    end
end

procedure Node800_second_page
begin
    if (dude_perception > 5) then begin
        Reply(801);
    end
    else begin
        Reply(800);
    end
    giq_option(4, NAME, 617, Node800, NEUTRAL_REACTION);
    call Answers_second_page();
    if ((dude_perception > 5) and ((local_var(5) bwand 2) == 0)) then begin
        giq_option(4, NAME, 802, Node900, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 803, Node999, NEUTRAL_REACTION);
end

procedure Node900
begin
    Reply(900);
    set_local_var(5, local_var(5) bwor 2);
    giq_option(4, NAME, 901, Node950, NEUTRAL_REACTION);
end

procedure Node950
begin
    Reply(950);
    call Answers_first_page();
    if (answer >= 8) then begin
        giq_option(4, NAME, 616, Node950_second_page, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 951, Node999, NEUTRAL_REACTION);
    end
end

procedure Node950_second_page
begin
    Reply(950);
    giq_option(4, NAME, 617, Node700, NEUTRAL_REACTION);
    call Answers_second_page();
    giq_option(4, NAME, 951, Node999, NEUTRAL_REACTION);
end

procedure Node1000
begin
    Reply(1000);
    giq_option(4, NAME, 1001, Node1050, NEUTRAL_REACTION);
    giq_option(4, NAME, 1002, Node998, NEUTRAL_REACTION);
end

procedure Node1050
begin
    Reply(1050);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 392);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 392);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 392);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 392)) do begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 392);
                rm_obj_from_inven(dude_obj, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 358);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 358);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 358);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 358)) do begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 358);
                rm_obj_from_inven(dude_obj, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    restock_obj := create_object(392, 0, 0);
    add_mult_objs_to_inven(Crate_1, restock_obj, 1);
    set_global_var(GVAR_G_GAUSS_RIFLE, 6);
    set_global_var(GVAR_PTR_GABRIEL_REACTIONS, global_var(GVAR_PTR_GABRIEL_REACTIONS) bwand (-1 - 1073741824));
    give_exp_points(500);
    display_msg(g_mstr(100) + 500 + g_mstr(101));
    giq_option(4, NAME, 1051, Node1100, NEUTRAL_REACTION);
    giq_option(4, NAME, 1052, Node999, NEUTRAL_REACTION);
end

procedure Node1100
begin
    Reply(1100);
    call Answers_first_page();
    if (answer >= 8) then begin
        giq_option(4, NAME, 616, Node1100_second_page, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1101, Node999, NEUTRAL_REACTION);
    end
end

procedure Node1100_second_page
begin
    Reply(1100);
    giq_option(4, NAME, 617, Node1100, NEUTRAL_REACTION);
    call Answers_second_page();
    giq_option(4, NAME, 1101, Node999, NEUTRAL_REACTION);
end

procedure Node1150
begin
    Reply(1150);
    if (obj_carrying_pid_obj(dude_obj, 392)) then begin
        giq_option(4, NAME, 1151, Node1200, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1152, Node1250, NEUTRAL_REACTION);
    if (obj_carrying_pid_obj(dude_obj, 392)) then begin
        giq_option(-3, NAME, 1153, Node1200, NEUTRAL_REACTION);
    end
    giq_option(-3, NAME, 1154, Node1250, NEUTRAL_REACTION);
end

procedure Node1200
begin
    Reply(1200);
    removed_qty := obj_is_carrying_obj_pid(dude_obj, 392);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(dude_obj, 392);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 392);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(dude_obj, restock_obj);
                    add_obj_to_inven(dude_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(dude_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 392)) do begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 392);
                rm_obj_from_inven(dude_obj, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    restock_obj := create_object(392, 0, 0);
    add_mult_objs_to_inven(Crate_1, restock_obj, 1);
    if (obj_carrying_pid_obj(dude_obj, 358)) then begin
        removed_qty := obj_is_carrying_obj_pid(dude_obj, 358);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(dude_obj, 358);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(dude_obj, 358);
                if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 0) then begin
                        restock_obj := critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(dude_obj, restock_obj);
                        add_obj_to_inven(dude_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                        inven_unwield(dude_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(dude_obj, restock_obj, removed_qty);
            if (restock_amt == 0) then begin
                toRemove_qty := 1;
                while ((toRemove_qty > 0) and obj_carrying_pid_obj(dude_obj, 358)) do begin
                    restock_obj := obj_carrying_pid_obj(dude_obj, 358);
                    rm_obj_from_inven(dude_obj, restock_obj);
                    destroy_object(restock_obj);
                    toRemove_qty := toRemove_qty - 1;
                end
            end
            else begin
                destroy_object(restock_obj);
            end
        end
        restock_obj := 0;
        restock_amt := 0;
        restock_obj := create_object(358, 0, 0);
        add_mult_objs_to_inven(Crate_1, restock_obj, 1);
    end
    set_global_var(GVAR_G_GAUSS_RIFLE, 6);
    set_global_var(GVAR_PTR_GABRIEL_REACTIONS, global_var(GVAR_PTR_GABRIEL_REACTIONS) bwand (-1 - 1073741824));
    give_exp_points(500);
    display_msg(g_mstr(100) + 500 + g_mstr(101));
    giq_option(4, NAME, 1201, Node1100, NEUTRAL_REACTION);
    giq_option(4, NAME, 1202, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 1203, Node999, NEUTRAL_REACTION);
end

procedure Node1250
begin
    Reply(1250);
    if (obj_carrying_pid_obj(dude_obj, 392)) then begin
        giq_option(4, NAME, 1251, Node1200, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 1252, Node998, NEUTRAL_REACTION);
    giq_option(-3, NAME, 1253, Node998, NEUTRAL_REACTION);
end

procedure Node1300
begin
    Reply(1300);
    if (dude_gender == 0) then begin
        giq_option(-3, NAME, 1301, Node1350, NEUTRAL_REACTION);
    end
    if (dude_gender == 1) then begin
        giq_option(-3, NAME, 1301, Node1400, NEUTRAL_REACTION);
    end
end

procedure Node1350
begin
    Reply(1350);
    giq_option(-3, NAME, 1351, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 1352, Node998, NEUTRAL_REACTION);
end

procedure Node1400
begin
    Reply(1400);
    giq_option(-3, NAME, 1401, Node999, NEUTRAL_REACTION);
    giq_option(-3, NAME, 1402, Node998, NEUTRAL_REACTION);
end

procedure Node1450
begin
    Reply(1450);
    if (dude_skill(SKILL_SPEECH) > 100) then begin
        giq_option(4, NAME, 1451, Node1500, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1451, Node1550, NEUTRAL_REACTION);
    end
end

procedure Node1500
begin
    Reply(1500);
    call Equipment();
end

procedure Node1550
begin
    Reply(1550);
    giq_option(4, NAME, 1551, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 1552, Node998, NEUTRAL_REACTION);
end

procedure Node1600
begin
    Reply(1600);
    if (dude_skill(SKILL_SPEECH) > 110) then begin
        giq_option(4, NAME, 1601, Node1650, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1601, Node1700, NEUTRAL_REACTION);
    end
end

procedure Node1650
begin
    Reply(1650);
    call Equipment();
end

procedure Node1700
begin
    Reply(1700);
    giq_option(4, NAME, 1701, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 1702, Node998, NEUTRAL_REACTION);
end

procedure Node1750
begin
    Reply(1750);
    if (dude_skill(SKILL_SPEECH) > 120) then begin
        giq_option(4, NAME, 1751, Node1800, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1751, Node1850, NEUTRAL_REACTION);
    end
end

procedure Node1800
begin
    Reply(1800);
    call Equipment();
end

procedure Node1850
begin
    Reply(1850);
    giq_option(4, NAME, 1851, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 1852, Node998, NEUTRAL_REACTION);
end

procedure Node1900
begin
    Reply(1900);
    if (dude_skill(SKILL_SPEECH) >= 130) then begin
        giq_option(4, NAME, 1901, Node1950, NEUTRAL_REACTION);
    end
    else begin
        giq_option(4, NAME, 1901, Node2000, NEUTRAL_REACTION);
    end
end

procedure Node1950
begin
    Reply(1950);
    call Equipment();
end

procedure Node2000
begin
    Reply(2000);
    giq_option(4, NAME, 2001, Node999, NEUTRAL_REACTION);
    giq_option(4, NAME, 2002, Node998, NEUTRAL_REACTION);
end

procedure Node2050
begin
    Reply(2050);
    giq_option(4, NAME, 2051, Node998, NEUTRAL_REACTION);
end

procedure Node2100
begin
    Reply(2100);
    set_local_var(6, local_var(6) + 1);
    if (ChLeonard == 1) then begin
        set_local_var(5, local_var(5) bwor 4);
    end
    if (ChTramell == 1) then begin
        set_local_var(5, local_var(5) bwor 16);
    end
    if (ChCecilia == 1) then begin
        set_local_var(5, local_var(5) bwor 128);
    end
    if (ChRobert == 1) then begin
        set_local_var(5, local_var(5) bwor 256);
    end
    if (ChChris == 1) then begin
        set_local_var(5, local_var(5) bwor 1024);
    end
    if (ChFeargus == 1) then begin
        set_local_var(5, local_var(5) bwor 2048);
    end
    ChLeonard := 0;
    ChTramell := 0;
    ChCecilia := 0;
    ChRobert := 0;
    ChChris := 0;
    ChFeargus := 0;
    giq_option(4, NAME, 2101, Node999, NEUTRAL_REACTION);
end

procedure Node2150
begin
    Reply(2150);
    set_local_var(6, local_var(6) + 1);
    set_map_var(4, map_var(4) bwor 1);
    set_local_var(5, local_var(5) bwor 8);
    restock_obj := create_object(39, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 39);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 39);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 39);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 39)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 39);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    give_exp_points(200);
    display_msg(g_mstr(100) + 200 + g_mstr(101));
    giq_option(4, NAME, 2151, Node999, NEUTRAL_REACTION);
end

procedure Node2200
begin
    Reply(2200);
    set_local_var(6, local_var(6) + 1);
    set_map_var(4, map_var(4) bwor 2);
    set_local_var(5, local_var(5) bwor 32);
    restock_obj := create_object(47, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 2);
    restock_obj := create_object(91, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 2);
    removed_qty := obj_is_carrying_obj_pid(Crate_3, 47);
    if (2 < removed_qty) then begin
        removed_qty := 2;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_3, 47);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_3, 47);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_3, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_3, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_3, restock_obj);
                    add_obj_to_inven(Crate_3, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_3, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_3, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_3);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_3, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 2;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_3, 47)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_3, 47);
                rm_obj_from_inven(Crate_3, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    removed_qty := obj_is_carrying_obj_pid(Crate_3, 91);
    if (2 < removed_qty) then begin
        removed_qty := 2;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_3, 91);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_3, 91);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_3, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_3, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_3, restock_obj);
                    add_obj_to_inven(Crate_3, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_3, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_3, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_3);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_3, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 2;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_3, 91)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_3, 91);
                rm_obj_from_inven(Crate_3, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    give_exp_points(200);
    display_msg(g_mstr(100) + 200 + g_mstr(101));
    giq_option(4, NAME, 2201, Node999, NEUTRAL_REACTION);
end

procedure Node2250
begin
    Reply(2250);
    set_local_var(6, local_var(6) + 1);
    set_map_var(4, map_var(4) bwor 4);
    set_local_var(5, local_var(5) bwor 64);
    restock_obj := create_object(24, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 24);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 24);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 24);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 24)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 24);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    give_exp_points(200);
    display_msg(g_mstr(100) + 200 + g_mstr(101));
    giq_option(4, NAME, 2251, Node999, NEUTRAL_REACTION);
end

procedure Node2300
begin
    Reply(2300);
    set_local_var(6, local_var(6) + 1);
    set_map_var(4, map_var(4) bwor 8);
    set_local_var(5, local_var(5) bwor 512);
    restock_obj := create_object(3, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    restock_obj := create_object(28, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    restock_obj := create_object(39, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    restock_obj := create_object(40, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 5);
    removed_qty := obj_is_carrying_obj_pid(Crate_2, 3);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_2, 3);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_2, 3);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_2, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_2, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_2, restock_obj);
                    add_obj_to_inven(Crate_2, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_2, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_2, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_2);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_2, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_2, 3)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_2, 3);
                rm_obj_from_inven(Crate_2, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 28);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 28);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 28);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 28)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 28);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    removed_qty := obj_is_carrying_obj_pid(Crate_2, 39);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_2, 39);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_2, 39);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_2, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_2, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_2, restock_obj);
                    add_obj_to_inven(Crate_2, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_2, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_2, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_2);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_2, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_2, 39)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_2, 39);
                rm_obj_from_inven(Crate_2, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    removed_qty := obj_is_carrying_obj_pid(Crate_3, 40);
    if (5 < removed_qty) then begin
        removed_qty := 5;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_3, 40);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_3, 40);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_3, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_3, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_3, restock_obj);
                    add_obj_to_inven(Crate_3, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_3, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_3, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_3);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_3, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 5;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_3, 40)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_3, 40);
                rm_obj_from_inven(Crate_3, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    give_exp_points(200);
    display_msg(g_mstr(100) + 200 + g_mstr(101));
    giq_option(4, NAME, 2301, Node999, NEUTRAL_REACTION);
end

procedure Node2350
begin
    Reply(2350);
    set_local_var(6, local_var(6) + 1);
    set_map_var(4, map_var(4) bwor 16);
    set_local_var(5, local_var(5) bwor 4096);
    give_exp_points(200);
    display_msg(g_mstr(100) + 200 + g_mstr(101));
    giq_option(4, NAME, 2351, Give_flamethrower, NEUTRAL_REACTION);
    giq_option(4, NAME, 2352, Give_rocketlauncher, NEUTRAL_REACTION);
    giq_option(4, NAME, 2353, Give_minigun, NEUTRAL_REACTION);
    giq_option(4, NAME, 2354, Give_supersledge, NEUTRAL_REACTION);
end

procedure Node2400
begin
    Reply(2400);
    giq_option(4, NAME, 2401, Node999, NEUTRAL_REACTION);
end

procedure Node2450
begin
    Reply(2450);
    set_map_var(4, map_var(4) bwor 32);
    restock_obj := create_object(16, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 16);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 16);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 16);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 16)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 16);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    giq_option(4, NAME, 2451, Node999, NEUTRAL_REACTION);
end

procedure Node2500
begin
    Reply(2500);
    set_map_var(4, map_var(4) bwor 32);
    restock_obj := create_object(144, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 2);
    removed_qty := obj_is_carrying_obj_pid(Crate_3, 144);
    if (2 < removed_qty) then begin
        removed_qty := 2;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_3, 144);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_3, 144);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_3, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_3, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_3, restock_obj);
                    add_obj_to_inven(Crate_3, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_3, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_3, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_3);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_3, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 2;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_3, 144)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_3, 144);
                rm_obj_from_inven(Crate_3, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    giq_option(4, NAME, 2501, Node999, NEUTRAL_REACTION);
end

procedure Node2550
begin
    Reply(2550);
    set_map_var(4, map_var(4) bwor 32);
    restock_obj := create_object(16, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    restock_obj := create_object(144, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 2);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 16);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 16);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 16);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 16)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 16);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    removed_qty := obj_is_carrying_obj_pid(Crate_3, 144);
    if (2 < removed_qty) then begin
        removed_qty := 2;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_3, 144);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_3, 144);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_3, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_3, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_3, restock_obj);
                    add_obj_to_inven(Crate_3, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_3, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_3, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_3);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_3, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 2;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_3, 144)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_3, 144);
                rm_obj_from_inven(Crate_3, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    giq_option(4, NAME, 2551, Node999, NEUTRAL_REACTION);
end

procedure Node2600
begin
    Reply(2600);
    set_local_var(6, local_var(6) + 1);
    set_map_var(4, map_var(4) bwor 32);
    restock_obj := create_object(16, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 16);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 16);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 16);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 16)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 16);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    giq_option(4, NAME, 2601, Node999, NEUTRAL_REACTION);
end

procedure Node2650
begin
    Reply(2650);
    set_local_var(6, local_var(6) + 1);
    set_map_var(4, map_var(4) bwor 32);
    restock_obj := create_object(144, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 2);
    removed_qty := obj_is_carrying_obj_pid(Crate_3, 144);
    if (2 < removed_qty) then begin
        removed_qty := 2;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_3, 144);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_3, 144);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_3, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_3, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_3, restock_obj);
                    add_obj_to_inven(Crate_3, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_3, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_3, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_3);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_3, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 2;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_3, 144)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_3, 144);
                rm_obj_from_inven(Crate_3, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    giq_option(4, NAME, 2651, Node999, NEUTRAL_REACTION);
end

procedure Node2700
begin
    Reply(2700);
    set_local_var(6, local_var(6) + 1);
    set_map_var(4, map_var(4) bwor 32);
    restock_obj := create_object(16, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    restock_obj := create_object(144, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 2);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 16);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 16);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 16);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 16)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 16);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    removed_qty := obj_is_carrying_obj_pid(Crate_3, 144);
    if (2 < removed_qty) then begin
        removed_qty := 2;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_3, 144);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_3, 144);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_3, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_3, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_3, restock_obj);
                    add_obj_to_inven(Crate_3, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_3, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_3, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_3);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_3, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 2;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_3, 144)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_3, 144);
                rm_obj_from_inven(Crate_3, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    giq_option(4, NAME, 2701, Node999, NEUTRAL_REACTION);
end

procedure Answers_first_page
begin
    answer := 0;
    ans_state := 0;
    if ((local_var(5) bwand 1) == 0) then begin
        giq_option(4, NAME, dude_name + mstr(601 + (dude_gender == 1)), Node650, NEUTRAL_REACTION);
        answer := answer + 1;
    end
    if ((global_var(GVAR_G_GAUSS_RIFLE) == 5) and obj_carrying_pid_obj(dude_obj, 392)) then begin
        giq_option(4, NAME, 603, Node1000, NEUTRAL_REACTION);
        answer := answer + 1;
    end
    if ((global_var(GVAR_G_LEONARD_KNOWN) == 1) and ((local_var(5) bwand 4) == 0)) then begin
        giq_option(4, NAME, 604, Bridge_Leonard, NEUTRAL_REACTION);
        answer := answer + 1;
    end
    if ((global_var(GVAR_G_JAMES_KNOWN) == 1) and ((local_var(5) bwand 8) == 0)) then begin
        giq_option(4, NAME, 605, Im_James, NEUTRAL_REACTION);
        answer := answer + 1;
    end
    if ((global_var(GVAR_G_TRAMELL_KNOWN) == 1) and ((local_var(5) bwand 16) == 0)) then begin
        giq_option(4, NAME, 606, Bridge_Tramell, NEUTRAL_REACTION);
        answer := answer + 1;
    end
    if ((global_var(GVAR_G_JESS_KNOWN) == 1) and ((local_var(5) bwand 32) == 0)) then begin
        giq_option(4, NAME, 607, Im_Jess, NEUTRAL_REACTION);
        answer := answer + 1;
    end
    if (obj_carrying_pid_obj(dude_obj, 548) or (global_var(GVAR_G_ERICK_KNOWN) == 1) and ((local_var(5) bwand 64) == 0)) then begin
        giq_option(4, NAME, 608, Im_Erick, NEUTRAL_REACTION);
        answer := answer + 1;
        if (answer == 7) then begin
            ans_state := 1;
        end
    end
    if ((global_var(GVAR_G_CECILIA_KNOWN) == 1) and ((local_var(5) bwand 128) == 0)) then begin
        if (answer < 7) then begin
            giq_option(4, NAME, 609, Bridge_Cecilia, NEUTRAL_REACTION);
        end
        answer := answer + 1;
        if (answer == 7) then begin
            ans_state := 2;
        end
    end
    if (obj_carrying_pid_obj(dude_obj, 546) or (global_var(GVAR_G_ROBERT_KNOWN) == 1) and ((local_var(5) bwand 256) == 0)) then begin
        if (answer < 7) then begin
            giq_option(4, NAME, 610, Bridge_Robert, NEUTRAL_REACTION);
        end
        answer := answer + 1;
        if (answer == 7) then begin
            ans_state := 3;
        end
    end
    if ((global_var(GVAR_G_DARRELL_KNOWN) == 1) and ((local_var(5) bwand 512) == 0)) then begin
        if (answer < 7) then begin
            giq_option(4, NAME, 611, Im_Darrell, NEUTRAL_REACTION);
        end
        answer := answer + 1;
        if (answer == 7) then begin
            ans_state := 4;
        end
    end
    if ((global_var(GVAR_G_CHRIS_KNOWN) == 1) and ((local_var(5) bwand 1024) == 0)) then begin
        if (answer < 7) then begin
            giq_option(4, NAME, 612, Bridge_Chris, NEUTRAL_REACTION);
        end
        answer := answer + 1;
        if (answer == 7) then begin
            ans_state := 5;
        end
    end
    if (obj_carrying_pid_obj(dude_obj, 547) or (global_var(GVAR_G_FEARGUS_KNOWN) == 1) and ((local_var(5) bwand 2048) == 0)) then begin
        if (answer < 7) then begin
            giq_option(4, NAME, 613, Bridge_Feargus, NEUTRAL_REACTION);
        end
        answer := answer + 1;
        if (answer == 7) then begin
            ans_state := 6;
        end
    end
    if ((global_var(GVAR_G_MAX_REGISTRATION) >= 2) and (((local_var(5) bwand 4096) == 0) or ((global_var(GVAR_G_MAX_EQUIP) != 0) and ((map_var(4) bwand 32) == 0)))) then begin
        if (answer < 7) then begin
            giq_option(4, NAME, 614, Im_Max, NEUTRAL_REACTION);
        end
        answer := answer + 1;
        if (answer == 7) then begin
            ans_state := 7;
        end
    end
end

procedure Answers_second_page
begin
    if ((ans_state < 2) and (global_var(GVAR_G_CECILIA_KNOWN) == 1) and ((local_var(5) bwand 128) == 0)) then begin
        giq_option(4, NAME, 609, Bridge_Cecilia, NEUTRAL_REACTION);
    end
    if ((ans_state < 3) and (obj_carrying_pid_obj(dude_obj, 546) or (global_var(GVAR_G_ROBERT_KNOWN) == 1)) and ((local_var(5) bwand 256) == 0)) then begin
        giq_option(4, NAME, 610, Bridge_Robert, NEUTRAL_REACTION);
    end
    if ((ans_state < 4) and (global_var(GVAR_G_DARRELL_KNOWN) == 1) and ((local_var(5) bwand 512) == 0)) then begin
        giq_option(4, NAME, 611, Im_Darrell, NEUTRAL_REACTION);
    end
    if ((ans_state < 5) and (global_var(GVAR_G_CHRIS_KNOWN) == 1) and ((local_var(5) bwand 1024) == 0)) then begin
        giq_option(4, NAME, 612, Bridge_Chris, NEUTRAL_REACTION);
    end
    if ((ans_state < 6) and (obj_carrying_pid_obj(dude_obj, 547) or (global_var(GVAR_G_FEARGUS_KNOWN) == 1)) and ((local_var(5) bwand 2048) == 0)) then begin
        giq_option(4, NAME, 613, Bridge_Feargus, NEUTRAL_REACTION);
    end
    if ((ans_state < 7) and (global_var(GVAR_G_MAX_REGISTRATION) >= 2) and (((local_var(5) bwand 4096) == 0) or ((global_var(GVAR_G_MAX_EQUIP) != 0) and ((map_var(4) bwand 32) == 0)))) then begin
        giq_option(4, NAME, 614, Im_Max, NEUTRAL_REACTION);
    end
end

procedure Persuasion
begin
    if (local_var(6) == 1) then begin
        call Node1450();
    end
    if (local_var(6) == 2) then begin
        call Node1600();
    end
    if (local_var(6) == 3) then begin
        call Node1750();
    end
    if (local_var(6) == 4) then begin
        call Node1900();
    end
    if (local_var(6) == 5) then begin
        call Node2050();
    end
end

procedure Equipment
begin
    if (chosen_name == 1) then begin
        if ((map_var(4) bwand 1) == 0) then begin
            giq_option(4, NAME, 1501, Node2150, NEUTRAL_REACTION);
        end
        else begin
            giq_option(4, NAME, 1501, Node2100, NEUTRAL_REACTION);
        end
    end
    else begin
        if (chosen_name == 2) then begin
            if ((map_var(4) bwand 2) == 0) then begin
                giq_option(4, NAME, 1501, Node2200, NEUTRAL_REACTION);
            end
            else begin
                giq_option(4, NAME, 1501, Node2100, NEUTRAL_REACTION);
            end
        end
        else begin
            if (chosen_name == 3) then begin
                if ((map_var(4) bwand 4) == 0) then begin
                    giq_option(4, NAME, 1501, Node2250, NEUTRAL_REACTION);
                end
                else begin
                    giq_option(4, NAME, 1501, Node2100, NEUTRAL_REACTION);
                end
            end
            else begin
                if (chosen_name == 4) then begin
                    if ((map_var(4) bwand 8) == 0) then begin
                        giq_option(4, NAME, 1501, Node2300, NEUTRAL_REACTION);
                    end
                    else begin
                        giq_option(4, NAME, 1501, Node2100, NEUTRAL_REACTION);
                    end
                end
                else begin
                    if (chosen_name == 5) then begin
                        if ((map_var(4) bwand 16) == 0) then begin
                            giq_option(4, NAME, 1501, Node2350, NEUTRAL_REACTION);
                        end
                        else begin
                            if ((global_var(GVAR_G_MAX_EQUIP) != 0) and ((map_var(4) bwand 32) == 0)) then begin
                                if (global_var(GVAR_G_MAX_EQUIP) == 1) then begin
                                    giq_option(4, NAME, 1501, Node2600, NEUTRAL_REACTION);
                                end
                                if (global_var(GVAR_G_MAX_EQUIP) == 2) then begin
                                    giq_option(4, NAME, 1501, Node2650, NEUTRAL_REACTION);
                                end
                                if (global_var(GVAR_G_MAX_EQUIP) == 3) then begin
                                    giq_option(4, NAME, 1501, Node2700, NEUTRAL_REACTION);
                                end
                            end
                            else begin
                                giq_option(4, NAME, 1501, Node2100, NEUTRAL_REACTION);
                            end
                        end
                    end
                    else begin
                        giq_option(4, NAME, 1501, Node2100, NEUTRAL_REACTION);
                    end
                end
            end
        end
    end
end

procedure Im_James
begin
    chosen_name := 1;
    if (local_var(6) == 0) then begin
        if ((map_var(4) bwand 1) == 0) then begin
            call Node2150();
        end
        else begin
            call Node2100();
        end
    end
    else begin
        call Persuasion();
    end
end

procedure Im_Jess
begin
    chosen_name := 2;
    if (local_var(6) == 0) then begin
        if ((map_var(4) bwand 2) == 0) then begin
            call Node2200();
        end
        else begin
            call Node2100();
        end
    end
    else begin
        call Persuasion();
    end
end

procedure Im_Erick
begin
    chosen_name := 3;
    if (local_var(6) == 0) then begin
        if ((map_var(4) bwand 4) == 0) then begin
            call Node2250();
        end
        else begin
            call Node2100();
        end
    end
    else begin
        call Persuasion();
    end
end

procedure Im_Darrell
begin
    chosen_name := 4;
    if (local_var(6) == 0) then begin
        if ((map_var(4) bwand 8) == 0) then begin
            call Node2300();
        end
        else begin
            call Node2100();
        end
    end
    else begin
        call Persuasion();
    end
end

procedure Im_Max
begin
    chosen_name := 5;
    if (local_var(6) == 0) then begin
        if ((map_var(4) bwand 16) == 0) then begin
            call Node2350();
        end
        else begin
            if ((global_var(GVAR_G_MAX_EQUIP) != 0) and ((map_var(4) bwand 32) == 0)) then begin
                if (global_var(GVAR_G_MAX_EQUIP) == 1) then begin
                    call Node2600();
                end
                if (global_var(GVAR_G_MAX_EQUIP) == 2) then begin
                    call Node2650();
                end
                if (global_var(GVAR_G_MAX_EQUIP) == 3) then begin
                    call Node2700();
                end
            end
            else begin
                call Node2100();
            end
        end
    end
    else begin
        call Persuasion();
    end
end

procedure Im_nobody
begin
    chosen_name := 0;
    if (local_var(6) == 0) then begin
        call Node2100();
    end
    else begin
        call Persuasion();
    end
end

procedure Bridge_Leonard
begin
    ChLeonard := 1;
    call Im_nobody();
end

procedure Bridge_Tramell
begin
    ChTramell := 1;
    call Im_nobody();
end

procedure Bridge_Cecilia
begin
    ChCecilia := 1;
    call Im_nobody();
end

procedure Bridge_Robert
begin
    ChRobert := 1;
    call Im_nobody();
end

procedure Bridge_Chris
begin
    ChChris := 1;
    call Im_nobody();
end

procedure Bridge_Feargus
begin
    ChFeargus := 1;
    call Im_nobody();
end

procedure Give_flamethrower
begin
    restock_obj := create_object(11, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 11);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 11);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 11);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 11)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 11);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    call Node_bridge_for_Max();
end

procedure Give_rocketlauncher
begin
    restock_obj := create_object(13, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 13);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 13);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 13);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 13)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 13);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    call Node_bridge_for_Max();
end

procedure Give_minigun
begin
    restock_obj := create_object(12, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 12);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 12);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 12);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 12)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 12);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    call Node_bridge_for_Max();
end

procedure Give_supersledge
begin
    restock_obj := create_object(115, 0, 0);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(Crate_1, 115);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(Crate_1, 115);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(Crate_1, 115);
            if (critter_inven_obj(self_obj, INVEN_TYPE_WORN) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(Crate_1, INVEN_TYPE_WORN)) == 0) then begin
                    restock_obj := critter_inven_obj(Crate_1, INVEN_TYPE_WORN);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(Crate_1, restock_obj);
                    add_obj_to_inven(Crate_1, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(Crate_1, INVEN_TYPE_LEFT_HAND) == restock_obj) or (critter_inven_obj(Crate_1, INVEN_TYPE_RIGHT_HAND) == restock_obj)) then begin
                    inven_unwield(Crate_1);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(Crate_1, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(Crate_1, 115)) do begin
                restock_obj := obj_carrying_pid_obj(Crate_1, 115);
                rm_obj_from_inven(Crate_1, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    call Node_bridge_for_Max();
end

procedure Node_bridge_for_Max
begin
    if (global_var(GVAR_G_MAX_EQUIP) == 0) then begin
        call Node2400();
    end
    if (global_var(GVAR_G_MAX_EQUIP) == 1) then begin
        call Node2450();
    end
    if (global_var(GVAR_G_MAX_EQUIP) == 2) then begin
        call Node2500();
    end
    if (global_var(GVAR_G_MAX_EQUIP) == 3) then begin
        call Node2550();
    end
end
