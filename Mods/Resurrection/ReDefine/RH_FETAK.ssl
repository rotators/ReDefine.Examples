variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure map_enter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure push_p_proc;

variable talking_float;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777293) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777293)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777958) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777958)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777957) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777957)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778018) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778018)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
end

procedure critter_p_proc
begin
    if ((local_var(5) == 2) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        attack(dude_obj);
    end
    if (local_var(6) == 1) then begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            attack(dude_obj);
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(5, 2);
    end
end

procedure talk_p_proc
begin
    talking_float := random(0, 35);
    if (global_var(GVAR_RH_ALEXA_DEAD) != 1) then begin
        if ((talking_float >= 0) and (talking_float <= 28)) then begin
            if ((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 3) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 348) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 349) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 232)) then begin
                float_msg(self_obj, mstr(random(298, 316)), FLOAT_MSG_YELLOW);
            end
            else begin
                float_msg(self_obj, mstr(random(300, 316)), FLOAT_MSG_YELLOW);
            end
        end
        if ((talking_float >= 29) and (talking_float <= 32)) then begin
            if (self_gender == 0) then begin
                float_msg(self_obj, mstr(random(331, 334)), FLOAT_MSG_YELLOW);
            end
            if (self_gender == 1) then begin
                float_msg(self_obj, mstr(random(335, 338)), FLOAT_MSG_YELLOW);
            end
        end
        if ((talking_float >= 33) and (talking_float <= 35)) then begin
            if (dude_gender == 0) then begin
                float_msg(self_obj, mstr(random(339, 341)), FLOAT_MSG_YELLOW);
            end
            if (dude_gender == 1) then begin
                float_msg(self_obj, mstr(random(342, 344)), FLOAT_MSG_YELLOW);
            end
        end
    end
    else begin
        if ((talking_float >= 0) and (talking_float <= 35)) then begin
            if ((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 3) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 348) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 349) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 232)) then begin
                float_msg(self_obj, mstr(random(317, 329)), FLOAT_MSG_YELLOW);
            end
            else begin
                float_msg(self_obj, mstr(random(317, 328)), FLOAT_MSG_YELLOW);
            end
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (self_gender == 0) then begin
        display_mstr(100);
    end
    if (self_gender == 1) then begin
        display_mstr(101);
    end
end

procedure description_p_proc
begin
    script_overrides;
    if (self_gender == 0) then begin
        display_mstr(200);
    end
    if (self_gender == 1) then begin
        display_mstr(201);
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        if (not(anim_busy(self_obj))) then begin
            reg_anim_func(2, self_obj);
            reg_anim_func(1, 1);
            if (obj_is_visible_flag(self_obj) == 1) then begin
                animate_move_obj_to_tile(self_obj, tile_num_in_direction(local_var(7), random(0, 5), random(1, 5)), 0);
            end
            reg_anim_func(3, 0);
        end
        rm_fixed_timer_event(self_obj, 1);
        add_timer_event(self_obj, game_ticks(random(5, 25)), 1);
    end
    if (fixed_param == 2) then begin
        if (global_var(GVAR_RH_ALEXA_DEAD) != 1) then begin
            if ((tile_distance(tile_num(self_obj), dude_tile) <= 4) and not(combat_is_initialized)) then begin
                if ((self_gender == 0) and (obj_is_visible_flag(self_obj) == 1)) then begin
                    float_msg(self_obj, mstr(random(350, 376)), FLOAT_MSG_YELLOW);
                end
                if ((self_gender == 1) and (obj_is_visible_flag(self_obj) == 1)) then begin
                    float_msg(self_obj, mstr(random(351, 377)), FLOAT_MSG_YELLOW);
                end
            end
            rm_fixed_timer_event(self_obj, 2);
            add_timer_event(self_obj, game_ticks(random(5, 10)), 2);
        end
        else begin
            if ((tile_distance(tile_num(self_obj), dude_tile) <= 3) and not(combat_is_initialized)) then begin
                if (obj_is_visible_flag(self_obj) == 1) then begin
                    float_msg(self_obj, mstr(random(368, 376)), FLOAT_MSG_YELLOW);
                end
            end
            rm_fixed_timer_event(self_obj, 2);
            add_timer_event(self_obj, game_ticks(random(5, 10)), 2);
        end
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 242);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_DRUG_ADDICT);
    if (local_var(7) == 0) then begin
        set_local_var(7, tile_num(self_obj));
    end
    if (not(is_loading_game)) then begin
        if ((global_var(GVAR_RH_Q_QUEST_MARIE) == 5) or (global_var(GVAR_RH_Q_JULIAN_QUEST3) == 4)) then begin
            set_local_var(5, 0);
            set_local_var(6, 0);
            if (local_var(7) == 26695) then begin
                set_obj_visibility(self_obj, 1);
            end
            if (local_var(7) == 24310) then begin
                set_obj_visibility(self_obj, 1);
            end
            if (local_var(7) == 19911) then begin
                set_obj_visibility(self_obj, 1);
            end
            if (local_var(7) == 27909) then begin
                set_obj_visibility(self_obj, 1);
            end
        end
        else begin
            if (obj_is_visible_flag(self_obj) == 0) then begin
                set_obj_visibility(self_obj, 0);
            end
        end
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        anim(self_obj, 1000, random(0, 5));
        reg_anim_func(3, 0);
    end
    rm_fixed_timer_event(self_obj, 1);
    add_timer_event(self_obj, game_ticks(random(5, 25)), 1);
    rm_fixed_timer_event(self_obj, 2);
    add_timer_event(self_obj, game_ticks(random(5, 10)), 2);
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        if ((global_var(GVAR_RH_Q_JULIAN_QUEST3) == 4) or (global_var(GVAR_RH_Q_QUEST_MARIE) == 5) and (global_var(GVAR_RH_ALEXA_DEAD) != 1)) then begin
        end
        else begin
            set_local_var(5, 2);
            set_local_var(6, 1);
            set_global_var(GVAR_RH_ENEMY_LEONARD, 1);
        end
    end
end

procedure destroy_p_proc
begin
end

procedure push_p_proc
begin
end
