variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure map_exit_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;

export variable sg_tealc;
export variable sg_drjack;
export variable sg_oneill;
export variable sg_carter;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777293) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777293)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777958) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777958)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777957) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777957)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778018) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778018)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
end

procedure map_exit_p_proc
begin
end

procedure map_enter_p_proc
begin
    if (map_first_run) then begin
        set_global_var(GVAR_SPECIAL_ENCOUNTER_STARGATE, 1);
        set_map_var(2, 1);
        display_mstr(100 + (dude_gender == 1));
        add_timer_event(self_obj, game_ticks(1), 1);
    end
    if (dude_elevation == 0) then begin
        if ((get_month >= 3) and (get_month < 5)) then begin
            if ((game_time_hour >= 600) and (game_time_hour < (600 + 100))) then begin
                set_light_level(game_time_hour - 600 + 40);
            end
            else begin
                if ((game_time_hour >= (600 + 100)) and (game_time_hour < 1800)) then begin
                    set_light_level(100);
                end
                else begin
                    if ((game_time_hour >= 1800) and (game_time_hour < (1800 + 100))) then begin
                        set_light_level(100 - (game_time_hour - 1800));
                    end
                    else begin
                        set_light_level(40);
                    end
                end
            end
        end
        else begin
            if ((get_month >= 5) and (get_month < 9)) then begin
                if ((game_time_hour >= 500) and (game_time_hour < (500 + 100))) then begin
                    set_light_level(game_time_hour - 500 + 40);
                end
                else begin
                    if ((game_time_hour >= (500 + 100)) and (game_time_hour < 1900)) then begin
                        set_light_level(100);
                    end
                    else begin
                        if ((game_time_hour >= 1900) and (game_time_hour < (1900 + 100))) then begin
                            set_light_level(100 - (game_time_hour - 1900));
                        end
                        else begin
                            set_light_level(40);
                        end
                    end
                end
            end
            else begin
                if ((get_month >= 9) and (get_month < 11)) then begin
                    if ((game_time_hour >= 600) and (game_time_hour < (600 + 100))) then begin
                        set_light_level(game_time_hour - 600 + 40);
                    end
                    else begin
                        if ((game_time_hour >= (600 + 100)) and (game_time_hour < 1800)) then begin
                            set_light_level(100);
                        end
                        else begin
                            if ((game_time_hour >= 1800) and (game_time_hour < (1800 + 100))) then begin
                                set_light_level(100 - (game_time_hour - 1800));
                            end
                            else begin
                                set_light_level(40);
                            end
                        end
                    end
                end
                else begin
                    if ((game_time_hour >= 700) and (game_time_hour < (700 + 100))) then begin
                        set_light_level(game_time_hour - 700 + 40);
                    end
                    else begin
                        if ((game_time_hour >= (700 + 100)) and (game_time_hour < 1700)) then begin
                            set_light_level(100);
                        end
                        else begin
                            if ((game_time_hour >= 1700) and (game_time_hour < (1700 + 100))) then begin
                                set_light_level(100 - (game_time_hour - 1700));
                            end
                            else begin
                                set_light_level(40);
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure map_update_p_proc
begin
    if (dude_elevation == 0) then begin
        if ((get_month >= 3) and (get_month < 5)) then begin
            if ((game_time_hour >= 600) and (game_time_hour < (600 + 100))) then begin
                set_light_level(game_time_hour - 600 + 40);
            end
            else begin
                if ((game_time_hour >= (600 + 100)) and (game_time_hour < 1800)) then begin
                    set_light_level(100);
                end
                else begin
                    if ((game_time_hour >= 1800) and (game_time_hour < (1800 + 100))) then begin
                        set_light_level(100 - (game_time_hour - 1800));
                    end
                    else begin
                        set_light_level(40);
                    end
                end
            end
        end
        else begin
            if ((get_month >= 5) and (get_month < 9)) then begin
                if ((game_time_hour >= 500) and (game_time_hour < (500 + 100))) then begin
                    set_light_level(game_time_hour - 500 + 40);
                end
                else begin
                    if ((game_time_hour >= (500 + 100)) and (game_time_hour < 1900)) then begin
                        set_light_level(100);
                    end
                    else begin
                        if ((game_time_hour >= 1900) and (game_time_hour < (1900 + 100))) then begin
                            set_light_level(100 - (game_time_hour - 1900));
                        end
                        else begin
                            set_light_level(40);
                        end
                    end
                end
            end
            else begin
                if ((get_month >= 9) and (get_month < 11)) then begin
                    if ((game_time_hour >= 600) and (game_time_hour < (600 + 100))) then begin
                        set_light_level(game_time_hour - 600 + 40);
                    end
                    else begin
                        if ((game_time_hour >= (600 + 100)) and (game_time_hour < 1800)) then begin
                            set_light_level(100);
                        end
                        else begin
                            if ((game_time_hour >= 1800) and (game_time_hour < (1800 + 100))) then begin
                                set_light_level(100 - (game_time_hour - 1800));
                            end
                            else begin
                                set_light_level(40);
                            end
                        end
                    end
                end
                else begin
                    if ((game_time_hour >= 700) and (game_time_hour < (700 + 100))) then begin
                        set_light_level(game_time_hour - 700 + 40);
                    end
                    else begin
                        if ((game_time_hour >= (700 + 100)) and (game_time_hour < 1700)) then begin
                            set_light_level(100);
                        end
                        else begin
                            if ((game_time_hour >= 1700) and (game_time_hour < (1700 + 100))) then begin
                                set_light_level(100 - (game_time_hour - 1700));
                            end
                            else begin
                                set_light_level(40);
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        float_msg(sg_carter, mstr(102), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(5), 2);
    end
    if (fixed_param == 2) then begin
        float_msg(sg_carter, mstr(103), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(7), 3);
    end
    if (fixed_param == 3) then begin
        float_msg(sg_oneill, mstr(104), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(1), 4);
    end
    if (fixed_param == 4) then begin
        float_msg(sg_carter, mstr(105), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(6), 5);
    end
    if (fixed_param == 5) then begin
        float_msg(sg_oneill, mstr(106), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(1), 6);
    end
    if (fixed_param == 6) then begin
        float_msg(sg_carter, mstr(107), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(3), 7);
    end
    if (fixed_param == 7) then begin
        float_msg(sg_oneill, mstr(108), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(1), 8);
    end
    if (fixed_param == 8) then begin
        float_msg(sg_carter, mstr(109), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(2), 9);
    end
    if (fixed_param == 9) then begin
        float_msg(sg_oneill, mstr(110), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(2), 10);
    end
    if (fixed_param == 10) then begin
        float_msg(sg_drjack, mstr(111), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(2), 11);
    end
    if (fixed_param == 11) then begin
        float_msg(sg_oneill, mstr(112), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(2), 12);
    end
    if (fixed_param == 12) then begin
        float_msg(sg_carter, mstr(113), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(2), 13);
    end
    if (fixed_param == 13) then begin
        float_msg(sg_oneill, mstr(114), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(1), 14);
    end
    if (fixed_param == 14) then begin
        float_msg(sg_carter, mstr(115), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(1), 15);
    end
    if (fixed_param == 15) then begin
        float_msg(sg_oneill, mstr(116), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(2), 16);
    end
    if (fixed_param == 16) then begin
        float_msg(sg_carter, mstr(117), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(2), 17);
    end
    if (fixed_param == 17) then begin
        float_msg(sg_oneill, mstr(118), FLOAT_MSG_YELLOW);
        add_timer_event(self_obj, game_ticks(3), 18);
    end
    if (fixed_param == 18) then begin
        float_msg_clear(sg_oneill);
        add_timer_event(self_obj, game_ticks(2), 19);
    end
    if (fixed_param == 19) then begin
        float_msg(sg_oneill, mstr(119), FLOAT_MSG_YELLOW);
        set_map_var(2, 0);
    end
end
