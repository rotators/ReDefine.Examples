variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable lPartyWornArmor;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure map_enter_p_proc;
procedure use_skill_on_p_proc;
procedure Node999;
procedure Node500;
procedure Node550;
procedure Node600;
procedure Node650;
procedure Node700;
procedure Node750;
procedure Number_1;
procedure Number_2;
procedure Number_3;

import variable Test_robo1;
import variable Test_robo2;
import variable Test_robo3;

variable procent_HP;
variable robo_selected;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777294) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777294)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778049) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778049)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778050) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778050)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778051) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778051)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
end

procedure use_p_proc
begin
    script_overrides;
    if (combat_is_initialized) then begin
        display_mstr(300);
        if (global_var(GVAR_ENEMY_OBRODA) == 0) then begin
            terminate_combat;
        end
    end
    else begin
        start_gdialog(407, self_obj, 4, -1, -1);
        gsay_start;
        if (dude_is_stupid) then begin
            call Node500();
        end
        else begin
            call Node550();
        end
        gsay_end;
        end_dialogue;
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(200);
end

procedure timed_event_p_proc
begin
end

procedure map_enter_p_proc
begin
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := action_being_used;
    if (LVar0 == 12) then begin
        script_overrides;
        call use_p_proc();
    end
end

procedure Node999
begin
end

procedure Node500
begin
    Reply(500);
    giq_option(-3, NAME, 501, Node999, NEUTRAL_REACTION);
end

procedure Node550
begin
    Reply(550);
    giq_option(4, NAME, 551, Node600, NEUTRAL_REACTION);
    giq_option(4, NAME, 552, Node650, NEUTRAL_REACTION);
    giq_option(4, NAME, 553, Node999, NEUTRAL_REACTION);
end

procedure Node600
begin
    Reply(600);
    giq_option(4, NAME, 601, Node650, NEUTRAL_REACTION);
    giq_option(4, NAME, 602, Node999, NEUTRAL_REACTION);
end

procedure Node650
begin
    Reply(650);
    if (not(Test_robo1 and (get_critter_stat(Test_robo1, STAT_max_hp) == get_critter_stat(Test_robo1, STAT_current_hp)) and (Test_robo2 and (get_critter_stat(Test_robo2, STAT_max_hp) == get_critter_stat(Test_robo2, STAT_current_hp))) and (Test_robo3 and (get_critter_stat(Test_robo3, STAT_max_hp) == get_critter_stat(Test_robo3, STAT_current_hp))))) then begin
        giq_option(4, NAME, 651, Node700, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 652, Number_1, NEUTRAL_REACTION);
    giq_option(4, NAME, 653, Number_2, NEUTRAL_REACTION);
    giq_option(4, NAME, 654, Number_3, NEUTRAL_REACTION);
    giq_option(4, NAME, 655, Node550, NEUTRAL_REACTION);
    giq_option(4, NAME, 656, Node999, NEUTRAL_REACTION);
end

procedure Node700
begin
    Reply(700);
    if (not(Test_robo1)) then begin
        create_object_sid(16777909, 22920, 2, SCRIPT_GSHOOROB);
    end
    else begin
        if (critter_state(Test_robo1) bwand 1) then begin
            destroy_object(Test_robo1);
            create_object_sid(16777909, 22920, 2, SCRIPT_GSHOOROB);
        end
        else begin
            critter_heal(Test_robo1, get_critter_stat(Test_robo1, STAT_max_hp) - get_critter_stat(Test_robo1, STAT_current_hp));
        end
    end
    if (not(Test_robo2)) then begin
        create_object_sid(16777908, 23517, 2, SCRIPT_GSHOOROB);
    end
    else begin
        if (critter_state(Test_robo2) bwand 1) then begin
            destroy_object(Test_robo2);
            create_object_sid(16777908, 23517, 2, SCRIPT_GSHOOROB);
        end
        else begin
            critter_heal(Test_robo2, get_critter_stat(Test_robo2, STAT_max_hp) - get_critter_stat(Test_robo2, STAT_current_hp));
        end
    end
    if (not(Test_robo3)) then begin
        create_object_sid(16777909, 23914, 2, SCRIPT_GSHOOROB);
    end
    else begin
        if (critter_state(Test_robo3) bwand 1) then begin
            destroy_object(Test_robo3);
            create_object_sid(16777909, 23914, 2, SCRIPT_GSHOOROB);
        end
        else begin
            critter_heal(Test_robo3, get_critter_stat(Test_robo3, STAT_max_hp) - get_critter_stat(Test_robo3, STAT_current_hp));
        end
    end
    giq_option(4, NAME, 701, Number_1, NEUTRAL_REACTION);
    giq_option(4, NAME, 702, Number_2, NEUTRAL_REACTION);
    giq_option(4, NAME, 703, Number_3, NEUTRAL_REACTION);
    giq_option(4, NAME, 704, Node550, NEUTRAL_REACTION);
    giq_option(4, NAME, 705, Node999, NEUTRAL_REACTION);
end

procedure Node750
begin
    if (procent_HP == 100) then begin
        Reply(mstr(750) + procent_HP + mstr(751) + mstr(752));
    end
    else begin
        Reply(mstr(750) + procent_HP + mstr(751));
    end
    if (robo_selected != 1) then begin
        giq_option(4, NAME, 754, Number_1, NEUTRAL_REACTION);
    end
    if (robo_selected != 2) then begin
        giq_option(4, NAME, 755, Number_2, NEUTRAL_REACTION);
    end
    if (robo_selected != 3) then begin
        giq_option(4, NAME, 756, Number_3, NEUTRAL_REACTION);
    end
    giq_option(4, NAME, 757, Node550, NEUTRAL_REACTION);
    giq_option(4, NAME, 758, Node999, NEUTRAL_REACTION);
end

procedure Number_1
begin
    robo_selected := 1;
    if (Test_robo1 and not(critter_state(Test_robo1) bwand 1)) then begin
        procent_HP := 100 - (get_critter_stat(Test_robo1, STAT_current_hp) * 100 / get_critter_stat(Test_robo1, STAT_max_hp));
    end
    else begin
        procent_HP := 100;
    end
    call Node750();
end

procedure Number_2
begin
    robo_selected := 2;
    if (Test_robo2 and not(critter_state(Test_robo2) bwand 1)) then begin
        procent_HP := 100 - (get_critter_stat(Test_robo2, STAT_current_hp) * 100 / get_critter_stat(Test_robo2, STAT_max_hp));
    end
    else begin
        procent_HP := 100;
    end
    call Node750();
end

procedure Number_3
begin
    robo_selected := 3;
    if (Test_robo3 and not(critter_state(Test_robo3) bwand 1)) then begin
        procent_HP := 100 - (get_critter_stat(Test_robo3, STAT_current_hp) * 100 / get_critter_stat(Test_robo3, STAT_max_hp));
    end
    else begin
        procent_HP := 100;
    end
    call Node750();
end
