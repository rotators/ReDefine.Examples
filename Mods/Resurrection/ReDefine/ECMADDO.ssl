variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure put_critter(variable arg0, variable arg1, variable arg2);
procedure start;
procedure critter_p_proc;
procedure map_enter_p_proc;
procedure add_rocks;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure combat_p_proc;
procedure node001;

variable last_talk;
variable last_copy;
variable create;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(GVAR_PTR_PARTY_MEMBER_ACTIONS) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777293) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777293)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777958) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777958)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777957) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777957)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778018) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778018)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure put_critter(variable arg0, variable arg1, variable arg2)
begin
    variable LVar3 := 0;
    LVar3 := create_object_sid(arg0, arg1, dude_elevation, arg2);
    critter_attempt_placement(LVar3, arg1, dude_elevation);
end

procedure start
begin
    last_copy := game_time + (10 * 5);
    create := 1;
end

procedure critter_p_proc
begin
    if (create == 1) then begin
        call add_rocks();
        create := 0;
    end
    if (game_time > last_talk) then begin
        call node001();
        last_talk := game_time + (10 * 2);
    end
    if (game_time > last_copy) then begin
        if ((map_var(3) < 15) and (map_var(3) > 0)) then begin
            last_copy := game_time + (10 * random(5 - 2, 5 + 2));
            call put_critter(16777702, tile_num(self_obj) + random(-10, 10), 1595);
            set_map_var(3, map_var(3) + 1);
        end
    end
    if (tile_distance_objs(self_obj, dude_obj) > 5) then begin
        animate_move_obj_to_tile(self_obj, dude_tile + random(-10, 10), 1);
    end
    else begin
        animate_move_obj_to_tile(self_obj, dude_tile + random(-10, 10), 0);
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 286);
    critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_BERSERKER_NO_TALKING);
end

procedure add_rocks
begin
    variable LVar0 := 0;
    LVar0 := create_object(19, 0, 0);
    add_mult_objs_to_inven(self_obj, LVar0, 15);
end

procedure destroy_p_proc
begin
    set_map_var(3, map_var(3) - 1);
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(100);
end

procedure combat_p_proc
begin
    call node001();
end

procedure node001
begin
    float_msg(self_obj, mstr(random(111, 117)), FLOAT_MSG_RED);
end
