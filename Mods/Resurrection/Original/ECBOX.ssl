variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure Look_Traps_And_Locks;
procedure Look_Traps;
procedure Look_Locks;
procedure Skill_Disarm_Traps;
procedure Disarm_Traps;
procedure Unlock_Lock;
procedure Lockpick_Lock;
procedure Lockpick_Door;
procedure Super_Lockpick_Lock;
procedure Lock_Door;
procedure Set_Lock;
procedure Set_Lockpick_Lock;
procedure Super_Set_Lockpick_Lock;
procedure Set_Trap;
procedure Pry_Door;
procedure Damage_Critter;
procedure CreateContents;

variable Locks_Roll;
variable Traps_Roll;

procedure timed_event_p_proc;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(910) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(910) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(910) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777293) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777293)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777958) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777958)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777957) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777957)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778018) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778018)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
end

procedure use_p_proc
begin
    Traps_Roll := roll_vs_skill(source_obj, 11, 0);
    if (local_var(1) == 0) then begin
        if (is_success(Traps_Roll)) then begin
            script_overrides;
            set_local_var(2, 1);
            reg_anim_func(2, source_obj);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(16, 204));
            end
            else begin
                display_msg(message_str(16, 205));
            end
        end
        else begin
            if (obj_is_locked(self_obj)) then begin
                script_overrides;
                display_msg(message_str(16, 203));
                call Damage_Critter();
            end
            else begin
                call Damage_Critter();
            end
        end
    end
    else begin
        if (obj_is_locked(self_obj)) then begin
            script_overrides;
            display_msg(message_str(16, 203));
        end
    end
end

procedure look_at_p_proc
begin
end

procedure description_p_proc
begin
    if ((local_var(0) == 0) and (local_var(1) == 0)) then begin
        script_overrides;
        call Look_Traps_And_Locks();
    end
    else begin
        if (local_var(1) == 0) then begin
            script_overrides;
            call Look_Traps();
        end
        else begin
            if (local_var(0) == 0) then begin
                script_overrides;
                call Look_Locks();
            end
        end
    end
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := action_being_used;
    if (LVar0 == 9) then begin
        if (local_var(0) == 0) then begin
            call Unlock_Lock();
        end
        else begin
            call Set_Lock();
        end
    end
    else begin
        if (LVar0 == 11) then begin
            if (local_var(1) == 0) then begin
                call Skill_Disarm_Traps();
            end
            else begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(16, 195));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(16, 200));
                end
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := obj_pid(obj_being_used_with);
    if (0 == 0) then begin
        if (LVar0 == 84) then begin
            if (local_var(0) == 0) then begin
                call Lockpick_Lock();
            end
            else begin
                call Set_Lockpick_Lock();
            end
        end
        else begin
            if (LVar0 == 410) then begin
                if (local_var(0) == 0) then begin
                    call Super_Lockpick_Lock();
                end
                else begin
                    call Super_Set_Lockpick_Lock();
                end
            end
        end
    end
    else begin
        if (0 == 1) then begin
            if (LVar0 == 77) then begin
                if (local_var(0) == 0) then begin
                    call Lockpick_Lock();
                end
                else begin
                    call Set_Lockpick_Lock();
                end
            end
            else begin
                if (LVar0 == 411) then begin
                    if (local_var(0) == 0) then begin
                        call Super_Lockpick_Lock();
                    end
                    else begin
                        call Super_Set_Lockpick_Lock();
                    end
                end
            end
        end
        else begin
            if (LVar0 == 20) then begin
                call Pry_Door();
            end
            else begin
                if ((LVar0 == 51) or (LVar0 == 85)) then begin
                    call Set_Trap();
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    variable LVar0 := 0;
    if (1 == 0) then begin
        if (local_var(1) == 0) then begin
            set_local_var(1, 1);
            set_local_var(0, 1);
            LVar0 := random(10, 20);
            explosion(tile_num(self_obj), elevation(self_obj), LVar0);
            destroy_object(self_obj);
        end
        else begin
            set_local_var(1, 1);
            set_local_var(0, 1);
            destroy_object(self_obj);
        end
    end
    else begin
        if (1 == 1) then begin
            set_local_var(4, local_var(4) + 1);
            if (local_var(1) == 0) then begin
                set_local_var(0, 1);
                LVar0 := random(10, 20);
                explosion(tile_num(self_obj), elevation(self_obj), LVar0);
            end
            else begin
                if (local_var(4) > 2) then begin
                    set_local_var(1, 1);
                    set_local_var(0, 1);
                    destroy_object(self_obj);
                end
            end
        end
        else begin
            display_msg(message_str(16, 193));
        end
    end
end

procedure map_enter_p_proc
begin
    if (local_var(3) == 0) then begin
        set_local_var(3, 1);
        set_local_var(0, 1);
        set_local_var(1, 1);
    end
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
    call CreateContents();
end

procedure map_update_p_proc
begin
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure Look_Traps_And_Locks
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    variable LVar2 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 11, 0);
    LVar2 := roll_vs_skill(dude_obj, 9, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 102));
                        end
                        else begin
                            display_msg(message_str(16, 103));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 104));
                        end
                        else begin
                            display_msg(message_str(16, 105));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 106));
                        end
                        else begin
                            display_msg(message_str(16, 107));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 108));
                        end
                        else begin
                            display_msg(message_str(16, 109));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 110));
                        end
                        else begin
                            display_msg(message_str(16, 111));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 112));
                        end
                        else begin
                            display_msg(message_str(16, 113));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 114));
                        end
                        else begin
                            display_msg(message_str(16, 115));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 116));
                        end
                        else begin
                            display_msg(message_str(16, 117));
                        end
                    end
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 118));
                        end
                        else begin
                            display_msg(message_str(16, 119));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 120));
                        end
                        else begin
                            display_msg(message_str(16, 121));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 122));
                        end
                        else begin
                            display_msg(message_str(16, 123));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 124));
                        end
                        else begin
                            display_msg(message_str(16, 125));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 126));
                        end
                        else begin
                            display_msg(message_str(16, 127));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 128));
                        end
                        else begin
                            display_msg(message_str(16, 129));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 130));
                        end
                        else begin
                            display_msg(message_str(16, 131));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 132));
                        end
                        else begin
                            display_msg(message_str(16, 133));
                        end
                    end
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 134));
                        end
                        else begin
                            display_msg(message_str(16, 135));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 136));
                        end
                        else begin
                            display_msg(message_str(16, 137));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 138));
                        end
                        else begin
                            display_msg(message_str(16, 139));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 140));
                        end
                        else begin
                            display_msg(message_str(16, 141));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 142));
                        end
                        else begin
                            display_msg(message_str(16, 143));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 144));
                        end
                        else begin
                            display_msg(message_str(16, 145));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 146));
                        end
                        else begin
                            display_msg(message_str(16, 147));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 148));
                        end
                        else begin
                            display_msg(message_str(16, 149));
                        end
                    end
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                set_local_var(2, 1);
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 150));
                        end
                        else begin
                            display_msg(message_str(16, 151));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 152));
                        end
                        else begin
                            display_msg(message_str(16, 153));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 154));
                        end
                        else begin
                            display_msg(message_str(16, 155));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 156));
                        end
                        else begin
                            display_msg(message_str(16, 157));
                        end
                    end
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 158));
                        end
                        else begin
                            display_msg(message_str(16, 159));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 160));
                        end
                        else begin
                            display_msg(message_str(16, 161));
                        end
                    end
                end
                else begin
                    if (is_success(LVar2)) then begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 162));
                        end
                        else begin
                            display_msg(message_str(16, 163));
                        end
                    end
                    else begin
                        if (is_critical(LVar2)) then begin
                            display_msg(message_str(16, 164));
                        end
                        else begin
                            display_msg(message_str(16, 165));
                        end
                    end
                end
            end
        end
    end
end

procedure Look_Traps
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 11, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 104));
                end
                else begin
                    display_msg(message_str(16, 108));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 112));
                end
                else begin
                    display_msg(message_str(16, 116));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 120));
                end
                else begin
                    display_msg(message_str(16, 124));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 128));
                end
                else begin
                    display_msg(message_str(16, 132));
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 136));
                end
                else begin
                    display_msg(message_str(16, 140));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 144));
                end
                else begin
                    display_msg(message_str(16, 148));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 152));
                end
                else begin
                    display_msg(message_str(16, 156));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 160));
                end
                else begin
                    display_msg(message_str(16, 164));
                end
            end
        end
    end
end

procedure Look_Locks
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := do_check(dude_obj, 1, 0);
    LVar1 := roll_vs_skill(dude_obj, 9, 0);
    if (is_success(LVar0)) then begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 114));
                end
                else begin
                    display_msg(message_str(16, 115));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 116));
                end
                else begin
                    display_msg(message_str(16, 117));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 130));
                end
                else begin
                    display_msg(message_str(16, 131));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 132));
                end
                else begin
                    display_msg(message_str(16, 133));
                end
            end
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 146));
                end
                else begin
                    display_msg(message_str(16, 147));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 148));
                end
                else begin
                    display_msg(message_str(16, 149));
                end
            end
        end
        else begin
            if (is_success(LVar1)) then begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 162));
                end
                else begin
                    display_msg(message_str(16, 163));
                end
            end
            else begin
                if (is_critical(LVar1)) then begin
                    display_msg(message_str(16, 164));
                end
                else begin
                    display_msg(message_str(16, 165));
                end
            end
        end
    end
end

procedure Skill_Disarm_Traps
begin
    Traps_Roll := roll_vs_skill(source_obj, 11, 0);
    call Disarm_Traps();
end

procedure Disarm_Traps
begin
    if (is_success(Traps_Roll)) then begin
        if (local_var(2) == 0) then begin
            set_local_var(2, 1);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(16, 194));
            end
            else begin
                display_msg(message_str(16, 199));
            end
            if (local_var(6) == 0) then begin
                set_local_var(6, 1);
                give_exp_points(25);
                display_msg(message_str(14, 100) + 25 + message_str(14, 101));
            end
        end
        else begin
            set_local_var(1, 1);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(16, 196));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(16, 201));
            end
        end
    end
    else begin
        if (is_critical(Traps_Roll)) then begin
            call Damage_Critter();
        end
        else begin
            if (local_var(2) == 0) then begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(16, 195));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(16, 200));
                end
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(16, 202));
            end
        end
    end
end

procedure Unlock_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20);
    call Lockpick_Door();
end

procedure Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 20);
    call Lockpick_Door();
end

procedure Lockpick_Door
begin
    if (is_success(Locks_Roll)) then begin
        set_local_var(0, 1);
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(16, 170));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(16, 173));
        end
        if (local_var(5) == 0) then begin
            set_local_var(5, 1);
            give_exp_points(25);
            display_msg(message_str(14, 100) + 25 + message_str(14, 101));
        end
    end
    else begin
        if (is_critical(Locks_Roll)) then begin
            jam_lock(self_obj);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(16, 171));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(16, 174));
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_msg(message_str(16, 172));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(16, 175));
            end
        end
    end
end

procedure Super_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 40);
    call Lockpick_Door();
end

procedure Lock_Door
begin
    if (is_success(Locks_Roll)) then begin
        set_local_var(0, 0);
        obj_lock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(16, 189));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(16, 191));
        end
        if (local_var(5) == 0) then begin
            set_local_var(5, 1);
            give_exp_points(25);
            display_msg(message_str(14, 100) + 25 + message_str(14, 101));
        end
    end
    else begin
        if (source_obj == dude_obj) then begin
            display_msg(message_str(16, 190));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(16, 192));
        end
    end
end

procedure Set_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20);
    call Lock_Door();
end

procedure Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 20);
    call Lock_Door();
end

procedure Super_Set_Lockpick_Lock
begin
    Locks_Roll := roll_vs_skill(source_obj, 9, -20 + 40);
    call Lock_Door();
end

procedure Set_Trap
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    Traps_Roll := roll_vs_skill(source_obj, 11, 0 - 10);
    LVar0 := obj_being_used_with;
    if (obj_is_open(self_obj)) then begin
        script_overrides;
        if (source_obj == dude_obj) then begin
            display_msg(message_str(16, 206));
        end
        else begin
            display_msg(obj_name(source_obj) + message_str(16, 207));
        end
    end
    else begin
        script_overrides;
        LVar1 := rm_mult_objs_from_inven(source_obj, LVar0, 1);
        if (is_success(Traps_Roll)) then begin
            set_local_var(1, 0);
            if (source_obj == dude_obj) then begin
                display_msg(message_str(16, 208));
            end
            else begin
                display_msg(obj_name(source_obj) + message_str(16, 210));
            end
        end
        else begin
            if (is_critical(Traps_Roll)) then begin
                call Damage_Critter();
            end
            else begin
                if (source_obj == dude_obj) then begin
                    display_msg(message_str(16, 209));
                end
                else begin
                    display_msg(obj_name(source_obj) + message_str(16, 211));
                end
            end
        end
    end
end

procedure Pry_Door
begin
    variable LVar0 := 0;
    LVar0 := do_check(source_obj, 0, 0);
    if (is_success(LVar0)) then begin
        set_local_var(0, 1);
        obj_unlock(self_obj);
        if (source_obj == dude_obj) then begin
            display_msg(message_str(16, 176));
        end
        else begin
            display_msg(message_str(16, 181));
        end
    end
    else begin
        if (is_critical(LVar0)) then begin
            critter_dmg(source_obj, 2, 0 bwor 256);
            if (source_obj == dude_obj) then begin
                if (2 == 1) then begin
                    display_msg(message_str(16, 177));
                end
                else begin
                    display_msg(message_str(16, 178) + 2 + message_str(16, 179));
                end
            end
            else begin
                if (get_critter_stat(source_obj, 34) == 0) then begin
                    if (2 == 1) then begin
                        display_msg(message_str(16, 182));
                    end
                    else begin
                        display_msg(message_str(16, 183) + 2 + message_str(16, 184));
                    end
                end
                else begin
                    if (2 == 1) then begin
                        display_msg(message_str(16, 186));
                    end
                    else begin
                        display_msg(message_str(16, 187) + 2 + message_str(16, 188));
                    end
                end
            end
        end
        else begin
            if (source_obj == dude_obj) then begin
                display_msg(message_str(16, 180));
            end
            else begin
                display_msg(message_str(16, 185));
            end
        end
    end
end

procedure Damage_Critter
begin
    variable LVar0 := 0;
    LVar0 := random(10, 20);
    if (source_obj == dude_obj) then begin
        critter_dmg(dude_obj, LVar0, 6 bwor 256);
        display_msg(message_str(16, 166) + LVar0 + message_str(16, 167));
    end
    else begin
        critter_dmg(source_obj, LVar0, 6 bwor 256);
        display_msg(obj_name(source_obj) + message_str(16, 168) + LVar0 + message_str(16, 169));
    end
    set_local_var(1, 1);
end

procedure CreateContents
begin
    restock_amt := random(1, 2);
    if (obj_is_carrying_obj_pid(self_obj, 106) < restock_amt) then begin
        if (5 >= random(1, 100)) then begin
            if (obj_is_carrying_obj_pid(self_obj, 106) < restock_amt) then begin
                restock_obj := create_object_sid(106, 0, 0, -1);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 106));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 106) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 106);
                    if ((obj_is_carrying_obj_pid(self_obj, 106) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 106);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 106);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    metarule(43, self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        if (restock_amt == 0) then begin
                            toRemove_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                            while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 106)) do begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 106);
                                rm_obj_from_inven(self_obj, restock_obj);
                                destroy_object(restock_obj);
                                toRemove_qty := toRemove_qty - 1;
                            end
                        end
                        else begin
                            destroy_object(restock_obj);
                        end
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, 106) < restock_amt) then begin
            restock_obj := create_object_sid(106, 0, 0, -1);
            add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 106));
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 106) > restock_amt) then begin
                removed_qty := obj_is_carrying_obj_pid(self_obj, 106);
                if ((obj_is_carrying_obj_pid(self_obj, 106) - restock_amt) < removed_qty) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                end
                if (removed_qty > 0) then begin
                    restock_obj := obj_carrying_pid_obj(self_obj, 106);
                    if (obj_type(self_obj) == 1) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 106);
                        if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                            if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                restock_obj := critter_inven_obj(self_obj, 0);
                                debug_msg("armour pid == " + obj_pid(restock_obj));
                                rm_obj_from_inven(self_obj, restock_obj);
                                add_obj_to_inven(self_obj, restock_obj);
                            end
                        end
                        else begin
                            if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                metarule(43, self_obj);
                            end
                        end
                    end
                    restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                    if (restock_amt == 0) then begin
                        toRemove_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                        while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 106)) do begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 106);
                            rm_obj_from_inven(self_obj, restock_obj);
                            destroy_object(restock_obj);
                            toRemove_qty := toRemove_qty - 1;
                        end
                    end
                    else begin
                        destroy_object(restock_obj);
                    end
                end
                restock_obj := 0;
                restock_amt := 0;
            end
            else begin
                restock_obj := 0;
            end
        end
    end
    restock_amt := random(1, 1);
    if (obj_is_carrying_obj_pid(self_obj, 4) < restock_amt) then begin
        if (10 >= random(1, 100)) then begin
            if (obj_is_carrying_obj_pid(self_obj, 4) < restock_amt) then begin
                restock_obj := create_object_sid(4, 0, 0, -1);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 4));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 4) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 4);
                    if ((obj_is_carrying_obj_pid(self_obj, 4) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 4) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 4);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 4);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    metarule(43, self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        if (restock_amt == 0) then begin
                            toRemove_qty := obj_is_carrying_obj_pid(self_obj, 4) - restock_amt;
                            while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 4)) do begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 4);
                                rm_obj_from_inven(self_obj, restock_obj);
                                destroy_object(restock_obj);
                                toRemove_qty := toRemove_qty - 1;
                            end
                        end
                        else begin
                            destroy_object(restock_obj);
                        end
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, 4) < restock_amt) then begin
            restock_obj := create_object_sid(4, 0, 0, -1);
            add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 4));
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 4) > restock_amt) then begin
                removed_qty := obj_is_carrying_obj_pid(self_obj, 4);
                if ((obj_is_carrying_obj_pid(self_obj, 4) - restock_amt) < removed_qty) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 4) - restock_amt;
                end
                if (removed_qty > 0) then begin
                    restock_obj := obj_carrying_pid_obj(self_obj, 4);
                    if (obj_type(self_obj) == 1) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 4);
                        if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                            if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                restock_obj := critter_inven_obj(self_obj, 0);
                                debug_msg("armour pid == " + obj_pid(restock_obj));
                                rm_obj_from_inven(self_obj, restock_obj);
                                add_obj_to_inven(self_obj, restock_obj);
                            end
                        end
                        else begin
                            if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                metarule(43, self_obj);
                            end
                        end
                    end
                    restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                    if (restock_amt == 0) then begin
                        toRemove_qty := obj_is_carrying_obj_pid(self_obj, 4) - restock_amt;
                        while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 4)) do begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 4);
                            rm_obj_from_inven(self_obj, restock_obj);
                            destroy_object(restock_obj);
                            toRemove_qty := toRemove_qty - 1;
                        end
                    end
                    else begin
                        destroy_object(restock_obj);
                    end
                end
                restock_obj := 0;
                restock_amt := 0;
            end
            else begin
                restock_obj := 0;
            end
        end
    end
    restock_amt := random(1, 2);
    if (obj_is_carrying_obj_pid(self_obj, 71) < restock_amt) then begin
        if (10 >= random(1, 100)) then begin
            if (obj_is_carrying_obj_pid(self_obj, 71) < restock_amt) then begin
                restock_obj := create_object_sid(71, 0, 0, -1);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 71));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 71) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 71);
                    if ((obj_is_carrying_obj_pid(self_obj, 71) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 71) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 71);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 71);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    metarule(43, self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        if (restock_amt == 0) then begin
                            toRemove_qty := obj_is_carrying_obj_pid(self_obj, 71) - restock_amt;
                            while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 71)) do begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 71);
                                rm_obj_from_inven(self_obj, restock_obj);
                                destroy_object(restock_obj);
                                toRemove_qty := toRemove_qty - 1;
                            end
                        end
                        else begin
                            destroy_object(restock_obj);
                        end
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, 71) < restock_amt) then begin
            restock_obj := create_object_sid(71, 0, 0, -1);
            add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 71));
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 71) > restock_amt) then begin
                removed_qty := obj_is_carrying_obj_pid(self_obj, 71);
                if ((obj_is_carrying_obj_pid(self_obj, 71) - restock_amt) < removed_qty) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 71) - restock_amt;
                end
                if (removed_qty > 0) then begin
                    restock_obj := obj_carrying_pid_obj(self_obj, 71);
                    if (obj_type(self_obj) == 1) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 71);
                        if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                            if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                restock_obj := critter_inven_obj(self_obj, 0);
                                debug_msg("armour pid == " + obj_pid(restock_obj));
                                rm_obj_from_inven(self_obj, restock_obj);
                                add_obj_to_inven(self_obj, restock_obj);
                            end
                        end
                        else begin
                            if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                metarule(43, self_obj);
                            end
                        end
                    end
                    restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                    if (restock_amt == 0) then begin
                        toRemove_qty := obj_is_carrying_obj_pid(self_obj, 71) - restock_amt;
                        while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 71)) do begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 71);
                            rm_obj_from_inven(self_obj, restock_obj);
                            destroy_object(restock_obj);
                            toRemove_qty := toRemove_qty - 1;
                        end
                    end
                    else begin
                        destroy_object(restock_obj);
                    end
                end
                restock_obj := 0;
                restock_amt := 0;
            end
            else begin
                restock_obj := 0;
            end
        end
    end
    restock_amt := random(1, 1);
    if (obj_is_carrying_obj_pid(self_obj, 125) < restock_amt) then begin
        if (5 >= random(1, 100)) then begin
            if (obj_is_carrying_obj_pid(self_obj, 125) < restock_amt) then begin
                restock_obj := create_object_sid(125, 0, 0, -1);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 125));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 125) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 125);
                    if ((obj_is_carrying_obj_pid(self_obj, 125) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 125) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 125);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 125);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    metarule(43, self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        if (restock_amt == 0) then begin
                            toRemove_qty := obj_is_carrying_obj_pid(self_obj, 125) - restock_amt;
                            while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 125)) do begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 125);
                                rm_obj_from_inven(self_obj, restock_obj);
                                destroy_object(restock_obj);
                                toRemove_qty := toRemove_qty - 1;
                            end
                        end
                        else begin
                            destroy_object(restock_obj);
                        end
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, 125) < restock_amt) then begin
            restock_obj := create_object_sid(125, 0, 0, -1);
            add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 125));
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 125) > restock_amt) then begin
                removed_qty := obj_is_carrying_obj_pid(self_obj, 125);
                if ((obj_is_carrying_obj_pid(self_obj, 125) - restock_amt) < removed_qty) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 125) - restock_amt;
                end
                if (removed_qty > 0) then begin
                    restock_obj := obj_carrying_pid_obj(self_obj, 125);
                    if (obj_type(self_obj) == 1) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 125);
                        if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                            if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                restock_obj := critter_inven_obj(self_obj, 0);
                                debug_msg("armour pid == " + obj_pid(restock_obj));
                                rm_obj_from_inven(self_obj, restock_obj);
                                add_obj_to_inven(self_obj, restock_obj);
                            end
                        end
                        else begin
                            if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                metarule(43, self_obj);
                            end
                        end
                    end
                    restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                    if (restock_amt == 0) then begin
                        toRemove_qty := obj_is_carrying_obj_pid(self_obj, 125) - restock_amt;
                        while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 125)) do begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 125);
                            rm_obj_from_inven(self_obj, restock_obj);
                            destroy_object(restock_obj);
                            toRemove_qty := toRemove_qty - 1;
                        end
                    end
                    else begin
                        destroy_object(restock_obj);
                    end
                end
                restock_obj := 0;
                restock_amt := 0;
            end
            else begin
                restock_obj := 0;
            end
        end
    end
    restock_amt := random(1, 2);
    if (obj_is_carrying_obj_pid(self_obj, 79) < restock_amt) then begin
        if (5 >= random(1, 100)) then begin
            if (obj_is_carrying_obj_pid(self_obj, 79) < restock_amt) then begin
                restock_obj := create_object_sid(79, 0, 0, -1);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 79));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 79) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 79);
                    if ((obj_is_carrying_obj_pid(self_obj, 79) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 79) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 79);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 79);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    metarule(43, self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        if (restock_amt == 0) then begin
                            toRemove_qty := obj_is_carrying_obj_pid(self_obj, 79) - restock_amt;
                            while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 79)) do begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 79);
                                rm_obj_from_inven(self_obj, restock_obj);
                                destroy_object(restock_obj);
                                toRemove_qty := toRemove_qty - 1;
                            end
                        end
                        else begin
                            destroy_object(restock_obj);
                        end
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, 79) < restock_amt) then begin
            restock_obj := create_object_sid(79, 0, 0, -1);
            add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 79));
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 79) > restock_amt) then begin
                removed_qty := obj_is_carrying_obj_pid(self_obj, 79);
                if ((obj_is_carrying_obj_pid(self_obj, 79) - restock_amt) < removed_qty) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 79) - restock_amt;
                end
                if (removed_qty > 0) then begin
                    restock_obj := obj_carrying_pid_obj(self_obj, 79);
                    if (obj_type(self_obj) == 1) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 79);
                        if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                            if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                restock_obj := critter_inven_obj(self_obj, 0);
                                debug_msg("armour pid == " + obj_pid(restock_obj));
                                rm_obj_from_inven(self_obj, restock_obj);
                                add_obj_to_inven(self_obj, restock_obj);
                            end
                        end
                        else begin
                            if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                metarule(43, self_obj);
                            end
                        end
                    end
                    restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                    if (restock_amt == 0) then begin
                        toRemove_qty := obj_is_carrying_obj_pid(self_obj, 79) - restock_amt;
                        while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 79)) do begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 79);
                            rm_obj_from_inven(self_obj, restock_obj);
                            destroy_object(restock_obj);
                            toRemove_qty := toRemove_qty - 1;
                        end
                    end
                    else begin
                        destroy_object(restock_obj);
                    end
                end
                restock_obj := 0;
                restock_amt := 0;
            end
            else begin
                restock_obj := 0;
            end
        end
    end
    restock_amt := random(1, 2);
    if (obj_is_carrying_obj_pid(self_obj, 106) < restock_amt) then begin
        if (5 >= random(1, 100)) then begin
            if (obj_is_carrying_obj_pid(self_obj, 106) < restock_amt) then begin
                restock_obj := create_object_sid(106, 0, 0, -1);
                add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 106));
            end
            else begin
                if (obj_is_carrying_obj_pid(self_obj, 106) > restock_amt) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 106);
                    if ((obj_is_carrying_obj_pid(self_obj, 106) - restock_amt) < removed_qty) then begin
                        removed_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                    end
                    if (removed_qty > 0) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 106);
                        if (obj_type(self_obj) == 1) then begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 106);
                            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                    restock_obj := critter_inven_obj(self_obj, 0);
                                    debug_msg("armour pid == " + obj_pid(restock_obj));
                                    rm_obj_from_inven(self_obj, restock_obj);
                                    add_obj_to_inven(self_obj, restock_obj);
                                end
                            end
                            else begin
                                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                    metarule(43, self_obj);
                                end
                            end
                        end
                        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                        if (restock_amt == 0) then begin
                            toRemove_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                            while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 106)) do begin
                                restock_obj := obj_carrying_pid_obj(self_obj, 106);
                                rm_obj_from_inven(self_obj, restock_obj);
                                destroy_object(restock_obj);
                                toRemove_qty := toRemove_qty - 1;
                            end
                        end
                        else begin
                            destroy_object(restock_obj);
                        end
                    end
                    restock_obj := 0;
                    restock_amt := 0;
                end
                else begin
                    restock_obj := 0;
                end
            end
        end
    end
    else begin
        if (obj_is_carrying_obj_pid(self_obj, 106) < restock_amt) then begin
            restock_obj := create_object_sid(106, 0, 0, -1);
            add_mult_objs_to_inven(self_obj, restock_obj, restock_amt - obj_is_carrying_obj_pid(self_obj, 106));
        end
        else begin
            if (obj_is_carrying_obj_pid(self_obj, 106) > restock_amt) then begin
                removed_qty := obj_is_carrying_obj_pid(self_obj, 106);
                if ((obj_is_carrying_obj_pid(self_obj, 106) - restock_amt) < removed_qty) then begin
                    removed_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                end
                if (removed_qty > 0) then begin
                    restock_obj := obj_carrying_pid_obj(self_obj, 106);
                    if (obj_type(self_obj) == 1) then begin
                        restock_obj := obj_carrying_pid_obj(self_obj, 106);
                        if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                            if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                                restock_obj := critter_inven_obj(self_obj, 0);
                                debug_msg("armour pid == " + obj_pid(restock_obj));
                                rm_obj_from_inven(self_obj, restock_obj);
                                add_obj_to_inven(self_obj, restock_obj);
                            end
                        end
                        else begin
                            if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                                metarule(43, self_obj);
                            end
                        end
                    end
                    restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
                    if (restock_amt == 0) then begin
                        toRemove_qty := obj_is_carrying_obj_pid(self_obj, 106) - restock_amt;
                        while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 106)) do begin
                            restock_obj := obj_carrying_pid_obj(self_obj, 106);
                            rm_obj_from_inven(self_obj, restock_obj);
                            destroy_object(restock_obj);
                            toRemove_qty := toRemove_qty - 1;
                        end
                    end
                    else begin
                        destroy_object(restock_obj);
                    end
                end
                restock_obj := 0;
                restock_amt := 0;
            end
            else begin
                restock_obj := 0;
            end
        end
    end
    if (has_trait(0, dude_obj, 20)) then begin
        item_caps_adjust(self_obj, random(50, 99));
    end
end

procedure timed_event_p_proc
begin
end

