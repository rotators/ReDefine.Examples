variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable lPartyWornArmor;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure timed_event_p_proc;
procedure push_p_proc;

variable clearni;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(910) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(910) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(910) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777294) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777294)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778049) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778049)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778050) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778050)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778051) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778051)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
end

procedure critter_p_proc
begin
    if (global_var(878) != 3) then begin
        if ((local_var(4) == 1) or (global_var(862) == 1) and obj_can_see_obj(self_obj, dude_obj)) then begin
            if (critter_is_fleeing(self_obj)) then begin
                if (anim_busy(self_obj) == 0) then begin
                    if ((tile_distance_objs(self_obj, dude_obj) < 8) or obj_can_see_obj(self_obj, dude_obj)) then begin
                        if (anim_busy(self_obj) == 0) then begin
                            global_temp := rotation_to_tile(tile_num(dude_obj), tile_num(self_obj));
                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                            global_temp := (global_temp + 1) % 6;
                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)))) do begin
                                debug_msg("flee loop: rot == " + global_temp);
                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(3, 10)), 1);
                                global_temp := (global_temp + 1) % 6;
                            end
                        end
                    end
                end
            end
            else begin
                attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
            end
        end
    end
    if ((cur_map_index == 21) and ((map_var(0) bwand 512) != 0)) then begin
        destroy_object(self_obj);
    end
    if (tile_in_tile_rect(25324, 25519, 25524, 26719, tile_num(self_obj)) or tile_in_tile_rect(21342, 21337, 22742, 22737, tile_num(self_obj)) or tile_in_tile_rect(18340, 18334, 19740, 19734, tile_num(self_obj)) or tile_in_tile_rect(24132, 24127, 25532, 25527, tile_num(self_obj)) and (local_var(6) == 1)) then begin
        if (clearni == 0) then begin
            reg_anim_func(2, self_obj);
            clearni := 1;
        end
        animate_move_obj_to_tile(self_obj, local_var(5), 0);
    end
    else begin
        if (clearni == 1) then begin
            clearni := 0;
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(4, 1);
    end
end

procedure talk_p_proc
begin
    float_msg(self_obj, message_str(1691, random(300, 304)), 8);
end

procedure destroy_p_proc
begin
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(1691, 100));
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(1691, 200));
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(4, 1);
        set_global_var(862, 1);
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, 1, 6, 256);
    critter_add_trait(self_obj, 1, 5, 186);
    if ((global_var(865) bwand 32768) != 0) then begin
        destroy_object(self_obj);
    end
    if ((global_var(865) bwand 8388608) != 0) then begin
        destroy_object(self_obj);
    end
    if ((global_var(867) bwand 512) != 0) then begin
        destroy_object(self_obj);
    end
    if (not(metarule(22, 0))) then begin
        if (local_var(5) == 0) then begin
            set_local_var(5, tile_num(self_obj));
        end
        if (local_var(5) == 23723) then begin
            set_local_var(6, 1);
        end
        if (local_var(5) == 26735) then begin
            set_local_var(6, 1);
        end
        if (local_var(5) == 26527) then begin
            set_local_var(6, 1);
        end
        if ((tile_num(self_obj) != local_var(5)) and not(metarule(14, 0))) then begin
            if (global_var(862) != 1) then begin
                move_to(self_obj, local_var(5), elevation(self_obj));
            end
        end
    end
    if ((local_var(6) == 1) and (has_trait(1, self_obj, 666) == 1)) then begin
        metarule3(100, self_obj, 1, 0);
    end
    add_timer_event(self_obj, game_ticks(random(15, 30)), 1);
    if ((local_var(6) == 1) and (has_trait(1, self_obj, 666) == 1)) then begin
        metarule3(100, self_obj, 2, 0);
    end
    add_timer_event(self_obj, game_ticks(random(45, 60)), 2);
end

procedure map_exit_p_proc
begin
    float_msg(self_obj, 0, 0);
end

procedure timed_event_p_proc
begin
    if ((fixed_param == 1) and (local_var(6) == 1)) then begin
        if (not(anim_busy(self_obj))) then begin
            reg_anim_func(2, self_obj);
            reg_anim_func(1, 1);
            animate_move_obj_to_tile(self_obj, tile_num_in_direction(local_var(5), random(0, 5), random(1, 4)), 0);
            reg_anim_func(3, 0);
        end
        if (local_var(6) == 1) then begin
            metarule3(100, self_obj, 1, 0);
        end
        add_timer_event(self_obj, game_ticks(random(15, 30)), 1);
    end
    if ((fixed_param == 2) and (local_var(6) == 1)) then begin
        call talk_p_proc();
        if (local_var(6) == 1) then begin
            metarule3(100, self_obj, 2, 0);
        end
        add_timer_event(self_obj, game_ticks(random(70, 100)), 2);
    end
end

procedure push_p_proc
begin
end

