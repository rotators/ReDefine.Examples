variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable lPartyWornArmor;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure destroy_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure combat_p_proc;
procedure timed_event_p_proc;

variable probability;
variable sequence;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(910) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(910) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(910) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777294) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777294)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778049) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778049)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778050) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778050)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778051) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778051)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
end

procedure critter_p_proc
begin
    if (global_var(918) >= 2) then begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            probability := random(0, 1);
            if (not(combat_is_initialized) and not(critter_is_fleeing(self_obj)) and (random(0, 1) == 1) and (cur_map_index != 108)) then begin
                if (get_critter_stat(dude_obj, 34) == 0) then begin
                    float_msg(self_obj, message_str(76, random(300, 302)), 2);
                end
                else begin
                    float_msg(self_obj, message_str(76, random(303, 305)), 2);
                end
            end
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
        else begin
            if (tile_distance_objs(self_obj, dude_obj) > 3) then begin
                if (tile_distance_objs(self_obj, dude_obj) > (3 * 2)) then begin
                    if ((tile_num(self_obj) != tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)) and (tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2) != 0)) then begin
                        if ((dest_tile == tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)) and (step_tile < 0)) then begin
                            step_tile := step_tile + 1;
                        end
                        else begin
                            if (anim_busy(self_obj) == 0) then begin
                                dest_tile := tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2);
                                step_tile := tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2);
                                animate_move_obj_to_tile(self_obj, step_tile, 1);
                                debug_msg("move_to_point: self_tile == " + tile_num(self_obj));
                                while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)) >= tile_distance(step_tile, tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)))) do begin
                                    step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), ((tile_distance_objs(dude_obj, self_obj) / 5) + 1) % tile_distance(step_tile, tile_num(self_obj)));
                                    debug_msg("move_to_point: step_tile == " + step_tile);
                                    animate_move_obj_to_tile(self_obj, step_tile, 1);
                                end
                                if (anim_busy(self_obj) == 0) then begin
                                    if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                        if (anim_busy(self_obj) == 0) then begin
                                            global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                                debug_msg("flee loop: rot == " + global_temp);
                                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                                global_temp := (global_temp + 1) % 6;
                                            end
                                        end
                                    end
                                    else begin
                                        step_tile := -10;
                                    end
                                end
                            end
                            else begin
                                if (tile_distance(tile_num(self_obj), tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)) < tile_distance(dest_tile, tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2))) then begin
                                    reg_anim_func(2, self_obj);
                                end
                            end
                        end
                    end
                end
                else begin
                    if ((tile_num(self_obj) != tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)) and (tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2) != 0)) then begin
                        if ((dest_tile == tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)) and (step_tile < 0)) then begin
                            step_tile := step_tile + 1;
                        end
                        else begin
                            if (anim_busy(self_obj) == 0) then begin
                                dest_tile := tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2);
                                step_tile := tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2);
                                animate_move_obj_to_tile(self_obj, step_tile, 0);
                                debug_msg("move_to_point: self_tile == " + tile_num(self_obj));
                                while ((anim_busy(self_obj) == 0) and (tile_distance(tile_num(self_obj), tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)) >= tile_distance(step_tile, tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)))) do begin
                                    step_tile := tile_num_in_direction(step_tile, rotation_to_tile(step_tile, tile_num(self_obj)), ((tile_distance_objs(dude_obj, self_obj) / 5) + 1) % tile_distance(step_tile, tile_num(self_obj)));
                                    debug_msg("move_to_point: step_tile == " + step_tile);
                                    animate_move_obj_to_tile(self_obj, step_tile, 0);
                                end
                                if (anim_busy(self_obj) == 0) then begin
                                    if (metarule3(106, tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), elevation(self_obj), 0) != 0) then begin
                                        if (anim_busy(self_obj) == 0) then begin
                                            global_temp := rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj));
                                            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                            global_temp := (global_temp + 1) % 6;
                                            while ((anim_busy(self_obj) == 0) and (global_temp != rotation_to_tile(tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num_in_direction(tile_num(self_obj), has_trait(1, self_obj, 10), 1), tile_num(self_obj)), 1), tile_num(self_obj)))) do begin
                                                debug_msg("flee loop: rot == " + global_temp);
                                                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), global_temp, random(2, 5)), 0);
                                                global_temp := (global_temp + 1) % 6;
                                            end
                                        end
                                    end
                                    else begin
                                        step_tile := -10;
                                    end
                                end
                            end
                            else begin
                                if (tile_distance(tile_num(self_obj), tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2)) < tile_distance(dest_tile, tile_num_in_direction(tile_num(dude_obj), rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)), 2))) then begin
                                    reg_anim_func(2, self_obj);
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure pickup_p_proc
begin
    attack_complex(source_obj, 0, 1, 0, 0, 30000, 0, 0);
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(4) > (3 * global_var(5))) or (global_var(2) == 1)) and (global_var(1) == 0)) then begin
            set_global_var(2, 1);
            set_global_var(3, 0);
        end
        if (metarule(51, self_obj) == 2) then begin
            if (source_obj == dude_obj) then begin
                set_global_var(2, 0);
                set_global_var(1, global_var(1) + 1);
                set_global_var(0, global_var(0) + -15);
                debug_msg("Player gains " + -15 + " Karma Points.");
                set_global_var(37, 0);
                set_global_var(38, 0);
                set_global_var(39, 0);
                set_global_var(40, 0);
                set_global_var(41, 0);
                set_global_var(42, 0);
                set_global_var(43, 0);
                set_global_var(44, 0);
                set_global_var(45, 0);
                if (global_var(0) >= 1000) then begin
                    set_global_var(37, 1);
                end
                else begin
                    if (global_var(0) >= 750) then begin
                        set_global_var(38, 1);
                    end
                    else begin
                        if (global_var(0) >= 500) then begin
                            set_global_var(39, 1);
                        end
                        else begin
                            if (global_var(0) >= 250) then begin
                                set_global_var(40, 1);
                            end
                            else begin
                                if (global_var(0) > -250) then begin
                                    set_global_var(41, 1);
                                end
                                else begin
                                    if (global_var(0) > -500) then begin
                                        set_global_var(42, 1);
                                    end
                                    else begin
                                        if (global_var(0) > -750) then begin
                                            set_global_var(43, 1);
                                        end
                                        else begin
                                            if (global_var(0) > -1000) then begin
                                                set_global_var(44, 1);
                                            end
                                            else begin
                                                set_global_var(45, 1);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        if (((global_var(4) + global_var(5)) >= 25) and ((global_var(5) > (2 * global_var(4))) or (global_var(3) == 1))) then begin
            set_global_var(3, 1);
            set_global_var(2, 0);
        end
        set_global_var(0, global_var(0) + 0);
        debug_msg("Player gains " + 0 + " Karma Points.");
        set_global_var(37, 0);
        set_global_var(38, 0);
        set_global_var(39, 0);
        set_global_var(40, 0);
        set_global_var(41, 0);
        set_global_var(42, 0);
        set_global_var(43, 0);
        set_global_var(44, 0);
        set_global_var(45, 0);
        if (global_var(0) >= 1000) then begin
            set_global_var(37, 1);
        end
        else begin
            if (global_var(0) >= 750) then begin
                set_global_var(38, 1);
            end
            else begin
                if (global_var(0) >= 500) then begin
                    set_global_var(39, 1);
                end
                else begin
                    if (global_var(0) >= 250) then begin
                        set_global_var(40, 1);
                    end
                    else begin
                        if (global_var(0) > -250) then begin
                            set_global_var(41, 1);
                        end
                        else begin
                            if (global_var(0) > -500) then begin
                                set_global_var(42, 1);
                            end
                            else begin
                                if (global_var(0) > -750) then begin
                                    set_global_var(43, 1);
                                end
                                else begin
                                    if (global_var(0) > -1000) then begin
                                        set_global_var(44, 1);
                                    end
                                    else begin
                                        set_global_var(45, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure damage_p_proc
begin
    attack_complex(source_obj, 0, 1, 0, 0, 30000, 0, 0);
    if (source_obj == dude_obj) then begin
        set_local_var(5, 1);
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, 1, 6, 103);
    critter_add_trait(self_obj, 1, 5, 36);
    if (metarule(14, 0)) then begin
        game_ui_disable;
    end
    add_timer_event(self_obj, tile_distance(tile_num(self_obj), tile_num(dude_obj)), 2);
    if (not(metarule(22, 0))) then begin
        if (global_var(1043) >= 6) then begin
            destroy_object(self_obj);
        end
        else begin
            set_global_var(1043, global_var(1043) + 1);
        end
    end
end

procedure description_p_proc
begin
    script_overrides;
    if (get_critter_stat(self_obj, 34) == 1) then begin
        display_msg(message_str(76, 202));
    end
    else begin
        if (obj_pid(self_obj) == 16777830) then begin
            display_msg(message_str(76, 201));
        end
        else begin
            display_msg(message_str(76, 200));
        end
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(76, 100 + (get_critter_stat(self_obj, 34) == 1)));
end

procedure combat_p_proc
begin
    if (fixed_param == 4) then begin
        probability := random(0, 12);
        if ((probability >= 11) and (local_var(5) == 1) and not(critter_is_fleeing(self_obj))) then begin
            if (obj_can_see_obj(self_obj, dude_obj) and (get_critter_stat(dude_obj, 34) == 0)) then begin
                float_msg(self_obj, message_str(76, random(400, 408)), 2);
            end
            if (obj_can_see_obj(self_obj, dude_obj) and (get_critter_stat(dude_obj, 34) == 1)) then begin
                float_msg(self_obj, message_str(76, random(402, 410)), 2);
            end
        end
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        sequence := sequence + 1;
        if (sequence == 1) then begin
            anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), tile_num(dude_obj)));
            if (party_member_obj(16777729) != 0) then begin
                anim(party_member_obj(16777729), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if ((party_member_obj(16777779) != 0) and ((global_var(910) bwand 32) == 0)) then begin
                anim(party_member_obj(16777779), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if ((party_member_obj(16777811) != 0) and ((global_var(910) bwand 64) == 0)) then begin
                anim(party_member_obj(16777811), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if ((party_member_obj(16777814) != 0) and ((global_var(910) bwand 128) == 0)) then begin
                anim(party_member_obj(16777814), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if (party_member_obj(16778017) != 0) then begin
                anim(party_member_obj(16778017), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if (party_member_obj(16778016) != 0) then begin
                anim(party_member_obj(16778016), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if (party_member_obj(16778049) != 0) then begin
                anim(party_member_obj(16778049), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if (party_member_obj(16778050) != 0) then begin
                anim(party_member_obj(16778050), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if (party_member_obj(16778051) != 0) then begin
                anim(party_member_obj(16778051), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            if (party_member_obj(16777812) != 0) then begin
                anim(party_member_obj(16777812), 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
            end
            add_timer_event(self_obj, game_ticks(2), 1);
        end
        if (sequence == 2) then begin
            if (get_critter_stat(dude_obj, 34) == 0) then begin
                float_msg(self_obj, message_str(76, 500), 2);
            end
            else begin
                float_msg(self_obj, message_str(76, 501), 2);
            end
            add_timer_event(self_obj, game_ticks(4), 1);
        end
        if (sequence == 3) then begin
            float_msg(dude_obj, message_str(76, 550), 4);
            add_timer_event(self_obj, game_ticks(4), 1);
        end
        if (sequence == 4) then begin
            float_msg(self_obj, message_str(76, 600), 2);
            add_timer_event(self_obj, game_ticks(5), 1);
        end
        if (sequence == 5) then begin
            float_msg(dude_obj, message_str(76, 650), 4);
            add_timer_event(self_obj, game_ticks(4), 1);
        end
        if (sequence == 6) then begin
            float_msg(self_obj, message_str(76, 700), 2);
            add_timer_event(self_obj, game_ticks(2), 1);
        end
        if (sequence == 7) then begin
            game_ui_enable;
            set_global_var(918, 2);
        end
    end
    if (fixed_param == 2) then begin
        if (global_var(918) == 0) then begin
            set_global_var(918, 1);
            add_timer_event(self_obj, 0, 1);
        end
    end
end

