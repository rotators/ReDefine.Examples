variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable lPartyWornArmor;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;
variable toRemove_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure talk_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure map_enter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure push_p_proc;
procedure Node999;
procedure Node500;
procedure Node550;
procedure Node600;
procedure Node650;
procedure Node700;
procedure Node750;
procedure Node800;
procedure Shut_down;

variable moving_distance;
variable moving_rotation;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(910) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(910) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(910) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777294) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777294)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778049) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778049)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778050) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778050)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778051) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778051)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
end

procedure critter_p_proc
begin
end

procedure talk_p_proc
begin
    if (get_critter_stat(dude_obj, 4) <= 3) then begin
        display_msg(message_str(401, 300));
    end
    else begin
        anim(dude_obj, 1000, rotation_to_tile(tile_num(dude_obj), tile_num(self_obj)));
        start_gdialog(401, self_obj, 4, -1, -1);
        gsay_start;
        call Node500();
        gsay_end;
        end_dialogue;
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(401, 100));
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(401, 200));
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        moving_distance := random(5, 10);
        moving_rotation := random(0, 5);
        if ((tile_contains_pid_obj(tile_num_in_direction(tile_num(self_obj), moving_rotation, 1), 1, 33554499) != 0) or (tile_num_in_direction(tile_num(self_obj), moving_rotation, 1) == 20534) or (tile_num_in_direction(tile_num(self_obj), moving_rotation, 1) == 22322) or (tile_num_in_direction(tile_num(self_obj), moving_rotation, 1) == 22306) or (tile_num_in_direction(tile_num(self_obj), moving_rotation, 1) == 18496)) then begin
            moving_distance := 0;
            reg_anim_func(2, self_obj);
            reg_anim_func(1, 1);
            reg_anim_animate(self_obj, 16, -1);
            reg_anim_play_sfx(self_obj, sfx_build_char_name(self_obj, 16, 4), has_trait(1, self_obj, 10));
            reg_anim_func(3, 0);
            metarule3(100, self_obj, 1, 0);
            add_timer_event(self_obj, game_ticks(random(4, 8)), 1);
            float_msg(self_obj, message_str(401, random(302, 307)), 8);
        end
        else begin
            animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), moving_rotation, 1), 0);
            moving_distance := moving_distance - 1;
            metarule3(100, self_obj, 2, 0);
            add_timer_event(self_obj, 2, 2);
        end
    end
    if (fixed_param == 2) then begin
        if (moving_distance != 0) then begin
            if ((tile_contains_pid_obj(tile_num_in_direction(tile_num(self_obj), moving_rotation, 1), 1, 33554499) != 0) or (tile_num_in_direction(tile_num(self_obj), moving_rotation, 1) == 20534) or (tile_num_in_direction(tile_num(self_obj), moving_rotation, 1) == 22322) or (tile_num_in_direction(tile_num(self_obj), moving_rotation, 1) == 22306) or (tile_num_in_direction(tile_num(self_obj), moving_rotation, 1) == 18496)) then begin
                moving_distance := 0;
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                reg_anim_animate(self_obj, 16, -1);
                reg_anim_play_sfx(self_obj, sfx_build_char_name(self_obj, 16, 4), has_trait(1, self_obj, 10));
                reg_anim_func(3, 0);
                metarule3(100, self_obj, 1, 0);
                add_timer_event(self_obj, game_ticks(random(4, 8)), 1);
                float_msg(self_obj, message_str(401, random(302, 307)), 8);
            end
            else begin
                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), moving_rotation, 1), 0);
                moving_distance := moving_distance - 1;
                metarule3(100, self_obj, 2, 0);
                add_timer_event(self_obj, 2, 2);
            end
        end
        else begin
            metarule3(100, self_obj, 1, 0);
            add_timer_event(self_obj, game_ticks(random(4, 8)), 1);
            float_msg(self_obj, message_str(401, random(302, 307)), 8);
        end
    end
    if (fixed_param == 3) then begin
        kill_critter(self_obj, 48);
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, 1, 6, 273);
    critter_add_trait(self_obj, 1, 5, 180);
    rm_timer_event(self_obj);
    metarule3(100, self_obj, 1, 0);
    add_timer_event(self_obj, game_ticks(random(4, 8)), 1);
end

procedure damage_p_proc
begin
    float_msg(self_obj, message_str(401, random(302, 307)), 8);
end

procedure destroy_p_proc
begin
    if (global_var(942) == 1) then begin
        set_global_var(942, 2);
    end
end

procedure push_p_proc
begin
end

procedure Node999
begin
end

procedure Node500
begin
    gsay_reply(401, 500);
    if (global_var(942) == 1) then begin
        if (has_skill(dude_obj, 13) > 100) then begin
            giq_option(4, 401, 501, Node550, 50);
        end
        else begin
            if (has_skill(dude_obj, 13) > 50) then begin
                giq_option(4, 401, 501, Node650, 50);
            end
            else begin
                giq_option(4, 401, 501, Node700, 50);
            end
        end
    end
    giq_option(4, 401, 502, Node999, 50);
end

procedure Node550
begin
    gsay_reply(401, 550 + (get_critter_stat(dude_obj, 34) == 1));
    giq_option(4, 401, 552, Node600, 50);
    giq_option(4, 401, 553, Node999, 50);
end

procedure Node600
begin
    gsay_reply(401, 600 + (get_critter_stat(dude_obj, 34) == 1));
    set_global_var(942, 2);
    restock_obj := create_object_sid(364, 0, 0, -1);
    add_mult_objs_to_inven(dude_obj, restock_obj, 1);
    removed_qty := obj_is_carrying_obj_pid(self_obj, 364);
    if (1 < removed_qty) then begin
        removed_qty := 1;
    end
    if (removed_qty > 0) then begin
        restock_obj := obj_carrying_pid_obj(self_obj, 364);
        if (obj_type(self_obj) == 1) then begin
            restock_obj := obj_carrying_pid_obj(self_obj, 364);
            if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                    restock_obj := critter_inven_obj(self_obj, 0);
                    debug_msg("armour pid == " + obj_pid(restock_obj));
                    rm_obj_from_inven(self_obj, restock_obj);
                    add_obj_to_inven(self_obj, restock_obj);
                end
            end
            else begin
                if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                    metarule(43, self_obj);
                end
            end
        end
        restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
        if (restock_amt == 0) then begin
            toRemove_qty := 1;
            while ((toRemove_qty > 0) and obj_carrying_pid_obj(self_obj, 364)) do begin
                restock_obj := obj_carrying_pid_obj(self_obj, 364);
                rm_obj_from_inven(self_obj, restock_obj);
                destroy_object(restock_obj);
                toRemove_qty := toRemove_qty - 1;
            end
        end
        else begin
            destroy_object(restock_obj);
        end
    end
    restock_obj := 0;
    restock_amt := 0;
    give_exp_points(700);
    display_msg(message_str(14, 100) + 700 + message_str(14, 101));
    giq_option(4, 401, 602, Shut_down, 50);
end

procedure Node650
begin
    gsay_reply(401, 650);
    giq_option(4, 401, 651, Node600, 50);
    giq_option(4, 401, 652, Node999, 50);
end

procedure Node700
begin
    gsay_reply(401, 700);
    if (get_critter_stat(dude_obj, 35) > 5) then begin
        giq_option(4, 401, 701, Node750, 50);
    end
    else begin
        giq_option(4, 401, 701, Node800, 50);
    end
    giq_option(4, 401, 702, Node999, 50);
end

procedure Node750
begin
    gsay_reply(401, 750 + (get_critter_stat(dude_obj, 34) == 1));
    set_global_var(942, 2);
    give_exp_points(500);
    display_msg(message_str(14, 100) + 500 + message_str(14, 101));
    if (get_critter_stat(dude_obj, 35) > 10) then begin
        critter_dmg(dude_obj, random(5, 10), 0);
    end
    else begin
        critter_dmg(dude_obj, random(5, get_critter_stat(dude_obj, 35) - 1), 0);
    end
    giq_option(4, 401, 752, Shut_down, 50);
end

procedure Node800
begin
    gsay_reply(401, 800 + (get_critter_stat(dude_obj, 34) == 1));
    critter_dmg(dude_obj, get_critter_stat(dude_obj, 35), 0);
    giq_option(4, 401, 802, Shut_down, 50);
end

procedure Shut_down
begin
    rm_timer_event(self_obj);
    add_timer_event(self_obj, 1, 3);
end

