variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure div(variable arg0, variable arg1);
procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure map_enter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;

variable val;
variable starttile;
variable wep_pid;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777729) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777729)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777779) != 0) and ((global_var(910) bwand 32) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777779)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777811) != 0) and ((global_var(910) bwand 64) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777811)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777812) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777812)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777813) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777813)) <= 5) then begin
            return 1;
        end
    end
    if ((party_member_obj(16777814) != 0) and ((global_var(910) bwand 128) == 0)) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777814)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777748) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777748)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777293) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777293)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777957) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777957)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777958) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777958)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778016) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778016)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778017) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778017)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16778018) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16778018)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure div(variable arg0, variable arg1)
begin
    if (0 > arg0) then begin
        return -(-arg0 / arg1);
    end
    return arg0 / arg1;
end

procedure start
begin
end

procedure critter_p_proc
begin
    variable LVar0 := 0;
    if (not(combat_is_initialized)) then begin
        if (obj_can_see_obj(self_obj, dude_obj)) then begin
            if (get_critter_stat(dude_obj, 34) == 0) then begin
                float_msg(self_obj, message_str(225, random(300, 304)), 2);
            end
            if (get_critter_stat(dude_obj, 34) == 1) then begin
                float_msg(self_obj, message_str(225, random(303, 307)), 2);
            end
            attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
        end
        if (not(anim_busy(self_obj))) then begin
            LVar0 := random(1, 20);
            if (LVar0 == 10) then begin
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                animate_move_obj_to_tile(self_obj, tile_num_in_direction(starttile, random(0, 5), random(3, 7)), 0);
                reg_anim_func(3, 0);
            end
            else begin
                if (LVar0 == 9) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    anim(self_obj, 1000, random(0, 5));
                    reg_anim_func(3, 0);
                end
            end
        end
    end
end

procedure combat_p_proc
begin
end

procedure pickup_p_proc
begin
    attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
end

procedure talk_p_proc
begin
    attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(225, 100 + (get_critter_stat(self_obj, 34) == 1)));
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(225, 200 + (get_critter_stat(self_obj, 34) == 1)));
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        if (obj_carrying_pid_obj(self_obj, wep_pid)) then begin
            wield_obj_critter(self_obj, obj_carrying_pid_obj(self_obj, wep_pid));
        end
    end
end

procedure map_enter_p_proc
begin
    critter_add_trait(self_obj, 1, 6, 161);
    critter_add_trait(self_obj, 1, 5, 1);
    starttile := tile_num(self_obj);
    if ((elevation(self_obj) != 0) and not(metarule(22, 0))) then begin
        val := random(0, 1);
        if (val == 1) then begin
            restock_obj := create_object_sid(273, 0, 0, -1);
            add_mult_objs_to_inven(self_obj, restock_obj, val);
        end
        if (get_critter_stat(self_obj, 34) == 0) then begin
            wep_pid := 7;
        end
        else begin
            wep_pid := 4;
        end
        restock_obj := create_object_sid(wep_pid, 0, 0, -1);
        add_mult_objs_to_inven(self_obj, restock_obj, 1);
        add_timer_event(self_obj, 1, 1);
    end
    reg_anim_func(2, self_obj);
    reg_anim_func(1, 1);
    anim(self_obj, 1000, random(0, 5));
    reg_anim_func(3, 0);
end

procedure damage_p_proc
begin
    attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
end

procedure destroy_p_proc
begin
end

