/*******************************************************
*      Some unreferenced imported varables found.      *
*      Because of it it is impossible to specify       *
*      the real names of global variables.             *
*******************************************************/

variable GVar0;
variable GVar1 := 1;
variable GVar2;
variable GVar3;
variable GVar4;
variable GVar5;
variable GVar6;
variable GVar7;
variable GVar8;
variable GVar9;
variable GVar10;
variable GVar11;
variable GVar12;
variable GVar13;
variable GVar14;
variable GVar15;
variable GVar16;
variable GVar17;
variable GVar18;
variable GVar19;
variable GVar20;
variable GVar21;
variable GVar22;
variable GVar23;
variable GVar24;
variable GVar25;

/* ?import? variable ProtoOfItemGiven; */
/* ?import? variable ValueOfRollCheck; */
/* ?import? variable Scenery_Creation; */
/* ?import? variable Scenery_Creation_Hex; */
/* ?import? variable Scenery_Creation_Count; */
/* ?import? variable Temp_Scenery_Creation_Hex; */
/* ?import? variable Scenery_Creation_Ptr; */
/* ?import? variable How_Many_Party_Members_Are_Injured; */
/* ?import? variable How_Many_Party_Members_Armed; */
/* ?import? variable PartyHealingItem; */

procedure checkPartyMembersNearDoor;

/* ?import? variable global_temp; */
/* ?import? variable dest_tile; */
/* ?import? variable step_tile; */
/* ?import? variable in_dialog; */
/* ?import? variable forced_node; */
/* ?import? variable restock_amt; */
/* ?import? variable restock_obj; */
/* ?import? variable restock_trash; */
/* ?import? variable removed_qty; */

procedure start;
procedure timed_event_p_proc;
procedure push_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure node998;

/* ?import? variable matatu_ptr; */
/* ?import? variable x; */
/* ?import? variable j; */
/* ?import? variable w; */
/* ?import? variable rot; */
/* ?import? variable warning; */
/* ?import? variable float1; */
/* ?import? variable float2; */


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777728) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777728)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777701) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777701)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
end

procedure timed_event_p_proc
begin
    if (fixed_param == 0) then begin
        if ((local_var(9) != 1) and (combat_is_initialized == 0)) then begin
            if (tile_num(self_obj) == local_var(8)) then begin
                GVar21 := random(1, 7);
                if (GVar21 < 7) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_animate(self_obj, 10, -1);
                    reg_anim_func(3, 0);
                end
                else begin
                    if (tile_distance(tile_num(self_obj), local_var(8)) > 7) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        animate_move_obj_to_tile(self_obj, local_var(8), 0);
                        reg_anim_func(3, 0);
                    end
                    else begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(0, 7)), 0);
                        reg_anim_func(3, 0);
                    end
                end
            end
            else begin
                if (tile_distance(tile_num(self_obj), local_var(8)) > 7) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    animate_move_obj_to_tile(self_obj, local_var(8), 0);
                    reg_anim_func(3, 0);
                end
                else begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(0, 7)), 0);
                    reg_anim_func(3, 0);
                end
            end
            add_timer_event(self_obj, random(60, 120), 0);
        end
    end
    else begin
        if (fixed_param == 1) then begin
            if (map_var(1) < 3) then begin
                if (local_var(7) < 2) then begin
                    float_msg(self_obj, mstr(random(600, 604)), FLOAT_MSG_YELLOW);
                end
                else begin
                    float_msg(self_obj, mstr(random(610, 614)), FLOAT_MSG_YELLOW);
                end
            end
            else begin
                if (local_var(7) < 2) then begin
                    float_msg(self_obj, mstr(random(605, 609)), FLOAT_MSG_YELLOW);
                end
                else begin
                    float_msg(self_obj, mstr(random(615, 619)), FLOAT_MSG_YELLOW);
                end
            end
        end
    end
end

procedure push_p_proc
begin
end

procedure critter_p_proc
begin
    if ((map_var(1) == 1) and (local_var(9) == 0)) then begin
        set_local_var(9, 1);
        critter_attempt_placement(self_obj, tile_num_in_direction(23928, random(0, 4), random(5, 7)), 0);
        GVar22 := rotation_to_tile(tile_num(self_obj), 23928);
        anim(self_obj, 1000, GVar22);
    end
    if ((local_var(5) == 2) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        attack(dude_obj);
    end
    if ((global_var(GVAR_ENEMY_ELKO) > 0) and (local_var(5) != 1) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(5, 1);
        attack(dude_obj);
    end
    if ((map_var(1) == 2) and (GVar24 == 0)) then begin
        GVar24 := 1;
        add_timer_event(self_obj, random(1, 3), 1);
    end
    if ((map_var(1) == 3) and (GVar25 == 0)) then begin
        GVar25 := 1;
        add_timer_event(self_obj, random(1, 3), 1);
    end
end

procedure destroy_p_proc
begin
    set_global_var(GVAR_TOWN_REP_ARROYO, global_var(GVAR_TOWN_REP_ARROYO) - 10);
    set_global_var(GVAR_ENEMY_ELKO, 1);
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_GOOD_MONSTER, global_var(GVAR_GOOD_MONSTER) + 1);
        if (critter_kill_type(self_obj) == 2) then begin
            if (source_obj == dude_obj) then begin
                set_global_var(GVAR_CHAMPION_REPUTATION, 0);
                set_global_var(GVAR_CHILDKILLER_REPUTATION, global_var(GVAR_CHILDKILLER_REPUTATION) + 1);
                set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) - -15);
                set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
                set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
                set_global_var(GVAR_KARMA_DEFENDER, 0);
                set_global_var(GVAR_KARMA_WANDERER, 0);
                set_global_var(GVAR_KARMA_BETRAYER, 0);
                set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
                set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
                set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
                if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
                    set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                            set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                                set_global_var(GVAR_KARMA_DEFENDER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                                    set_global_var(GVAR_KARMA_WANDERER, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                        set_global_var(GVAR_KARMA_BETRAYER, 1);
                                    end
                                    else begin
                                        if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                            set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                        end
                                        else begin
                                            if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                                set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                            end
                                            else begin
                                                set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(4) > (3 * global_var(GVAR_GOOD_MONSTER))) or (global_var(GVAR_CHAMPION_REPUTATION) == 1)) and (global_var(GVAR_CHILDKILLER_REPUTATION) == 0)) then begin
            set_global_var(GVAR_CHAMPION_REPUTATION, 1);
            set_global_var(GVAR_BERSERKER_REPUTATION, 0);
        end
        if (((global_var(GVAR_BAD_MONSTER) + global_var(GVAR_GOOD_MONSTER)) >= 25) and ((global_var(GVAR_GOOD_MONSTER) > (2 * global_var(GVAR_BAD_MONSTER))) or (global_var(GVAR_BERSERKER_REPUTATION) == 1))) then begin
            set_global_var(GVAR_BERSERKER_REPUTATION, 1);
            set_global_var(GVAR_CHAMPION_REPUTATION, 0);
        end
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) + -10);
        debug_msg("Player gains " + -10 + " Karma Points.");
        set_global_var(GVAR_KARMA_HOLY_WARRIOR, 0);
        set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 0);
        set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 0);
        set_global_var(GVAR_KARMA_DEFENDER, 0);
        set_global_var(GVAR_KARMA_WANDERER, 0);
        set_global_var(GVAR_KARMA_BETRAYER, 0);
        set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 0);
        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 0);
        set_global_var(GVAR_KARMA_DEMON_SPAWN, 0);
        if (global_var(GVAR_PLAYER_REPUTATION) >= 1000) then begin
            set_global_var(GVAR_KARMA_HOLY_WARRIOR, 1);
        end
        else begin
            if (global_var(GVAR_PLAYER_REPUTATION) >= 750) then begin
                set_global_var(GVAR_KARMA_GUARDIAN_OF_THE_WASTES, 1);
            end
            else begin
                if (global_var(GVAR_PLAYER_REPUTATION) >= 500) then begin
                    set_global_var(GVAR_KARMA_SHIELD_OF_HOPE, 1);
                end
                else begin
                    if (global_var(GVAR_PLAYER_REPUTATION) >= 250) then begin
                        set_global_var(GVAR_KARMA_DEFENDER, 1);
                    end
                    else begin
                        if (global_var(GVAR_PLAYER_REPUTATION) > -250) then begin
                            set_global_var(GVAR_KARMA_WANDERER, 1);
                        end
                        else begin
                            if (global_var(GVAR_PLAYER_REPUTATION) > -500) then begin
                                set_global_var(GVAR_KARMA_BETRAYER, 1);
                            end
                            else begin
                                if (global_var(GVAR_PLAYER_REPUTATION) > -750) then begin
                                    set_global_var(GVAR_KARMA_SWORD_OF_DESPAIR, 1);
                                end
                                else begin
                                    if (global_var(GVAR_PLAYER_REPUTATION) > -1000) then begin
                                        set_global_var(GVAR_KARMA_SCOURGE_OF_THE_WASTE, 1);
                                    end
                                    else begin
                                        set_global_var(GVAR_KARMA_DEMON_SPAWN, 1);
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        script_overrides;
        if (GVar23 < 3) then begin
            GVar23 := GVar23 + 1;
            float_msg(self_obj, mstr(random(500, 502)), FLOAT_MSG_RED);
        end
        else begin
            if (GVar23 == 3) then begin
                float_msg(self_obj, mstr(503), FLOAT_MSG_RED);
            end
            else begin
                call node998();
            end
        end
    end
end

procedure use_p_proc
begin
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(4) == 0) then begin
        display_msg(mstr(100));
    end
    else begin
        display_msg(mstr(101));
    end
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(mstr(102));
end

procedure use_skill_on_p_proc
begin
end

procedure use_obj_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        call node998();
    end
end

procedure map_enter_p_proc
begin
    if (local_var(7) == 0) then begin
        GVar19 := random(1, 3);
        if (GVar19 < 3) then begin
            set_local_var(7, 1);
        end
        else begin
            set_local_var(7, 2);
        end
    end
    if (local_var(8) == 0) then begin
        set_local_var(8, tile_num(self_obj));
    end
    if ((global_var(GVAR_ELKO_ARROYAN_SICKNESS) >= 10) or (global_var(GVAR_ELKO_SHITSTORM) >= 7) and (local_var(9) == 1)) then begin
        set_local_var(9, 2);
        move_to(self_obj, local_var(8), 0);
        anim(self_obj, 1000, random(0, 5));
    end
    add_timer_event(self_obj, random(10, 20), 0);
end

procedure map_update_p_proc
begin
end

procedure talk_p_proc
begin
    if (global_var(GVAR_ELKO_ARROYAN_SICKNESS) < 10) then begin
        GVar20 := random(1, 4);
        if (local_var(7) < 2) then begin
            if (self_gender == 0) then begin
                if (GVar20 < 4) then begin
                    float_msg(self_obj, mstr(random(200, 205)), FLOAT_MSG_YELLOW);
                end
                else begin
                    if (dude_gender == 1) then begin
                        float_msg(self_obj, mstr(random(206, 207)), FLOAT_MSG_YELLOW);
                    end
                    else begin
                        float_msg(self_obj, mstr(random(208, 209)), FLOAT_MSG_YELLOW);
                    end
                end
            end
            else begin
                if (GVar20 < 4) then begin
                    float_msg(self_obj, mstr(random(2000, 2005)), FLOAT_MSG_YELLOW);
                end
                else begin
                    if (dude_gender == 1) then begin
                        float_msg(self_obj, mstr(random(2006, 2007)), FLOAT_MSG_YELLOW);
                    end
                    else begin
                        float_msg(self_obj, mstr(random(2008, 2009)), FLOAT_MSG_YELLOW);
                    end
                end
            end
        end
        else begin
            if (self_gender == 0) then begin
                if (GVar20 < 4) then begin
                    float_msg(self_obj, mstr(random(300, 305)), FLOAT_MSG_YELLOW);
                end
                else begin
                    if (dude_gender == 1) then begin
                        float_msg(self_obj, mstr(random(306, 307)), FLOAT_MSG_YELLOW);
                    end
                    else begin
                        float_msg(self_obj, mstr(random(308, 309)), FLOAT_MSG_YELLOW);
                    end
                end
            end
            else begin
                if (GVar20 < 4) then begin
                    float_msg(self_obj, mstr(random(3000, 3005)), FLOAT_MSG_YELLOW);
                end
                else begin
                    if (dude_gender == 1) then begin
                        float_msg(self_obj, mstr(random(3006, 3007)), FLOAT_MSG_YELLOW);
                    end
                    else begin
                        float_msg(self_obj, mstr(random(3008, 3009)), FLOAT_MSG_YELLOW);
                    end
                end
            end
        end
    end
    else begin
        if (self_gender == 0) then begin
            float_msg(self_obj, mstr(random(400, 405)), FLOAT_MSG_YELLOW);
        end
        else begin
            float_msg(self_obj, mstr(random(4000, 4005)), FLOAT_MSG_YELLOW);
        end
    end
end

procedure node998
begin
    set_global_var(GVAR_ENEMY_ELKO, 1);
    set_local_var(5, 2);
end
