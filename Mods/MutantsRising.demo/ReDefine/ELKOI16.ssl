variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure use_obj_on_p_proc;
procedure timed_event_p_proc;
procedure map_update_p_proc;
procedure map_enter_p_proc;
procedure damage_p_proc;
procedure use_skill_on_p_proc;
procedure use_p_proc;
procedure pick_success;
procedure pick_fail;

import variable sdoor_ptr;

variable skill;
variable tool;
variable mod;
variable trial;
variable pick;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777728) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777728)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777701) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777701)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
    if (CUR_MAP_ARGARDEN) then begin
        sdoor_ptr := self_obj;
    end
end

procedure use_obj_on_p_proc
begin
    tool := obj_pid(obj_being_used_with);
    if (tool == 532) then begin
        script_overrides;
        if (local_var(1) == 0) then begin
            pick := 1;
            if (is_success(do_check(dude_obj, 0, -2))) then begin
                call pick_success();
            end
            else begin
                call pick_fail();
            end
        end
        else begin
            display_mstr(113);
        end
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 0) then begin
        set_local_var(1, 0);
        obj_lock(self_obj);
    end
end

procedure map_update_p_proc
begin
    if ((CUR_MAP_ARGARDEN) and (map_var(4) > 0)) then begin
        obj_unlock(self_obj);
        set_local_var(1, 2);
    end
end

procedure map_enter_p_proc
begin
    if (CUR_MAP_ARGARDEN) then begin
        sdoor_ptr := self_obj;
    end
    if (local_var(1) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        if (local_var(1) == 1) then begin
            if (obj_is_open(self_obj) == 1) then begin
                obj_close(self_obj);
            end
            add_timer_event(self_obj, 5, 0);
        end
    end
end

procedure damage_p_proc
begin
end

procedure use_skill_on_p_proc
begin
    skill := action_being_used;
    if (skill == 9) then begin
        script_overrides;
        if (local_var(1) == 0) then begin
            if (CUR_MAP_ARTEMPLE) then begin
                mod := 15;
            end
            else begin
                mod := -25;
            end
            if (is_success(roll_vs_skill(dude_obj, 9, mod))) then begin
                call pick_success();
            end
            else begin
                if (CUR_MAP_ARGARDEN) then begin
                    trial := trial + 1;
                end
                call pick_fail();
            end
        end
        else begin
            display_mstr(108);
        end
    end
end

procedure use_p_proc
begin
    if (CUR_MAP_ARTEMPLE) then begin
        if (local_var(3) == 0) then begin
            set_local_var(3, 1);
            display_mstr(100);
        end
        else begin
            if (local_var(3) == 1) then begin
                set_local_var(3, 2);
                display_mstr(109);
            end
        end
        if (local_var(1) == 0) then begin
            script_overrides;
            display_mstr(102);
        end
    end
    else begin
        if (map_var(4) == 0) then begin
            if (local_var(3) == 0) then begin
                set_local_var(3, 1);
                display_mstr(101);
            end
            if (local_var(1) == 0) then begin
                script_overrides;
                display_mstr(102);
            end
        end
    end
end

procedure pick_success
begin
    obj_unlock(self_obj);
    if (pick == 0) then begin
        display_mstr(104);
        set_local_var(1, 1);
    end
    else begin
        display_mstr(106);
        set_local_var(1, 2);
    end
    if (local_var(2) == 0) then begin
        set_local_var(2, 1);
        if (CUR_MAP_ARTEMPLE) then begin
            if (pick > 0) then begin
                give_exp_points(25);
                display_msg(g_mstr(100) + 25 + g_mstr(101));
            end
            else begin
                give_exp_points(15);
                display_msg(g_mstr(100) + 15 + g_mstr(101));
            end
        end
        else begin
            if (pick > 0) then begin
                give_exp_points(25);
                display_msg(g_mstr(100) + 25 + g_mstr(101));
            end
            else begin
                give_exp_points(45);
                display_msg(g_mstr(100) + 45 + g_mstr(101));
            end
        end
    end
    pick := 0;
end

procedure pick_fail
begin
    if (pick == 0) then begin
        display_mstr(103);
    end
    else begin
        pick := 0;
        display_mstr(105);
    end
    if (trial == 5) then begin
        float_msg(dude_obj, mstr(110), FLOAT_MSG_RED);
    end
    else begin
        if (trial == 8) then begin
            display_mstr(111);
        end
        else begin
            if (trial == 12) then begin
                display_mstr(112);
            end
        end
    end
end
