variable ProtoOfItemGiven;
variable ValueOfRollCheck := 1;
variable Scenery_Creation;
variable Scenery_Creation_Hex;
variable Scenery_Creation_Count;
variable Temp_Scenery_Creation_Hex;
variable Scenery_Creation_Ptr;
variable How_Many_Party_Members_Are_Injured;
variable How_Many_Party_Members_Armed;
variable PartyHealingItem;

procedure checkPartyMembersNearDoor;

variable global_temp;
variable dest_tile;
variable step_tile;
variable in_dialog;
variable forced_node;
variable restock_amt;
variable restock_obj;
variable restock_trash;
variable removed_qty;

procedure start;
procedure map_update_p_proc;
procedure timed_event_p_proc;
procedure pickup_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure map_enter_p_proc;
procedure use_p_proc;
procedure pick_success;
procedure pick_fail;

import variable jordan_desk_ptr;
import variable jordan_ptr;

variable pick;
variable mod;
variable skill;
variable crow;


procedure checkPartyMembersNearDoor
begin
    if (party_member_obj(16777728) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777728)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777376) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777376)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777377) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777377)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777701) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777701)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777313) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777313)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777323) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777323)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777352) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777352)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777378) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777378)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777368) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777368)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777379) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777379)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777380) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777380)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777295) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777295)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777381) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777381)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777407) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777407)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777411) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777411)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777412) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777412)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777413) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777413)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777481) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777481)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777558) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777558)) <= 5) then begin
            return 1;
        end
    end
    if (party_member_obj(16777600) != 0) then begin
        if (tile_distance_objs(self_obj, party_member_obj(16777600)) <= 5) then begin
            return 1;
        end
    end
    return 0;
end

procedure start
begin
    jordan_desk_ptr := self_obj;
end

procedure map_update_p_proc
begin
    jordan_desk_ptr := self_obj;
    if ((obj_is_carrying_obj_pid(self_obj, 534) > 0) and (global_var(GVAR_ELKO_SICK_JONAS_APPROACH) == 5)) then begin
        removed_qty := obj_is_carrying_obj_pid(self_obj, 534);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(self_obj, 534);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(self_obj, 534);
                if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                        restock_obj := critter_inven_obj(self_obj, 0);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(self_obj, restock_obj);
                        add_obj_to_inven(self_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                        inven_unwield(self_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
            destroy_object(restock_obj);
        end
        restock_obj := 0;
        restock_amt := 0;
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 0) then begin
        if ((obj_is_carrying_obj_pid(self_obj, 534) == 0) and (obj_is_carrying_obj_pid(dude_obj, 534) > 0)) then begin
            set_map_var(15, 1);
            set_global_var(GVAR_ELKO_SICK_JONAS_APPROACH, 4);
        end
    end
end

procedure pickup_p_proc
begin
    if ((obj_is_carrying_obj_pid(self_obj, 534) > 0) and (map_var(15) == 0)) then begin
        add_timer_event(self_obj, 5, 0);
    end
end

procedure use_skill_on_p_proc
begin
    skill := action_being_used;
    if (dude_iq > 3) then begin
        if (skill == 9) then begin
            script_overrides;
            if (using_skill(dude_obj, 8)) then begin
                if (is_success(roll_vs_skill(dude_obj, 8, -25))) then begin
                    if (obj_is_carrying_obj_pid(dude_obj, 536) > 0) then begin
                        set_local_var(1, 1);
                        display_msg(mstr(101));
                    end
                    else begin
                        if (is_success(roll_vs_skill(dude_obj, 9, -15))) then begin
                            call pick_success();
                        end
                        else begin
                            call pick_fail();
                        end
                    end
                end
                else begin
                    if (map_var(14) == 0) then begin
                        add_timer_event(jordan_ptr, 3, 2);
                    end
                    else begin
                        if (obj_is_carrying_obj_pid(dude_obj, 536) > 0) then begin
                            set_local_var(1, 1);
                            display_msg(mstr(101));
                        end
                        else begin
                            if (is_success(roll_vs_skill(dude_obj, 9, -15))) then begin
                                call pick_success();
                            end
                            else begin
                                call pick_fail();
                            end
                        end
                    end
                end
            end
            else begin
                if (map_var(14) == 0) then begin
                    add_timer_event(jordan_ptr, 3, 2);
                end
                else begin
                    if (obj_is_carrying_obj_pid(dude_obj, 536) > 0) then begin
                        set_local_var(1, 1);
                        display_msg(mstr(101));
                    end
                    else begin
                        if (is_success(roll_vs_skill(dude_obj, 9, -15))) then begin
                            call pick_success();
                        end
                        else begin
                            call pick_fail();
                        end
                    end
                end
            end
        end
        else begin
            if (skill == 10) then begin
                if (local_var(1) == 0) then begin
                    script_overrides;
                    display_msg(mstr(100));
                end
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
    pick := obj_pid(obj_being_used_with);
    if (dude_iq > 3) then begin
        if (using_skill(dude_obj, 8)) then begin
            if (is_success(roll_vs_skill(dude_obj, 8, -25))) then begin
                if (pick == 536) then begin
                    script_overrides;
                    set_local_var(1, 1);
                    display_msg(mstr(101));
                end
                else begin
                    if ((pick == 20) or (pick == 532)) then begin
                        crow := 1;
                        script_overrides;
                        if (is_success(do_check(dude_obj, 0, 0))) then begin
                            call pick_success();
                        end
                        else begin
                            call pick_fail();
                        end
                    end
                end
            end
            else begin
                if (map_var(14) == 0) then begin
                    script_overrides;
                    add_timer_event(jordan_ptr, 3, 2);
                end
                else begin
                    if (pick == 536) then begin
                        script_overrides;
                        set_local_var(1, 1);
                        display_msg(mstr(101));
                    end
                    else begin
                        if ((pick == 20) or (pick == 532)) then begin
                            script_overrides;
                            crow := 1;
                            if (is_success(do_check(dude_obj, 0, 0))) then begin
                                call pick_success();
                            end
                            else begin
                                call pick_fail();
                            end
                        end
                    end
                end
            end
        end
        else begin
            if (map_var(14) == 0) then begin
                script_overrides;
                add_timer_event(jordan_ptr, 3, 2);
            end
            else begin
                if (pick == 536) then begin
                    script_overrides;
                    set_local_var(1, 1);
                    display_msg(mstr(101));
                end
                else begin
                    if ((pick == 20) or (pick == 532)) then begin
                        script_overrides;
                        crow := 1;
                        if (is_success(do_check(dude_obj, 0, 0))) then begin
                            call pick_success();
                        end
                        else begin
                            call pick_fail();
                        end
                    end
                end
            end
        end
    end
end

procedure map_enter_p_proc
begin
    jordan_desk_ptr := self_obj;
    if (local_var(1) < 2) then begin
        set_local_var(1, 0);
    end
    if ((dude_iq < 4) and (obj_is_carrying_obj_pid(self_obj, 534) > 0)) then begin
        removed_qty := obj_is_carrying_obj_pid(self_obj, 534);
        if (1 < removed_qty) then begin
            removed_qty := 1;
        end
        if (removed_qty > 0) then begin
            restock_obj := obj_carrying_pid_obj(self_obj, 534);
            if (obj_type(self_obj) == 1) then begin
                restock_obj := obj_carrying_pid_obj(self_obj, 534);
                if (critter_inven_obj(self_obj, 0) == restock_obj) then begin
                    if (obj_item_subtype(critter_inven_obj(self_obj, 0)) == 0) then begin
                        restock_obj := critter_inven_obj(self_obj, 0);
                        debug_msg("armour pid == " + obj_pid(restock_obj));
                        rm_obj_from_inven(self_obj, restock_obj);
                        add_obj_to_inven(self_obj, restock_obj);
                    end
                end
                else begin
                    if ((critter_inven_obj(self_obj, 2) == restock_obj) or (critter_inven_obj(self_obj, 1) == restock_obj)) then begin
                        inven_unwield(self_obj);
                    end
                end
            end
            restock_amt := rm_mult_objs_from_inven(self_obj, restock_obj, removed_qty);
            destroy_object(restock_obj);
        end
        restock_obj := 0;
        restock_amt := 0;
    end
end

procedure use_p_proc
begin
    if (dude_iq > 3) then begin
        if (local_var(1) == 0) then begin
            script_overrides;
            display_msg(mstr(100));
        end
        if (map_var(14) == 0) then begin
            if (using_skill(dude_obj, 8)) then begin
                if (is_success(roll_vs_skill(dude_obj, 8, -25))) then begin
                end
                else begin
                    script_overrides;
                    add_timer_event(jordan_ptr, 3, 2);
                end
            end
            else begin
                script_overrides;
                add_timer_event(jordan_ptr, 3, 1);
            end
        end
    end
end

procedure pick_success
begin
    if (crow == 0) then begin
        display_msg(mstr(102));
        set_local_var(1, 1);
    end
    else begin
        crow := 0;
        display_msg(mstr(104));
        set_local_var(1, 2);
    end
    if (local_var(2) == 0) then begin
        set_local_var(2, 1);
        give_exp_points(25);
        display_msg(g_mstr(100) + 25 + g_mstr(101));
    end
end

procedure pick_fail
begin
    if (crow == 0) then begin
        display_msg(mstr(103));
    end
    else begin
        crow := 0;
        display_msg(mstr(105));
    end
end
