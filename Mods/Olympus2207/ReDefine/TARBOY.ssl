variable dude_objective_reputation;
variable self_subjective_reaction;
variable z_critter_search;
variable critter_is_detected;
variable detected_critter;
variable persuade_chance;
variable steal_perk;
variable steal_gloves;
variable max_distance;
variable animation_is_called;
variable distance_to_walk;
variable time_to_sleep;
variable time_to_play;

procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure push_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015a;
procedure Node015b;
procedure Node999;


procedure start
begin
    if (local_var(1) == 0) then begin
        if (random(0, 100) <= 25) then begin
            add_mult_objs_to_inven(self_obj, create_object(410, 1, 2), random(1, 4));
        end
        if (random(0, 100) <= 15) then begin
            add_mult_objs_to_inven(self_obj, create_object(411, 1, 2), random(1, 4));
        end
        if (random(0, 100) <= 10) then begin
            add_obj_to_inven(self_obj, create_object(416, 1, 2));
        end
        if (random(0, 100) <= 10) then begin
            add_obj_to_inven(self_obj, create_object(417, 1, 2));
        end
        if (random(0, 100) <= 10) then begin
            add_obj_to_inven(self_obj, create_object(418, 1, 2));
        end
        if (random(0, 100) <= 15) then begin
            add_obj_to_inven(self_obj, create_object(424, 1, 2));
        end
        if (random(0, 100) <= 15) then begin
            add_obj_to_inven(self_obj, create_object(422, 1, 2));
        end
        if (random(0, 100) <= 15) then begin
            add_obj_to_inven(self_obj, create_object(432, 1, 2));
        end
        if (random(0, 100) <= 15) then begin
            add_obj_to_inven(self_obj, create_object(429, 1, 2));
        end
        if (random(0, 100) <= 25) then begin
            add_mult_objs_to_inven(self_obj, create_object(213, 1, 2), random(1, 2));
        end
        if (random(0, 100) <= 10) then begin
            add_obj_to_inven(self_obj, create_object(217, 1, 2));
        end
        if (random(0, 100) <= 10) then begin
            add_obj_to_inven(self_obj, create_object(108, 1, 2));
        end
        if (random(0, 100) <= 5) then begin
            add_obj_to_inven(self_obj, create_object(39, 1, 2));
        end
        if (random(0, 100) <= 15) then begin
            add_obj_to_inven(self_obj, create_object(220, 1, 2));
        end
        set_local_var(3, tile_num(self_obj));
        set_local_var(1, 1);
        set_local_var(4, random(20, 25));
        set_local_var(5, random(40, 70));
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 1);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_LITTLE_BOY);
        if (random(0, 100) <= 50) then begin
            add_obj_to_inven(self_obj, create_object(434, 1, 2));
        end
        max_distance := random(13, 25);
    end
end

procedure critter_p_proc
begin
    if ((animation_is_called == 0) and (anim_busy(self_obj) == 0)) then begin
        animation_is_called := 1;
        add_timer_event(self_obj, random(19, 56), 1);
    end
    if ((local_var(2) == 1) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(2, 0);
        attack_setup(self_obj, dude_obj);
    end
end

procedure combat_p_proc
begin
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(random(6, 9));
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(random(1, 5));
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure push_p_proc
begin
end

procedure talk_p_proc
begin
    if ((global_var(GVAR_SLAVES_COUNT) == 1) and (map_var(0) == 0)) then begin
        start_gdialog(8, self_obj, -1, -1, -1);
        gsay_start;
        call Node010();
        gsay_end;
        end_dialogue;
    end
    else begin
        if ((art_anim(obj_art_fid(self_obj)) == 48) or (art_anim(obj_art_fid(self_obj)) == 49)) then begin
            float_msg(self_obj, mstr(random(1010, 1013)), FLOAT_MSG_NORMAL);
        end
        else begin
            if ((get_sfall_global_int(10) == 1) and (global_var(GVAR_PLAYER_MARRIED) == 0)) then begin
                float_msg(self_obj, mstr(random(1014, 1018)), FLOAT_MSG_RED);
                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(dude_tile, tile_num(self_obj)), random(5, 9)), 1 bwor 16);
            end
            else begin
                if (global_var(GVAR_PLAYER_MARRIED) >= 3) then begin
                    if ((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 120) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 121) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 122) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 123) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 129) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 391)) then begin
                        float_msg(self_obj, message_str(SCRIPT_STTEXT, random(940, 942)), FLOAT_MSG_NORMAL);
                    end
                    else begin
                        if (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 394) then begin
                            float_msg(self_obj, message_str(SCRIPT_STTEXT, random(936, 938)), FLOAT_MSG_NORMAL);
                        end
                    end
                end
                else begin
                    if (random(1, 2) == 1) then begin
                        float_msg(self_obj, mstr(random(1000, 1009)), FLOAT_MSG_NORMAL);
                    end
                    else begin
                        float_msg(self_obj, mstr(random(1000, 1009)), FLOAT_MSG_YELLOW);
                    end
                end
            end
        end
    end
end

procedure destroy_p_proc
begin
end

procedure use_skill_on_p_proc
begin
    if (action_being_used == 10) then begin
        if (dude_skill(SKILL_STEAL) < (local_var(4) - (((dude_luck - 4) * 4) - (difficulty_level * 4)))) then begin
            script_overrides;
            display_msg(message_str(SCRIPT_STTEXT, random(200, 203)));
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure map_enter_p_proc
begin
    max_distance := random(13, 25);
    time_to_sleep := random(2100, 2200);
    time_to_play := random(900, 1000);
    if ((game_time_hour <= time_to_play) and (game_time_hour > time_to_sleep) and (tile_num(self_obj) != local_var(3))) then begin
        move_to(self_obj, local_var(3), elevation(self_obj));
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        reg_anim_animate(self_obj, 49, -1);
        reg_anim_func(3, 0);
        critter_injure(self_obj, 2);
    end
    animation_is_called := 1;
    add_timer_event(self_obj, 1, 1);
end

procedure timed_event_p_proc
begin
    if ((fixed_param == 1) and not(combat_is_initialized)) then begin
        if ((game_time_hour >= time_to_play) and (game_time_hour < time_to_sleep)) then begin
            if ((art_anim(obj_art_fid(self_obj)) == 48) or (art_anim(obj_art_fid(self_obj)) == 49)) then begin
                critter_injure(self_obj, 2 bwor 8388608);
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                if (art_anim(obj_art_fid(self_obj)) == 48) then begin
                    reg_anim_animate(self_obj, 37, -1);
                end
                else begin
                    reg_anim_animate(self_obj, 36, -1);
                end
                reg_anim_func(3, 0);
            end
            else begin
                distance_to_walk := random(4, 12);
                if (tile_distance(tile_num(self_obj), local_var(3)) < max_distance) then begin
                    if (distance_to_walk < 7) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (random(1, 4) == 1) then begin
                            reg_anim_animate(self_obj, random(10, 11), -1);
                        end
                        if (random(1, 3) == 1) then begin
                            reg_anim_animate(self_obj, random(16, 18), -1);
                        end
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), distance_to_walk), -1);
                        if (random(1, 3) == 1) then begin
                            reg_anim_animate(self_obj, 10, -1);
                        end
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                    else begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (random(1, 4) == 1) then begin
                            reg_anim_animate(self_obj, random(10, 11), -1);
                        end
                        if (random(1, 3) == 1) then begin
                            reg_anim_animate(self_obj, random(16, 18), -1);
                        end
                        reg_anim_obj_run_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), distance_to_walk), -1);
                        if (random(1, 3) == 1) then begin
                            reg_anim_animate(self_obj, 10, -1);
                        end
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                end
                else begin
                    if (distance_to_walk < 7) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (random(1, 4) == 1) then begin
                            reg_anim_animate(self_obj, random(10, 11), -1);
                        end
                        if (random(1, 3) == 1) then begin
                            reg_anim_animate(self_obj, random(16, 18), -1);
                        end
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), local_var(3)), distance_to_walk), -1);
                        if (random(1, 3) == 1) then begin
                            reg_anim_animate(self_obj, 10, -1);
                        end
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                    else begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (random(1, 4) == 1) then begin
                            reg_anim_animate(self_obj, random(10, 11), -1);
                        end
                        if (random(1, 3) == 1) then begin
                            reg_anim_animate(self_obj, random(16, 18), -1);
                        end
                        reg_anim_obj_run_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), local_var(3)), distance_to_walk), -1);
                        if (random(1, 3) == 1) then begin
                            reg_anim_animate(self_obj, 10, -1);
                        end
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                end
            end
        end
        else begin
            if (tile_num(self_obj) != local_var(3)) then begin
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                reg_anim_obj_move_to_tile(self_obj, local_var(3), -1);
                if (random(1, 2) == 1) then begin
                    reg_anim_animate_reverse(self_obj, 36, -1);
                    reg_anim_animate(self_obj, 49, -1);
                end
                else begin
                    reg_anim_animate_reverse(self_obj, 37, -1);
                    reg_anim_animate(self_obj, 48, -1);
                end
                reg_anim_func(3, 0);
                critter_injure(self_obj, 2);
            end
            else begin
                if ((art_anim(obj_art_fid(self_obj)) != 48) and (art_anim(obj_art_fid(self_obj)) != 49)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    if (random(1, 2) == 1) then begin
                        reg_anim_animate_reverse(self_obj, 36, -1);
                        reg_anim_animate(self_obj, 49, -1);
                    end
                    else begin
                        reg_anim_animate_reverse(self_obj, 37, -1);
                        reg_anim_animate(self_obj, 48, -1);
                    end
                    reg_anim_func(3, 0);
                    critter_injure(self_obj, 2);
                end
            end
        end
        animation_is_called := 0;
    end
end

procedure Node010
begin
    Reply(100);
    giq_option(1, NAME, 101, Node011, NEUTRAL_REACTION);
    giq_option(1, NAME, 102, Node011, NEUTRAL_REACTION);
end

procedure Node011
begin
    Reply(110);
    giq_option(1, NAME, 111, Node999, NEUTRAL_REACTION);
    giq_option(1, NAME, 112, Node012, NEUTRAL_REACTION);
end

procedure Node012
begin
    Reply(120);
    giq_option(1, NAME, 121, Node013, NEUTRAL_REACTION);
    giq_option(1, NAME, 122, Node014, NEUTRAL_REACTION);
end

procedure Node013
begin
    if (global_var(GVAR_PLAYER_REPUTATION) > 0) then begin
        dude_objective_reputation := (global_var(GVAR_TOWN_REP_ARROYO) * 30) + global_var(GVAR_PLAYER_REPUTATION) - (20 * global_var(GVAR_CHILDKILLER_REPUTATION));
    end
    else begin
        dude_objective_reputation := (global_var(GVAR_TOWN_REP_ARROYO) * 30) + global_var(GVAR_PLAYER_REPUTATION) - (20 * global_var(GVAR_CHILDKILLER_REPUTATION));
    end
    if ((dude_objective_reputation + local_var(6)) >= 300) then begin
        self_subjective_reaction := 1;
    end
    else begin
        if (((dude_objective_reputation + local_var(6)) >= -300) and ((dude_objective_reputation + local_var(6)) < 300)) then begin
            self_subjective_reaction := 0;
        end
        else begin
            self_subjective_reaction := -1;
        end
    end
    persuade_chance := floor(((dude_charisma * 10) + dude_skill(SKILL_SPEECH) + local_var(5)) / 5) + (10 * self_subjective_reaction);
    if (random(0, 120) <= persuade_chance) then begin
        add_obj_to_inven(dude_obj, create_object(293, 1, 2));
        set_map_var(0, 1);
        give_exp_points(floor(30 / 5) + (dude_iq * floor(30 / 12)) + (dude_luck * floor(30 / 30)) + (floor(30 / 75) * (((dude_luck - 4) * 4) - (difficulty_level * 4))));
        display_msg(message_str(SCRIPT_STTEXT, random(140, 143)) + (floor(30 / 5) + (dude_iq * floor(30 / 12)) + (dude_luck * floor(30 / 30)) + (floor(30 / 75) * (((dude_luck - 4) * 4) - (difficulty_level * 4)))) + message_str(SCRIPT_STTEXT, 144));
        Reply(1302);
        giq_option(1, NAME, 132, Node999, NEUTRAL_REACTION);
        giq_option(1, NAME, 133, Node999, NEUTRAL_REACTION);
    end
    else begin
        Reply(1301);
        giq_option(1, NAME, 131, Node999, NEUTRAL_REACTION);
    end
end

procedure Node014
begin
    Reply(140);
    giq_option(1, NAME, 141, Node015a, NEUTRAL_REACTION);
    giq_option(1, NAME, 142, Node015a, NEUTRAL_REACTION);
    giq_option(1, NAME, 143, Node015b, NEUTRAL_REACTION);
    giq_option(1, NAME, 144, Node015a, NEUTRAL_REACTION);
end

procedure Node015a
begin
    Reply(1501);
    giq_option(1, NAME, 131, Node999, NEUTRAL_REACTION);
end

procedure Node015b
begin
    add_obj_to_inven(dude_obj, create_object(293, 1, 2));
    set_map_var(0, 1);
    Reply(1502);
    giq_option(1, NAME, 151, Node999, NEUTRAL_REACTION);
    giq_option(1, NAME, 152, Node999, NEUTRAL_REACTION);
end

procedure Node999
begin
end
