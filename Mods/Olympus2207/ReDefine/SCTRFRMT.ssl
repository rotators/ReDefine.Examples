variable dude_objective_reputation;
variable self_subjective_reaction;
variable z_critter_search;
variable critter_is_detected;
variable detected_critter;
variable persuade_chance;
variable steal_perk;
variable steal_gloves;
variable right_variant;
variable variant_position;
variable second_right_variant;
variable first_position;
variable second_position;
variable third_position;

procedure start;
procedure description_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;
procedure talk_p_proc;
procedure welcome_screen;
procedure first_step;
procedure second_step;
procedure shock;
procedure quitter;
procedure sucsess;
procedure Electrical_tip;
procedure close_tip;
procedure vide;


procedure start
begin
    if (local_var(0) == 0) then begin
        set_local_var(0, 1);
        set_local_var(1, 0);
        set_local_var(5, 0);
    end
end

procedure description_p_proc
begin
end

procedure look_at_p_proc
begin
end

procedure damage_p_proc
begin
end

procedure use_p_proc
begin
    if (global_var(GVAR_MAGGIE_STATUS) != 2) then begin
        call shock();
    end
end

procedure use_obj_on_p_proc
begin
end

procedure use_skill_on_p_proc
begin
    if (global_var(GVAR_MAGGIE_STATUS) != 2) then begin
        if (action_being_used == 13) then begin
            script_overrides;
            if (random(0, 100) < ((((get_critter_stat(dude_obj, STAT_ag) * 3) + (dude_iq * 2) + dude_skill(SKILL_REPAIR) + 3) / 2) + (((dude_luck - 4) * 4) - (difficulty_level * 4)))) then begin
                call sucsess();
            end
            else begin
                critter_dmg(dude_obj, random(8, 12) - dude_luck, DMG_electrical);
                display_msg(message_str(SCRIPT_STTEXT, random(26, 29)));
            end
        end
        if (action_being_used == 12) then begin
            script_overrides;
            dialogue_system_enter;
        end
    end
end

procedure map_enter_p_proc
begin
    if (global_var(GVAR_MAGGIE_STATUS) != 2) then begin
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        reg_anim_animate_forever(self_obj, 0);
        reg_anim_func(3, 0);
        add_timer_event(self_obj, 2, 1);
    end
end

procedure map_update_p_proc
begin
    if (global_var(GVAR_MAGGIE_STATUS) != 2) then begin
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        reg_anim_animate_forever(self_obj, 0);
        reg_anim_func(3, 0);
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        if (global_var(GVAR_MAGGIE_STATUS) != 2) then begin
            if ((map_var(2) == 0) and (tile_distance(tile_num(self_obj), dude_tile) <= 5)) then begin
                animate_move_obj_to_tile(dude_obj, dude_tile, 0);
                call Electrical_tip();
            end
            else begin
                add_timer_event(self_obj, 2, 1);
            end
        end
    end
end

procedure talk_p_proc
begin
    start_gdialog(10, self_obj, 4, 2, -1);
    gsay_start;
    call welcome_screen();
    gsay_end;
    end_dialogue;
end

procedure welcome_screen
begin
    gsay_reply(SCRIPT_STTEXT, 10);
    giq_option(1, SCRIPT_STTEXT, 11, first_step, NEUTRAL_REACTION);
    giq_option(1, SCRIPT_STTEXT, random(12, 14), quitter, NEUTRAL_REACTION);
end

procedure first_step
begin
    right_variant := random(1, 3);
    variant_position := random(16, 18);
    gsay_reply(SCRIPT_STTEXT, 15);
    if (right_variant == 1) then begin
        giq_option(1, SCRIPT_STTEXT, variant_position, second_step, NEUTRAL_REACTION);
    end
    else begin
        giq_option(1, SCRIPT_STTEXT, variant_position, shock, NEUTRAL_REACTION);
    end
    first_position := variant_position;
    if (variant_position == 16) then begin
        variant_position := random(17, 18);
        if (right_variant == 2) then begin
            giq_option(1, SCRIPT_STTEXT, variant_position, second_step, NEUTRAL_REACTION);
        end
        else begin
            giq_option(1, SCRIPT_STTEXT, variant_position, shock, NEUTRAL_REACTION);
        end
    end
    else begin
        if (variant_position == 17) then begin
            if (random(1, 2) == 1) then begin
                variant_position := 16;
                if (right_variant == 2) then begin
                    giq_option(1, SCRIPT_STTEXT, variant_position, second_step, NEUTRAL_REACTION);
                end
                else begin
                    giq_option(1, SCRIPT_STTEXT, variant_position, shock, NEUTRAL_REACTION);
                end
            end
            else begin
                variant_position := 18;
                if (right_variant == 2) then begin
                    giq_option(1, SCRIPT_STTEXT, variant_position, second_step, NEUTRAL_REACTION);
                end
                else begin
                    giq_option(1, SCRIPT_STTEXT, variant_position, shock, NEUTRAL_REACTION);
                end
            end
        end
        else begin
            variant_position := random(16, 17);
            if (right_variant == 2) then begin
                giq_option(1, SCRIPT_STTEXT, variant_position, second_step, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, variant_position, shock, NEUTRAL_REACTION);
            end
        end
    end
    second_position := variant_position;
    third_position := first_position + second_position;
    if (third_position == 33) then begin
        variant_position := 18;
        if (right_variant == 3) then begin
            giq_option(1, SCRIPT_STTEXT, variant_position, second_step, NEUTRAL_REACTION);
        end
        else begin
            giq_option(1, SCRIPT_STTEXT, variant_position, shock, NEUTRAL_REACTION);
        end
    end
    if (third_position == 34) then begin
        variant_position := 17;
        if (right_variant == 3) then begin
            giq_option(1, SCRIPT_STTEXT, variant_position, second_step, NEUTRAL_REACTION);
        end
        else begin
            giq_option(1, SCRIPT_STTEXT, variant_position, shock, NEUTRAL_REACTION);
        end
    end
    if (third_position == 35) then begin
        variant_position := 16;
        if (right_variant == 3) then begin
            giq_option(1, SCRIPT_STTEXT, variant_position, second_step, NEUTRAL_REACTION);
        end
        else begin
            giq_option(1, SCRIPT_STTEXT, variant_position, shock, NEUTRAL_REACTION);
        end
    end
    third_position := variant_position;
    giq_option(1, SCRIPT_STTEXT, random(12, 14), quitter, NEUTRAL_REACTION);
end

procedure second_step
begin
    second_right_variant := random(1, 2);
    gsay_reply(SCRIPT_STTEXT, 19);
    if (right_variant == 1) then begin
        if (first_position == 16) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 22, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 23, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 22, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 23, sucsess, NEUTRAL_REACTION);
            end
        end
        if (first_position == 17) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 24, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 25, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 24, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 25, sucsess, NEUTRAL_REACTION);
            end
        end
        if (first_position == 18) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 20, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 21, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 20, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 21, sucsess, NEUTRAL_REACTION);
            end
        end
    end
    if (right_variant == 2) then begin
        if (second_position == 16) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 22, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 23, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 22, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 23, sucsess, NEUTRAL_REACTION);
            end
        end
        if (second_position == 17) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 24, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 25, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 24, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 25, sucsess, NEUTRAL_REACTION);
            end
        end
        if (second_position == 18) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 20, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 21, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 20, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 21, sucsess, NEUTRAL_REACTION);
            end
        end
    end
    if (right_variant == 3) then begin
        if (third_position == 16) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 22, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 23, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 22, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 23, sucsess, NEUTRAL_REACTION);
            end
        end
        if (third_position == 17) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 24, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 25, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 24, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 25, sucsess, NEUTRAL_REACTION);
            end
        end
        if (third_position == 18) then begin
            if (second_right_variant == 1) then begin
                giq_option(1, SCRIPT_STTEXT, 20, sucsess, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 21, shock, NEUTRAL_REACTION);
            end
            else begin
                giq_option(1, SCRIPT_STTEXT, 20, shock, NEUTRAL_REACTION);
                giq_option(1, SCRIPT_STTEXT, 21, sucsess, NEUTRAL_REACTION);
            end
        end
    end
    giq_option(1, SCRIPT_STTEXT, random(12, 14), quitter, NEUTRAL_REACTION);
end

procedure shock
begin
    critter_dmg(dude_obj, random(10, 20) - dude_luck, DMG_electrical);
    display_msg(message_str(SCRIPT_STTEXT, random(26, 29)));
end

procedure quitter
begin
end

procedure sucsess
begin
    move_to(self_obj, 1, 2);
    create_object(33555990, 14316, 0);
    set_global_var(GVAR_MAGGIE_STATUS, 2);
    obj_set_light_level(self_obj, 0, 1);
    display_msg(message_str(SCRIPT_STTEXT, 30));
end

procedure Electrical_tip
begin
    createWin("Tip_Window", (get_screen_width / 2) - 300, ((get_screen_height - 100) / 2) - 150, 600, 300);
    selectWin("Tip_Window");
    display("PCX/tipwndw.pcx");
    setFont(3);
    setTextColor(0.00000, 0.80000, 0.00000);
    format(" " + message_str(SCRIPT_TIPTEXT, 22), 39, 56, 529, 149, 2);
    addButton("BTN_close", 445, 243, 135, 34);
    addButtonGfx("BTN_close", "PCX/tipcldwn.pcx", "PCX/tipclup.pcx", "PCX/tipclup.pcx");
    addButtonProc("BTN_close", vide, vide, vide, close_tip);
    addButton("BTN_next", 185, 243, 135, 34);
    addButtonGfx("BTN_next", "PCX/tipnxdwn.pcx", "PCX/tipnxup.pcx", "PCX/tipnxup.pcx");
    addButtonProc("BTN_next", vide, vide, vide, vide);
    addButton("BTN_back", 22, 243, 135, 34);
    addButtonGfx("BTN_back", "PCX/tipbkdwn.pcx", "PCX/tipbkup.pcx", "PCX/tipbkup.pcx");
    addButtonProc("BTN_back", vide, vide, vide, vide);
    game_ui_disable;
    mouseShape("PCX/mouse2.pcx", 0, 0);
    showWin;
end

procedure close_tip
begin
    deleteWin("Tip_Window");
    set_map_var(2, 1);
    game_ui_enable;
end

procedure vide
begin
end
