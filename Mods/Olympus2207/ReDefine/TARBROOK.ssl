variable dude_objective_reputation;
variable self_subjective_reaction;
variable z_critter_search;
variable critter_is_detected;
variable detected_critter;
variable persuade_chance;
variable steal_perk;
variable steal_gloves;
variable max_distance;
variable animation_is_called;
variable distance_to_walk;
variable time_to_work;
variable time_to_repose;
variable work_tile_chois;
variable repose_tile_chois;
variable first_guard;
variable second_guard;

procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure push_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node999;


procedure start
begin
    if (local_var(1) == 0) then begin
        set_local_var(3, tile_num(self_obj));
        set_local_var(1, 1);
        set_local_var(4, random(50, 70));
        set_local_var(5, random(60, 90));
        set_local_var(6, random(0, 20));
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 1);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_TARTAR_MEN);
        max_distance := random(6, 8);
    end
end

procedure critter_p_proc
begin
    if ((get_sfall_global_int(11) == 1) and (local_var(8) == 0)) then begin
        set_local_var(8, 1);
        game_ui_disable;
        move_to(dude_obj, 17680, elevation(self_obj));
        anim(dude_obj, 1000, 3);
        animation_is_called := 1;
        rm_timer_event(self_obj);
        critter_attempt_placement(self_obj, 18086, elevation(self_obj));
        anim(self_obj, 1000, 2);
        first_guard := create_object(16777237, 18488, elevation(self_obj));
        wield_obj_critter(first_guard, create_object(103, 1, 2));
        anim(first_guard, 1000, 0);
        second_guard := create_object(16777237, 18484, elevation(self_obj));
        wield_obj_critter(second_guard, create_object(103, 1, 2));
        anim(second_guard, 1000, 4);
        metarule3(METARULE3_TILE_SET_CENTER, 18086, elevation(self_obj), 0);
        fadeIn(1500);
        add_timer_event(self_obj, 15, 2);
    end
    if ((animation_is_called == 0) and (anim_busy(self_obj) == 0)) then begin
        animation_is_called := 1;
        add_timer_event(self_obj, random(29, 76), 1);
    end
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if ((local_var(2) == 1) or (global_var(GVAR_TOWN_REP_ARROYO) <= -31)) then begin
            set_local_var(2, 0);
            attack_setup(self_obj, dude_obj);
        end
    end
end

procedure combat_p_proc
begin
end

procedure description_p_proc
begin
    script_overrides;
    if (local_var(7) == 0) then begin
        display_mstr(2);
    end
    else begin
        display_mstr(4);
    end
end

procedure look_at_p_proc
begin
    script_overrides;
    if (local_var(7) == 0) then begin
        display_mstr(1);
    end
    else begin
        display_mstr(3);
    end
end

procedure pickup_p_proc
begin
end

procedure push_p_proc
begin
end

procedure talk_p_proc
begin
    if (not(anim_busy(self_obj))) then begin
        anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
    end
    if (global_var(GVAR_PLAYER_MARRIED) == 0) then begin
        start_gdialog(69, self_obj, -1, -1, -1);
        gsay_start;
        call Node010();
        gsay_end;
        end_dialogue;
    end
    else begin
        if ((global_var(GVAR_SLAVES_COUNT) != 2) and (global_var(GVAR_SLAVE_RUN) >= 4)) then begin
            float_msg(self_obj, mstr(random(1030, 1039)), FLOAT_MSG_NORMAL);
        end
        else begin
            if (global_var(GVAR_PLAYER_REPUTATION) > 0) then begin
                dude_objective_reputation := (global_var(GVAR_TOWN_REP_ARROYO) * 30) + global_var(GVAR_PLAYER_REPUTATION) - (20 * global_var(GVAR_CHILDKILLER_REPUTATION));
            end
            else begin
                dude_objective_reputation := (global_var(GVAR_TOWN_REP_ARROYO) * 30) + global_var(GVAR_PLAYER_REPUTATION) - (20 * global_var(GVAR_CHILDKILLER_REPUTATION));
            end
            if ((dude_objective_reputation + local_var(6)) >= 300) then begin
                self_subjective_reaction := 1;
            end
            else begin
                if (((dude_objective_reputation + local_var(6)) >= -300) and ((dude_objective_reputation + local_var(6)) < 300)) then begin
                    self_subjective_reaction := 0;
                end
                else begin
                    self_subjective_reaction := -1;
                end
            end
            if (not(anim_busy(self_obj))) then begin
                anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
            end
            if (self_subjective_reaction == 1) then begin
                float_msg(self_obj, mstr(random(1000, 1009)), FLOAT_MSG_GREEN);
            end
            if (self_subjective_reaction == 0) then begin
                float_msg(self_obj, mstr(random(1010, 1019)), FLOAT_MSG_NORMAL);
            end
            if (self_subjective_reaction == -1) then begin
                float_msg(self_obj, mstr(random(1020, 1029)), FLOAT_MSG_RED);
            end
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) - 1);
        if ((47 == 50) or (47 == 59)) then begin
            set_global_var(GVAR_TOWN_REP_ARROYO, global_var(GVAR_TOWN_REP_ARROYO) - 3);
        end
        else begin
            set_global_var(GVAR_TOWN_REP_ARROYO, global_var(GVAR_TOWN_REP_ARROYO) - 6);
        end
    end
end

procedure use_skill_on_p_proc
begin
    if (action_being_used == 10) then begin
        steal_perk := 0;
        steal_gloves := 0;
        if (has_trait(TRAIT_PERK, dude_obj, PERK_pickpocket) != 0) then begin
            steal_perk := steal_perk + 15;
        end
        if (has_trait(TRAIT_PERK, dude_obj, PERK_master_thief) != 0) then begin
            steal_perk := steal_perk + 30;
        end
        if ((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND)) == 245) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND)) == 245)) then begin
            steal_gloves := 10;
        end
        if (random(0, 100) <= ((dude_skill(SKILL_STEAL) / 2) + (((3 * get_critter_stat(dude_obj, STAT_ag)) + (((dude_luck - 4) * 4) - (difficulty_level * 4)) + (2 * steal_perk) + steal_gloves) / (local_var(4) / 25)))) then begin
            display_msg(message_str(SCRIPT_STTEXT, random(145, 148)));
        end
        else begin
            script_overrides;
            display_msg(message_str(SCRIPT_STTEXT, random(200, 203)));
        end
    end
    if (action_being_used == 12) then begin
        script_overrides;
        display_msg(message_str(SCRIPT_STTEXT, 204) + ((dude_skill(SKILL_STEAL) / 2) + (((3 * get_critter_stat(dude_obj, STAT_ag)) + (((dude_luck - 4) * 4) - (difficulty_level * 4)) + (2 * steal_perk) + steal_gloves) / (local_var(4) / 25))) + message_str(SCRIPT_STTEXT, 205));
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure map_enter_p_proc
begin
    max_distance := random(6, 8);
    if (random(1, 2) == 1) then begin
        time_to_work := game_time_hour % 100;
        time_to_repose := time_to_work + random(5, 15);
        if (time_to_repose >= 60) then begin
            time_to_repose := random(0, 5);
        end
    end
    else begin
        time_to_repose := game_time_hour % 100;
        time_to_work := time_to_repose + random(2, 6);
        if (time_to_work >= 60) then begin
            time_to_work := random(0, 5);
        end
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 2) then begin
        float_msg(first_guard, mstr(1040), FLOAT_MSG_NORMAL);
        add_timer_event(self_obj, 45, 3);
    end
    if (fixed_param == 3) then begin
        float_msg(self_obj, mstr(1041), FLOAT_MSG_NORMAL);
        add_timer_event(self_obj, 45, 4);
    end
    if (fixed_param == 4) then begin
        float_msg(second_guard, mstr(1042), FLOAT_MSG_NORMAL);
        add_timer_event(self_obj, 50, 5);
    end
    if (fixed_param == 5) then begin
        float_msg(first_guard, mstr(1043), FLOAT_MSG_NORMAL);
        add_timer_event(self_obj, 50, 6);
    end
    if (fixed_param == 6) then begin
        float_msg(second_guard, mstr(1044), FLOAT_MSG_NORMAL);
        add_timer_event(self_obj, 45, 7);
    end
    if (fixed_param == 7) then begin
        float_msg(first_guard, mstr(1045), FLOAT_MSG_NORMAL);
        add_timer_event(self_obj, 45, 8);
    end
    if (fixed_param == 8) then begin
        float_msg(second_guard, mstr(1046), FLOAT_MSG_NORMAL);
        add_timer_event(self_obj, 45, 9);
    end
    if (fixed_param == 9) then begin
        float_msg(first_guard, mstr(1047), FLOAT_MSG_NORMAL);
        add_timer_event(self_obj, 45, 10);
    end
    if (fixed_param == 10) then begin
        float_msg(second_guard, mstr(1048), FLOAT_MSG_RED);
        add_timer_event(self_obj, 20, 11);
    end
    if (fixed_param == 11) then begin
        float_msg(first_guard, mstr(1049), FLOAT_MSG_RED);
        add_timer_event(self_obj, 10, 12);
    end
    if (fixed_param == 12) then begin
        animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), 2, 30), 0 bwor 16);
        animate_move_obj_to_tile(first_guard, tile_num_in_direction(tile_num(self_obj), 2, 30), 0 bwor 16);
        animate_move_obj_to_tile(second_guard, tile_num_in_direction(tile_num(self_obj), 2, 30), 0 bwor 16);
        add_timer_event(self_obj, 100, 13);
    end
    if (fixed_param == 13) then begin
        fadeOut(1500);
        move_to(self_obj, 1, 2);
        move_to(first_guard, 1, 2);
        move_to(second_guard, 1, 2);
        game_ui_enable;
        fadeIn(1000);
    end
    if ((fixed_param == 1) and not(combat_is_initialized)) then begin
        if (((game_time_hour % 100) >= time_to_work) and ((game_time_hour % 100) < time_to_repose) or (((game_time_hour % 100) >= time_to_work) and (time_to_work > time_to_repose)) or (((game_time_hour % 100) < time_to_work) and (time_to_work > time_to_repose))) then begin
            if ((game_time_hour % 100) >= time_to_repose) then begin
                time_to_repose := time_to_work + random(5, 15);
                if (time_to_repose >= 60) then begin
                    time_to_repose := random(0, 5);
                end
                repose_tile_chois := 0;
            end
            if ((tile_num(self_obj) != 17075) and (tile_num(self_obj) != 19877) and (tile_num(self_obj) != 18268)) then begin
                work_tile_chois := random(1, 3);
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                if (work_tile_chois == 1) then begin
                    if (tile_num(self_obj) != 17075) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (tile_distance(tile_num(self_obj), 17075) >= 25) then begin
                            reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 17075), random(12, 22)), -1);
                        end
                        else begin
                            reg_anim_obj_move_to_tile(self_obj, 17075, -1);
                        end
                        reg_anim_func(3, 0);
                    end
                end
                if (work_tile_chois == 2) then begin
                    if (tile_num(self_obj) != 19877) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (tile_distance(tile_num(self_obj), 19877) >= 25) then begin
                            reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 19877), random(12, 22)), -1);
                        end
                        else begin
                            reg_anim_obj_move_to_tile(self_obj, 19877, -1);
                        end
                        reg_anim_func(3, 0);
                    end
                end
                if (work_tile_chois == 3) then begin
                    if (tile_num(self_obj) != 18268) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (tile_distance(tile_num(self_obj), 18268) >= 25) then begin
                            reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 18268), random(12, 22)), -1);
                        end
                        else begin
                            reg_anim_obj_move_to_tile(self_obj, 18268, -1);
                        end
                        reg_anim_func(3, 0);
                    end
                end
                reg_anim_func(3, 0);
            end
            else begin
                if (tile_num(self_obj) == 17075) then begin
                    anim(self_obj, 1000, 5);
                end
                if (tile_num(self_obj) == 19877) then begin
                    anim(self_obj, 1000, 0);
                end
                if (tile_num(self_obj) == 18268) then begin
                    anim(self_obj, 1000, 0);
                end
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                if (random(1, 2) == 1) then begin
                    reg_anim_animate(self_obj, 0, -1);
                end
                if (random(1, 3) == 1) then begin
                    reg_anim_animate(self_obj, 10, -1);
                end
                reg_anim_animate(self_obj, 11, -1);
                if (random(1, 4) == 1) then begin
                    reg_anim_animate(self_obj, 16, -1);
                    reg_anim_animate(self_obj, 0, -1);
                end
                if (random(1, 2) == 1) then begin
                    reg_anim_animate(self_obj, 0, -1);
                end
                reg_anim_func(3, 0);
            end
        end
        else begin
            if ((game_time_hour % 100) >= time_to_work) then begin
                time_to_work := time_to_repose + random(2, 6);
            end
            if (time_to_work >= 60) then begin
                time_to_work := random(0, 2);
            end
            if (repose_tile_chois == 0) then begin
                repose_tile_chois := random(1, 2);
            end
            if (repose_tile_chois == 1) then begin
                if (tile_distance(tile_num(self_obj), 16688) >= max_distance) then begin
                    if (tile_num(self_obj) != tile_num_in_direction(16688, random(0, 5), random(3, 9))) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (tile_distance(tile_num(self_obj), tile_num_in_direction(16688, random(0, 5), random(3, 9))) >= 25) then begin
                            reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), tile_num_in_direction(16688, random(0, 5), random(3, 9))), random(12, 22)), -1);
                        end
                        else begin
                            reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(16688, random(0, 5), random(3, 9)), -1);
                        end
                        reg_anim_func(3, 0);
                    end
                end
                else begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(floor(max_distance / 3), max_distance)), -1);
                    reg_anim_func(3, 0);
                end
            end
            if (repose_tile_chois == 2) then begin
                if (tile_distance(tile_num(self_obj), 18486) >= max_distance) then begin
                    if (tile_num(self_obj) != tile_num_in_direction(18486, random(0, 5), random(3, 9))) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (tile_distance(tile_num(self_obj), tile_num_in_direction(18486, random(0, 5), random(3, 9))) >= 25) then begin
                            reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), tile_num_in_direction(18486, random(0, 5), random(3, 9))), random(12, 22)), -1);
                        end
                        else begin
                            reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(18486, random(0, 5), random(3, 9)), -1);
                        end
                        reg_anim_func(3, 0);
                    end
                end
                else begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(floor(max_distance / 3), max_distance)), -1);
                    reg_anim_func(3, 0);
                end
            end
        end
        animation_is_called := 0;
    end
end

procedure Node010
begin
    Reply(100);
    if ((global_var(GVAR_LOAD_MAP_INDEX) == 1) and (obj_carrying_pid_obj(dude_obj, 290) == 0)) then begin
        giq_option(1, NAME, 101, Node011, NEUTRAL_REACTION);
        giq_option(1, NAME, 102, Node012, NEUTRAL_REACTION);
    end
    giq_option(1, NAME, 103, Node999, NEUTRAL_REACTION);
end

procedure Node011
begin
    Reply(110);
    giq_option(1, NAME, 111, Node999, NEUTRAL_REACTION);
    giq_option(1, NAME, 112, Node999, NEUTRAL_REACTION);
end

procedure Node012
begin
    Reply(120);
    giq_option(1, NAME, 111, Node999, NEUTRAL_REACTION);
    giq_option(1, NAME, 112, Node999, NEUTRAL_REACTION);
end

procedure Node999
begin
end
