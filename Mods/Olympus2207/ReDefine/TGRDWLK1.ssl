variable dude_objective_reputation;
variable self_subjective_reaction;
variable z_critter_search;
variable critter_is_detected;
variable detected_critter;
variable persuade_chance;
variable steal_perk;
variable steal_gloves;
variable max_distance;
variable event_is_called;

procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;


procedure start
begin
    if (local_var(1) == 0) then begin
        set_map_var(2, self_obj);
        if (random(0, 100) <= 30) then begin
            add_obj_to_inven(self_obj, create_object(176, 1, 2));
            add_mult_objs_to_inven(self_obj, create_object(11, 1, 2), random(2, 3));
            wield_obj(obj_carrying_pid_obj(self_obj, 176));
        end
        else begin
            add_obj_to_inven(self_obj, create_object(153, 1, 2));
            add_mult_objs_to_inven(self_obj, create_object(19, 1, 2), random(2, 3));
            wield_obj(obj_carrying_pid_obj(self_obj, 153));
        end
        if (random(0, 100) <= 30) then begin
            add_mult_objs_to_inven(self_obj, create_object(221, 1, 2), random(1, 2));
        end
        if (random(0, 100) <= 30) then begin
            add_obj_to_inven(self_obj, create_object(64, 1, 2));
        end
        if (random(0, 100) <= 30) then begin
            add_obj_to_inven(self_obj, create_object(103, 1, 2));
        end
        if (random(0, 100) <= 30) then begin
            add_obj_to_inven(self_obj, create_object(222, 1, 2));
        end
        if (random(0, 100) <= 70) then begin
            add_mult_objs_to_inven(self_obj, create_object(41, 1, 2), random(4, 30));
        end
        set_critter_stat(self_obj, STAT_st, random(1, 2));
        set_critter_stat(self_obj, STAT_pe, random(-1, 0));
        set_critter_stat(self_obj, STAT_en, random(1, 2));
        set_critter_stat(self_obj, STAT_ch, random(-3, -2));
        set_critter_stat(self_obj, STAT_iq, random(-3, -2));
        set_critter_stat(self_obj, STAT_ag, random(-1, 1));
        set_critter_stat(self_obj, STAT_lu, random(-3, 3));
        critter_mod_skill(self_obj, SKILL_SMALL_GUNS, random(10, 20));
        critter_mod_skill(self_obj, SKILL_BIG_GUNS, random(40, 60));
        critter_mod_skill(self_obj, SKILL_ENERGY_WEAPONS, random(50, 70));
        critter_mod_skill(self_obj, SKILL_UNARMED_COMBAT, random(20, 25));
        critter_mod_skill(self_obj, SKILL_MELEE, random(20, 25));
        critter_mod_skill(self_obj, SKILL_THROWING, random(20, 30));
        critter_mod_skill(self_obj, SKILL_FIRST_AID, random(0, 10));
        critter_mod_skill(self_obj, SKILL_DOCTOR, random(0, 10));
        critter_mod_skill(self_obj, SKILL_SNEAK, random(0, 10));
        critter_mod_skill(self_obj, SKILL_LOCKPICK, random(0, 10));
        critter_mod_skill(self_obj, SKILL_STEAL, random(0, 10));
        critter_mod_skill(self_obj, SKILL_TRAPS, random(0, 10));
        critter_mod_skill(self_obj, SKILL_SCIENCE, random(0, 10));
        critter_mod_skill(self_obj, SKILL_REPAIR, random(0, 10));
        critter_mod_skill(self_obj, SKILL_SPEECH, random(0, 10));
        critter_mod_skill(self_obj, SKILL_BARTER, random(0, 10));
        critter_mod_skill(self_obj, SKILL_GAMBLING, random(0, 10));
        critter_mod_skill(self_obj, SKILL_OUTDOORSMAN, random(0, 10));
        set_local_var(3, tile_num(self_obj));
        set_local_var(1, 1);
        set_local_var(4, random(50, 80));
        set_local_var(5, random(0, 60));
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 2);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_OLYMPUS_GUARD);
    end
end

procedure critter_p_proc
begin
    if ((event_is_called == 0) and (global_var(GVAR_PLAYER_MARRIED) != 2) and not(global_var(GVAR_PLAYER_MARRIED) == 3)) then begin
        event_is_called := 1;
        add_timer_event(self_obj, random(150, 450), 1);
    end
    if ((global_var(GVAR_PLAYER_MARRIED) >= 3) and (obj_can_see_obj(self_obj, dude_obj) == 1)) then begin
        if (not((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 120) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 121) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 122) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 123) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 129) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 391)) and not(obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 394) and not(combat_is_initialized)) then begin
            float_msg(self_obj, message_str(SCRIPT_STTEXT, random(950, 952)), FLOAT_MSG_RED);
            set_local_var(2, 1);
        end
    end
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if ((local_var(2) == 1) or (global_var(GVAR_TOWN_REP_VAULT_13) <= -31)) then begin
            set_local_var(2, 0);
            attack_setup(self_obj, dude_obj);
        end
    end
end

procedure combat_p_proc
begin
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(random(6, 9));
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(random(1, 5));
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure talk_p_proc
begin
    if (not(anim_busy(self_obj))) then begin
        anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
    end
    if (global_var(GVAR_PLAYER_MARRIED) == 0) then begin
        float_msg(self_obj, mstr(random(1030, 1039)), FLOAT_MSG_NORMAL);
    end
    else begin
        if (global_var(GVAR_PLAYER_REPUTATION) > 0) then begin
            dude_objective_reputation := (global_var(GVAR_TOWN_REP_VAULT_13) * 30) + global_var(GVAR_PLAYER_REPUTATION) - (20 * global_var(GVAR_CHILDKILLER_REPUTATION));
        end
        else begin
            dude_objective_reputation := (global_var(GVAR_TOWN_REP_VAULT_13) * 30) + global_var(GVAR_PLAYER_REPUTATION) - (20 * global_var(GVAR_CHILDKILLER_REPUTATION));
        end
        if ((dude_objective_reputation + local_var(6)) >= 300) then begin
            self_subjective_reaction := 1;
        end
        else begin
            if (((dude_objective_reputation + local_var(6)) >= -300) and ((dude_objective_reputation + local_var(6)) < 300)) then begin
                self_subjective_reaction := 0;
            end
            else begin
                self_subjective_reaction := -1;
            end
        end
        if (not(anim_busy(self_obj))) then begin
            anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
        end
        if (self_subjective_reaction == 1) then begin
            float_msg(self_obj, mstr(random(1000, 1009)), FLOAT_MSG_GREEN);
        end
        if (self_subjective_reaction == 0) then begin
            float_msg(self_obj, mstr(random(1010, 1019)), FLOAT_MSG_NORMAL);
        end
        if (self_subjective_reaction == -1) then begin
            float_msg(self_obj, mstr(random(1020, 1029)), FLOAT_MSG_RED);
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) - 1);
        if ((59 == 50) or (59 == 59)) then begin
            set_global_var(GVAR_TOWN_REP_VAULT_13, global_var(GVAR_TOWN_REP_VAULT_13) - 3);
        end
        else begin
            set_global_var(GVAR_TOWN_REP_VAULT_13, global_var(GVAR_TOWN_REP_VAULT_13) - 6);
        end
    end
    set_map_var(2, 0);
    if (CUR_MAP_TARTAR13) then begin
        set_global_var(GVAR_ENDGAME_MOVIE_NCR, global_var(GVAR_ENDGAME_MOVIE_NCR) + 1);
    end
end

procedure use_skill_on_p_proc
begin
    if (action_being_used == 10) then begin
        if ((get_sfall_global_int(1) == 6) and (get_sfall_global_int(13) == 0)) then begin
            script_overrides;
            set_sfall_global(13, 1);
        end
        else begin
            if (has_trait(TRAIT_TRAIT, dude_obj, TRAIT_sex_appeal)) then begin
                if (global_var(GVAR_VAULT_CITIZENSHIP) < get_pc_stat(PCSTAT_level)) then begin
                    if (is_success(roll_vs_skill(dude_obj, 10, 0))) then begin
                        set_global_var(GVAR_QUEST_FIND_THOMAS, global_var(GVAR_QUEST_FIND_THOMAS) + 3);
                    end
                    else begin
                        set_global_var(GVAR_QUEST_FIND_THOMAS, global_var(GVAR_QUEST_FIND_THOMAS) + 1);
                    end
                    if (global_var(GVAR_QUEST_FIND_THOMAS) >= (2 * get_pc_stat(PCSTAT_level))) then begin
                        set_global_var(GVAR_QUEST_FIND_THOMAS, 0);
                        set_global_var(GVAR_VAULT_CITIZENSHIP, global_var(GVAR_VAULT_CITIZENSHIP) + 1);
                        critter_mod_skill(dude_obj, SKILL_STEAL, 1);
                        display_msg(message_str(SCRIPT_STTEXT, 410));
                    end
                end
            end
            steal_perk := 0;
            steal_gloves := 0;
            if (has_trait(TRAIT_PERK, dude_obj, PERK_pickpocket) != 0) then begin
                steal_perk := steal_perk + 15;
            end
            if (has_trait(TRAIT_PERK, dude_obj, PERK_master_thief) != 0) then begin
                steal_perk := steal_perk + 30;
            end
            if ((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND)) == 245) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND)) == 245)) then begin
                steal_gloves := 10;
            end
            if (random(0, 100) <= ((dude_skill(SKILL_STEAL) / 2) + (((3 * get_critter_stat(dude_obj, STAT_ag)) + (((dude_luck - 4) * 4) - (difficulty_level * 4)) + (2 * steal_perk) + steal_gloves) / (local_var(4) / 25)))) then begin
                display_msg(message_str(SCRIPT_STTEXT, random(145, 148)));
            end
            else begin
                script_overrides;
                if (random(0, 100) <= (25 - floor((((dude_luck - 4) * 4) - (difficulty_level * 4)) / 3))) then begin
                    float_msg(self_obj, message_str(SCRIPT_STTEXT, random(206, 209)), FLOAT_MSG_RED);
                    set_local_var(2, 1);
                end
                else begin
                    display_msg(message_str(SCRIPT_STTEXT, random(200, 203)));
                end
            end
        end
    end
    if (action_being_used == 12) then begin
        script_overrides;
        if (random(1, 2) == 1) then begin
            display_msg(message_str(SCRIPT_STTEXT, 204) + ((dude_skill(SKILL_STEAL) / 2) + (((3 * get_critter_stat(dude_obj, STAT_ag)) + (((dude_luck - 4) * 4) - (difficulty_level * 4)) + (2 * steal_perk) + steal_gloves) / (local_var(4) / 25))) + (30 - dude_iq - (2 * dude_perception)) + message_str(SCRIPT_STTEXT, 205));
        end
        else begin
            display_msg(message_str(SCRIPT_STTEXT, 204) + ((dude_skill(SKILL_STEAL) / 2) + (((3 * get_critter_stat(dude_obj, STAT_ag)) + (((dude_luck - 4) * 4) - (difficulty_level * 4)) + (2 * steal_perk) + steal_gloves) / (local_var(4) / 25))) - (30 - dude_iq - (2 * dude_perception)) + message_str(SCRIPT_STTEXT, 205));
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure map_enter_p_proc
begin
    set_map_var(2, self_obj);
    if (not(is_loading_game) == 1) then begin
        if (global_var(GVAR_PLAYER_MARRIED) == 3) then begin
            if (local_var(3) != 15765) then begin
                set_local_var(3, 15765);
                move_to(self_obj, 15765, 0);
                anim(self_obj, 1000, 3);
            end
            else begin
                if (tile_num(self_obj) != local_var(3)) then begin
                    move_to(self_obj, 15765, 0);
                    anim(self_obj, 1000, 3);
                end
            end
        end
    end
    else begin
        float_msg(self_obj, " ", FLOAT_MSG_NORMAL);
    end
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        if (not(combat_is_initialized) and not(anim_busy(self_obj))) then begin
            if ((tile_distance(local_var(3), 23268) < tile_distance(local_var(3), 33316)) and (tile_distance(local_var(3), 23268) < tile_distance(local_var(3), 24560))) then begin
                if ((tile_num(self_obj) != tile_num_in_direction(18674, 3, 1)) and (tile_num(self_obj) != tile_num_in_direction(29074, 4, 1))) then begin
                    if (random(1, 2) == 1) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        reg_anim_obj_move_to_tile(self_obj, 18674, -1);
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(18674, 3, 1), -1);
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                    else begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        reg_anim_obj_move_to_tile(self_obj, 29074, -1);
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(29074, 4, 1), -1);
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                end
                if (tile_num(self_obj) == tile_num_in_direction(18674, 3, 1)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, 29074, -1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(29074, 4, 1), -1);
                    reg_anim_animate(self_obj, 0, -1);
                    reg_anim_func(3, 0);
                end
                if (tile_num(self_obj) == tile_num_in_direction(29074, 4, 1)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, 18674, -1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(18674, 3, 1), -1);
                    reg_anim_animate(self_obj, 0, -1);
                    reg_anim_func(3, 0);
                end
            end
            if ((tile_distance(local_var(3), 33316) < tile_distance(local_var(3), 23268)) and (tile_distance(local_var(3), 33316) < tile_distance(local_var(3), 24560))) then begin
                if ((tile_num(self_obj) != tile_num_in_direction(32671, 5, 1)) and (tile_num(self_obj) != tile_num_in_direction(32559, 5, 1))) then begin
                    if (random(1, 2) == 1) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        reg_anim_obj_move_to_tile(self_obj, 32671, -1);
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(32671, 5, 1), -1);
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                    else begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        reg_anim_obj_move_to_tile(self_obj, 32559, -1);
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(32559, 5, 1), -1);
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                end
                if (tile_num(self_obj) == tile_num_in_direction(32671, 5, 1)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, 32559, -1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(32559, 5, 1), -1);
                    reg_anim_animate(self_obj, 0, -1);
                    reg_anim_func(3, 0);
                end
                if (tile_num(self_obj) == tile_num_in_direction(32559, 5, 1)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, 32671, -1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(32671, 5, 1), -1);
                    reg_anim_animate(self_obj, 0, -1);
                    reg_anim_func(3, 0);
                end
            end
            if ((tile_distance(local_var(3), 24560) < tile_distance(local_var(3), 23268)) and (tile_distance(local_var(3), 24560) < tile_distance(local_var(3), 33316))) then begin
                if ((tile_num(self_obj) != tile_num_in_direction(15961, 4, 1)) and (tile_num(self_obj) != tile_num_in_direction(32559, 1, 1))) then begin
                    if (random(1, 2) == 1) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        reg_anim_obj_move_to_tile(self_obj, 15961, -1);
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(15961, 4, 1), -1);
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                    else begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        reg_anim_obj_move_to_tile(self_obj, 32559, -1);
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(32559, 1, 1), -1);
                        reg_anim_animate(self_obj, 0, -1);
                        reg_anim_func(3, 0);
                    end
                end
                if (tile_num(self_obj) == tile_num_in_direction(15961, 4, 1)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, 32559, -1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(32559, 1, 1), -1);
                    reg_anim_animate(self_obj, 0, -1);
                    reg_anim_func(3, 0);
                end
                if (tile_num(self_obj) == tile_num_in_direction(32559, 1, 1)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, 15961, -1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(15961, 4, 1), -1);
                    reg_anim_animate(self_obj, 0, -1);
                    reg_anim_func(3, 0);
                end
            end
        end
        event_is_called := 0;
    end
end
