variable dude_objective_reputation;
variable self_subjective_reaction;
variable z_critter_search;
variable critter_is_detected;
variable detected_critter;
variable persuade_chance;
variable steal_perk;
variable steal_gloves;
variable max_distance;
variable animation_is_called;
variable distance_to_walk;
variable time_to_sleep;
variable time_to_work_1;
variable time_to_work_2;
variable time_to_repose;
variable work_tile_chois;
variable time_to_wc;
variable went_to_wc;
variable time_to_quitter_wc;
variable repose_tile;

procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure push_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;


procedure start
begin
    if (local_var(1) == 0) then begin
        set_local_var(3, tile_num(self_obj));
        set_local_var(1, 1);
        set_local_var(4, random(40, 55));
        set_local_var(5, random(0, 100));
        set_local_var(6, random(-10, 20));
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_TEAM_NUM, 1);
        critter_add_trait(self_obj, TRAIT_OBJECT, OBJECT_AI_PACKET, AI_TARTAR_WOMEN);
        max_distance := random(15, 20);
    end
end

procedure critter_p_proc
begin
    if ((animation_is_called == 0) and (anim_busy(self_obj) == 0)) then begin
        animation_is_called := 1;
        if (local_var(7) == 0) then begin
            if (went_to_wc == 1) then begin
                add_timer_event(self_obj, random(63, 126), 1);
            end
            else begin
                add_timer_event(self_obj, random(29, 76), 1);
            end
        end
        else begin
            add_timer_event(self_obj, random(2, 10), 1);
        end
    end
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if ((local_var(2) == 1) or (global_var(GVAR_TOWN_REP_ARROYO) <= -31)) then begin
            set_local_var(2, 0);
            attack_setup(self_obj, dude_obj);
        end
    end
    if (local_var(7) == 1) then begin
        if ((CUR_MAP_OLSPAWN) and (global_var(GVAR_ENCLAVE_ALARM) == 0)) then begin
            set_local_var(7, 0);
            party_remove(self_obj);
        end
    end
end

procedure combat_p_proc
begin
end

procedure description_p_proc
begin
    script_overrides;
    display_mstr(random(6, 9));
end

procedure look_at_p_proc
begin
    script_overrides;
    display_mstr(random(1, 5));
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure push_p_proc
begin
end

procedure talk_p_proc
begin
    if (local_var(7) == 0) then begin
        if ((art_anim(obj_art_fid(self_obj)) == 48) or (art_anim(obj_art_fid(self_obj)) == 49)) then begin
            float_msg(self_obj, mstr(random(1030, 1039)), FLOAT_MSG_NORMAL);
        end
        else begin
            if (global_var(GVAR_PLAYER_MARRIED) >= 3) then begin
                if ((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 120) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 121) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 122) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 123) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 129) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 391)) then begin
                    float_msg(self_obj, message_str(SCRIPT_STTEXT, random(933, 935)), FLOAT_MSG_NORMAL);
                end
                else begin
                    if (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)) == 394) then begin
                        float_msg(self_obj, message_str(SCRIPT_STTEXT, random(930, 932)), FLOAT_MSG_NORMAL);
                    end
                end
            end
            else begin
                if (global_var(GVAR_PLAYER_REPUTATION) > 0) then begin
                    dude_objective_reputation := (global_var(GVAR_TOWN_REP_ARROYO) * 30) + global_var(GVAR_PLAYER_REPUTATION) - (20 * global_var(GVAR_CHILDKILLER_REPUTATION));
                end
                else begin
                    dude_objective_reputation := (global_var(GVAR_TOWN_REP_ARROYO) * 30) + global_var(GVAR_PLAYER_REPUTATION) - (20 * global_var(GVAR_CHILDKILLER_REPUTATION));
                end
                if ((dude_objective_reputation + local_var(6)) >= 300) then begin
                    self_subjective_reaction := 1;
                end
                else begin
                    if (((dude_objective_reputation + local_var(6)) >= -300) and ((dude_objective_reputation + local_var(6)) < 300)) then begin
                        self_subjective_reaction := 0;
                    end
                    else begin
                        self_subjective_reaction := -1;
                    end
                end
                if (not(anim_busy(self_obj))) then begin
                    anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), dude_tile));
                end
                if (self_subjective_reaction == 1) then begin
                    float_msg(self_obj, mstr(random(1000, 1009)), FLOAT_MSG_GREEN);
                end
                if (self_subjective_reaction == 0) then begin
                    float_msg(self_obj, mstr(random(1010, 1019)), FLOAT_MSG_NORMAL);
                end
                if (self_subjective_reaction == -1) then begin
                    float_msg(self_obj, mstr(random(1020, 1029)), FLOAT_MSG_RED);
                end
            end
        end
    end
end

procedure destroy_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_global_var(GVAR_PLAYER_REPUTATION, global_var(GVAR_PLAYER_REPUTATION) - 1);
        if ((47 == 50) or (47 == 59)) then begin
            set_global_var(GVAR_TOWN_REP_ARROYO, global_var(GVAR_TOWN_REP_ARROYO) - 3);
        end
        else begin
            set_global_var(GVAR_TOWN_REP_ARROYO, global_var(GVAR_TOWN_REP_ARROYO) - 6);
        end
    end
end

procedure use_skill_on_p_proc
begin
    if (local_var(7) == 0) then begin
        if (action_being_used == 10) then begin
            if ((get_sfall_global_int(1) == 6) and (get_sfall_global_int(13) == 0)) then begin
                script_overrides;
                set_sfall_global(13, 1);
            end
            else begin
                if (has_trait(TRAIT_TRAIT, dude_obj, TRAIT_sex_appeal)) then begin
                    if (global_var(GVAR_VAULT_CITIZENSHIP) < get_pc_stat(PCSTAT_level)) then begin
                        if (is_success(roll_vs_skill(dude_obj, 10, 0))) then begin
                            set_global_var(GVAR_QUEST_FIND_THOMAS, global_var(GVAR_QUEST_FIND_THOMAS) + 3);
                        end
                        else begin
                            set_global_var(GVAR_QUEST_FIND_THOMAS, global_var(GVAR_QUEST_FIND_THOMAS) + 1);
                        end
                        if (global_var(GVAR_QUEST_FIND_THOMAS) >= (2 * get_pc_stat(PCSTAT_level))) then begin
                            set_global_var(GVAR_QUEST_FIND_THOMAS, 0);
                            set_global_var(GVAR_VAULT_CITIZENSHIP, global_var(GVAR_VAULT_CITIZENSHIP) + 1);
                            critter_mod_skill(dude_obj, SKILL_STEAL, 1);
                            display_msg(message_str(SCRIPT_STTEXT, 410));
                        end
                    end
                end
                steal_perk := 0;
                steal_gloves := 0;
                if (has_trait(TRAIT_PERK, dude_obj, PERK_pickpocket) != 0) then begin
                    steal_perk := steal_perk + 15;
                end
                if (has_trait(TRAIT_PERK, dude_obj, PERK_master_thief) != 0) then begin
                    steal_perk := steal_perk + 30;
                end
                if ((obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_RIGHT_HAND)) == 245) or (obj_pid(critter_inven_obj(dude_obj, INVEN_TYPE_LEFT_HAND)) == 245)) then begin
                    steal_gloves := 10;
                end
                if (random(0, 100) <= ((dude_skill(SKILL_STEAL) / 2) + (((3 * get_critter_stat(dude_obj, STAT_ag)) + (((dude_luck - 4) * 4) - (difficulty_level * 4)) + (2 * steal_perk) + steal_gloves) / (local_var(4) / 25)))) then begin
                    display_msg(message_str(SCRIPT_STTEXT, random(145, 148)));
                end
                else begin
                    script_overrides;
                    if (random(0, 100) <= (25 - floor((((dude_luck - 4) * 4) - (difficulty_level * 4)) / 3))) then begin
                        float_msg(self_obj, message_str(SCRIPT_STTEXT, random(206, 209)), FLOAT_MSG_RED);
                        set_local_var(2, 1);
                    end
                    else begin
                        display_msg(message_str(SCRIPT_STTEXT, random(200, 203)));
                    end
                end
            end
        end
        if (action_being_used == 12) then begin
            script_overrides;
            display_msg(message_str(SCRIPT_STTEXT, 204) + ((dude_skill(SKILL_STEAL) / 2) + (((3 * get_critter_stat(dude_obj, STAT_ag)) + (((dude_luck - 4) * 4) - (difficulty_level * 4)) + (2 * steal_perk) + steal_gloves) / (local_var(4) / 25))) + message_str(SCRIPT_STTEXT, 205));
        end
    end
end

procedure use_obj_on_p_proc
begin
    if ((obj_pid(obj_being_used_with) == 343) and (global_var(GVAR_ENDGAME_MOVIE_SAN_FRAN_SHI) == 1) and (global_var(GVAR_ENCLAVE_TIMER) == 0)) then begin
        rm_obj_from_inven(dude_obj, obj_carrying_pid_obj(dude_obj, 343));
        went_to_wc := 0;
        play_sfx("HFXXXXAO");
        display_msg(message_str(SCRIPT_STTEXT, 953));
        set_local_var(7, 1);
        set_global_var(GVAR_ENCLAVE_TIMER, self_obj);
        set_global_var(GVAR_ENCLAVE_ALARM, 1);
        party_add(self_obj);
        animation_is_called := 1;
        add_timer_event(self_obj, random(2, 10), 1);
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure map_enter_p_proc
begin
    if (local_var(7) == 0) then begin
        max_distance := random(15, 20);
        time_to_sleep := random(2200, 2230);
        time_to_work_1 := random(900, 915);
        time_to_work_2 := random(1300, 1315);
        time_to_repose := random(1200, 1215);
        time_to_wc := random(1, 19);
        if ((game_time_hour < time_to_work_1) or (game_time_hour >= time_to_sleep) and (tile_num(self_obj) != local_var(3))) then begin
            move_to(self_obj, local_var(3), elevation(self_obj));
            reg_anim_func(2, self_obj);
            reg_anim_func(1, 1);
            reg_anim_animate(self_obj, random(48, 49), -1);
            reg_anim_func(3, 0);
            critter_injure(self_obj, 2);
        end
        animation_is_called := 1;
        add_timer_event(self_obj, 1, 1);
    end
    else begin
        set_global_var(GVAR_ENCLAVE_TIMER, self_obj);
    end
    if ((CUR_MAP_OLSPAWN) and (global_var(GVAR_ENDGAME_MOVIE_SAN_FRAN_SHI) == 2) and (elevation(self_obj) != 2) and (not(is_loading_game) == 1)) then begin
        move_to(self_obj, tile_num(self_obj), 2);
    end
end

procedure timed_event_p_proc
begin
    if (local_var(7) == 0) then begin
        if ((fixed_param == 1) and not(combat_is_initialized) and (cur_map_index != MAP_OLSPAWN)) then begin
            if ((game_time_hour >= time_to_work_1) and (game_time_hour < time_to_repose) or ((game_time_hour >= time_to_work_2) and (game_time_hour < time_to_sleep))) then begin
                if (repose_tile != 0) then begin
                    repose_tile := 0;
                end
                if ((art_anim(obj_art_fid(self_obj)) == 48) or (art_anim(obj_art_fid(self_obj)) == 49)) then begin
                    critter_injure(self_obj, 2 bwor 8388608);
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    if (art_anim(obj_art_fid(self_obj)) == 48) then begin
                        reg_anim_animate(self_obj, 37, -1);
                    end
                    else begin
                        reg_anim_animate(self_obj, 36, -1);
                    end
                    reg_anim_func(3, 0);
                end
                else begin
                    if (((game_time_hour % 100) == time_to_wc) or ((game_time_hour % 100) == (time_to_wc * 2)) or ((game_time_hour % 100) == (time_to_wc * 3)) or (went_to_wc == 1)) then begin
                        if (tile_num(self_obj) != 22158) then begin
                            went_to_wc := 1;
                            if (tile_num(self_obj) != 22158) then begin
                                reg_anim_func(2, self_obj);
                                reg_anim_func(1, 1);
                                if (tile_distance(tile_num(self_obj), 22158) >= 25) then begin
                                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 22158), random(12, 22)), -1);
                                end
                                else begin
                                    reg_anim_obj_move_to_tile(self_obj, 22158, -1);
                                end
                                reg_anim_func(3, 0);
                            end
                        end
                        else begin
                            if (time_to_quitter_wc == 0) then begin
                                time_to_quitter_wc := game_time_hour + random(3, 12);
                            end
                            if (game_time_hour >= time_to_quitter_wc) then begin
                                went_to_wc := 0;
                                time_to_quitter_wc := 0;
                                reg_anim_func(2, self_obj);
                                reg_anim_func(1, 1);
                                reg_anim_animate(self_obj, 10, -1);
                                reg_anim_func(3, 0);
                            end
                            else begin
                                reg_anim_func(2, self_obj);
                                reg_anim_func(1, 1);
                                reg_anim_animate(self_obj, 11, -1);
                                reg_anim_func(3, 0);
                            end
                        end
                    end
                    else begin
                        if ((tile_num(self_obj) != 24500) and (tile_num(self_obj) != 24292) and (tile_num(self_obj) != 25690) and (tile_num(self_obj) != 24084) and (tile_num(self_obj) != 25080) and (tile_num(self_obj) != 29494) and (tile_num(self_obj) != 31688) and (tile_num(self_obj) != 30512) and (tile_num(self_obj) != 27716) and (tile_num(self_obj) != 25532) and (went_to_wc == 0)) then begin
                            work_tile_chois := random(1, 10);
                            reg_anim_func(2, self_obj);
                            reg_anim_func(1, 1);
                            if (work_tile_chois == 1) then begin
                                if (tile_num(self_obj) != 24500) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 24500) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 24500), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 24500, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 2) then begin
                                if (tile_num(self_obj) != 24292) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 24292) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 24292), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 24292, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 3) then begin
                                if (tile_num(self_obj) != 25690) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 25690) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 25690), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 25690, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 4) then begin
                                if (tile_num(self_obj) != 24084) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 24084) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 24084), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 24084, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 5) then begin
                                if (tile_num(self_obj) != 25080) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 25080) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 25080), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 25080, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 6) then begin
                                if (tile_num(self_obj) != 29494) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 29494) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 29494), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 29494, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 7) then begin
                                if (tile_num(self_obj) != 31688) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 31688) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 31688), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 31688, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 8) then begin
                                if (tile_num(self_obj) != 30512) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 30512) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 30512), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 30512, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 9) then begin
                                if (tile_num(self_obj) != 27716) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 27716) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 27716), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 27716, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            if (work_tile_chois == 10) then begin
                                if (tile_num(self_obj) != 25532) then begin
                                    reg_anim_func(2, self_obj);
                                    reg_anim_func(1, 1);
                                    if (tile_distance(tile_num(self_obj), 25532) >= 25) then begin
                                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), 25532), random(12, 22)), -1);
                                    end
                                    else begin
                                        reg_anim_obj_move_to_tile(self_obj, 25532, -1);
                                    end
                                    reg_anim_func(3, 0);
                                end
                            end
                            reg_anim_func(3, 0);
                        end
                        else begin
                            if (((game_time_hour % 100) != time_to_wc) and ((game_time_hour % 100) != (time_to_wc * 2)) and ((game_time_hour % 100) != (time_to_wc * 3)) and (tile_num(self_obj) != 22158)) then begin
                                went_to_wc := 0;
                            end
                            if (tile_num(self_obj) == 24500) then begin
                                anim(self_obj, 1000, 0);
                            end
                            if (tile_num(self_obj) == 24292) then begin
                                anim(self_obj, 1000, 3);
                            end
                            if (tile_num(self_obj) == 25690) then begin
                                anim(self_obj, 1000, 0);
                            end
                            if (tile_num(self_obj) == 24084) then begin
                                anim(self_obj, 1000, 3);
                            end
                            if (tile_num(self_obj) == 25080) then begin
                                anim(self_obj, 1000, 0);
                            end
                            if (tile_num(self_obj) == 29494) then begin
                                anim(self_obj, 1000, 3);
                            end
                            if (tile_num(self_obj) == 31688) then begin
                                anim(self_obj, 1000, 0);
                            end
                            if (tile_num(self_obj) == 30512) then begin
                                anim(self_obj, 1000, 3);
                            end
                            if (tile_num(self_obj) == 27716) then begin
                                anim(self_obj, 1000, 3);
                            end
                            if (tile_num(self_obj) == 25532) then begin
                                anim(self_obj, 1000, 3);
                            end
                            reg_anim_func(2, self_obj);
                            reg_anim_func(1, 1);
                            if (random(1, 2) == 1) then begin
                                reg_anim_animate(self_obj, 0, -1);
                            end
                            if (random(1, 3) == 1) then begin
                                reg_anim_animate(self_obj, 10, -1);
                            end
                            reg_anim_animate(self_obj, 11, -1);
                            if (random(1, 4) == 1) then begin
                                reg_anim_animate(self_obj, 16, -1);
                                reg_anim_animate(self_obj, 0, -1);
                            end
                            if (random(1, 2) == 1) then begin
                                reg_anim_animate(self_obj, 0, -1);
                            end
                            reg_anim_func(3, 0);
                        end
                    end
                end
            end
            else begin
                if ((game_time_hour >= time_to_repose) and (game_time_hour < time_to_work_2)) then begin
                    if (repose_tile == 0) then begin
                        repose_tile := random(1, 3);
                        if (repose_tile == 1) then begin
                            repose_tile := 18946;
                        end
                        if (repose_tile == 2) then begin
                            repose_tile := 17936;
                        end
                        if (repose_tile == 3) then begin
                            repose_tile := 18687;
                        end
                    end
                    if (tile_distance(tile_num(self_obj), repose_tile) < max_distance) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(5, max_distance - tile_distance(tile_num(self_obj), repose_tile) + 2)), -1);
                        reg_anim_func(3, 0);
                    end
                    else begin
                        if (tile_num(self_obj) != tile_num_in_direction(repose_tile, random(0, 5), random(2, 10))) then begin
                            reg_anim_func(2, self_obj);
                            reg_anim_func(1, 1);
                            if (tile_distance(tile_num(self_obj), tile_num_in_direction(repose_tile, random(0, 5), random(2, 10))) >= 25) then begin
                                reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), tile_num_in_direction(repose_tile, random(0, 5), random(2, 10))), random(12, 22)), -1);
                            end
                            else begin
                                reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(repose_tile, random(0, 5), random(2, 10)), -1);
                            end
                            reg_anim_func(3, 0);
                        end
                    end
                end
                else begin
                    if (tile_num(self_obj) != local_var(3)) then begin
                        if (tile_distance(tile_num(self_obj), local_var(3)) >= 35) then begin
                            if (tile_num(self_obj) != tile_num_in_direction(local_var(3), random(0, 5), random(2, 6))) then begin
                                reg_anim_func(2, self_obj);
                                reg_anim_func(1, 1);
                                if (tile_distance(tile_num(self_obj), tile_num_in_direction(local_var(3), random(0, 5), random(2, 6))) >= 25) then begin
                                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), tile_num_in_direction(local_var(3), random(0, 5), random(2, 6))), random(12, 22)), -1);
                                end
                                else begin
                                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(local_var(3), random(0, 5), random(2, 6)), -1);
                                end
                                reg_anim_func(3, 0);
                            end
                        end
                        else begin
                            reg_anim_func(2, self_obj);
                            reg_anim_func(1, 1);
                            reg_anim_obj_move_to_tile(self_obj, local_var(3), -1);
                            if (random(1, 2) == 1) then begin
                                reg_anim_animate_reverse(self_obj, 36, -1);
                                reg_anim_animate(self_obj, 49, -1);
                            end
                            else begin
                                reg_anim_animate_reverse(self_obj, 37, -1);
                                reg_anim_animate(self_obj, 48, -1);
                            end
                            reg_anim_func(3, 0);
                            critter_injure(self_obj, 2);
                        end
                    end
                    else begin
                        if ((art_anim(obj_art_fid(self_obj)) != 48) and (art_anim(obj_art_fid(self_obj)) != 49)) then begin
                            reg_anim_func(2, self_obj);
                            reg_anim_func(1, 1);
                            if (random(1, 2) == 1) then begin
                                reg_anim_animate_reverse(self_obj, 36, -1);
                                reg_anim_animate(self_obj, 49, -1);
                            end
                            else begin
                                reg_anim_animate_reverse(self_obj, 37, -1);
                                reg_anim_animate(self_obj, 48, -1);
                            end
                            reg_anim_func(3, 0);
                            critter_injure(self_obj, 2);
                        end
                    end
                end
            end
            animation_is_called := 0;
        end
    end
    else begin
        if ((tile_distance(dude_tile, tile_num(self_obj)) > 3) and (tile_distance(dude_tile, tile_num(self_obj)) <= 7)) then begin
            animate_move_obj_to_tile(self_obj, tile_num_in_direction(dude_tile, rotation_to_tile(dude_tile, tile_num(self_obj)), random(2, 4)), 0);
        end
        else begin
            if (tile_distance(dude_tile, tile_num(self_obj)) > 7) then begin
                animate_move_obj_to_tile(self_obj, tile_num_in_direction(dude_tile, rotation_to_tile(dude_tile, tile_num(self_obj)), random(2, 4)), 1);
            end
        end
        animation_is_called := 0;
    end
end
