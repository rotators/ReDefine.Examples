variable animation_is_called;
variable max_distance;

procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure push_p_proc;
procedure destroy_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;


procedure start
begin
    if (local_var(1) == 0) then begin
        set_local_var(3, tile_num(self_obj));
        set_local_var(1, 1);
        set_local_var(7, has_trait(1, self_obj, 10));
        set_local_var(4, random(70, 80));
        set_local_var(5, random(0, 100));
        set_local_var(6, random(-5, 5));
        critter_add_trait(self_obj, 1, 6, 17);
        critter_add_trait(self_obj, 1, 5, 66);
        add_obj_to_inven(self_obj, create_object_sid(514, 1, 2, -1));
        add_obj_to_inven(self_obj, create_object_sid(515, 1, 2, -1));
        wield_obj_critter(self_obj, obj_carrying_pid_obj(self_obj, 515));
        max_distance := random(15, 20);
    end
end

procedure critter_p_proc
begin
    if ((animation_is_called == 0) and (anim_busy(self_obj) == 0)) then begin
        animation_is_called := 1;
        add_timer_event(self_obj, random(10, 30), 1);
    end
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if ((local_var(2) == 1) or (global_var(59) <= -31)) then begin
            set_local_var(2, 0);
            attack_setup(self_obj, dude_obj);
        end
    end
end

procedure combat_p_proc
begin
end

procedure description_p_proc
begin
end

procedure look_at_p_proc
begin
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure push_p_proc
begin
end

procedure destroy_p_proc
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    LVar0 := obj_carrying_pid_obj(self_obj, 514);
    LVar1 := obj_carrying_pid_obj(self_obj, 515);
    if (LVar0) then begin
        rm_obj_from_inven(self_obj, LVar0);
        destroy_object(LVar0);
    end
    if (LVar1) then begin
        rm_obj_from_inven(self_obj, LVar1);
        destroy_object(LVar1);
    end
end

procedure use_skill_on_p_proc
begin
    script_overrides;
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure map_enter_p_proc
begin
    max_distance := random(15, 20);
    move_to(self_obj, local_var(3), elevation(self_obj));
    anim(self_obj, 1000, local_var(7));
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        if (not(combat_is_initialized)) then begin
            if (tile_distance(tile_num(dude_obj), local_var(3)) < (max_distance + 5)) then begin
                if (tile_distance(tile_num(self_obj), tile_num(dude_obj)) < (max_distance / 3)) then begin
                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(floor(max_distance / 4), floor(max_distance / 2))), 0);
                end
                else begin
                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(dude_obj), random(0, 5), random(1, 3)), 0);
                end
            end
            else begin
                if (tile_distance(tile_num(self_obj), local_var(3)) < max_distance) then begin
                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(floor(max_distance / 2), max_distance)), 0);
                end
                else begin
                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), local_var(3)), random(floor(max_distance / 2), max_distance)), 0);
                end
            end
        end
        animation_is_called := 0;
    end
end

