variable max_distance;
variable animation_is_called;
variable distance_to_walk;
variable time_to_sleep;
variable time_to_work_1;
variable time_to_work_2;
variable time_to_repose;
variable work_tile_chois;

procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure push_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;


procedure start
begin
    if (local_var(1) == 0) then begin
        set_local_var(3, tile_num(self_obj));
        set_local_var(1, 1);
        set_local_var(4, random(40, 55));
        set_local_var(5, random(0, 100));
        critter_add_trait(self_obj, 1, 6, 2);
        critter_add_trait(self_obj, 1, 5, 3);
        max_distance := random(20, 25);
        time_to_sleep := random(2200, 2300);
        time_to_work_1 := random(900, 915);
        time_to_work_2 := random(1300, 1315);
        time_to_repose := random(1200, 1215);
    end
end

procedure critter_p_proc
begin
    if ((animation_is_called == 0) and (anim_busy(self_obj) == 0)) then begin
        animation_is_called := 1;
        add_timer_event(self_obj, random(19, 56), 1);
    end
    if ((local_var(2) == 1) and obj_can_see_obj(self_obj, dude_obj)) then begin
        set_local_var(2, 0);
        attack_setup(self_obj, dude_obj);
    end
end

procedure combat_p_proc
begin
end

procedure description_p_proc
begin
    script_overrides;
    display_msg(message_str(17, random(6, 9)));
end

procedure look_at_p_proc
begin
    script_overrides;
    display_msg(message_str(17, random(1, 5)));
end

procedure pickup_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure push_p_proc
begin
end

procedure talk_p_proc
begin
    if ((art_anim(obj_art_fid(self_obj)) == 48) or (art_anim(obj_art_fid(self_obj)) == 49)) then begin
        float_msg(self_obj, message_str(17, random(1010, 1013)), 0);
    end
    else begin
        if (random(1, 2) == 1) then begin
            float_msg(self_obj, message_str(17, random(1000, 1009)), 0);
        end
        else begin
            float_msg(self_obj, message_str(17, random(1000, 1009)), 8);
        end
    end
end

procedure destroy_p_proc
begin
end

procedure use_skill_on_p_proc
begin
    if (action_being_used == 10) then begin
        if (has_skill(dude_obj, 10) < (local_var(4) - ((get_critter_stat(dude_obj, 6) - 4) * 4))) then begin
            script_overrides;
            display_msg(message_str(10, random(200, 203)));
        end
    end
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
    critter_injure(self_obj, 2 bwor 8388608);
end

procedure map_enter_p_proc
begin
    max_distance := random(20, 25);
    time_to_sleep := random(2200, 2300);
    time_to_work_1 := random(900, 915);
    time_to_work_2 := random(1300, 1315);
    time_to_repose := random(1200, 1215);
    if ((game_time_hour <= time_to_work_1) and (game_time_hour > time_to_sleep) and (tile_num(self_obj) != local_var(3))) then begin
        move_to(self_obj, local_var(3), elevation(self_obj));
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        reg_anim_animate(self_obj, random(48, 49), -1);
        reg_anim_func(3, 0);
        critter_injure(self_obj, 2);
    end
end

procedure timed_event_p_proc
begin
    if ((fixed_param == 1) and not(combat_is_initialized)) then begin
        if ((game_time_hour >= time_to_work_1) and (game_time_hour < time_to_repose) or ((game_time_hour >= time_to_work_2) and (game_time_hour < time_to_sleep))) then begin
            if ((art_anim(obj_art_fid(self_obj)) == 48) or (art_anim(obj_art_fid(self_obj)) == 49)) then begin
                critter_injure(self_obj, 2 bwor 8388608);
                reg_anim_func(2, self_obj);
                reg_anim_func(1, 1);
                if (art_anim(obj_art_fid(self_obj)) == 48) then begin
                    reg_anim_animate(self_obj, 37, -1);
                end
                else begin
                    reg_anim_animate(self_obj, 36, -1);
                end
                reg_anim_func(3, 0);
            end
            else begin
                if ((tile_num(self_obj) != 20506) and (tile_num(self_obj) != 18708) and (tile_num(self_obj) != 18702) and (tile_num(self_obj) != 19896) and (tile_num(self_obj) != 21293) and (tile_num(self_obj) != 21287)) then begin
                    work_tile_chois := random(1, 6);
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    if (work_tile_chois == 1) then begin
                        reg_anim_obj_move_to_tile(self_obj, 20506, -1);
                    end
                    if (work_tile_chois == 2) then begin
                        reg_anim_obj_move_to_tile(self_obj, 18708, -1);
                    end
                    if (work_tile_chois == 3) then begin
                        reg_anim_obj_move_to_tile(self_obj, 18702, -1);
                    end
                    if (work_tile_chois == 4) then begin
                        reg_anim_obj_move_to_tile(self_obj, 19896, -1);
                    end
                    if (work_tile_chois == 5) then begin
                        reg_anim_obj_move_to_tile(self_obj, 21293, -1);
                    end
                    if (work_tile_chois == 6) then begin
                        reg_anim_obj_move_to_tile(self_obj, 21287, -1);
                    end
                    reg_anim_func(3, 0);
                end
                else begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    if (random(1, 2) == 1) then begin
                        reg_anim_animate(self_obj, 0, -1);
                    end
                    reg_anim_animate(self_obj, 10, -1);
                    if (random(1, 2) == 1) then begin
                        reg_anim_animate(self_obj, 0, -1);
                    end
                    reg_anim_func(3, 0);
                end
            end
        end
        else begin
            if ((game_time_hour >= time_to_repose) and (game_time_hour < time_to_work_2)) then begin
                if (tile_distance(tile_num(self_obj), local_var(3)) < max_distance) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(5, tile_distance(tile_num(self_obj), local_var(3)) + 3)), -1);
                    reg_anim_func(3, 0);
                end
                else begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, tile_num_in_direction(local_var(3), random(0, 5), random(2, 4)), -1);
                    reg_anim_func(3, 0);
                end
            end
            else begin
                if (tile_num(self_obj) != local_var(3)) then begin
                    reg_anim_func(2, self_obj);
                    reg_anim_func(1, 1);
                    reg_anim_obj_move_to_tile(self_obj, local_var(3), -1);
                    if (random(1, 2) == 1) then begin
                        reg_anim_animate_reverse(self_obj, 36, -1);
                        reg_anim_animate(self_obj, 49, -1);
                    end
                    else begin
                        reg_anim_animate_reverse(self_obj, 37, -1);
                        reg_anim_animate(self_obj, 48, -1);
                    end
                    reg_anim_func(3, 0);
                    critter_injure(self_obj, 2);
                end
                else begin
                    if ((art_anim(obj_art_fid(self_obj)) != 48) and (art_anim(obj_art_fid(self_obj)) != 49)) then begin
                        reg_anim_func(2, self_obj);
                        reg_anim_func(1, 1);
                        if (random(1, 2) == 1) then begin
                            reg_anim_animate_reverse(self_obj, 36, -1);
                            reg_anim_animate(self_obj, 49, -1);
                        end
                        else begin
                            reg_anim_animate_reverse(self_obj, 37, -1);
                            reg_anim_animate(self_obj, 48, -1);
                        end
                        reg_anim_func(3, 0);
                        critter_injure(self_obj, 2);
                    end
                end
            end
        end
        animation_is_called := 0;
    end
end

