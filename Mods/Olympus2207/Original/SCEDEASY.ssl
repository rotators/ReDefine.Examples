variable dude_objective_reputation;
variable self_subjective_reaction;
variable z_critter_search;
variable critter_is_detected;
variable detected_critter;
variable persuade_chance;
variable steal_perk;
variable steal_gloves;
variable used_item;
variable level_modifikator;
variable sucsess_modifikator;
variable critter_source;
variable right_variant;
variable variant_position;
variable second_right_variant;
variable first_position;
variable second_position;
variable third_position;

procedure start;
procedure description_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure map_enter_p_proc;
procedure open_with_skill;
procedure study;
procedure map_update_p_proc;
procedure KA_BOOM;
procedure talk_p_proc;
procedure welcome_screen;
procedure first_step;
procedure second_step;
procedure shock;
procedure quitter;
procedure sucsess;


procedure start
begin
    if (local_var(3) == 0) then begin
        set_local_var(3, 1);
        set_local_var(1, random(20, 30));
        set_local_var(5, random(30, 40));
        set_local_var(4, 0);
        set_local_var(0, 0);
    end
end

procedure description_p_proc
begin
end

procedure look_at_p_proc
begin
end

procedure damage_p_proc
begin
    if ((fixed_param != 0) and (metarule(49, target_obj) == 6)) then begin
        display_msg(message_str(10, 31));
    end
end

procedure use_p_proc
begin
    critter_source := source_obj;
    if (local_var(7) == 1) then begin
        if (critter_source != dude_obj) then begin
            script_overrides;
            call KA_BOOM();
        end
        else begin
            set_local_var(4, 0);
            add_obj_to_inven(dude_obj, create_object_sid(48, 1, 2, -1));
            display_msg(message_str(10, 32));
        end
    end
    if (local_var(4) == 1) then begin
        script_overrides;
        call KA_BOOM();
    end
    else begin
        if (local_var(0) == 0) then begin
            script_overrides;
            if (source_obj == dude_obj) then begin
                display_msg(message_str(10, random(110, 113)));
            end
            else begin
                float_msg(source_obj, message_str(10, random(40, 43)), 12);
                animate_move_obj_to_tile(critter_source, tile_num_in_direction(tile_num(critter_source), (has_trait(1, critter_source, 10) + 3) % 6, 1), 0 bwor 16);
            end
        end
    end
end

procedure use_obj_on_p_proc
begin
    if (not(obj_is_open(self_obj))) then begin
        script_overrides;
        used_item := obj_pid(obj_being_used_with);
        if (local_var(0) == 0) then begin
            if (used_item == 57) then begin
                level_modifikator := 5;
                sucsess_modifikator := 10;
                call open_with_skill();
            end
            if (used_item == 58) then begin
                level_modifikator := 15;
                sucsess_modifikator := 25;
                call open_with_skill();
            end
            if ((used_item == 244) or (used_item == 82) and (local_var(6) == 0)) then begin
                set_local_var(6, 1);
                display_msg(message_str(10, 39));
            end
        end
        if (used_item == 48) then begin
            if (local_var(0) == 0) then begin
                display_msg(message_str(10, 86));
            end
            else begin
                if ((local_var(4) == 1) or (local_var(7) == 1)) then begin
                    display_msg(message_str(10, 88));
                end
                else begin
                    set_local_var(7, 1);
                    set_local_var(5, has_skill(dude_obj, 11) + ((get_critter_stat(dude_obj, 6) - 4) * 4));
                    rm_obj_from_inven(dude_obj, obj_carrying_pid_obj(dude_obj, 48));
                    display_msg(message_str(10, 87));
                end
            end
        end
    end
end

procedure use_skill_on_p_proc
begin
    variable LVar0 := 0;
    LVar0 := random(30, 40) * 2;
    if (action_being_used == 9) then begin
        script_overrides;
        call open_with_skill();
    end
    if ((action_being_used == 12) and (local_var(0) == 0)) then begin
        script_overrides;
        if (local_var(1) <= 67) then begin
            if (local_var(6) == 0) then begin
                call study();
            end
            else begin
                dialogue_system_enter;
            end
        end
        else begin
            call study();
        end
    end
    if ((action_being_used == 11) and (local_var(7) == 1)) then begin
        script_overrides;
        set_local_var(4, 0);
        add_obj_to_inven(dude_obj, create_object_sid(48, 1, 2, -1));
        display_msg(message_str(10, 32));
    end
    if ((action_being_used == 11) and (local_var(4) == 1)) then begin
        if ((has_skill(dude_obj, 11) + get_critter_stat(dude_obj, 1)) >= local_var(5)) then begin
            script_overrides;
            set_local_var(4, 0);
            add_obj_to_inven(dude_obj, create_object_sid(48, 1, 2, -1));
            display_msg(message_str(10, 32));
            if (local_var(8) == 0) then begin
                set_local_var(8, 1);
                give_exp_points(floor(LVar0 / 5) + (get_critter_stat(dude_obj, 4) * floor(LVar0 / 12)) + (get_critter_stat(dude_obj, 6) * floor(LVar0 / 30)) + (floor(LVar0 / 75) * (get_critter_stat(dude_obj, 6) - 4) * 4));
                display_msg(message_str(10, random(140, 143)) + (floor(LVar0 / 5) + (get_critter_stat(dude_obj, 4) * floor(LVar0 / 12)) + (get_critter_stat(dude_obj, 6) * floor(LVar0 / 30)) + (floor(LVar0 / 75) * (get_critter_stat(dude_obj, 6) - 4) * 4)) + message_str(10, 144));
            end
        end
    end
end

procedure map_enter_p_proc
begin
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure open_with_skill
begin
    variable LVar0 := 0;
    LVar0 := random(20, 30) * 2;
    if (source_obj != dude_obj) then begin
        if (has_skill(source_obj, 9) >= local_var(1)) then begin
            obj_unlock(self_obj);
            set_local_var(0, 1);
        end
    end
    else begin
        if (local_var(0) == 1) then begin
            if (obj_is_open(self_obj)) then begin
                display_msg(message_str(10, 94));
            end
            else begin
                set_local_var(0, 0);
                set_local_var(1, random(has_skill(dude_obj, 9) - 10, has_skill(dude_obj, 9) - 1));
                display_msg(message_str(10, 95));
                float_msg(self_obj, message_str(10, 119), 9);
            end
        end
        else begin
            if (has_skill(dude_obj, 9) >= (local_var(1) - level_modifikator)) then begin
                if (random(0, 100) < (4 + floor(has_skill(dude_obj, 9) / 2) + (2 * ((2 * get_critter_stat(dude_obj, 5)) - 9)) + (2 * (get_critter_stat(dude_obj, 4) - 5)) + floor(has_skill(dude_obj, 13) / 3) + ((get_critter_stat(dude_obj, 6) - 4) * 4) + sucsess_modifikator)) then begin
                    obj_unlock(self_obj);
                    float_msg(self_obj, message_str(10, random(100, 109)), 9);
                    set_local_var(0, 1);
                    if (local_var(2) == 0) then begin
                        set_local_var(2, 1);
                        give_exp_points(floor(LVar0 / 5) + (get_critter_stat(dude_obj, 4) * floor(LVar0 / 12)) + (get_critter_stat(dude_obj, 6) * floor(LVar0 / 30)) + (floor(LVar0 / 75) * (get_critter_stat(dude_obj, 6) - 4) * 4));
                        display_msg(message_str(10, random(140, 143)) + (floor(LVar0 / 5) + (get_critter_stat(dude_obj, 4) * floor(LVar0 / 12)) + (get_critter_stat(dude_obj, 6) * floor(LVar0 / 30)) + (floor(LVar0 / 75) * (get_critter_stat(dude_obj, 6) - 4) * 4)) + message_str(10, 144));
                    end
                end
                else begin
                    if (random(1, 100) <= (random(15, 25) - ((get_critter_stat(dude_obj, 6) - 4) * 4))) then begin
                        critter_dmg(dude_obj, random(12, 20) - get_critter_stat(dude_obj, 6), 4);
                        display_msg(message_str(10, random(26, 29)));
                    end
                    else begin
                        display_msg(message_str(10, 114));
                    end
                end
            end
            else begin
                display_msg(message_str(10, random(120, 123)));
            end
        end
    end
    level_modifikator := 0;
    sucsess_modifikator := 0;
end

procedure study
begin
    if ((get_critter_stat(dude_obj, 4) >= 7) or ((floor(has_skill(dude_obj, 12) / 2) + floor(has_skill(dude_obj, 13) / 2) + floor((get_critter_stat(dude_obj, 6) - 4) * 4 / 2)) >= local_var(1))) then begin
        if (local_var(6) == 0) then begin
            display_msg(message_str(10, 124) + local_var(1) + message_str(10, 125) + message_str(10, 38));
        end
        else begin
            display_msg(message_str(10, 124) + local_var(1) + message_str(10, 125) + message_str(10, 38));
        end
    end
    else begin
        if (local_var(6) == 0) then begin
            display_msg(message_str(10, 126) + message_str(10, 38));
        end
        else begin
            display_msg(message_str(10, 126));
        end
    end
end

procedure map_update_p_proc
begin
    if (local_var(0) == 0) then begin
        obj_lock(self_obj);
    end
    else begin
        obj_unlock(self_obj);
    end
end

procedure KA_BOOM
begin
    set_local_var(4, 0);
    if (critter_source == dude_obj) then begin
        critter_dmg(critter_source, local_var(5) - ((get_critter_stat(dude_obj, 6) - 4) * 4), 4);
    end
    else begin
        critter_dmg(critter_source, local_var(5) + ((get_critter_stat(dude_obj, 6) - 4) * 4), 4);
    end
    if (not(obj_is_open(self_obj))) then begin
        obj_open(self_obj);
    end
end

procedure talk_p_proc
begin
    start_gdialog(10, self_obj, 4, 2, 21);
    gsay_start;
    call welcome_screen();
    gsay_end;
    end_dialogue;
end

procedure welcome_screen
begin
    if ((get_critter_stat(dude_obj, 4) >= 7) or ((floor(has_skill(dude_obj, 12) / 2) + floor(has_skill(dude_obj, 13) / 2) + floor((get_critter_stat(dude_obj, 6) - 4) * 4 / 2)) >= local_var(1))) then begin
        gsay_reply(10, message_str(10, 33) + local_var(1) + message_str(10, 125));
    end
    else begin
        gsay_reply(10, 34);
    end
    gsay_option(10, 11, first_step, 50);
    gsay_option(10, random(12, 14), quitter, 50);
end

procedure first_step
begin
    right_variant := random(1, 3);
    variant_position := random(16, 18);
    gsay_reply(10, 15);
    if (right_variant == 1) then begin
        gsay_option(10, variant_position, second_step, 50);
    end
    else begin
        gsay_option(10, variant_position, shock, 50);
    end
    first_position := variant_position;
    if (variant_position == 16) then begin
        variant_position := random(17, 18);
        if (right_variant == 2) then begin
            gsay_option(10, variant_position, second_step, 50);
        end
        else begin
            gsay_option(10, variant_position, shock, 50);
        end
    end
    else begin
        if (variant_position == 17) then begin
            if (random(1, 2) == 1) then begin
                variant_position := 16;
                if (right_variant == 2) then begin
                    gsay_option(10, variant_position, second_step, 50);
                end
                else begin
                    gsay_option(10, variant_position, shock, 50);
                end
            end
            else begin
                variant_position := 18;
                if (right_variant == 2) then begin
                    gsay_option(10, variant_position, second_step, 50);
                end
                else begin
                    gsay_option(10, variant_position, shock, 50);
                end
            end
        end
        else begin
            variant_position := random(16, 17);
            if (right_variant == 2) then begin
                gsay_option(10, variant_position, second_step, 50);
            end
            else begin
                gsay_option(10, variant_position, shock, 50);
            end
        end
    end
    second_position := variant_position;
    third_position := first_position + second_position;
    if (third_position == 33) then begin
        variant_position := 18;
        if (right_variant == 3) then begin
            gsay_option(10, variant_position, second_step, 50);
        end
        else begin
            gsay_option(10, variant_position, shock, 50);
        end
    end
    if (third_position == 34) then begin
        variant_position := 17;
        if (right_variant == 3) then begin
            gsay_option(10, variant_position, second_step, 50);
        end
        else begin
            gsay_option(10, variant_position, shock, 50);
        end
    end
    if (third_position == 35) then begin
        variant_position := 16;
        if (right_variant == 3) then begin
            gsay_option(10, variant_position, second_step, 50);
        end
        else begin
            gsay_option(10, variant_position, shock, 50);
        end
    end
    third_position := variant_position;
    gsay_option(10, random(12, 14), quitter, 50);
end

procedure second_step
begin
    second_right_variant := random(1, 2);
    gsay_reply(10, 19);
    if (right_variant == 1) then begin
        if (first_position == 16) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 22, sucsess, 50);
                gsay_option(10, 23, shock, 50);
            end
            else begin
                gsay_option(10, 22, shock, 50);
                gsay_option(10, 23, sucsess, 50);
            end
        end
        if (first_position == 17) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 24, sucsess, 50);
                gsay_option(10, 25, shock, 50);
            end
            else begin
                gsay_option(10, 24, shock, 50);
                gsay_option(10, 25, sucsess, 50);
            end
        end
        if (first_position == 18) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 20, sucsess, 50);
                gsay_option(10, 21, shock, 50);
            end
            else begin
                gsay_option(10, 20, shock, 50);
                gsay_option(10, 21, sucsess, 50);
            end
        end
    end
    if (right_variant == 2) then begin
        if (second_position == 16) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 22, sucsess, 50);
                gsay_option(10, 23, shock, 50);
            end
            else begin
                gsay_option(10, 22, shock, 50);
                gsay_option(10, 23, sucsess, 50);
            end
        end
        if (second_position == 17) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 24, sucsess, 50);
                gsay_option(10, 25, shock, 50);
            end
            else begin
                gsay_option(10, 24, shock, 50);
                gsay_option(10, 25, sucsess, 50);
            end
        end
        if (second_position == 18) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 20, sucsess, 50);
                gsay_option(10, 21, shock, 50);
            end
            else begin
                gsay_option(10, 20, shock, 50);
                gsay_option(10, 21, sucsess, 50);
            end
        end
    end
    if (right_variant == 3) then begin
        if (third_position == 16) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 22, sucsess, 50);
                gsay_option(10, 23, shock, 50);
            end
            else begin
                gsay_option(10, 22, shock, 50);
                gsay_option(10, 23, sucsess, 50);
            end
        end
        if (third_position == 17) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 24, sucsess, 50);
                gsay_option(10, 25, shock, 50);
            end
            else begin
                gsay_option(10, 24, shock, 50);
                gsay_option(10, 25, sucsess, 50);
            end
        end
        if (third_position == 18) then begin
            if (second_right_variant == 1) then begin
                gsay_option(10, 20, sucsess, 50);
                gsay_option(10, 21, shock, 50);
            end
            else begin
                gsay_option(10, 20, shock, 50);
                gsay_option(10, 21, sucsess, 50);
            end
        end
    end
    gsay_option(10, random(12, 14), quitter, 50);
end

procedure shock
begin
    critter_dmg(dude_obj, random(10, 20) - get_critter_stat(dude_obj, 6), 4);
    display_msg(message_str(10, random(26, 29)));
end

procedure quitter
begin
end

procedure sucsess
begin
    variable LVar0 := 0;
    LVar0 := random(20, 30) * 2;
    obj_unlock(self_obj);
    float_msg(self_obj, message_str(10, random(100, 109)), 9);
    set_local_var(0, 1);
    if (local_var(2) == 0) then begin
        set_local_var(2, 1);
        give_exp_points(floor(LVar0 / 5) + (get_critter_stat(dude_obj, 4) * floor(LVar0 / 12)) + (get_critter_stat(dude_obj, 6) * floor(LVar0 / 30)) + (floor(LVar0 / 75) * (get_critter_stat(dude_obj, 6) - 4) * 4));
        display_msg(message_str(10, random(140, 143)) + (floor(LVar0 / 5) + (get_critter_stat(dude_obj, 4) * floor(LVar0 / 12)) + (get_critter_stat(dude_obj, 6) * floor(LVar0 / 30)) + (floor(LVar0 / 75) * (get_critter_stat(dude_obj, 6) - 4) * 4)) + message_str(10, 144));
    end
end

