variable dude_objective_reputation;
variable self_subjective_reaction;
variable z_critter_search;
variable critter_is_detected;
variable detected_critter;
variable persuade_chance;
variable steal_perk;
variable steal_gloves;
variable max_distance;
variable animation_is_called;
variable sound_is_called;
variable distance_to_walk;
variable distance_to_go;

procedure start;
procedure critter_p_proc;
procedure combat_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;
procedure push_p_proc;
procedure destroy_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;


procedure start
begin
    if (local_var(1) == 0) then begin
        set_local_var(3, tile_num(self_obj));
        set_local_var(1, 1);
        if ((cur_map_index >= 18) and (cur_map_index <= 26) or (cur_map_index == 101)) then begin
            critter_add_trait(self_obj, 1, 6, 7);
        end
        else begin
            if ((cur_map_index >= 27) and (cur_map_index <= 31)) then begin
                critter_add_trait(self_obj, 1, 6, 8);
            end
            else begin
                if ((cur_map_index >= 38) and (cur_map_index <= 43)) then begin
                    critter_add_trait(self_obj, 1, 6, 9);
                end
                else begin
                    if ((cur_map_index >= 44) and (cur_map_index <= 46)) then begin
                        critter_add_trait(self_obj, 1, 6, 10);
                    end
                    else begin
                        critter_add_trait(self_obj, 1, 6, 202);
                    end
                end
            end
        end
        critter_add_trait(self_obj, 1, 5, 68);
        max_distance := random(24, 28);
    end
end

procedure critter_p_proc
begin
    if ((animation_is_called == 0) and (anim_busy(self_obj) == 0)) then begin
        animation_is_called := 1;
        add_timer_event(self_obj, random(29, 76), 1);
    end
    if (sound_is_called == 0) then begin
        sound_is_called := 1;
        add_timer_event(self_obj, random(936, 1226), 2);
    end
    if (obj_can_see_obj(self_obj, dude_obj)) then begin
        if (local_var(2) == 1) then begin
            set_local_var(2, 0);
            attack_setup(self_obj, dude_obj);
        end
    end
end

procedure combat_p_proc
begin
end

procedure description_p_proc
begin
    script_overrides;
end

procedure look_at_p_proc
begin
    script_overrides;
end

procedure push_p_proc
begin
    script_overrides;
    if ((random(0, 100) <= 60) and (tile_distance(tile_num(self_obj), tile_num(dude_obj)) <= 2)) then begin
        if (not(anim_busy(self_obj))) then begin
            anim(self_obj, 1000, rotation_to_tile(tile_num(self_obj), tile_num(dude_obj)));
        end
        reg_anim_func(2, self_obj);
        reg_anim_func(1, 1);
        reg_anim_animate(self_obj, 16, -1);
        play_sfx("MADDOGAQ");
        reg_anim_func(3, 0);
        critter_dmg(dude_obj, random(1, 10), 0);
    end
    else begin
        play_sfx("MADDOGGR");
    end
end

procedure destroy_p_proc
begin
end

procedure use_skill_on_p_proc
begin
end

procedure damage_p_proc
begin
    if (source_obj == dude_obj) then begin
        set_local_var(2, 1);
    end
end

procedure map_enter_p_proc
begin
    max_distance := random(24, 28);
end

procedure timed_event_p_proc
begin
    if (fixed_param == 1) then begin
        if (not(combat_is_initialized)) then begin
            if (tile_distance(tile_num(self_obj), local_var(3)) < max_distance) then begin
                distance_to_go := random(floor(max_distance / 4), max_distance);
                if (distance_to_go >= (max_distance / 2)) then begin
                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(distance_to_go, distance_to_go)), 1);
                end
                else begin
                    animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), random(0, 5), random(distance_to_go, distance_to_go)), 0);
                end
            end
            else begin
                animate_move_obj_to_tile(self_obj, tile_num_in_direction(tile_num(self_obj), rotation_to_tile(tile_num(self_obj), local_var(3)), random(floor(max_distance / 2), max_distance)), 1);
            end
        end
        animation_is_called := 0;
    end
    if (fixed_param == 2) then begin
        if (not(combat_is_initialized)) then begin
            play_sfx("MADDOGGR");
        end
        sound_is_called := 0;
    end
end

